[{"title":"JVM虚拟机性能监控与故障处理工具","url":"/2019/03/26/backend/Java/JVM/JVM虚拟机性能监控与故障处理工具/","content":"## JDK的命令行工具\n\n### jcmd 综合工具\n* `jcmd -l`  列出当前运行的所有虚拟机\n```java\n5362 sun.tools.jcmd.JCmd -l\n1236 /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --httpPort=9080 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20\n7167 org.apache.catalina.startup.Bootstrap start\n```\n* `jcmd [pid] VM.uptime`   查看虚拟机启动时间VM.uptime\n* `jcmd [pid] Thread.print`  打印线程栈信息Thread.print\n* `jcmd [pid] GC.class_histogram`  查看系统中类统计信息GC.class_histogram\n* `jcmd [pid] GC.heap_dump [filepath&name]`  导出堆信息GC.heap_dump  这个命令功能和 jmap -dump 功能一样\n* `jcmd [pid] VM.system_properties` 获取系统Properties内容VM.system_properties\n* `jcmd [pid] VM.flags` 获取启动参数VM.flags\n* `jcmd [pid] PerfCounter.print`  获取所有性能相关数据PerfCounter.print\n### jps 虚拟机进程状况工具\n* jps（JVM Process Status Tool）可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class,main()函数所在的类）名称以及这些进程的本地虚拟机唯一ID（Local Virtual Machine Identifier,LVMID）。虽然功能比较单一，但它是使用频率最高的JDK命令行工具，因为其他的JDK工具大多需要输入它查询到的LVMID来确定要监控的是哪一个虚拟机进程。对于本地虚拟机进程来说，LVMID与操作系统的进程ID（Process Identifier,PID）是一致的，使用Windows的任务管理器或者UNIX的ps命令也可以查询到虚拟机进程的LVMID，但如果同时启动了多个虚拟机进程，无法根据进程名称定位时，那就只能依赖jps命令显示主类的功能才能区分了。\n* 命令格式，其中[option]、[hostid]参数也可以不写。\n```sql\njps [options] [hostid]\n\noption参数\n    •-l : 输出主类全名或jar路径\n    •-q : 只输出LVMID\n    •-m : 输出JVM启动时传递给main()的参数\n    •-v : 输出JVM启动时显示指定的JVM参数\n```\n* 示例\n```\n$ jps -l\n\n15232 org.gradle.launcher.daemon.bootstrap.GradleDaemon\n3104 sun.tools.jps.Jps\n6784 org.jetbrains.idea.maven.server.RemoteMavenServer\n8916 org.jetbrains.jps.cmdline.Launcher\n15976\n8936 org.jetbrains.jps.cmdline.Launcher\n11580 com.songsy.iframe.Application\n```\n### jinfo 配置信息工具\n* jinfo(JVM Configuration info)这个命令作用是实时查看和调整虚拟机运行参数。 之前的jps -v口令只能查看到显示指定的参数，如果想要查看未被显示指定的参数的值就要使用jinfo口令\n\n* 命令格式\n```sql\njinfo [option] [args] LVMID\n\noption参数\n    •-flag : 输出指定args参数的值\n    •-flags : 不需要args参数，输出所有JVM参数的值\n    •-sysprops : 输出系统属性，等同于System.getProperties()\n```\n* 示例\n```java\n$ jinfo -flags 11580\n\nAttaching to process ID 11580, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.121-b13\nNon-default VM flags: -XX:-BytecodeVerificationLocal -XX:-BytecodeVerificationRemote -XX:CICompilerCount=3 -XX:InitialHeapSize=134217728 -XX:+ManagementServer -XX:MaxHeapSize=2118123520 -XX:MaxNewSize=705691648 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=44564480 -XX:OldSize=89653248 -XX:TieredStopAtLevel=1 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC\nCommand line:  -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:58771,suspend=y,server=n -XX:TieredStopAtLevel=1 -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=58770 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true -javaagent:C:\\Users\\asua\\.IntelliJIdea2017.2\\system\\groovyHotSwap\\gragent.jar -Dfile.encoding=UTF-8\n\n```\n### jstat：虚拟机统计信息监视工具\n* jstat(JVM statistics Monitoring)是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。\n* 命令格式\n```\njstat [option] LVMID [interval] [count]\n\n参数\n    •[option] : 操作参数\n    •LVMID : 本地虚拟机进程ID\n    •[interval] : 连续输出的时间间隔\n    •[count] : 连续输出的次数\n    \n对于命令格式中的VMID与LVMID需要特别说明一下：\n如果是本地虚拟机进程，VMID与LVMID是一致的;\n如果是远程虚拟机进程，那VMID的格式应当是：protocol://lvmid@hostname:port/servername\n参数interval和count代表查询间隔(单位毫秒)和次数，如果省略这两个参数，说明只查询一次。\n假设需要每250毫秒查询一次进程2764垃圾收集状况，一共查询20次，那命令应当是：jstat -gc 2764 250 20\n```\n* 选项option代表着用户希望查询的虚拟机信息，主要分为3类：类装载、垃圾收集、运行期编译状况，具体选项及作用请参考表4-3中的描述。\n\n![](/images/server/java/JVM/jstat.jpg)\n\n* `option`参数详解\n> `jstat -class`监视类装载、卸载数量、总空间以及耗费的时间\n```sql\n$ jstat -class 11580\n\nLoaded  Bytes  Unloaded  Bytes     Time\n  7107 13135.3        0     0.0       6.84\n\n•Loaded : 加载class的数量\n•Bytes : class字节大小\n•Unloaded : 未加载class的数量\n•Bytes : 未加载class的字节大小\n•Time : 加载时间\n```\n> `jstat -compiler`输出JIT编译过的方法数量耗时等\n```sql\n$ jstat -compiler  11580\nCompiled Failed Invalid   Time   FailedType FailedMethod\n    4079      3       0     1.62          1 org/springframework/beans/CachedIntrospectionResults <init>\n\n•Compiled : 编译数量\n•Failed : 编译失败数量\n•Invalid : 无效数量\n•Time : 编译耗时\n•FailedType : 失败类型\n•FailedMethod : 失败方法的全限定名\n```\n> `jstat -gc` 垃圾回收堆的行为统计\n```sql\n$ jstat -gc  11580\n S0C    S1C      S0U    S1U      EC       EU        OC         OU       MC      MU      CCSC    CCSU    YGC     YGCT    FGC    FGCT     GCT\n39424.0 29696.0  0.0    0.0      414208.0 353447.8  118272.0   46473.8  35072.0 34285.7 4608.0  4457.1  9       0.233   2      0.149    0.382\n\n•S0C : survivor0区的总容量\n•S1C : survivor1区的总容量\n•S0U : survivor0区已使用的容量\n•S1C : survivor1区已使用的容量\n•EC : Eden区的总容量\n•EU : Eden区已使用的容量\n•OC : Old区的总容量\n•OU : Old区已使用的容量\n•PC 当前perm的容量 (KB)\n•PU perm的使用 (KB)\n•YGC : 新生代垃圾回收次数\n•YGCT : 新生代垃圾回收时间\n•FGC : 老年代垃圾回收次数\n•FGCT : 老年代垃圾回收时间\n•GCT : 垃圾回收总消耗时间\n```\n> `jstat -gccapacity`同-gc，不过还会输出Java堆各区域使用到的最大、最小空间\n```sql\n$ jstat -gccapacity  11580\n NGCMN    NGCMX     NGC      S0C     S1C       EC          OGCMN      OGCMX       OGC        OC            MCMN      MCMX         MC          CCSMN   CCSMX       CCSC    YGC    FGC\n 43520.0  689152.0  689152.0 39424.0 29696.0   414208.0    87552.0    1379328.0   118272.0   118272.0      0.0       1079296.0    35072.0      0.0    1048576.0   4608.0  9      2\n \n•NGCMN : 新生代占用的最小空间\n•NGCMX : 新生代占用的最大空间\n•OGCMN : 老年代占用的最小空间\n•OGCMX : 老年代占用的最大空间\n•OGC：当前年老代的容量 (KB)\n•OC：当前年老代的空间 (KB)\n•PGCMN : perm占用的最小空间\n•PGCMX : perm占用的最大空间\n```\n> `jstat -gcutil` 同-gc，不过输出的是已使用空间占总空间的百分比\n```sql\n  S0     S1     E      O      M      CCS       YGC     YGCT      FGC    FGCT     GCT\n  0.00   0.00  85.33   39.29  97.76  96.73      9      0.233     2      0.149    0.382\n```\n> `jstat -gccause` 垃圾收集统计概述（同-gcutil），附加最近两次垃圾回收事件的原因\n```sql\n$ jstat -gccause  11580\n  S0     S1    E      O      M      CCS    YGC  YGCT     FGC  FGCT     GCT    LGCC                 GCC\n  0.00   0.00  85.33  39.29  97.76  96.73  9    0.233    2    0.149    0.382  Allocation Failure   No GC\n\n•LGCC：最近垃圾回收的原因\n•GCC：当前垃圾回收的原因\n```\n> `jstat -gcnew` 统计新生代的行为\n```sql\n$ jstat -gcnew  11580\n S0C    S1C      S0U    S1U  TT  MTT  DSS      EC       EU            YGC     YGCT\n39424.0 29696.0  0.0    0.0  2   15   39424.0  414208.0 353447.8      9       0.233\n```\n> `jstat -gcnewcapacity` 新生代与其相应的内存空间的统计\n```sql\n$ jstat -gcnewcapacity  11580\n  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC\n   43520.0   689152.0   689152.0 229376.0  39424.0 229376.0  29696.0   688128.0   414208.0     9     2\n\n•NGC:当前年轻代的容量 (KB)\n•S0CMX:最大的S0空间 (KB)\n•S0C:当前S0空间 (KB)\n•ECMX:最大eden空间 (KB)\n•EC:当前eden空间 (KB)\n```\n\n### jmap：Java内存映像工具\n* jmap（Memory Map for Java）命令用于生成堆转储快照（一般称为heapdump或dump文件）。\n* 如果不使用jmap命令，要想获取Java堆转储快照，还有一些比较“暴力”的手段：譬如加-XX：+HeapDumpOnOutOfMemoryError参数，可以让虚拟机在OOM异常出现之后自动生成dump文件，通过-XX：+HeapDumpOnCtrlBreak参数则可以使用[Ctrl]+[Break]键让虚拟机生成dump文件，又或者在Linux系统下通过Kill-3命令发送进程退出信号“吓唬”一下虚拟机，也能拿到dump文件。\n* jmap的作用并不仅仅是为了获取dump文件，它还可以查询finalize执行队列、Java堆和永久代的详细信息，如空间使用率、当前用的是哪种收集器等。和jinfo命令一样，jmap有不少功能在Windows平台下都是受限的，除了生成dump文件的-dump选项和用于查看每个类的实例、空间占用统计的-histo选项在所有操作系统都提供之外，其余选项都只能在Linux/Solaris下使用。\n* 命令格式\n```sql\njmap [option] LVMID\n\noption参数\n    •dump : 生成堆转储快照，格式为:-dump:[live, ] format=b,file=<filename>,其中live子参数说明是否只dump出存活的对象。\n    •finalizerinfo : 显示在F-Queue队列等待Finalizer线程执行finalizer方法的对象\n    •heap : 显示Java堆详细信息\n    •histo : 显示堆中对象的统计信息，GC使用的算法，heap的配置及wise heap的使用情况,可以用此来判断内存目前的使用情况以及垃圾回收情况\n    •permstat : to print permanent generation statistics\n    •F : 当-dump没有响应时，强制生成dump快照\n```\n* 示例\n```sql\n$ jmap -heap 28920\n\nAttaching to process ID 28920, please wait...\n  Debugger attached successfully.\n  Server compiler detected.\n  JVM version is 24.71-b01  \n  using thread-local object allocation.\n  Parallel GC with 4 thread(s)                //GC 方式  \n  Heap Configuration:                         //堆内存初始化配置\n     MinHeapFreeRatio = 0                     //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)\n     MaxHeapFreeRatio = 100                   //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)\n     MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小\n     NewSize          = 1310720 (1.25MB)      //对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小\n     MaxNewSize       = 17592186044415 MB     //对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小\n     OldSize          = 5439488 (5.1875MB)    //对应jvm启动参数-XX:OldSize=<value>:设置JVM堆的‘老生代’的大小\n     NewRatio         = 2                     //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率\n     SurvivorRatio    = 8                     //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 \n     PermSize         = 21757952 (20.75MB)    //对应jvm启动参数-XX:PermSize=<value>:设置JVM堆的‘永生代’的初始大小\n     MaxPermSize      = 85983232 (82.0MB)     //对应jvm启动参数-XX:MaxPermSize=<value>:设置JVM堆的‘永生代’的最大大小\n     G1HeapRegionSize = 0 (0.0MB)  \n  Heap Usage:                                 //堆内存使用情况\n  PS Young Generation\n  Eden Space:                                 //Eden区内存分布\n     capacity = 33030144 (31.5MB)             //Eden区总容量\n     used     = 1524040 (1.4534378051757812MB)//Eden区已使用\n     free     = 31506104 (30.04656219482422MB)//Eden区剩余容量\n     4.614088270399305% used                  //Eden区使用比率\n  From Space:                                 //其中一个Survivor区的内存分布\n     capacity = 5242880 (5.0MB)\n     used     = 0 (0.0MB)\n     free     = 5242880 (5.0MB)\n     0.0% used\n  To Space:                                   //另一个Survivor区的内存分布\n     capacity = 5242880 (5.0MB)\n     used     = 0 (0.0MB)\n     free     = 5242880 (5.0MB)\n     0.0% used\n  PS Old Generation                           //当前的Old区内存分布\n     capacity = 86507520 (82.5MB)\n     used     = 0 (0.0MB)\n     free     = 86507520 (82.5MB)\n     0.0% used\n  PS Perm Generation                          //当前的 “永生代” 内存分布\n     capacity = 22020096 (21.0MB)\n     used     = 2496528 (2.3808746337890625MB)\n     free     = 19523568 (18.619125366210938MB)\n     11.337498256138392% used  \ninterned Strings occupying 43720 bytes.\n```\n> jmap -histo:live 28920 | more 打印堆的对象统计，包括对象数、内存大小等等 （因为在dump:live前会进行full gc，如果带上live则只统计活对象，因此不加live的堆大小要大于加live堆的大小 ）\n```sql\nnum     #instances         #bytes  class name\n----------------------------------------------\n   1:         83613       12012248  <constMethodKlass>\n   2:         23868       11450280  [B\n   3:         83613       10716064  <methodKlass>\n   4:         76287       10412128  [C\n   5:          8227        9021176  <constantPoolKlass>\n   6:          8227        5830256  <instanceKlassKlass>\n   7:          7031        5156480  <constantPoolCacheKlass>\n   8:         73627        1767048  java.lang.String\n   9:          2260        1348848  <methodDataKlass>\n  10:          8856         849296  java.lang.Class\n  \nclass name是对象类型，说明如下：\nB  byte\nC  char\nD  double\nF  float\nI  int\nJ  long\nZ  boolean\n[  数组，如[I表示int[]\n[L+类名 其他对象\n```\n### jhat：虚拟机堆转储快照分析工具\n* jhat（JVM Heap Analysis Tool）命令与jmap搭配使用，来分析jmap生成的堆转储快照。jhat内置了一个微型的HTTP/HTML服务器，生成dump文件的分析结果后，可以在浏览器中查看。\n\n* 不过实事求是地说，在实际工作中，除非手上真的没有别的工具可用，否则一般都不会去直接使用jhat命令来分析dump文件，主要原因有二：一是一般不会在部署应用程序的服务器上直接分析dump文件，即使可以这样做，也会尽量将dump文件复制到其他机器。二是用于分析的机器一般也是服务器，由于加载dump快照文件需要比生成dump更大的内存，所以一般在64位JDK、大内存的服务器上进行分析，因为分析工作是一个耗时而且消耗硬件资源的过程，既然都要在其他机器进行，就没有必要受到命令行工具的限制了；另一个原因是jhat的分析功能相对来说比较简陋，VisualVM，以及专业用于分析dump文件的Eclipse Memory Analyzer、IBM HeapAnalyzer等工具，都能实现比jhat更强大更专业的分析功能。\n\n* 命令格式\n```sql\n    jhat [option] [dumpfile]\n参数\n    •-stack false|true 关闭对象分配调用栈跟踪(tracking object allocation call stack)。 如果分配位置信息在堆转储中不可用. 则必须将此标志设置为 false. 默认值为 true.>\n    •-refs false|true 关闭对象引用跟踪(tracking of references to objects)。 默认值为 true. 默认情况下, 返回的指针是指向其他特定对象的对象,如反向链接或输入引用(referrers or incoming references), 会统计/计算堆中的所有对象。>\n    •-port port-number 设置 jhat HTTP server 的端口号. 默认值 7000.> \n    •-exclude exclude-file 指定对象查询时需要排除的数据成员列表文件(a file that lists data members that should be excluded from the reachable objects query)。 例如, 如果文件列列出了 java.lang.String.value , 那么当从某个特定对象 Object o 计算可达的对象列表时, 引用路径涉及 java.lang.String.value 的都会被排除。>\n    •-baseline exclude-file 指定一个基准堆转储(baseline heap dump)。 在两个 heap dumps 中有相同 object ID 的对象会被标记为不是新的(marked as not being new). 其他对象被标记为新的(new). 在比较两个不同的堆转储时很有用.>\n    •-debug int 设置 debug 级别. 0 表示不输出调试信息。 值越大则表示输出更详细的 debug 信息.>\n    •-version 启动后只显示版本信息就退出>\n    •-J< flag > 因为 jhat 命令实际上会启动一个JVM来执行, 通过 -J 可以在启动JVM时传入一些启动参数. 例如, -J-Xmx512m 则指定运行 jhat 的Java虚拟机使用的最大堆内存为 512 MB. 如果需要使用多个JVM启动参数,则传入多个 -Jxxxxxx.\n```\n* 示例\n```sql\n ~ jhat eclipse.bin \nReading from eclipse.bin...\nDump file created Mon Oct 31 19:32:57 CST 2016\nSnapshot read, resolving...\nResolving 185857 objects...\nChasing references, expect 37 dots.....................................\nEliminating duplicate references.....................................\nSnapshot resolved.\nStarted HTTP server on port 7000\nServer is ready.\n\n屏幕显示“Server is ready.”的提示后，用户在浏览器中键入http://localhost:7000/就可以看到分析结果.\n分析结果默认是以包为单位进行分组显示，分析内存泄漏问题主要会使用到其中的“Heap Histogram”（与jmap -histo功能一样）与OQL页签的功能，前者可以找到内存中总容量最大的对象，后者是标准的对象查询语言，使用类似SQL的语法对内存中的对象进行查询统计.\n```\n### jstack：Java堆栈跟踪工具\n* jstack（Stack Trace for Java）命令用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等都是导致线程长时间停顿的常见原因。线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做些什么事情，或者等待着什么资源。\n* 命令格式\n```sql\njstack [option] LVMID\n\noption参数\n    •-F : 当正常输出请求不被响应时，强制输出线程堆栈\n    •-l : 除堆栈外，显示关于锁的附加信息\n    •-m : 如果调用到本地方法的话，可以显示C/C++的堆栈\n```\n\n\n\n\n## JDK的可视化工具\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://www.cnblogs.com/wade-luffy/p/6017137.html","tags":["jvm"],"categories":["服务器"]},{"title":"JVM内存模型与线程(一)Java内存模型","url":"/2019/03/21/backend/Java/JVM/JVM内存模型与线程(一)Java内存模型/","content":"## 解析\n* 在说Java内存模型之前，我们先说一下Java的内存结构，也就是运行时的数据区域，这一块前面的章节已经介绍过了，很多人容易把内存结构跟内存模型搞混，内存结构就是下图中内存空间这些东西，而Java内存模型，完全是另外的一个东西。\n\n![](/images/server/java/JVM/neicun.jpg)\n\n* Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽掉各种硬件和操作系统的访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。在此之前，主流程序语言（如C/C++等）直接使用物理硬件和操作系统的内存模型，因此，会由于不同平台上内存模型的差异，有可能导致程序在一套平台上并发完全正常，而在另外一套平台上并发访问却经常出错，因此在某些场景下就不许针对不同的平台来编写程序。\n\n### 1. 主内存与工作内存\n* Java内存模型的主要目的是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。注意一下，此处的变量并不包括局部变量与方法参数，因为它们是线程私有的，不会被共享，自然也不会存在竞争，此处的变量应该是实例字段、静态字段和构成数组对象的元素。\n\n* Java内存模型规定了所有的变量都存储在主内存（Main Memory）中，每条线程还有自己的工作内存（Working Memory），线程的工作内存中保存了被该线程使用到的变量和主内存副本拷贝（注意这里绝不会是整个对象的拷贝，试想一个10M的对象，在每个用到这个对象的工作内存中有一个10M的拷贝，内存还受得了？也就是一些在线程中用到的对象中的字段罢了），线程对变量所有的操作（读取、赋值）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成\n\n### 2. 内存间交互操作\n* 关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，Java内存模型中定义了以下8种操作来完成，虚拟机实现时必须保证下面体积的每一种操作都是原子的、不可再分的\n    * 1、lock（锁定）：作用于主内存中的变量，它把一个变量标识为一条线程独占的状态\n    * 2、unlock（解锁）：作用于主内存中的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定\n    * 3、read（读取）：作用于主内存中的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用\n    * 4、load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中\n    * 5、use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，没当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作\n    * 6、assign（赋值）：作用于工作内存中的变量，它把一个从执行引擎接收到的值赋值给工作内存中的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作\n    * 7、store（存储）：作用于工作内存中的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用\n    * 8、write（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量值放入主内存的变量中\n* Java内存模型还规定了在执行上述8种基本操作时必须满足以下规则：\n    * 1、不允许read和load、store和write操作之一单独出现\n    * 2、不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了滞后必须把该变化同步回主内存\n    * 3、不允许一个线程无原因地把数据从线程的工作内存同步回主内存中\n    * 4、一个新的变量只能从主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量\n    * 5、一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁\n    * 6、如果对同一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值\n    * 7、如果一个变量事先没有被lock操作锁定，那就不允许对它进行unlock操作，也不允许去unlock一个被其他线程锁定的变量\n    * 8、对一个变量执行unlock操作之前，必须先把此变量同步回主内存中\n\n### 3. 对于volatile型变量的特殊规则\n* 关键字volatile可以说是Java虚拟机提供的最轻量级的同步机制。\n\n* 一个变量被定义为volatile后，它将具备两种特性：\n    * 1、保证此变量对所有线程的”可见性”，所谓”可见性”是指当一条线程修改了这个变量的值，新值对于其它线程来说都是可以立即得知的，而普通变量不能做到这一点，普通变量的值在在线程间传递均需要通过主内存来完成，关于volatile关键字的操作请参见volatile关键字使用举例，再强调一遍，volatile只保证了可见性，并不保证基于volatile变量的运算在并罚下是安全的\n      \n    * 2、使用volatile变量的第二个语义是禁止指令重排序优化，普通变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致。\n* 总结一下Java内存模型对volatile变量定义的特殊规则：\n    * 1、在工作内存中，每次使用某个变量的时候都必须线从主内存刷新最新的值，用于保证能看见其他线程对该变量所做的修改之后的值\n    * 2、在工作内存中，每次修改完某个变量后都必须立刻同步回主内存中，用于保证其他线程能够看见自己对该变量所做的修改\n    * 3、volatile修饰的变量不会被指令重排序优化，保证代码的执行顺序与程序顺序相同 \n\n### 4. 原子性、可见性与有序性\n* 1、原子性（Atomicity）\n\n由Java内存模型来直接保证原子性变量操作包括read、load、assign、use、store、write，大致可以认为基本数据类型的访问读写是具备原子性的。如果应用场景需要一个更大的原子性保证，Java内存模型还提供了lock和unlock，尽管虚拟机没有把lock和unlock操作直接开放给用户使用，但是却提供了更高层次的字节码指令monitorenter和monitorexit来隐式地使用这两个操作，这两个字节码指令反映到Java代码中就是同步块—-synchronized关键字\n\n* 2、可见性（Visibility）\n\n可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。volatile其实已经详细写了这一点，其实synchronized关键字也是可以实现可见性的，synchronized的可见性是由”对一个变量执行unlock操作之前，必须先把此变量同步回主内存中”这条规则获得的。另外，final关键字也可以实现可见性，因为被final修饰的字段在构造器中一旦初始化完成，并且构造器没有把this传递出去，那在其他线程中就能看见final字段的值。\n\n* 3、有序性（Ordering）\n\nJava程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另外一个线程，所有的操作都是无须的。前半句是指”线程内表现为穿行的语义”，后半句是指”指令重排序”和”工作内存与主内存同步延迟”现象。Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由”一个变量在同一时刻只允许一条线程对其进行lock操作”这条规则获得的，这条规则规定了持有同一个锁的两个同步块只能串行地进入\n\n\n### 5. 先行发生原则\n\n* 如果Java内存模型中所有的有序性都仅仅靠volatile和synchronized来完成，那么有一些操作将变得很繁琐，但是我们在编写Java代码时并未感觉到这一点，这是因为Java语言中有一个”先行发生（happens-before）”原则。这个原则非常重要，它是判断数据是否存在竞争、线程是否安全的主要依据，依靠这个原则，我们可以通过几条规则就判断出并发环境下两个操作之间是否可能存在冲突的问题。\n\n* 所谓先行发生原则是指Java内存模型中定义的两项操作之间的偏序关系，如果说操作A先行发生于操作B，那么操作A产生的影响能够被操作b观察到，”影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。Java内存模型下有一些天然的，不需要任何同步协助器就已经存在的先行发生关系：\n    * 1、程序次序规则：在一个线程内，按照控制流顺序，控制流前面的操作先行发生于控制流后面的操作，说”控制流”是因为还要考虑到分支、循环结构\n    * 2、管程锁定规则：一个unlock操作先行发生于后面对同一个锁的lock操作\n    * 3、volatile变量规则：对一个volatile变量的写操作先行发生于后面对这个变量的读操作\n    * 4、线程启动规则：Thread对象的start()方法先行发生于此线程的每一个动作\n    * 5、线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测\n    * 6、线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生\n    * 7、对象终结规则：一个对象的初始化完成先行发生于它的finalize()方法的开始\n    * 8、传递新：如果操作A先行发生于操作B，操作B先行发生于操作C，那么操作A必然先行发生于操作C\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://www.cnblogs.com/nexiyi/p/java_memory_model_and_thread.html\n* https://baijiahao.baidu.com/s?id=1595082600371869908&wfr=spider&for=pc\n* http://www.importnew.com/28456.html","tags":["jvm"],"categories":["服务器"]},{"title":"字节码执行(二)基于栈的字节码解释器执行过程","url":"/2019/03/19/backend/Java/JVM/JVM字节码执行(二)基于栈的字节码解释器执行过程/","content":"## 解析\n* 根据一个代码实例来介绍虚拟机中解释器的执行过程\n```java\npublic int calculate(){  \n    int a = 100;  \n    int b = 200;  \n    int c = 300;  \n    return (a + b) * c;  \n}  \n```\n* 由上面的代码可以看出，该方法的逻辑很简单，就是进行简单的四则运算加减乘除，我们编译代码后使用javap -verbose命令查看字节码指令，具体字节码代码如下所示:\n```java\npublic int calculate();  \n  Code:  \n   Stack=2, Locals=4, Args_size=1  \n   0:   bipush  100  \n   2:   istore_1  \n   3:   sipush  200  \n   6:   istore_2  \n   7:   sipush  300  \n   10:  istore_3  \n   11:  iload_1  \n   12:  iload_2  \n   13:  iadd  \n   14:  iload_3  \n   15:  imul  \n   16:  ireturn  \n  LineNumberTable:  \n   line 3: 0  \n   line 4: 3  \n   line 5: 7  \n   line 6: 11  \n  \n}  \n```\n* 根据字节码可以看出，这段代码需要深度为2的操作数栈（Stack=2）和4个Slot的局部变量空间（Locals=4）。下面，使用7张图片来描述上面的字节码代码执行过程中的代码、操作数栈和局部变量表的变化情况。\n\n![](/images/server/java/JVM/zhix1.jpg)\n\n* 上图展示了执行偏移地址为0的指令的情况，bipush指令的作用是将单字节的整型常量值（-128~127）推入操作数栈顶，后跟一个参数，指明推送的常量值，这里是100。\n\n![](/images/server/java/JVM/zhix2.jpg)\n\n* 上图则是执行偏移地址为2的指令，istore_1指令的作用是将操作数栈顶的整型值出栈并存放到第1个局部变量Slot中。后面四条指令（3、6、7、10）都是做同样的事情，也就是在对应代码中把变量a、b、c赋值为100、200、300。后面四条指令的图就不重复画了。\n\n![](/images/server/java/JVM/zhix3.jpg)\n\n* 上面展示了执行偏移地址为11的指令，iload_1指令的作用是将局部变量第1个Slot中的整型值复制到操作数栈顶。\n\n![](/images/server/java/JVM/zhix4.jpg)\n\n* 上图为执行偏移地址12的指令，iload_2指令的执行过程与iload_1类似，把第2个Slot的整型值入栈。\n\n![](/images/server/java/JVM/zhix5.jpg)\n\n* 上图展示了执行偏移地址为13的指令情况，iadd指令的作用是将操作数栈中前两个栈顶元素出栈，做整型加法，然后把结果重新入栈。在iadd指令执行完毕后，栈中原有的100和200出栈，它们相加后的和300重新入栈。\n\n![](/images/server/java/JVM/zhix6.jpg)\n\n* 上图为执行偏移地址为14的指令的情况，iload_3指令把存放在第3个局部变量Slot中的300入栈到操作数栈中。这时操作数栈为两个整数300,。\n  \n* 下一条偏移地址为15的指令imul是将操作数栈中前两个栈顶元素出栈，做整型乘法，然后把结果重新入栈，这里和iadd指令执行过程完全类似，所以就不重复画图了。\n\n![](/images/server/java/JVM/zhix7.jpg)\n\n* 上图是最后一条指令也就是偏移地址为16的指令的执行过程，ireturn指令是方法返回指令之一，它将结束方法执行并将操作数栈顶的整型值返回给此方法的调用者。到此为止，该方法执行结束。\n\n* 注：上面的执行过程只是一种概念模型，虚拟机最终会对执行过程做出一些优化来提高性能，实际的运作过程不一定完全符合概念模型的描述。不过从这段程序的执行过程也可以看出栈结构指令集的一般运行过程，整个运算过程的中间变量都是以操作数栈的出栈和入栈为信息交换途径。\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://blog.csdn.net/azhegps/article/details/54092466","tags":["jvm"],"categories":["服务器"]},{"title":"字节码执行(一)运行时栈帧结构","url":"/2019/03/19/backend/Java/JVM/JVM字节码执行(一)运行时栈帧结构/","content":"## 概述\n* 前几章介绍了Class类的文件结构及类的加载，有了原材料及已经运送过来了，那么就要生产产品了，那么字节码的执行就在生产产品\n* 栈帧(Stack Frame)是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区的虚拟机栈(Virtual Machine Stack)的栈元素。栈帧存储了方法的局部变量表，操作数栈，动态连接和方法返回地址等信息。第一个方法从调用开始到执行完成，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n* 每一个栈帧都包括了局部变量表，操作数栈，动态连接，方法返回地址和一些额外的附加信息。在编译代码的时候，栈帧中需要多大的局部变量表，多深的操作数栈都已经完全确定了，并且写入到了方法表的Code属性中，因此一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体虚拟机的实现。\n* 一个线程中的方法调用链可能会很长，很多方法都同时处理执行状态。对于执行引擎来讲，活动线程中，只有虚拟机栈顶的栈帧才是有效的，称为当前栈帧(Current Stack Frame)，这个栈帧所关联的方法称为当前方法(Current Method)。执行引用所运行的所有字节码指令都只针对当前栈帧进行操作。栈帧的概念结构如下图所示：\n\n![](/images/server/java/JVM/stackFrame.png)\n## 运行时栈帧结构\n\n### 1. 局部变量表\n* 局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序编译为Class文件时，就在方法表的Code属性的max_locals数据项中确定了该方法需要分配的最大局部变量表的容量。\n* 在方法执行时，虚拟机是使用局部变量表完成参数变量列表的传递过程，如果是实例方法，那么局部变量表中的每0位索引的Slot默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数，其余参数则按照参数列表的顺序来排列，占用从1开始的局部变量Slot，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域来分配其余的Slot。局部变量表中的Slot是可重用的，方法体中定义的变量，其作用域并不一定会覆盖整个方法，如果当前字节码PC计算器的值已经超出了某个变量的作用域，那么这个变量对应的Slot就可以交给其它变量使用。\n* 局部变量不像前面介绍的类变量那样存在“准备阶段”。类变量有两次赋初始值的过程，一次在准备阶段，赋予系统初始值；另外一次在初始化阶段，赋予程序员定义的值。因此即使在初始化阶段程序员没有为类变量赋值也没有关系，类变量仍然具有一个确定的初始值。但局部变量就不一样了，如果一个局部变量定义了但没有赋初始值是不能使用的。\n\n\n\n### 2. 操作数栈\n* 操作数栈也常被称为操作栈，它是一个后入先出栈。同局部变量表一样，操作数栈的最大深度也是编译的时候被写入到方法表的Code属性的max_stacks数据项中。操作数栈的每一个元素可以是任意Java数据类型，包括long和double。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。栈容量的单位为“字宽”，对于32位虚拟机来说，一个”字宽“占4个字节，对于64位虚拟机来说，一个”字宽“占8个字节。\n* 当一个方法刚刚执行的时候，这个方法的操作数栈是空的，在方法执行的过程中，会有各种字节码指向操作数栈中写入和提取值，也就是入栈与出栈操作。例如，在做算术运算的时候就是通过操作数栈来进行的，又或者调用其它方法的时候是通过操作数栈来行参数传递的。\n* 另外，在概念模型中，两个栈帧作为虚拟机栈的元素，相互之间是完全独立的，但是大多数虚拟机的实现里都会作一些优化处理，令两个栈帧出现一部分重叠。让下栈帧的部分操作数栈与上面栈帧的部分局部变量表重叠在一起，这样在进行方法调用返回时就可以共用一部分数据，而无须进行额外的参数复制传递了，重叠过程如下图：\n\n\n![](/images/server/java/JVM/stackFrame1.png)\n\n### 3. 动态连接\n* 每个栈帧都包含一个指向运行时常量池中该栈帧所属性方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。在Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为静态解析。另外一部分将在每一次的运行期期间转化为直接引用，这部分称为动态连接。\n\n### 4. 方法返回地址\n* 当一个方法被执行后，有两种方式退出这个方法。第一种方式是执行引擎遇到任意一个方法返回的字节码指令，这时候可能会有返回值传递给上层的方法调用者(调用当前方法的的方法称为调用者)，是否有返回值和返回值的类型将根据遇到何种方法返回指令来决定，这种退出方法方式称为正常完成出口(Normal Method Invocation Completion)。\n* 另外一种退出方式是，在方法执行过程中遇到了异常，并且这个异常没有在方法体内得到处理，无论是Java虚拟机内部产生的异常，还是代码中使用athrow字节码指令产生的异常，只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出，这种退出方式称为异常完成出口(Abrupt Method Invocation Completion)。一个方法使用异常完成出口的方式退出，是不会给它的调用都产生任何返回值的。\n* 无论采用何种方式退出，在方法退出之前，都需要返回到方法被调用的位置，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者PC计数器的值就可以作为返回地址，栈帧中很可能会保存这个计数器值。而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。\n* 方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，把返回值(如果有的话)压入调用都栈帧的操作数栈中，调用PC计数器的值以指向方法调用指令后面的一条指令等。\n\n\n\n### 5. 附加信息\n* 虚拟机规范允许具体的虚拟机实现增加一些规范里没有描述的信息到栈帧中，例如与高度相关的信息，这部分信息完全取决于具体的虚拟机实现。在实际开发中，一般会把动态连接，方法返回地址与其它附加信息全部归为一类，称为栈帧信息。\n\n\n## 方法调用\n* 虚拟机规范允许具体的虚拟机实现增加一些规范里没有描述的信息到栈帧中，例如与高度相关的信息，这部分信息完全取决于具体的虚拟机实现。在实际开发中，一般会把动态连接，方法返回地址与其它附加信息全部归为一类，称为栈帧信息。\n\n### 解析\n* 如前所述，所有的方法调用中的目标方法在Class文件里面都是一个常量池中的符号引用，在类加载阶段，会将其中的一部分符号引用转化为直接引用，这种解析能成立的前提是：方法在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期间是不可变的。也就是说，调用目标在程序代码写好、编译器进行编译时就必须确定下来，这类方法的调用成为解析。\n\n* JAVA中符号“编译器可知、运行期不可变”的方法包括：静态方法、私有方法两大类。前者与类型直接关联，后者在外部不可被访问，这就决定了他们都不可能通过继承或别的方式重写其版本。因此都适合在类的加载阶段进行解析。\n\n* JAVA虚拟机里面提供了5条方法调用字节码指令。分别如下：\n```java\ninvokestatic:调用静态方法\n\ninvokespecial:调用实例构造器<init>方法、私有方法和父类方法（super(),super.method()）。\n\ninvokevirtual:调用所有的虚方法(静态方法、私有方法、实例构造器、父类方法、final方法都是非虚方法)。\n\ninvokeinterface:调用接口方法，会在运行时期再确定一个实现此接口的对象。\n\ninvokedynamic:现在运行时期动态解析出调用点限定符所引用的方法，然后再执行该方法，在此之前的4条指令，分派逻辑都是固化在虚拟机里面的，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。\n\n```\n\n* 只要能被invokestatic和invokespecial指令调用的方法都可以在解析阶段中确定唯一的调用版本，符合这个条件的有静态方法、私有方法、实例构造器、父类方法4类，它们在类加载阶段就会把符号引用解析为该方法的直接引用。这些方法称为非虚方法（还包括使用final修饰的方法，虽然final方法使用invokevirtual指令调用，因为final方法注定不会被重写，也就是无法被覆盖，也就无需对其进行多态选择）。\n\n* 解析调用一定是一个静态的过程，在编译期间就可以完全确定，在类装载的解析阶段就会把涉及的符号引用全部转化为可确定的直接引用，不会延迟到运行期去完成。而分派调用可能是静态的也可能是动态的，根据分派一句的宗量数可分为单分派和多分派。因此分派可分为：静态单分派、静态多分派、动态单分派、动态多分派。\n\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://blog.csdn.net/xtayfjpk/article/details/41924283\n* https://www.cnblogs.com/chenyangyao/p/5305352.html","tags":["jvm"],"categories":["服务器"]},{"title":"类加载机制(二)类加载器","url":"/2019/03/18/backend/Java/JVM/JVM类加载机制(二)类加载器/","content":"## 解析\n\n### 1. 类加载器\n* 虚拟机设计团队把加载动作放到JVM外部实现，以便让应用程序决定如何获取所需的类，\n\n* 3种类加载器：\n    * 启动类加载器(Bootstrap ClassLoader)：负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。启动类加载器是无法被Java程序直接引用的。\n    * 扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。开发者可以直接使用扩展类加载器。\n    * 应用程序类加载器(Application ClassLoader)：负责加载用户路径（classpath）上的类库。开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。\n\n![](/images/server/java/JVM/classLoad.jpg)\n    \n* 例子：\n> 寻找类加载器\n```java\npackage com.neo.classloader;\npublic class ClassLoaderTest {\n     public static void main(String[] args) {\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n        System.out.println(loader);\n        System.out.println(loader.getParent());\n        System.out.println(loader.getParent().getParent());\n    }\n}\n```\n> 结果\n```java\nsun.misc.Launcher$AppClassLoader@64fef26a\nsun.misc.Launcher$ExtClassLoader@1ddd40f3\nnull\n```\n* 从上面的结果可以看出，并没有获取到ExtClassLoader的父Loader，原因是Bootstrap Loader（引导类加载器）是用C语言实现的，找不到一个确定的返回父Loader的方式，于是就返回null。\n\n* 注意：这里父类加载器并不是通过继承关系来实现的，而是采用组合实现的。\n\n* 站在Java虚拟机的角度来讲，只存在两种不同的类加载器：启动类加载器：它使用C++实现（这里仅限于Hotspot，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的），是虚拟机自身的一部分；所有其他的类加载器：这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类java.lang.ClassLoader，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。\n\n* 应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点：\n    * 在执行非置信代码之前，自动验证数字签名。\n    * 动态地创建符合用户特定需要的定制化构建类。\n    * 从特定的场所取得java class，例如数据库中和网络中。\n\n### 2. 自定义类加载器\n* 通常情况下，我们都是直接使用系统类加载器。但是，有的时候，我们也需要自定义类加载器。比如应用是通过网络来传输 Java 类的字节码，为保证安全性，这些字节码经过了加密处理，这时系统类加载器就无法对其进行加载，这样则需要自定义类加载器来实现。自定义类加载器一般都是继承自 ClassLoader 类，从上面对 loadClass 方法来分析来看，我们只需要重写 findClass 方法即可\n\n```java\npackage com.neo.classloader;\n\nimport java.io.*;\n\n\npublic class MyClassLoader extends ClassLoader {\n\n    private String root;\n\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n        byte[] classData = loadClassData(name);\n        if (classData == null) {\n            throw new ClassNotFoundException();\n        } else {\n            return defineClass(name, classData, 0, classData.length);\n        }\n    }\n\n    private byte[] loadClassData(String className) {\n        String fileName = root + File.separatorChar\n                + className.replace('.', File.separatorChar) + \".class\";\n        try {\n            InputStream ins = new FileInputStream(fileName);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int bufferSize = 1024;\n            byte[] buffer = new byte[bufferSize];\n            int length = 0;\n            while ((length = ins.read(buffer)) != -1) {\n                baos.write(buffer, 0, length);\n            }\n            return baos.toByteArray();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public String getRoot() {\n        return root;\n    }\n\n    public void setRoot(String root) {\n        this.root = root;\n    }\n\n    public static void main(String[] args)  {\n\n        MyClassLoader classLoader = new MyClassLoader();\n        classLoader.setRoot(\"E:\\\\temp\");\n\n        Class<?> testClass = null;\n        try {\n            testClass = classLoader.loadClass(\"com.neo.classloader.Test2\");\n            Object object = testClass.newInstance();\n            System.out.println(object.getClass().getClassLoader());\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n### 3. 类的加载\n\n* 类加载有三种方式\n    * 命令行启动应用时候由JVM初始化加载\n    * 通过Class.forName()方法动态加载\n    * 通过ClassLoader.loadClass()方法动态加载\n\n* Class.forName()和ClassLoader.loadClass()区别\n    * Class.forName()：将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块；\n    * ClassLoader.loadClass()：只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。\n    * 注：Class.forName(name, initialize, loader)带参函数也可控制是否加载static块。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象 。\n\n### 双亲委派模型\n* 双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。\n\n* 双亲委派机制:\n    * 1、当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。\n    * 2、当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。\n    * 3、如果BootStrapClassLoader加载失败（例如在$JAVA_HOME/jre/lib里未查找到该class），会使用ExtClassLoader来尝试加载；\n    * 如果BootStrapClassLoader加载失败（例如在$JAVA_HOME/jre/lib里未查找到该class），会使用ExtClassLoader来尝试加载；\n* 双亲委派模型意义：\n    * 系统类防止内存中出现多份同样的字节码 \n    * 保证Java程序安全稳定运行\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* http://www.importnew.com/25295.html\n* https://www.cnblogs.com/ityouknow/p/5603287.html\n","tags":["jvm"],"categories":["服务器"]},{"title":"类加载机制(一)类加载时机及过程","url":"/2019/03/16/backend/Java/JVM/JVM类加载机制(一)类加载时机及过程/","content":"## 什么是类的加载\n* 虚拟机的加载机制：虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型\n\n* 类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口\n\n\n## 类的生命周期\n\n* 如下图所示，JVM类加载机制分为五个部分：加载，验证，准备，解析，初始化，在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。下面我们就分别来看一下这五个过程。\n\n![](/images/server/java/JVM/jiazai.png)\n\n### 1. 加载\n* 加载的过程：\n    * 1、通过一个类的全限定名来获取其定义的二进制字节流。\n    * 2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n    * 3、在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。\n\n* 加载`.class`文件的方式:\n    * 从本地系统中直接加载\n    * 通过网络下载.class文件\n    * 从zip，jar等归档文件中加载.class文件\n    * 从专有数据库中提取.class文件\n    * 将Java源文件动态编译为.class文件，比如java.lang.reflect.Proxy\n* 相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。\n\n* 加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，然后在内存中实例化一个java.lang.Class类的对象（并没有明确规定是Java堆中，在hotspot中它是存放在方法区中），这样便可以通过该对象访问方法区中的这些数据。\n\n### 2. 验证\n* 验证是为了确保被加载的类的正确性\n\n* 验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：\n    * 文件格式验证：验证字节流是否符合Class文件格式的规范；例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。\n    * 元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。\n    * 字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。\n    * 符号引用验证：确保解析动作能正确执行。\n* 验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。\n### 3. 准备\n* 准备是为类的静态变量分配内存，并将其初始化为默认值\n\n*   准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意\n    * 这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中\n    * 这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。\n    * 假设一个类变量的定义为：public static int value = 3；那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器<clinit>（）方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行\n\n![](/images/server/java/JVM/defalutValue.png)\n\n### 4. 解析\n* 解析是把类中的符号引用转换为直接引用\n* 解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。\n* 直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。\n### 5. 初始化\n* 初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。\n\n* 在Java中对类变量进行初始值设定有两种方式：\n    * 声明类变量是指定初始值\n    * 使用静态代码块为类变量指定初始值\n* JVM初始化步骤\n    * 1、假如这个类还没有被加载和连接，则程序先加载并连接该类\n    * 2、假如该类的直接父类还没有被初始化，则先初始化其直接父类\n    * 3、假如类中有初始化语句，则系统依次执行这些初始化语句\n* 类初始化时机：只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下五种(有且只有)：\n    * 1、Java虚拟机启动时被标明为启动类的类（Java Test），直接使用java.exe命令来运行某个主类\n    * 2、创建类的实例，也就是new的方式或者访问某个类或接口的静态变量，或者对该静态变量赋值，以及调用一个类的静态方法\n    * 3、使用java.lang.reflect包的方法对类进行反射调用的时候（如Class.forName(“com.shengsiyuan.Test”)）\n    * 4、初始化某个类的子类，如果父类没有初始化则其父类也会被初始化\n    * 5、当使用JDK 1.7 的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的结果是REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。\n* 被动引用\n    * 通过子类引用父类的静态字段，不会导致子类初始化\n    * 通过数组定义来引用类，不会触发此类的初始化\n    * 常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发\n    \n\n### 6.结束\n* 在如下几种情况下，Java虚拟机将结束生命周期\n    * 执行了System.exit()方法\n    * 程序正常执行结束\n    * 程序在执行过程中遇到了异常或错误而异常终止\n    * 由于操作系统出现错误而导致Java虚拟机进程终止\n## 总结\n* 研究类加载全过程有助于连接JVM运行过程\n* 深入了解java动态性（热部署，动态加载），提高程序的灵活性\n\n    \n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* http://www.importnew.com/25295.html\n* https://www.cnblogs.com/ityouknow/p/5603287.html\n","tags":["jvm"],"categories":["服务器"]},{"title":"JVM类文件结构(三)字节码指令","url":"/2019/03/16/backend/Java/JVM/JVM类文件结构(三)字节码指令/","content":"## 解析\n* Java虚拟机的指令由一个字节长度、代表着某种特定操作含义的数字（操作码）以及跟随其后代表此操作所需参数（操作数）而构成。由于JAVA虚拟机采用的是面向操作数栈而不是寄存器的架构，所以大多数指令都不包含操作数，只有一个操作码\n\n* 伪代码执行模型\n\n![](/images/server/java/JVM/zijie.png)\n\n### 加载、存储指令\n```sql\n1）iload、iload<n>、lload、lload<n>、fload、fload<n>、dload、dload<n>、aload、aload<n>：将一个局部变量加载到操作数栈。\n2）istore、istore<n>、lstore、lstore<n>、fstore、fstore<n>、dstore、dstore<n>、astore、astore<n>：将一个数值从操作数栈存储到局部变量表。\n3）bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconstm1、iconst<i>、lconst<l>、fconst<f>、dconst_<d>：将一个常量加载到操作数栈。\n4）wide：扩充局部变量表的访问索引的指令。\n```\n\n* 示例：\n    * 代码\n    ```java\n    public static int methodE(){\n        int e = 100;\n        int c = 300;\n        int d = 300000;\n        e++;\n        ++e;\n        --e;\n        e--;\n        return c + d + e;\n    }\n    ```\n    * 对应的字节码\n    ```java\n    public static int methodE();\n            Signature: ()I\n            flags: ACC_PUBLIC, ACC_STATIC\n            Code:\n            stack=2, locals=3, args_size=0\n            0: bipush        100\n            2: istore_0\n            3: sipush        300\n            6: istore_1\n            7: ldc           #5                  // int 300000\n            9: istore_2\n            10: iinc          0, 1\n            13: iinc          0, 1\n            16: iinc          0, -1\n            19: iinc          0, -1\n            22: iload_1\n            23: iload_2\n            24: iadd\n            25: iload_0\n            26: iadd\n            27: ireturn\n            LineNumberTable:\n            line 40: 0\n            line 41: 3\n            line 42: 7\n            line 43: 10\n            line 44: 13\n            line 45: 16\n            line 46: 19\n            line 47: 22\n    ```\n### 运算指令\n```sql\n1）iadd、ladd、fadd、dadd：加法指令。\n2）isub、lsub、fsub、dsub：减法指令。\n3）imul、lmul、fmul、dmul：乘法指令。\n4）idiv、ldiv、fdiv、ddiv：除法指令。\n5）irem、lrem、frem、drem：求余指令。\n6）ineg、lneg、fneg、dneg：取反指令。\n7）ishl、ishr、iushr、lshl、lshr、lushr：位移指令。\n8）ior、lor：按位或指令。\n9）iand、land：按位与指令。\n10）ixor、lxor：按位异或指令。\n11）iinc：局部变量自增指令。\n12）dcmpg、dcmpl、fcmpg、fcmpl、lcmp：比较指令。\n```\n* 示例参照上例\n\n### 类型转换指令\n```sql\n1）int类型到long、float或者double类型，long类型到float、double类型，float类型到double类型：宽化类型转换（虚拟机直接支持）。\n2）i2b、i2c、i2s、l2i、f2i、f2l、d2i、d2l、d2f：窄化类型转换（显式指令）。\n```\n* 示例：\n    * 代码\n    ```java\n    public static void methodK(){\n        int i = 97;\n        short i2s = (short) i;\n        char i2c = (char) i;\n        long i2l = i;\n        float i2f = i;\n        double i2d = i;\n        float l2f = i2l;\n        double l2d = i2l;\n    }\n    ```\n    * 对应的字节码\n    ```java\n    public static void methodK();\n    Signature: ()V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=11, args_size=0\n         0: bipush        97\n         2: istore_0\n         3: iload_0\n         4: i2s\n         5: istore_1\n         6: iload_0\n         7: i2c\n         8: istore_2\n         9: iload_0\n        10: i2l\n        11: lstore_3\n        12: iload_0\n        13: i2f\n        14: fstore        5\n        16: iload_0\n        17: i2d\n        18: dstore        6\n        20: lload_3\n        21: l2f\n        22: fstore        8\n        24: lload_3\n        25: l2d\n        26: dstore        9\n        28: return\n      LineNumberTable:\n        line 100: 0\n        line 101: 3\n        line 102: 6\n        line 103: 9\n        line 104: 12\n        line 105: 16\n        line 106: 20\n        line 107: 24\n        line 108: 28\n    ```\n### 对象创建与访问指令\n```sql\n1）new ：创建类实例的指令。\n2）newarray、anewarray、multianewarray：创建数组的指令。\n3）getstatic、putstatic、getfield、putfield：访问类字段（类变量）和实例字段（实例变量）的指令。\n4）baload、caload、saload、iaload、laload、faload、daload、aaload：把一个数组元素加载到操作数栈的指令。\n5）bastore、castore、sastore、iastore、lastore、fastore、dastore、aastore：把一个操作数栈的值存储到数组元素中的指令。\n6）arraylength：取数组长度的指令。\n7）instanceof、checkcast：检查类实例类型的指令。\n```\n* 示例：\n    * 代码\n    ```java\n    public static void methodJ(){\n        new SimpleMethodExecuteProcess();\n    \n        System.out.println(SimpleMethodExecuteProcess.i);\n    }\n    ```\n    * 对应的字节码\n    ```java\n    public static void methodJ();\n    Signature: ()V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=0, args_size=0\n         0: new           #9                  // class edu/atlas/demo/java/jvm/SimpleMethodExecuteProcess\n         3: dup\n         4: invokespecial #10                 // Method \"<init>\":()V\n         7: pop\n         8: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n        11: getstatic     #11                 // Field i:I\n        14: invokevirtual #12                 // Method java/io/PrintStream.println:(I)V\n        17: return\n      LineNumberTable:\n        line 91: 0\n        line 93: 8\n        line 94: 17\n    ```\n    \n\n### 操作数栈管理指令\n```sql\n1）pop、pop2：将操作数栈的栈顶一个或两个元素出栈。\n2）dup、dup2、dup_x1、dup2_x1、dup_x2、dup2_x2：复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶。\n3）swap：将栈最顶端两个数值互换\n```\n* 示例：\n    * 代码\n    ```java\n    public static void main(String[] args) {\n        heavyMethod();\n    }\n    ```\n    * 对应的字节码\n    ```java\n    public static void main(java.lang.String[]);\n            Signature: ([Ljava/lang/String;)V\n            flags: ACC_PUBLIC, ACC_STATIC\n            Code:\n                            stack=1, locals=1, args_size=1\n                            0: invokestatic  #23                 // Method heavyMethod:()I\n                            3: pop\n                            4: return\n            LineNumberTable:\n                            line 115: 0\n                            line 116: 4\n    ```\n### 控制转移指令\n```sql\n1）ifeq、iflt、ifle、ifne、ifgt、ifge、ifnull、ifnonnull、if_icmpeq、if_icmpne、if_icmplt、if_icmpgt、if_icmple、if_icmpge、if_acmpeq、if_acmpne：条件分支。\n2）tableswitch、lookupswitch：复合条件分支。\n3）goto、goto_w、jsr、jsr_w、ret：无条件分支。\n```\n* 示例：\n    * 代码\n    ```java\n    public static void methodG(){\n        if(i == 0){\n            System.out.println(System.currentTimeMillis());\n        }\n    \n        while(i < 1){\n            System.out.println(System.currentTimeMillis());\n            i++;\n        }\n    }\n    ```\n    * 对应的字节码\n    ```java\n   public static void methodG();\n    Signature: ()V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=3, locals=0, args_size=0\n         0: getstatic     #6                  // Field i:I\n         3: ifne          15\n         6: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         9: invokestatic  #7                  // Method java/lang/System.currentTimeMillis:()J\n        12: invokevirtual #8                  // Method java/io/PrintStream.println:(J)V\n        15: getstatic     #6                  // Field i:I\n        18: iconst_1\n        19: if_icmpge     42\n        22: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n        25: invokestatic  #7                  // Method java/lang/System.currentTimeMillis:()J\n        28: invokevirtual #8                  // Method java/io/PrintStream.println:(J)V\n        31: getstatic     #6                  // Field i:I\n        34: iconst_1\n        35: iadd\n        36: putstatic     #6                  // Field i:I\n        39: goto          15\n        42: return\n      LineNumberTable:\n        line 62: 0\n        line 63: 6\n        line 66: 15\n        line 67: 22\n        line 68: 31\n        line 70: 42\n      StackMapTable: number_of_entries = 2\n           frame_type = 15 /* same */\n           frame_type = 26 /* same */\n    ```\n### 异常处理指令\n```sql\nathrow ：显式抛出异常指令。\n```\n* 示例：\n    * 代码\n    ```java\n    public static void methodH(){\n        try {\n            throw new NullPointerException(\"nothing ...\");\n            // do nothing ...\n        } catch (Throwable t){\n            // do nothing ...\n        }\n    }\n    ```\n    * 对应的字节码\n    ```java\n    public static void methodH();\n    Signature: ()V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=3, locals=1, args_size=0\n         0: new           #9                  // class java/lang/NullPointerException\n         3: dup\n         4: ldc           #10                 // String nothing ...\n         6: invokespecial #11                 // Method java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n         9: athrow\n        10: astore_0\n        11: return\n      Exception table:\n         from    to  target type\n             0    10    10   Class java/lang/Throwable\n      LineNumberTable:\n        line 77: 0\n        line 79: 10\n        line 82: 11\n      StackMapTable: number_of_entries = 1\n           frame_type = 74 /* same_locals_1_stack_item */\n          stack = [ class java/lang/Throwable ]\n    ```\n* 同步指令\n```sql\nmonitorenter、monitorexit：支持synchronized语句块语义的指令。\n```\n\n* 示例：\n    * 代码\n    ```java\n    public void methodI(){\n        synchronized (Integer.class){\n            // do nothing ...\n        }\n    }\n    ```\n    * 对应的字节码\n    ```java\n    public void methodI();\n    Signature: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=3, args_size=1\n         0: ldc_w         #13                 // class java/lang/Integer\n         3: dup\n         4: astore_1\n         5: monitorenter\n         6: aload_1\n         7: monitorexit\n         8: goto          16\n        11: astore_2\n        12: aload_1\n        13: monitorexit\n        14: aload_2\n        15: athrow\n        16: return\n      Exception table:\n         from    to  target type\n             6     8    11   any\n            11    14    11   any\n      LineNumberTable:\n        line 88: 0\n        line 90: 6\n        line 91: 16\n      StackMapTable: number_of_entries = 2\n           frame_type = 255 /* full_frame */\n          offset_delta = 11\n          locals = [ class edu/atlas/demo/java/jvm/SimpleMethodExecuteProcess, class java/lang/Object ]\n          stack = [ class java/lang/Throwable ]\n           frame_type = 250 /* chop */\n          offset_delta = 4\n    ```\n\n* synchronized 修饰方法的语义解析：可以直接从方法常量池的方法表结构中ACC_SYNCHRONIZED访问标志得知一个方法是否声明为同步方法，不需要解析出monitorenter、monitorexit同步指令。\n```java\npublic static synchronized void methodL(){\n    int i = 97;\n}\n\n    public static synchronized void methodL();\n        Signature: ()V\n        flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED\n        Code:\n            stack=1, locals=1, args_size=0\n                 0: bipush        97\n                 2: istore_0\n                 3: return\n            LineNumberTable:\n                line 120: 0\n                line 121: 3\n```\n* 方法调用和返回指令\n```sql\n1）invokestatic：调用静态方法。\n2）invokespecial：调用实例构造器<init>方法、私有方法和父类方法。\n3）invokevirtual：调用所有的虚方法。非虚方法以外的都是虚方法，非虚方法包括使用invokestatic、invokespecial调用的方法和被final修饰的方法。\n4）invokeinterface：调用接口方法，运行时再确定一个实现此接口的对象。\n5）invokedynamic：用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法。\nireturn（返回值是boolean、byte、char、short、int）、lreturn、freturn、dreturn、areturn：方法返回指令。\n```\n\n* 示例：\n    * 代码\n    ```java\n    public static int heavyMethod(){\n        int a = 200;\n        int b = 100;\n        int c = methodC(methodA(methodA(a, b), b), methodB(a, b));\n        methodD();\n        methodE();\n        methodF();\n        methodG();\n        methodH();\n        new SimpleMethodExecuteProcess().methodI();\n        methodJ();\n        methodK();\n        methodL();\n        return c;\n    }\n    ```\n    * 对应的字节码\n    ```java\n    public static int heavyMethod();\n    Signature: ()I\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=3, locals=3, args_size=0\n         0: sipush        200\n         3: istore_0\n         4: bipush        100\n         6: istore_1\n         7: iload_0\n         8: iload_1\n         9: invokestatic  #17                 // Method methodA:(II)I\n        12: iload_1\n        13: invokestatic  #17                 // Method methodA:(II)I\n        16: iload_0\n        17: iload_1\n        18: invokestatic  #18                 // Method methodB:(II)I\n        21: invokestatic  #19                 // Method methodC:(II)I\n        24: istore_2\n        25: invokestatic  #20                 // Method methodD:()V\n        28: invokestatic  #21                 // Method methodE:()I\n        31: pop\n        32: invokestatic  #22                 // Method methodF:()D\n        35: pop2\n        36: invokestatic  #23                 // Method methodG:()V\n        39: invokestatic  #24                 // Method methodH:()V\n        42: new           #14                 // class edu/atlas/demo/java/jvm/SimpleMethodExecuteProcess\n        45: dup\n        46: invokespecial #15                 // Method \"<init>\":()V\n        49: invokevirtual #25                 // Method methodI:()V\n        52: invokestatic  #26                 // Method methodJ:()V\n        55: invokestatic  #27                 // Method methodK:()V\n        58: invokestatic  #28                 // Method methodL:()V\n        61: iload_2\n        62: ireturn\n      LineNumberTable:\n        line 128: 0\n        line 129: 4\n        line 130: 7\n        line 131: 25\n        line 132: 28\n        line 133: 32\n        line 134: 36\n        line 135: 39\n        line 136: 42\n        line 137: 52\n        line 138: 55\n        line 139: 58\n        line 140: 61\n    ```\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://blog.51cto.com/damon188/2131035\n","tags":["jvm"],"categories":["服务器"]},{"title":"JVM类文件结构(二)Code属性","url":"/2019/03/16/backend/Java/JVM/JVM类文件结构(二)Code属性/","content":"## 解析\n* Code属性是Class文件中最重要的一个属性，如果把一个Java程序中的信息分为代码（Code，方法体内的Java代码）和元数据（Metadata，包括类、字段、方法定义及其他信息）两部分，那么在整个Class文件中，Code属性用于描述代码，所有的其他数据项目都用于描述元数据\n\n* Java虚拟机执行字节码是基于栈的体系结构\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://www.cnblogs.com/yxwkf/p/5222589.html","tags":["jvm"],"categories":["服务器"]},{"title":"JVM类文件结构(一)Class类文件结构","url":"/2019/03/16/backend/Java/JVM/JVM类文件结构(一)Class类文件结构/","content":"## 解析\n* 不论什么一个Class文件都相应唯一一个类或接口的定义信息，可是不是全部的类或接口都得定义在文件里（它们也能够通过类载入器直接生成)。\n\n* Class文件是一组以8位字节为基础单位的二进制流。各个数据项严格按顺序排列，没有不论什么分隔符。\n\n* Class文件格式採用一种类似于C语言结构体的伪结构来存储数据。这样的伪结构仅仅有两种数据类型：无符号数和表。\n    * 无符号数属于基本的数据类型，以 u1、u2、u4、u8 来分别代表 1 个字节、2 个字节、4 个字节和 8 个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照 UTF-8 编码构成字符串值。\n    *  表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以 “_info” 结尾。表用于描述有层次关系的复合结构的数据，整个 Class 文件本质上就是一张表，它由表 6-1 所示的数据项构成。\n\n![image](/images/server/java/JVM/class.png)\n\n\n* 使用以下的类进行说明：\n```java\npackage com.test;\n\npublic class Test {\n\tprivate int m;\n\t\n\tpublic int getM(){\n\t\treturn m + 1;\n\t}\n}\n```\n* javap -verbose 执行后的可视byteCode（只存在两种数据类型：无符号数字与表）:\n```java\nClassfile /D:/workspace-github/jvm/target/production/jvm/com/songsy/Test.class\n  Last modified 2019-3-16; size 361 bytes\n  MD5 checksum bb8e54060828e4bf1f709c2f4434dca8\n  Compiled from \"Test.java\"\npublic class com.songsy.Test\n  minor version: 0\n  major version: 51\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #4.#18         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #3.#19         // com/songsy/Test.m:I\n   #3 = Class              #20            // com/songsy/Test\n   #4 = Class              #21            // java/lang/Object\n   #5 = Utf8               m\n   #6 = Utf8               I\n   #7 = Utf8               <init>\n   #8 = Utf8               ()V\n   #9 = Utf8               Code\n  #10 = Utf8               LineNumberTable\n  #11 = Utf8               LocalVariableTable\n  #12 = Utf8               this\n  #13 = Utf8               Lcom/songsy/Test;\n  #14 = Utf8               getM\n  #15 = Utf8               ()I\n  #16 = Utf8               SourceFile\n  #17 = Utf8               Test.java\n  #18 = NameAndType        #7:#8          // \"<init>\":()V\n  #19 = NameAndType        #5:#6          // m:I\n  #20 = Utf8               com/songsy/Test\n  #21 = Utf8               java/lang/Object\n{\n  public com.songsy.Test();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 7: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/songsy/Test;\n\n  public int getM();\n    descriptor: ()I\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: aload_0\n         1: getfield      #2                  // Field m:I\n         4: iconst_1\n         5: iadd\n         6: ireturn\n      LineNumberTable:\n        line 11: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       7     0  this   Lcom/songsy/Test;\n}\nSourceFile: \"Test.java\"\n```\n\n* 编译后的class文件例如以下：\n\n![](/images/server/java/JVM/class1.png)\n\n### 1. 魔数与Class版本\n\n* 每一个class文件的头4个字节称为魔数，它唯一的作用是确定这个文件是否为一个能被虚拟机接受的Class文件。非常多文件存储标准中都使用魔数来进行身份识别。譬如图片格式gif、jpeg等。使用魔数而不是拓展名来进行识别主要是基于安全方面的考虑，由于文件拓展格式能够任意修改。Class文件的魔数为：0xCAFEBABE（咖啡宝贝？）。这个魔数似乎也预示着日后JAVA这个商标名称的出现。\n\n![](/images/server/java/JVM/class2.png)\n\n* 第五六个字节是次版本（Minor Version）。第7和第8个字节是主版本（Major Version）。\n\n* 高版本号的JDK能够向下兼容曾经版本号的Class文件，可是无法执行以后版本号的Class文件，即使文件格式并未发生变化，虚拟机也必须拒绝执行超过其版本号号的Class文件。\n\n![](/images/server/java/JVM/class-version.png)\n\n### 2. 常量池\n* 紧接着版本之后就是常量池，常量池能够理解为Class文件之中的资源仓库，是Class文件结构中与其它项目关联最多的数据类型，也是占用Class文件空间最大的数据项目之中的一个。同一时候也是在Class文件里第一个出现的表类型数据项目\n\n![](/images/server/java/JVM/class3.png)\n\n* 常量池中主要存放两大类常量\n    * 字面量和符号引用。字面量如文本字符串、声明为final的常量值等\n    * 符号引用包含三类常量：类和接口的全限定名、字段的名称和描写叙述符、方法的名称和描写叙述符。\n    \n### 3. 访问标志\n* 在常量池结束之后，紧接着的两个字节代表訪问标志。用于识别一些类或者接口层次的訪问信息。包括：这个类是Class类还是接口；是否定义为public类型，是否被声明为final，具体的标志位及其含义例如以下表所看到的。\n \n![image](/images/server/java/JVM/class-access.png)\n\n* 依据上面的表格，測试类的訪问标志0x0021= 0x0001 | 0x0020 =ACC_PUBLIC | ACC_SUPER \n\n![](/images/server/java/JVM/class4.png)\n\n### 4. 类索引、父类索引和接口索引集合\n\n![](/images/server/java/JVM/class5.png)\n\n* Class文件里由这3项数据来确定这个类的继承关系\n    * this_class：类索引，用于确定这个类的全限定名，占2字节\n    * super_class：父类索引。用于确定这个类父类的全限定名（Java语言不同意多重继承，故父类索引仅仅有一个。除了java.lang.Object类之外全部类都有父类，故除了java.lang.Object类之外，全部类该字段值都不为0），占2字节\n    * interfaces_count：接口索引计数器。占2字节。接口索引计数器。占2字节。\n    * interfaces：接口索引集合，一组u2类型数据的集合。用来描写叙述这个类实现了哪些接口。这些被实现的接口将按implements语句（假设该类本身为接口，则为extends语句）后的接口顺序从左至右排列在接口的索引集合中\n* this_class、super_class与interfaces中保存的索引值均指向常量池中一个CONSTANT_Class_info类型的常量。通过这个常量中保存的索引值能够找到定义在CONSTANT_Utf8_info类型的常量中的全限定名字符串this_class的值为0x0001，即常量池中第一个常量，super_class的值为0x0003，即常量池中的第三个常量，interfaces_counts的值为0x0000，故接口索引集合大小为0\n\n### 5. 字段表集合\n![](/images/server/java/JVM/class6.png)\n\n* 字段表用于描写叙述接口或者类中声明的变量，包含类级变量和实例级变量(是否是static)。但不包含在方法内部声明的局部变量。\n    * fields_count：字段表计数器。即字段表集合中的字段表数据个数。占2字节，其值为0x0001，即仅仅有一个字段表数据。也就是測试类中仅仅包括一个变量（不算方法内部变量）\n    * 字段表集合，一组字段表类型数据的集合。字段表用于描写叙述接口或类中声明的变量。包含类级别（static）和实例级别变量，不包含在方法内部声明的变量 \n### 6. 方法表集合\n* methods_count：方法表计数器，即方法表集合中的方法表数据个数。占2字节，其值为0x0002，即測试类中有2个方法(还自己主动添加了一个构造函数）\n\n* methods：方法表集合，一组方法表类型数据的集合。方法表结构和字段表结构一样：\n\n### 7. 属性表集合\n* 在Class文件、属性表、方法表中都能够包括自己的属性表集合。用于描写叙述某些场景的专有信息\n\n* 与Class文件里其他数据项对长度、顺序、格式的严格要求不同，属性表集合不要求当中包括的属性表具有严格的顺序，而且仅仅要属性的名称不与已有的属性名称反复。不论什么人实现的编译器可以向属性表中写入自定义的属性信息。虚拟机在执行时会忽略不能识别的属性，为了能正确解析Class文件\n\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://www.cnblogs.com/yxwkf/p/5222589.html","tags":["jvm"],"categories":["服务器"]},{"title":"JVM垃圾回收(五)GC分析","url":"/2019/03/11/backend/Java/JVM/JVM垃圾回收(五)GC分析/","content":"## GC日志查看\n* 可以通过在java命令种加入参数来指定对应的gc类型，打印gc日志信息并输出至文件等策略。GC的日志是以替换的方式(>)写入的，而不是追加(>>)，如果下次写入到同一个文件中的话，以前的GC内容会被清空。\n* 对应的参数列表\n```sql\n-XX:+PrintGC 输出GC日志\n-XX:+PrintGCDetails 输出GC的详细日志\n-XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）\n-XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）\n-XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息\n-Xloggc:../logs/gc.log 日志文件的输出路径\n```\n* 示例 `-XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:./gclogs`\n> 新生代回收日志\n```sql\n2014-07-18T16:02:17.606+0800: 611.633: [GC 611.633: [DefNew: 843458K->2K(948864K), 0.0059180 secs] 2186589K->1343132K(3057292K), 0.0059490 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]\n``` \n```sql\n2014-07-18T16:02:17.606+0800（当前时间戳）: 611.633（时间戳）: [GC（表示Young GC） 611.633: [DefNew（单线程Serial年轻代GC）: 843458K（年轻代垃圾回收前的大小）->2K（年轻代回收后的大小）(948864K（年轻代总大小）), 0.0059180 secs（本次回收的时间）] 2186589K（整个堆回收前的大小）->1343132K（整个堆回收后的大小）(3057292K（堆总大小）), 0.0059490 secs（回收时间）] [Times: user=0.00（用户耗时） sys=0.00（系统耗时）, real=0.00 secs（实际耗时）]\n```\n> 老年代回收的日志如下：\n```sql\n2014-07-18T16:19:16.794+0800: 1630.821: [GC 1630.821: [DefNew: 1005567K->111679K(1005568K), 0.9152360 secs]1631.736: [Tenured:2573912K->1340650K(2574068K), 1.8511050 secs] 3122548K->1340650K(3579636K), [Perm : 17882K->17882K(21248K)], 2.7854350 secs] [Times: user=2.57 sys=0.22, real=2.79 secs]\n```\n\n# \n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://www.cnblogs.com/qlqwjy/p/7929414.html","tags":["jvm"],"categories":["服务器"]},{"title":"JVM垃圾回收(四)常用参数","url":"/2019/03/11/backend/Java/JVM/JVM垃圾回收(四)常用参数/","content":"> JVM参数的含义\n\n|    参数名称    |       含义       |     默认值   | 备注  |\n|:--------------|:--------------- |: ---------- |: ----------|\n|  -Xms         |     初始堆大小starting    |   物理内存的1/64(<1GB) | 默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.  |\n|  -Xmx         |    最大堆大小max     |  物理内存的1/4(<1GB) | 默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制  |\n|  -Xmn         |年轻代大小(1.4or lator)new  |  | 注意：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8 |\n|  -XX:NewSize         | 设置年轻代大小(for 1.3/1.4) |  |  |\n|  -XX:MaxNewSize         |年轻代最大值(for 1.3/1.4)  |  |  |\n|  -XX:PermSize         | 设置持久代(perm gen)初始值 | 物理内存的1/64 |  |\n|  -XX:MaxPermSize         | 设置持久代最大值 | 物理内存的1/4 |  |\n|  -Xss         |每个线程的堆栈大小  |  |  JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长）和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:\"”-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了。|\n|  -XX:ThreadStackSize         | Thread Stack Size |  |  |\n|  -XX:NewRatio         | 年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代) |  |  -XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置|\n|  -XX:SurvivorRatio         | Eden区与Survivor区的大小比值 |  |  设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10|\n|  -XX:LargePageSizeInBytes         | 内存页的大小不可设置过大， 会影响Perm的大小 |  | =128m |\n|  -XX:+UseFastAccessorMethods         | 原始类型的快速优化 |  |  |\n|  -XX:+DisableExplicitGC         | 关闭System.gc() |  | 这个参数需要严格的测试 |\n|  -XX:MaxTenuringThreshold         | 垃圾最大年龄 |  |  如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率该参数只有在串行GC时才有效|\n|  -XX:+AggressiveOpts         | 加快编译 |  |  |\n|  -XX:+UseBiasedLocking         | 锁机制的性能改善 |  |  |\n|  -Xnoclassgc         |  禁用垃圾回收|  |  |\n|  -XX:SoftRefLRUPolicyMSPerMB         | 每兆堆空闲空间中SoftReference的存活时间 | 1s |  |\n|  -XX:PretenureSizeThreshold         | 对象超过多大是直接在旧生代分配 | 0 | 单位字节 新生代采用Parallel Scavenge GC时无效另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象. |\n|  -XX:TLABWasteTargetPercent         |TLAB占eden区的百分比  |1%  |  |\n|  -XX:+CollectGen0First         | FullGC时是否先YGC | false |  |\n\n> 并行收集器相关参数\n\n|    参数名称    |       含义       |     默认值   | 备注  |\n|:--------------|:--------------- |: ---------- |: ----------|\n| -XX:+UseParallelGC |    Full GC采用parallel MSC(此项待验证)   |    |   选择垃圾收集器为并行收集器.此配置仅对年轻代有效.即上述配置下,年轻代使用并发收集,而年老代仍旧使用串行收集.(此项待验证)   |\n| -XX:+UseParNewGC  |  设置年轻代为并行收集     |    |  可与CMS收集同时使用JDK5.0以上,JVM会根据系统配置自行设置,所以无需再设置此值    |\n| -XX:ParallelGCThreads  |   并行收集器的线程数    |    |    此值最好配置与处理器数目相等 同样适用于CMS  |\n| -XX:+UseParallelOldGC  |   年老代垃圾收集方式为并行收集(Parallel Compacting)    |    |  这个是JAVA 6出现的参数选项    |\n| -XX:MaxGCPauseMillis  |    每次年轻代垃圾回收的最长时间(最大暂停时间)   |    |    如果无法满足此时间,JVM会自动调整年轻代大小,以满足此值.  |\n| -XX:+UseAdaptiveSizePolicy  |  自动选择年轻代区大小和相应的Survivor区比例     |    |  设置此选项后,并行收集器会自动选择年轻代区大小和相应的Survivor区比例,以达到目标系统规定的最低相应时间或者收集频率等,此值建议使用并行收集器时,一直打开.    |\n| -XX:GCTimeRatio  |   设置垃圾回收时间占程序运行时间的百分比    |    |    公式为1/(1+n)  |\n| -XX:+ScavengeBeforeFullGC  | Full GC前调用YGC      |   true |    Do young generation GC prior to a full GC. (Introduced in 1.4.1.)  |\n\n> CMS相关参数\n\n|    参数名称    |       含义       |     默认值   | 备注  |\n|:--------------|:--------------- |: ---------- |: ----------|\n|-XX:+UseConcMarkSweepGC   |使用CMS内存收集   |   |  |\n|-XX:+AggressiveHeap   |   |   | 试图是使用大量的物理内存长时间大内存使用的优化，能检查计算资源（内存， 处理器数量）至少需要256MB内存大量的CPU／内存， （在1.4.1在4CPU的机器上已经显示有提升） |\n|-XX:CMSFullGCsBeforeCompaction   | 多少次后进行内存压缩  |   |由于并发收集器不对内存空间进行压缩,整理,所以运行一段时间以后会产生\"碎片\",使得运行效率降低.此值设置运行多少次GC以后对内存空间进行压缩,整理.  |\n|-XX:+CMSParallelRemarkEnabled  | 降低标记停顿  |   |  |\n|-XX+UseCMSCompactAtFullCollection  | 在FULL GC的时候， 对年老代的压缩  |   | CMS是不会移动内存的， 因此， 这个非常容易产生碎片， 导致内存不够用， 因此， 内存的压缩这个时候就会被启用。 增加这个参数是个好习惯。可能会影响性能,但是可以消除碎片 |\n|-XX:+UseCMSInitiatingOccupancyOnly   |  使用手动定义初始化定义开始CMS收集 |   |  禁止hostspot自行触发CMS GC|\n|-XX:CMSInitiatingOccupancyFraction=70  | 使用cms作为垃圾回收使用70％后开始CMS收集  |  92 | 为了保证不出现promotion failed(见下面介绍)错误,该值的设置需要满足以下公式CMSInitiatingOccupancyFraction计算公式 |\n|-XX:CMSInitiatingPermOccupancyFraction  | 设置Perm Gen使用到达多少比率时触发  |  92 |  |\n|-XX:+CMSIncrementalMode  | 设置为增量模式  |   | 用于单CPU情况 |\n|-XX:+CMSClassUnloadingEnabled  |   |   |  |\n\n\n> 辅助参数\n\n|    参数名称    |       含义       |     默认值   | 备注  |\n|:--------------|:--------------- |: ---------- |: ----------|\n|  -XX:+PrintGC |   |   | 输出形式:[GC 118250K->113543K(130112K), 0.0094143 secs][Full GC 121376K->10414K(130112K), 0.0650971 secs] |\n|  -XX:+PrintGCDetails |   |   |  输出形式:[GC [DefNew: 8614K->781K(9088K), 0.0123035 secs] 118250K->113543K(130112K), 0.0124633 secs][GC [DefNew: 8614K->8614K(9088K), 0.0000665 secs][Tenured: 112761K->10414K(121024K), 0.0433488 secs] 121376K->10414K(130112K), 0.0436268 secs]|\n|  -XX:+PrintGCTimeStamps |   |   |  |\n|  -XX:+PrintGCApplicationStoppedTime | 打印垃圾回收期间程序暂停的时间.可与上面混合使用  |   | 可与-XX:+PrintGC -XX:+PrintGCDetails混合使用输出形式:11.851: [GC 98328K->93620K(130112K), 0.0082960 secs] |\n|  -XX:+PrintGCApplicationConcurrentTime | 打印每次垃圾回收前,程序未中断的执行时间.可与上面混合使用  |   | 输出形式:Total time for which application threads were stopped: 0.0468229 seconds |\n|  -XX:+PrintHeapAtGC | 打印GC前后的详细堆栈信息  |   |  |\n|  -Xloggc:filename |  把相关日志信息记录到文件以便分析，与上面几个配合使用 |   |  |\n|  -XX:+PrintClassHistogram | garbage collects before printing the histogram.  |   |  |\n|  -XX:+PrintTLAB |  查看TLAB空间的使用情况   |   |  |\n|   XX:+PrintTenuringDistribution |查看每次minor GC后新的存活周期的阈值   |   |Desired survivor size 1048576 bytes, new threshold 7 (max 15)new threshold 7即标识新的存活周期的阈值为7。  |\n> 备注\n* `-X` 开头参数的是非标准，不是所有虚拟机都支持，`-XX`更流氓，不保证其稳定性\n* \n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html","tags":["jvm"],"categories":["服务器"]},{"title":"JVM垃圾回收(三)内存分配及回收策略","url":"/2019/03/10/backend/Java/JVM/JVM垃圾回收(三)内存分配及回收策略/","content":"## 概述\n* Java技术体系中所提倡的自动内存管理最终可以归结为自动化地解决了两个问题：给对象分配内存以及回收分配给对象的内存。关于回收内存这一点，我们已经使用了大量篇幅去介绍虚拟机中的垃圾收集器体系以及运作原理，现在我们再一起来探讨一下给对象分配内存的那点事儿。\n* 对象的内存分配，往大方向讲，就是在堆上分配（但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配），对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分之百固定的，其细节取决于当前使用的是哪一种垃圾收集器组合，还有虚拟机中与内存相关的参数的设置。\n    * TLAB: 首先讲讲什么是TLAB。内存分配的动作，可以按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）。哪个线程需要分配内存，就在哪个线程的TLAB上分配。虚拟机是否使用TLAB，可以通过-XX:+/-UseTLAB参数来设定。这么做的目的之一，也是为了并发创建一个对象时，保证创建对象的线程安全性。TLAB比较小，直接在TLAB上分配内存的方式称为快速分配方式，而TLAB大小不够，导致内存被分配在Eden区的内存分配方式称为慢速分配方式。\n* 接下来我们将会讲解几条最普遍的内存分配规则，并通过代码去验证这些规则。由于条件因素，只能在Client模式下测试，因此CMS和G1并未提及。\n## 解析\n\n### 1. 对象优先在Eden分配\n* 所有通过new创建的对象的内存都在堆中分配，堆被划分为新生代和老年代，新生代又被进一步划分为Eden和Survivor区，而Survivor由FromSpace和ToSpace组成。\n    * 新生代：新创建的对象都是用新生代分配内存，Eden空间不足时，触发Minor GC，这时会把存活的对象转移进Survivor区。\n    * 老年代：老年代用于存放经过多次Minor GC之后依然存活的对象。\n \n![](/images/server/java/JVM/gc-generation.gif)\n\n* 大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。这时会把存活的对象转移进Survivor区。\n    * `Minor GC` 新生代GC，指发生在新生代的垃圾收集动作，所有的Minor GC都会触发全世界的暂停（stop-the-world），停止应用程序的线程，不过这个过程非常短暂。\n    * `Major GC` 老年代GC，指发生在老年代的GC。\n    * `Full GC` 包括前两个\n\n* 举例说明\n    * 下面的代码来看一下jvm具体是怎样分配的，下面的代码注释有详细解释\n    ```java\n    /**\n     * VM参数：\n     *      -verbose:gc -Xms20M  -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseSerialGC\n     * 参数解析：\n     *      * 初始堆大小为20兆，不可扩展，年轻代大小为10兆剩下的10兆分配给老年代，PrintGCDetails打印内存回收日志，SurvivorRatio标识 eden与Survivor比例为8:1\n     *      * \"eden space 8192K from space 1024K to space 1024K\" 新生代总可用空间为9216KB (一个Eden区 + 一个Survivor区)\n     * @author songsy\n     * @date 2019/3/11 18:37\n     */\n    public class Jvm1 {\n    \n        private static final int _1KB = 1024;\n        private static final int _1MB = 1024 * _1KB;\n    \n        public static void testAllocation() {\n            byte [] allocation1,allocation2, allocation3,allocation4,allocation5;\n            allocation1 = new byte[2 * _1MB];\n            allocation2 = new byte[2 * _1MB];\n            allocation3 = new byte[2 * _1MB];\n            /**\n             * 执行到下一步出现一次Minor GC，因为发现Eden已经被占用了6Mb，剩余空间装不下4Mb，\n             * 执行gc的时候发现已有3*2Mb的对象无法放入Survivor（只有1mb）空间，所以只好通过\n             * 分配担保机制提前转移到老年代去\n             */\n            allocation4 = new byte[4 * _1MB];\n            /**\n             * Gc结束，4Mb的allocation4对象将分配在Eden区，老年代占用6Mb\n             */\n        }\n        public static void main(String[] args) {\n            testAllocation();\n        }\n    }\n    ``` \n    * 输出日志\n    ```\n    [GC[DefNew: 7485K->526K(9216K), 0.0076710 secs] 7485K->6671K(19456K), 0.0077381 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] \n    Heap\n     def new generation   total 9216K, used 4952K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)\n      eden space 8192K,  54% used [0x00000000f9a00000, 0x00000000f9e526c8, 0x00000000fa200000)\n      from space 1024K,  51% used [0x00000000fa300000, 0x00000000fa383bd8, 0x00000000fa400000)\n      to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)\n     tenured generation   total 10240K, used 6144K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)\n       the space 10240K,  60% used [0x00000000fa400000, 0x00000000faa00030, 0x00000000faa00200, 0x00000000fae00000)\n     compacting perm gen  total 21248K, used 2950K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)\n       the space 21248K,  13% used [0x00000000fae00000, 0x00000000fb0e1918, 0x00000000fb0e1a00, 0x00000000fc2c0000)\n    No shared spaces configured.\n    ```\n### 2. 大对象直接进入老年代\n* 所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组（例子中的byte[]数组就是典型的大对象）。\n* 虚拟机提供了一个-XX：PretenureSizeThreshold参数，令大于这个设置值的对象直接在老年代分配。只对Serial和ParNew两款收集器有效，Parallel Scavenge收集器不认识这个参数，Parallel Scavenge收集器一般并不需要设置。\n* 举例说明\n    ```java\n    /**\n     * 测试大对象直接进入老年代\n     *\n     * VM参数：\n     *      -verbose:gc -Xms20M  -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseSerialGC\n     * -XX:PretenureSizeThreshold=3145728 可选\n     * \n     * @author songsy\n     * @date 2019/3/11 18:37\n     */\n    public class Jvm2 {\n    \n        private static final int _1KB = 1024;\n        private static final int _1MB = 1024 * _1KB;\n    \n        public static void testAllocation() {\n            byte [] allocation1;\n            // 直接分配在老年代\n            allocation1 = new byte[4 * _1MB];\n        }\n        public static void main(String[] args) {\n            testAllocation();\n        }\n    }\n    ```\n    * 没设置PretenureSizeThreshold，可以看到新生代`def new generation   total 9216K, used 5773K`，老年代`tenured generation   total 10240K, used 0K`\n    ```\n    Heap\n     def new generation   total 9216K, used 5773K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)\n      eden space 8192K,  70% used [0x00000000f9a00000, 0x00000000f9fa3668, 0x00000000fa200000)\n      from space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)\n      to   space 1024K,   0% used [0x00000000fa300000, 0x00000000fa300000, 0x00000000fa400000)\n     tenured generation   total 10240K, used 0K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)\n       the space 10240K,   0% used [0x00000000fa400000, 0x00000000fa400000, 0x00000000fa400200, 0x00000000fae00000)\n     compacting perm gen  total 21248K, used 3237K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)\n       the space 21248K,  15% used [0x00000000fae00000, 0x00000000fb129600, 0x00000000fb129600, 0x00000000fc2c0000)\n    No shared spaces configured.\n    ```\n    \n    * 设置了PretenureSizeThreshold结果，可以看到新生代`def new generation   total 9216K, used 1671K` ,老年代`tenured generation   total 10240K, used 4096K`\n    ```\n    Heap\n     def new generation   total 9216K, used 1671K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)\n      eden space 8192K,  20% used [0x00000000f9a00000, 0x00000000f9ba1c08, 0x00000000fa200000)\n      from space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)\n      to   space 1024K,   0% used [0x00000000fa300000, 0x00000000fa300000, 0x00000000fa400000)\n     tenured generation   total 10240K, used 4096K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)\n       the space 10240K,  40% used [0x00000000fa400000, 0x00000000fa800010, 0x00000000fa800200, 0x00000000fae00000)\n     compacting perm gen  total 21248K, used 2938K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)\n       the space 21248K,  13% used [0x00000000fae00000, 0x00000000fb0de9e0, 0x00000000fb0dea00, 0x00000000fc2c0000)\n    No shared spaces configured.\n    ```\n### 3. 长期存活的对象将进入老年代\n* 既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别那些对象放在新生代，那些对象放在老年代中\n* 为了能做到这一点，虚拟机给每个对象定义了一个对象年龄计数器，如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每“熬过”一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数`-XX：MaxTenuringThreshold`设置。\n* 举例说明\n    ```java\n    /**\n     * 测试长期存活的对象进入老年代\n     *\n     * VM参数：\n     *      -verbose:gc -Xms20M  -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseSerialGC\n     * -XX:MaxTenuringThreshold=1 可选\n     *\n     * @author songsy\n     * @date 2019/3/11 18:37\n     */\n    public class Jvm3 {\n    \n        private static final int _1KB = 1024;\n        private static final int _1MB = 1024 * _1KB;\n    \n        public static void testAllocation() {\n            byte [] allocation1,allocation2, allocation3;\n            allocation1 = new byte[_1MB / 4];\n            allocation2 = new byte[4 * _1MB];\n            allocation3 = new byte[4 * _1MB];\n            // 虽然此处赋值为null，但未进行Gc空间仍被占用，下一行代码会执行minor GC\n            allocation3 = null;\n            // 将MaxTenuringThreshold设为1，可以看出第二次Minor GC时，年轻代已经被清空，allocation1对象因为年龄符合MaxTenuringThreshold设置的值，因此进入老年代。\n            allocation3 = new byte[4 * _1MB];\n        }\n        public static void main(String[] args) {\n            testAllocation();\n        }\n    }\n    ```\n### 4. 动态对象年龄判定\n* 为了能更好的适应不同程序的内存状态，虚拟机并不是永远的要求对象的年龄必须达到`MaxTenuringThreshold`才能晋升老年代的\n* 如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。\n\n### 5. 空间分配担保\n* 内存分配是在JVM在内存分配的时候，新生代内存不足时，把新生代的存活的对象搬到老生代，然后新生代腾出来的空间用于为分配给最新的对象。这里老生代是担保人。在不同的GC机制下，也就是不同垃圾回收器组合下，担保机制也略有不同。\n* Parallel Scavenge收集器与其他收集器在空间分配担保上有一点差别, 正常是在Minor GC前进行检查, 而Parallel Scavenge收集器在Minor GC后也会进行检查。\n* 另外当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://blog.csdn.net/v123411739/article/details/78941793 ","tags":["jvm"],"categories":["服务器"]},{"title":"JVM垃圾回收(二)垃圾回收器","url":"/2019/03/10/backend/Java/JVM/JVM垃圾回收(二)垃圾回收器/","content":"## 概述\n* 如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。\n* Java虚拟机规范对垃圾回收器应该如何实现并没有任何规定，因此不同的厂商、不同的版本的回收器可能会有很大差异，一般是提供参数供用户根据自己的应用特点和要求组合各个年代所使用的回收器\n* 这里讨论的收集器基于JDK1.7Update 14之后的HotSpot虚拟机，这个虚拟机包含的所有收集器如下图3-5所示，上半部分是新生代的回收器，下半部分是老年代的回收器\n\n![](/images/server/java/JVM/hotspot.png)\n\n### 1. Serial 收集器\n* Serial（串行）收集器收集器是最基本、历史最悠久的垃圾收集器了。\n* 大家看名字就知道这个收集器是一个单线程收集器了。它的 “单线程” 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ “Stop The World” ），直到它收集结束。\n* 新生代采用复制算法，老年代采用标记-整理算法。 \n* 虚拟机的设计者们当然知道Stop The World带来的不良用户体验，所以在后续的垃圾收集器设计中停顿时间在不断缩短（仍然还有停顿，寻找最优秀的垃圾收集器的过程仍然在继续）。\n* 但是Serial收集器有没有优于其他垃圾收集器的地方呢？当然有，它简单而高效（与其他收集器的单线程相比）。Serial收集器由于没有线程交互的开销，自然可以获得很高的单线程收集效率。Serial收集器对于运行在Client模式下的虚拟机来说是个不错的选择。\n\n![](/images/server/java/JVM/gcj1.jpg)\n\n### 2. Serial Old 收集器\n* Serial收集器的老年代版本，它同样是一个单线程收集器。\n* 它主要有两大用途：一种用途是在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用，另一种用途是作为CMS收集器的后备方案。\n\n### 3. ParNew 收集器\n* ParNew收集器其实就是Serial收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和Serial收集器完全一样。\n* 新生代采用复制算法，老年代采用标记-整理算法。 \n* 它是许多运行在Server模式下的虚拟机的首要选择，除了Serial收集器外，只有它能与CMS收集器（真正意义上的并发收集器，后面会介绍到）配合工作。\n* 并行和并发概念补充：\n    * 并行（Parallel） ：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。\n    * 并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个CPU上。\n    \n![](/images/server/java/JVM/gcj2.jpg)\n\n### 4. Parallel Old收集器\n* Parallel Scavenge收集器的老年代版本。\n* 使用多线程和“标记-整理”算法。在注重吞吐量以及CPU资源的场合，都可以优先考虑 Parallel Scavenge收集器和Parallel Old收集器。\n\n\n### 5. Parallel Scavenge收集器\n* Parallel Scavenge 收集器类似于ParNew 收集器。 那么它有什么特别之处呢？\n* Parallel Scavenge收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解的话，手工优化存在的话可以选择把内存管理优化交给虚拟机去完成也是一个不错的选择。\n```sql\n-XX:+UseParallelGC \n\n    使用Parallel收集器+ 老年代串行\n\n-XX:+UseParallelOldGC\n\n    使用Parallel收集器+ 老年代并行\n```\n* Parallel Scavenge收集器关注点是吞吐量（高效率的利用CPU）。CMS等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是CPU中用于运行用户代码的时间与CPU总消耗时间的比值。\n* 新生代采用复制算法，老年代采用标记-整理算法。 \n\n![](/images/server/java/JVM/gcj3.jpg)\n### 6. CMS收集器\n\n* CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它而非常符合在注重用户体验的应用上使用。\n* CMS（Concurrent Mark Sweep）收集器是HotSpot虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。\n* 从名字中的Mark Sweep这两个词可以看出，CMS收集器是一种 “标记-清除”算法实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：\n    * 初始标记： 暂停所有的其他线程，并记录下直接与root相连的对象，速度很快 \n    * 并发标记： 同时开启GC和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以GC线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。\n    * 重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短\n    * 并发清除： 开启用户线程，同时GC线程开始对为标记的区域做清扫。\n    \n![](/images/server/java/JVM/gcj4.jpg)\n\n* 从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：并发收集、低停顿。但是它有下面三个明显的缺点：\n    * 对CPU资源敏感\n    * 无法处理浮动垃圾\n    * 它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生\n### 7. G1收集器\n\n* G1 (Garbage-First)是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征.\n\n* 被视为JDK1.7中HotSpot虚拟机的一个重要进化特征。它具备一下特点\n    * G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。\n    * 虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但是还是保留了分代的概念。\n    * 与CMS的“标记–清理”算法不同，G1从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。\n    * 可预测的停顿：这是G1相对于CMS的另一个大优势，降低停顿时间是G1 和 CMS 共同的关注点，但G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内。\n* G1收集器的运作大致分为以下几个步骤：\n    * 初始标记\n    * 并发标记\n    * 最终标记\n    * 筛选回收\n* G1收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的Region(这也就是它的名字Garbage-First的由来)。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了GF收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://www.cnblogs.com/chengxuyuanzhilu/p/7088316.html\n* https://blog.csdn.net/qq_34337272/article/details/82177383","tags":["jvm"],"categories":["服务器"]},{"title":"JVM垃圾回收(一)垃圾回收算法","url":"/2019/03/10/backend/Java/JVM/JVM垃圾回收(一)垃圾回收算法/","content":"## 概述\n* 猿们都知道JVM的内存结构包括五大区域：程序计数器、虚拟机栈、本地方法栈、堆区、方法区。其中程序计数器、虚拟机栈、本地方法栈3个区域随线程而生、随线程而灭，因此这几个区域的内存分配和回收都具备确定性，就不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。\n\n* 而Java堆区和方法区则不一样、不一样!(怎么不一样说的朗朗上口)，这部分内存的分配和回收是动态的，正是垃圾收集器所需关注的部分。\n \n\n## 判断对象是否存活的算法\n\n* 垃圾收集器在对堆区和方法区进行回收前，首先要确定这些区域的对象哪些可以被回收，哪些暂时还不能回收，这就要用到判断对象是否存活的算法！（面试官肯定没少问你吧）\n\n### 1. 引用计数法\n\n一个对象如果没有任何引用指向它，就可认为该对象已经”消亡“，这种方法有个缺点就是无法检测到引用环的存在。\n\n### 2. 可达性分析算法\n\n* 通过一系列叫做”GCRoots“的对象作为起点向下搜索，走过的路径称为引用链,当一个对象到GCRoots没有任何引用链时，表明该对象已经”消亡“。\n\n![image](/images/server/java/JVM/gcroots.JPEG)\n\n* 上图中每个对象都存在引用链与GCRoots相连，表明对象还在，不能回收。有图中三个对象虽然互相引用，但是没有链接与GCRoots相连，则可判断它们是可回收的对象。\n    * 什么对象可以为`GCRoots`，\n        * 虚拟机栈中本地变量表引用的对象，局部变量\n        * 方法区中的类静态变量引用的对象及常量引用的对象\n        * 本地方法栈中JNI引用的对象\n    \n\n* 彻底死亡条件：\n  * 条件1：通过GC Roots作为起点的向下搜索形成引用链，没有搜到该对象，这是第一次标记。\n  * 条件2：在finalize方法中没有逃脱回收（将自身被其他对象引用），这是第一次标记的清理。\n* 引用\n    * 强引用`Object o = new Object()`\n        \n    * 软引用`SoftReference` 定义了软引用对象之后，GC可达的算法就切断与此对象的连接，那么下次垃圾回收的时候就会优化回收此对象\n        \n    * 弱引用\n    \n    * 虚引用\n\n## 垃圾回收算法\n\n### 1. 标记-清除算法\n\n![](/images/server/java/JVM/gc1.gif)\n\n* 该算法是最基础的收集算法，算法分为标记和清除两个阶段，首先标记所有需要回收的对象，在标记完成之后统一回收所有被标记的对象\n\n* 之所以说它是最基础的算法是因为后续的算法都是基于这种思路并对其不足进行改进而得到的\n\n#### 缺点\n1. 效率不足\n2. 会产生大量不连续的内存碎片，碎片过多的话再分配一个较大对象时就无容身之地从而不得不提前触发另一次垃圾收集\n\n### 2. 复制算法\n\n![](/images/server/java/JVM/gc2.gif)\n\n* 为了解决效率问题，此算法把内存划分为相等大小的两个区域，每一只使用其中一个，回收过程中将存活的对象全部复制到另一个区域中，清空原区域。在年轻代中eden区和两个survivor区就是使用了此种算法。这种算法只复制存活的对象，成本较低，而且不会出现内存碎片问题\n\n* 现在的商业虚拟机都采用这种算法来回收新生代\n\n#### 缺点\n1. 费内存，需要2倍的内存空间\n\n### 3. 标记-整理算法\n\n![](/images/server/java/JVM/gc3.gif)\n\n* 该算法标记阶段和标记-清除算法一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。所以，特别适用于存活对象多，回收对象少的情况下。效率比“标记-清理”算法低，但不会产生内存碎片。\n\n### 4. 分代收集算法\n\n![](/images/server/java/JVM/gc4.jpg)\n\n* 分代收集算法是目前大部分JVM的垃圾收集器采用的算法。它的核心思想是根据对象存活的生命周期将内存划分为若干个不同的区域。一般情况下将堆区划分为老年代（Tenured Generation）和新生代（Young Generation），在堆区之外还有一个代就是永久代（Permanet Generation）。老年代的特点是每次垃圾收集时只有少量对象需要被回收，而新生代的特点是每次垃圾回收时都有大量的对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法。\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://www.cnblogs.com/aspirant/p/8662690.html\n* http://baijiahao.baidu.com/s?id=1565631804713416&wfr=spider&for=pc\n","tags":["jvm"],"categories":["服务器"]},{"title":"JVM内存溢出异常(一)OutOfMemoryError","url":"/2019/03/04/backend/Java/JVM/JVM内存溢出异常(一)OutOfMemoryError/","content":"> 在Java虚拟机规范的描述中，除了程序计数器外，虚拟机内存的其他几个运行时区域都有可能发生OutOfMemoryError（OOM）异常的可能，下面将介绍这些运行时区域出现OOM的场景及解决方法\n\n## Java堆溢出\n* Java堆用于存储对象实例，只要不断的创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量到达最大堆的容量限制之后就会产生内存溢出异常\n\n* 测试代码\n```java\n/**\n * Java堆内存异常测试\n *\n * VM参数：\n *      -Xms20M -Xmx20M -XX:+HeapDumpOnOutOfMemoryError\n * 堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展\n * @author songsy\n * @date 2019/3/22 18:37\n */\npublic class Jvm4 {\n\n    public static void main(String[] args) {\n        List<Jvm4> list = new ArrayList<>();\n        while (true) {\n            list.add(new Jvm4());\n        }\n\n    }\n}\n```\n* 输出结果\n```sql\njava.lang.OutOfMemoryError: Java heap space\nDumping heap to java_pid17684.hprof ...\nHeap dump file created [29356301 bytes in 0.114 secs]\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOf(Arrays.java:2245)\n\tat java.util.Arrays.copyOf(Arrays.java:2219)\n\tat java.util.ArrayList.grow(ArrayList.java:242)\n\tat java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:216)\n\tat java.util.ArrayList.ensureCapacityInternal(ArrayList.java:208)\n\tat java.util.ArrayList.add(ArrayList.java:440)\n\tat com.songsy.Jvm4.main(Jvm4.java:24)\n```\n* 我们可以在vm参数中配置`-XX:+HeapDumpOnOutOfMemoryError`参数，配置完成之后如果程序发生了`OutOfMemoryError`后会生成`堆转储快照`文件`java_pid17684.hprof`\n\n* 通过`JProfiler`打开此文件，发现都是`com.songsy.Jvm4.main`对象，原因是因为虚拟机限制了堆的最大空间(-Xmx20M)。当准备创建的对象需要的内存已经超过虚拟机堆所剩的空间。虚拟机会尝试通过`full GC`来回收内存，如果不行的话，就会抛出`OutOfMemoryError`\n\n\n![](/images/server/java/JVM/dump.jpg)\n\n## 虚拟机栈和本地方法栈溢出\n* 由于在HotSpot虚拟机中并不区分虚拟机栈和本地方法栈，因此，对于HotSpot来说，虽然-Xoss参数（设置本地方法栈大小）存在，但实际上是无效的，栈容量只由-Xss参数设定。\n* 关于虚拟机栈和本地方法栈，在Java虚拟机规范中描述了两种异常：\n    * 如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出`StackOverflowError`异常。\n    * 如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出`OutOfMemoryError`异常。\n* 这里把异常分成两种情况，看似更加严谨，但却存在着一些互相重叠的地方：当栈空间无法继续分配时，到底是内存太小，还是已使用的栈空间太大，其本质上只是对同一件事情的两种描述而已。\n* 测试代码：  \n```java\n/**\n * 测试 StackOverflowError异常\n * VM Args：-Xss128k\n * @author songsy\n * @date 2019/3/22 16:31\n */\npublic class JavaVMStackSOF {\n\n    private int stackLength = 1;\n\n    public void stackLeak() {\n        stackLength++;\n        stackLeak();\n    }\n\n    public static void main(String[] args) throws Throwable {\n        JavaVMStackSOF oom = new JavaVMStackSOF();\n        try {\n            oom.stackLeak();\n        } catch (Throwable e) {\n            // 抛出StackOverflowError异常，异常出现时输出的堆栈深度相应缩小。\n            System.out.println(\"stack length:\" + oom.stackLength);\n            throw e;\n        }\n    }\n}\n```\n\n* 输出结果\n\n```java\nstack length:11424\nException in thread \"main\" java.lang.StackOverflowError\n\tat com.songsy.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:13)\n\tat com.songsy.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:14)\n\tat com.songsy.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:14)\n```\n* 测试代码2：\n```java\n/**\n * 测试 StackOverflowError异常\n * VM Args：-Xss128k\n * @author songsy\n * @date 2019/3/22 17:15\n */\npublic class JavaVMStackSOF1 {\n\n    private int stackLength = 1;\n\n    public void stackLeak() {\n        stackLength++;\n        stackLeak();\n    }\n\n    public static void main(String[] args) {\n        JavaVMStackSOF1 oom = new JavaVMStackSOF1();\n        long e0 = 1;\n        long e1 = 1;\n        long e2 = 1;\n        long e3 = 1;\n        long e4 = 1;\n        long e5 = 1;\n        long e6 = 1;\n        long e7 = 1;\n        long e8 = 1;\n        long e9 = 1;\n        long q0 = 1;\n        long q1 = 1;\n        long q2 = 1;\n        long q3 = 1;\n        long q4 = 1;\n        long q5 = 1;\n        long q6 = 1;\n        long q7 = 1;\n        long q8 = 1;\n        long q9 = 1;\n        long r0 = 1;\n        long r1 = 1;\n        long r2 = 1;\n        long r3 = 1;\n        long r4 = 1;\n        long r5 = 1;\n        long r6 = 1;\n        long r7 = 1;\n        long r8 = 1;\n        long r9 = 1;\n        long t0 = 1;\n        long t1 = 1;\n        long t2 = 1;\n        long t3 = 1;\n        long t4 = 1;\n        long t5 = 1;\n        long t6 = 1;\n        long t7 = 1;\n        long t8 = 1;\n        long t9 = 1;\n        long y0 = 1;\n        long y1 = 1;\n        long y2 = 1;\n        long y3 = 1;\n        long y4 = 1;\n        long y5 = 1;\n        long y6 = 1;\n        long y7 = 1;\n        long y8 = 1;\n        long y9 = 1;\n        long u0 = 1;\n        long u1 = 1;\n        long u2 = 1;\n        long u3 = 1;\n        long u4 = 1;\n        long u5 = 1;\n        long u6 = 1;\n        long u7 = 1;\n        long u8 = 1;\n        long u9 = 1;\n        long i0 = 1;\n        long i1 = 1;\n        long i2 = 1;\n        long i3 = 1;\n        long i4 = 1;\n        long i5 = 1;\n        long i6 = 1;\n        long i7 = 1;\n        long i8 = 1;\n        long i9 = 1;\n        long o0 = 1;\n        long o1 = 1;\n        long o2 = 1;\n        long o3 = 1;\n        long o4 = 1;\n        long o5 = 1;\n        long o6 = 1;\n        long o7 = 1;\n        long o8 = 1;\n        long o9 = 1;\n        long p0 = 1;\n        long p1 = 1;\n        long p2 = 1;\n        long p3 = 1;\n        long p4 = 1;\n        long p5 = 1;\n        long p6 = 1;\n        long p7 = 1;\n        long p8 = 1;\n        long p9 = 1;\n        long a0 = 1;\n        long a1 = 1;\n        long a2 = 1;\n        long a3 = 1;\n        long a4 = 1;\n        long a5 = 1;\n        long a6 = 1;\n        long a7 = 1;\n        long a8 = 1;\n        long a9 = 1;\n        long s0 = 1;\n        long s1 = 1;\n        long s2 = 1;\n        long s3 = 1;\n        long s4 = 1;\n        long s5 = 1;\n        long s6 = 1;\n        long s7 = 1;\n        long s8 = 1;\n        long s9 = 1;\n        long d0 = 1;\n        long d1 = 1;\n        long d2 = 1;\n        long d3 = 1;\n        long d4 = 1;\n        long d5 = 1;\n        long d6 = 1;\n        long d7 = 1;\n        long d8 = 1;\n        long d9 = 1;\n        long f0 = 1;\n        long f1 = 1;\n        long f2 = 1;\n        long f3 = 1;\n        long f4 = 1;\n        long f5 = 1;\n        long f6 = 1;\n        long f7 = 1;\n        long f8 = 1;\n        long f9 = 1;\n        long g0 = 1;\n        long g1 = 1;\n        long g2 = 1;\n        long g3 = 1;\n        long g4 = 1;\n        long g5 = 1;\n        long g6 = 1;\n        long g7 = 1;\n        long g8 = 1;\n        long g9 = 1;\n        long h0 = 1;\n        long h1 = 1;\n        long h2 = 1;\n        long h3 = 1;\n        long h4 = 1;\n        long h5 = 1;\n        long h6 = 1;\n        long h7 = 1;\n        long h8 = 1;\n        long h9 = 1;\n        long j0 = 1;\n        long j1 = 1;\n        long j2 = 1;\n        long j3 = 1;\n        long j4 = 1;\n        long j5 = 1;\n        long j6 = 1;\n        long j7 = 1;\n        long j8 = 1;\n        long j9 = 1;\n        long k0 = 1;\n        long k1 = 1;\n        long k2 = 1;\n        long k3 = 1;\n        long k4 = 1;\n        long k5 = 1;\n        long k6 = 1;\n        long k7 = 1;\n        long k8 = 1;\n        long k9 = 1;\n        long l0 = 1;\n        long l1 = 1;\n        long l2 = 1;\n        long l3 = 1;\n        long l4 = 1;\n        long l5 = 1;\n        long l6 = 1;\n        long l7 = 1;\n        long l8 = 1;\n        long l9 = 1;\n        long z0 = 1;\n        long z1 = 1;\n        long z2 = 1;\n        long z3 = 1;\n        long z4 = 1;\n        long z5 = 1;\n        long z6 = 1;\n        long z7 = 1;\n        long z8 = 1;\n        long z9 = 1;\n        long c0 = 1;\n        long c1 = 1;\n        long c2 = 1;\n        long c3 = 1;\n        long c4 = 1;\n        long c5 = 1;\n        long c6 = 1;\n        long c7 = 1;\n        long c8 = 1;\n        long c9 = 1;\n        long v0 = 1;\n        long v1 = 1;\n        long v2 = 1;\n        long v3 = 1;\n        long v4 = 1;\n        long v5 = 1;\n        long v6 = 1;\n        long v7 = 1;\n        long v8 = 1;\n        long v9 = 1;\n        long b0 = 1;\n        long b1 = 1;\n        long b2 = 1;\n        long b3 = 1;\n        long b4 = 1;\n        long b5 = 1;\n        long b6 = 1;\n        long b7 = 1;\n        long b8 = 1;\n        long b9 = 1;\n        long n0 = 1;\n        long n1 = 1;\n        long n2 = 1;\n        long n3 = 1;\n        long n4 = 1;\n        long n5 = 1;\n        long n6 = 1;\n        long n7 = 1;\n        long n8 = 1;\n        long n9 = 1;\n        long m0 = 1;\n        long m1 = 1;\n        long m2 = 1;\n        long m3 = 1;\n        long m4 = 1;\n        long m5 = 1;\n        long m6 = 1;\n        long m7 = 1;\n        long m8 = 1;\n        long m9 = 1;\n        long qq0 = 1;\n        long qq1 = 1;\n        long qq2 = 1;\n        long qq3 = 1;\n        long qq4 = 1;\n        long qq5 = 1;\n        long qq6 = 1;\n        long qq7 = 1;\n        long qq8 = 1;\n        long qq9 = 1;\n        long ww0 = 1;\n        long ww1 = 1;\n        long ww2 = 1;\n        long ww3 = 1;\n        long ww4 = 1;\n        long ww5 = 1;\n        long ww6 = 1;\n        long ww7 = 1;\n        long ww8 = 1;\n        long ww9 = 1;\n        try {\n            oom.stackLeak();\n        } catch (Throwable e) {\n            System.out.println(\"stack length:\" + oom.stackLength);\n            throw e;\n        }\n    }\n}\n```\n\n* 实验结果表明：在单个线程下，无论是由于栈帧太大还是虚拟机栈容量太小，当内存无法分配的时候，虚拟机抛出的都是StackOverflowError异常。\n\n* 如果测试时不限于单线程，通过不断地建立线程的方式倒是可以产生内存溢出异常，如代码清单2-5所示。但是这样产生的内存溢出异常与栈空间是否足够大并不存在任何联系，或者准确地说，在这种情况下，为每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。\n\n* 其实原因不难理解，操作系统分配给每个进程的内存是有限制的，譬如32位的Windows限制为2GB。虚拟机提供了参数来控制Java堆和方法区的这两部分内存的最大值。剩余的内存为2GB（操作系统限制）减去Xmx（最大堆容量），再减去MaxPermSize（最大方法区容量），程序计数器消耗内存很小，可以忽略掉。如果虚拟机进程本身耗费的内存不计算在内，剩下的内存就由虚拟机栈和本地方法栈“瓜分”了。每个线程分配到的栈容量越大，可以建立的线程数量自然就越少，建立线程时就越容易把剩下的内存耗尽。\n\n## 方法区和运行时常量池溢出\n* 由于运行时常量池是方法区的一部分，因此这两个区域的溢出测试就放在一起进行。前面提到JDK 1.7开始逐步“去永久代”的事情，在此就以测试代码观察一下这件事对程序的实际影响。\n\n* `String.intern()`是一个Native方法，它的作用是：如果字符串常量池中已经包含一个等于此`String`对象的字符串，则返回代表池中这个字符串的`String`对象；否则，将此`String`对象包含的字符串添加到常量池中，并且返回此`String`对象的引用。在`JDK 1.6`及之前的版本中，由于常量池分配在永久代内，我们可以通过`-XX:PermSize`和`-XX:MaxPermSize`限制方法区大小，从而间接限制其中常量池的容量，如代码清单2-6所示。\n\n* 测试代码\n```java\n/**\n * VM Args：-XX:PermSize=10M -XX:MaxPermSize=10M\n * @author songsy\n * @date 2019/3/22 17:31\n */\npublic class RuntimeConstantPoolOOM {\n\n    public static void main(String[] args) {\n        // 使用List保持着常量池引用，避免Full GC回收常量池行为\n        List<String> list = new ArrayList<String>();\n        // 10MB的PermSize在integer范围内足够产生OOM了\n        int i = 0;\n        while (true) {\n            list.add(String.valueOf(i++).intern());\n            System.out.println(String.valueOf(i++).intern());\n        }\n    }\n}\n```\n* 输出结果\n```java\nException in thread \"main\" java.lang.OutOfMemoryError: PermGen space  \nat java.lang.String.intern(Native Method)  \nat org.fenixsoft.oom.RuntimeConstantPoolOOM.main(RuntimeConstantPoolOOM.java:18) \n```\n* 从运行结果中可以看到，运行时常量池溢出，在OutOfMemoryError后面跟随的提示信息是“PermGen space”，说明运行时常量池属于方法区（HotSpot虚拟机中的永久代）的一部分。\n\n* 方法区用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。对于这些区域的测试，基本的思路是运行时产生大量的类去填满方法区，直到溢出。虽然直接使用Java SE API也可以动态产生类（如反射时的GeneratedConstructorAccessor和动态代理等），但在本次实验中操作起来比较麻烦。在代码清单2-8中，笔者借助CGLib直接操作字节码运行时生成了大量的动态类。\n\n* 值得特别注意的是，我们在这个例子中模拟的场景并非纯粹是一个实验，这样的应用经常会出现在实际应用中：当前的很多主流框架，如Spring、Hibernate，在对类进行增强时，都会使用到CGLib这类字节码技术，增强的类越多，就需要越大的方法区来保证动态生成的Class可以加载入内存。另外，JVM上的动态语言（例如Groovy等）通常都会持续创建类来实现语言的动态性，随着这类语言的流行，也越来越容易遇到与代码清单2-8相似的溢出场景。\n\n* 代码清单2-8　借助CGLib使方法区出现内存溢出异常\n\n```java\n/**\n * VM Args： -XX:PermSize=10M -XX:MaxPermSize=10M\n * @author songsy\n * @date 2019/3/22 17:45\n */\npublic class JavaMethodAreaOOM {\n\n    public static void main(String[] args) {\n        while (true) {\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(OOMObject.class);\n            enhancer.setUseCache(false);\n            enhancer.setCallback(new MethodInterceptor() {\n                public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n                    return proxy.invokeSuper(obj, args);\n                }\n            });\n            enhancer.create();\n        }\n    }\n\n    static class OOMObject {\n\n    }\n\n}\n```\n* 输出结果\n```java\nCaused by: java.lang.OutOfMemoryError: PermGen space  \nat java.lang.ClassLoader.defineClass1(Native Method)  \nat java.lang.ClassLoader.defineClassCond(ClassLoader.java:632)  \nat java.lang.ClassLoader.defineClass(ClassLoader.java:616)  \n... 8 more \n```\n* 方法区溢出也是一种常见的内存溢出异常，一个类要被垃圾收集器回收掉，判定条件是比较苛刻的。在经常动态生成大量Class的应用中，需要特别注意类的回收状况。这类场景除了上面提到的程序使用了CGLib字节码增强和动态语言之外，常见的还有：大量JSP或动态产生JSP文件的应用（JSP第一次运行时需要编译为Java类）、基于OSGi的应用（即使是同一个类文件，被不同的加载器加载也会视为不同的类）等。\n\n## 本机直接内存溢出\n* 直接内存并不是虚拟机运行时数据区的一部分，也不是Java 虚拟机规范中定义的内存区域。在JDK1.4 中新加入了NIO(New Input/Output)类，引入了一种基于通道（Channel）与缓冲区（Buffer）的 I/O 方式，它可以使用 native 函数库直接分配堆外内存，然后通过一个存储在Java堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。\n\n* 特点\n    * 本机直接内存的分配不会受到Java 堆大小的限制，受到本机总内存大小限制\n    * 直接内存也可以由 -XX:MaxDirectMemorySize 指定\n    * 直接内存申请空间耗费更高的性能\n    * 直接内存IO读写的性能要优于普通的堆内存\n* 当我们的需要频繁访问大的内存而不是申请和释放空间时，通过使用直接内存可以提高性能。\n  \n* 直接内存溢出测试，测试代码如下，运行时添加参数`-Xmx20M -XX:MaxDirectMemorySize=10M` 设置降低直接内存的空间来加快异常的抛出\n\n* 测试代码：\n```java\n/**\n * 本机直接内存溢出\n * VM args:-Xmx20M -XX:MaxDirectMemorySize=10M\n * @author songsy\n * @date 2019/3/22 18:08\n */\npublic class DirectMemoryOOM {\n\n    private static final int _1MB = 1024 * 1024;\n\n    public static void main(String[] args) throws Exception {\n        Field unsafeField = Unsafe.class.getDeclaredFields()[0];\n        unsafeField.setAccessible(true);\n        Unsafe unsafe = (Unsafe) unsafeField.get(null);\n        while (true) {\n            unsafe.allocateMemory(_1MB);\n        }\n    }\n}\n```\n* 输出结果\n```java\nException in thread \"main\" java.lang.OutOfMemoryError\n\tat sun.misc.Unsafe.allocateMemory(Native Method)\n\tat com.songsy.DirectMemoryOOM.main(DirectMemoryOOM.java:22)\n```\n* 由DirectMemory导致的内存溢出，一个明显的特征就是再Heap Dump文件中不会看见明显的异常，如果读者发现OOM之后Dump文件很小，而程序中又直接或间接的使用了NIO，那就可以考虑检查一下是不是这方面的原因。\n\n## 内存溢出及内存泄漏\n\n### 1、内存溢出 out of memory\n\n* 是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出\n\n#### 1.1 方法区溢出 out of memory: PermGen space\n\n#### 1.2 本机直接内存溢出\n\n\n### 2、内存泄露 memory leak\n \n* 是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光\n\n* memory leak会最终会导致out of memory！\n\n* 内存溢出就是你要求分配的内存超出了系统能给你的，系统不能满足需求，于是产生溢出。 \n\n* 内存泄漏是指你向系统申请分配内存进行使用(new)，可是使用完了以后却不归还(delete)，结果你申请到的那块内存你自己也不能再访问（也许你把它的地址给弄丢了），而系统也不能再次将它分配给需要的程序。一个盘子用尽各种方法只能装4个果子，你装了5个，结果掉倒地上不能吃了。这就是溢出！比方说栈，栈满时再做进栈必定产生空间溢出，叫上溢，栈空时再做退栈也产生空间溢出，称为下溢。就是分配的内存不足以放下数据项序列,称为内存溢出. \n\n* 从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终消耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到\n\n\n### 3、引起内存溢出的原因\n* 内存中加载的数据量过于庞大，如一次从数据库取出过多数据；\n* 集合类中有对对象的引用，使用完后未清空，使得JVM不能回收；\n* 代码中存在死循环或循环产生过多重复的对象实体；\n* 使用的第三方软件中的BUG；\n* 启动参数内存值设定的过小；\n\n### 4、内存溢出的解决方案\n* 修改JVM启动参数，直接增加内存。(-Xms，-Xmx参数一定不要忘记加。)\n* 检查错误日志，查看“OutOfMemory”错误前是否有其它异常或错误。\n* 对代码进行走查和分析，找出可能发生内存溢出的位置。\n\n## 其他\n> java -Xmx3550m -Xms3550m -Xmn2g -Xss128k\n* -Xmx3550m：设置JVM最大可用内存为3550M。\n* -Xms3550m：设置JVM促使内存为3550m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。\n* -Xmn2g：设置年轻代大小为2G。整个JVM内存大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。\n* -Xss128k： 设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内 存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://www.cnblogs.com/Sharley/p/5285045.html\n* https://blog.csdn.net/u012552052/article/details/44204735\n* https://blog.csdn.net/sells2012/article/details/18656263","tags":["jvm"],"categories":["服务器"]},{"title":"JVM运行时数据区域(六)方法区","url":"/2019/03/04/backend/Java/JVM/JVM运行时数据区域(六)方法区/","content":"## 概述\n* 方法区（Method Area）与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java 堆区分开来。\n\n* 对于习惯在HotSpot 虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot 虚拟机的设计团队选择把GC 分代收集扩展至方法区，或者说使用永久代来实现方法区而已。对于其他虚拟机（如BEA JRockit、IBM J9 等）来说是不存在永久代的概念的。即使是HotSpot 虚拟机本身，根据官方发布的路线图信息，现在也有放弃永久代并“搬家”至Native Memory 来实现方法区的规划了。\n\n* Java 虚拟机规范对这个区域的限制非常宽松，除了和Java 堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。在Sun 公司的BUG 列表中，曾出现过的若干个严重的BUG 就是由于低版本的HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。根据Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出\nOutOfMemoryError 异常。\n\n### 运行时常量池\n\n* 运行时常量池运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant PoolTable），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。\n\n* Java 虚拟机对Class 文件的每一部分（自然也包括常量池）的格式都有严格的规* 定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、* 装载和执行。但对于运行时常量池，Java 虚拟机规范没有做任何细节的要求，不同的* 提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除* 了保存Class 文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常* 量池中。\n\n* 运行时常量池相对于Class 文件常量池的另外一个重要特征是具备动态性，Java 语* 言并不要求常量一定只能在编译期产生，也就是并非预置入Class 文件中常量池的内容* 才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发* 人员利用得比较多的便是String 类的intern() 方法。\n\n* 既然运行时常量池是方法区的一部分，自然会受到方法区内存的限制，当常量池无* 法再申请到内存时会抛出OutOfMemoryError 异常 \n\n\n## 额外\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n\n","tags":["jvm"],"categories":["服务器"]},{"title":"JVM运行时数据区域(五)堆","url":"/2019/03/04/backend/Java/JVM/JVM运行时数据区域(五)堆/","content":"## 概述\n* 堆是JVM所管理的内存中国最大的一块，是被所有Java线程锁共享的，不是线程安全的，在JVM启动时创建。堆是存储Java对象的地方，这一点Java虚拟机规范中描述是：所有的对象实例以及数组都要在堆上分配。Java堆是GC管理的主要区域，从内存回收的角度来看，由于现在GC基本都采用分代收集算法，所以Java堆还可以细分为：新生代和老年代；新生代再细致一点有Eden空间、From Survivor空间、To Survivor空间等。\n\n* 对于大多数应用来说，Java 堆（Java Heap）是Java 虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java 虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配①，但是随着JIT 编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换②优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。\n\n* Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆”（GarbageCollected Heap，幸好国内没翻译成“垃圾堆”）。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java 堆中还可以细分为：新生代和老年代；再细致一点的有Eden 空间、From Survivor 空间、To Survivor 空间等。如果从内存分配的角度看，线程共享的Java 堆中可能划分出多个线程私有的分配缓冲区（Thread LocalAllocation Buffer，TLAB）。不过，无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。在本章中，我们仅仅针对内存区域的作用进行讨论，Java 堆中的上述各个区域的分配和回收等细节将会是下一章的主题。\n\n* 根据Java 虚拟机规范的规定，Java 堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms 控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常。\n## 解析\n\n* 所有通过new创建的对象的内存都在堆中分配，堆被划分为新生代和老年代和永久代，\n\n### 1. 新生代\n\n![](/images/server/java/JVM/eden.jpg)\n\n* 新创建的对象都是用新生代分配内存\n* 新生代又被进一步划分为Eden和Survivor区，Eden空间不足时，触发Minor GC，这时会把存活的对象转移进Survivor区，而Survivor由FromSpace和ToSpace组成。\n    * Eden区：Java新对象的出生地（如果新创建的对象占用内存很大，则直接分配到老年代）。当Eden区内存不够的时候就会触发MinorGC，对新生代区进行一次垃圾回收。\n    * ServivorFrom：上一次GC的幸存者，作为这一次GC的被扫描者。\n    * ServivorTo：保留了一次MinorGC过程中的幸存者。\n \n* MinorGC的过程：MinorGC采用复制算法。首先，把Eden和ServivorFrom区域中存活的对象复制到ServicorTo区域（如果有对象的年龄以及达到了老年的标准，则赋值到老年代区），同时把这些对象的年龄+1（如果ServicorTo不够位置了就放到老年区）；然后，清空Eden和ServicorFrom中的对象；最后，ServicorTo和ServicorFrom互换，原ServicorTo成为下一次GC时的ServicorFrom区。\n\n* 新生代分为Eden、FromSpace、ToSpace是为了尽量让对象在新生代MinorGC，如果到了老年代之后MajorGC执行时间长\n\n### 2. 老年代\n* 老年代用于存放经过多次Minor GC之后依然存活的对象。\n\n* 老年代的对象比较稳定，所以MajorGC不会频繁执行。在进行MajorGC前一般都先进行了一次MinorGC，使得有新生代的对象晋身入老年代，导致空间不够用时才触发。当无法找到足够大的连续空间分配给新创建的较大对象时也会提前触发一次MajorGC进行垃圾回收腾出空间。\n\n* MajorGC采用标记—清除算法：首先扫描一次所有老年代，标记出存活的对象，然后回收没有标记的对象。MajorGC的耗时比较长，因为要扫描再回收。MajorGC会产生内存碎片，为了减少内存损耗，我们一般需要进行合并或者标记出来方便下次直接分配。\n\n* 当老年代也满了装不下的时候，就会抛出OOM（Out of Memory）异常。\n\n### 3. 永久代\n* 指内存的永久保存区域，主要存放Class和Meta（元数据）的信息,Class在被加载的时候被放入永久区域. 它和和存放实例的区域不同,GC不会在主程序运行期对永久区域进行清理。所以这也导致了永久代的区域会随着加载的Class的增多而胀满，最终抛出OOM异常。\n\n*  在Java8中，永久代已经被移除，被一个称为“元数据区”（元空间）的区域所取代。\n\n* 空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入 native memory, 字符串池和类的静态变量放入java堆中. 这样可以加载多少类的元数据就不再由MaxPermSize控制, 而由系统的实际可用空间来控制.\n\n* 采用元空间而不用永久代的几点原因：\n    * 1、为了解决永久代的OOM问题，元数据和class对象存在永久代中，容易出现性能问题和内存溢出。\n    * 2、类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出（因为堆空间有限，此消彼长）。\n    * 3、永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。\n    * 4、Oracle 可能会将HotSpot 与 JRockit 合二为一。\n\n![](/images/server/java/JVM/gc-generation.gif)\n\n* -Xmx20M -XX:MaxHeapSize简写，表示设置堆容量的最大值为20M，必须以M为单位。将-Xmx和-Xms设置为一样可以避免堆自动扩展，减少程序运行时的垃圾回收次数，从而提供性能。大的项目-Xmx和-Xms一般都要设置到10G、20G甚至还要高\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://www.cnblogs.com/Sharley/p/5285045.html\n* https://www.cnblogs.com/ygj0930/p/6522828.html\n\n","tags":["jvm"],"categories":["服务器"]},{"title":"JVM运行时数据区域(四)本地方法栈","url":"/2019/03/04/backend/Java/JVM/JVM运行时数据区域(四)本地方法栈/","content":"## 概述\n* 本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。\n\n## 解析\n\n## Native Method\n* 简单地讲，一个Native Method就是一个java调用非java代码的接口。一个Native Method是这样一个java的方法：该方法的实现由非java语言实现，比如C。这个特征并非java所特有，很多其它的编程语言都有这一机制，比如在C＋＋中，你可以用extern \"C\"告知C＋＋编译器去调用一个C的函数\n\n* 例如 `Object.java` 类下就有很多`Native Method` \n```java\npublic final native Class<?> getClass();\n```\n* 本地方法非常有用，因为它有效地扩充了jvm.事实上，我们所写的java代码已经用到了本地方法，在sun的java的并发（多线程）的机制实现中，许多与操作系统的接触点都用到了本地方法，这使得java程序能够超越java运行时的界限。有了本地方法，java程序可以做任何应用层次的任务。\n\n* 为什么要使用Native Method\n    * 与java环境外交互：有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。\n    * 与操作系统交互：JVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎 样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。\n    * Sun's Java： Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows 95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。\n\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://blog.csdn.net/qq_28885149/article/details/52672475\n\n","tags":["jvm"],"categories":["服务器"]},{"title":"JVM运行时数据区域(三)Java虚拟机栈","url":"/2019/03/04/backend/Java/JVM/JVM运行时数据区域(三)Java虚拟机栈/","content":"## 何为虚拟机栈\n* 虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存放局部变量表、操作数栈、动态链接、方法出口等信息，每个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。\n \n* 与程序计数器一样，Java虚拟机栈也是线程私有的，他的生命周期与线程相同。\n\n## 解析\n\n* 执行引擎运行的所有字节码指令只针对当前栈帧进行操作，在概念模型上，典型的栈帧结构如图所示： \n\n![](/images/server/java/JVM/stackFrame.jpg)\n\n### 栈帧数据结构\n* 每一个栈帧包含的内容有局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。在编译代码时，栈帧需要多大的局部变量表，多深的操作数栈都可以完全确定的，并写入到方法表的code属性中\n\n* 我们先来理解一下虚拟机是如何执行一个方法的，这样我们才能理解为什么栈帧需要这些部分，这些部分分别提供了什么功能。首先我们的方法被编译成了字节码，并生成了可执行的命令。通过程序计数器，虚拟机会一行一行的执行命令，直到进入一个新的方法入口，对应虚拟机栈也就是新的栈帧入栈，当前栈帧改变，又或者遇到返回指令或出现异常结束了方法，对应虚拟机也就是出栈。\n\n\n#### 1、局部变量表\n* 是一片逻辑连续的内存空间，最小单位是Slot，用来存放方法参数和方法内部定义的局部变量\n\n#### 2、操作数栈\n* 每个栈帧都包含一个被叫做操作数栈的后进先出的栈。叫操作栈，或者操作数栈。\n\n* 栈桢刚创建时，里面的操作数栈是空的。\n\n* Java虚拟机提供指令来让操作数栈对一些数据进行入栈操作，比如可以把局部变量表里的数据、实例的字段等数据入栈。\n\n* 同时也有指令来支持出栈操作。\n \n* 向其他方法传参的参数，也存在操作数栈中。\n\n* 其他方法返回的结果，返回时存在操作数栈中。\n\n#### 3、动态链接\n* 一个方法调用另一个方法，或者一个类使用另一个类的成员变量时，总得知道被调用者的名字吧？(你可以不认识它本身，但调用它就需要知道他的名字)。符号引用就相当于名字，这些被调用者的名字就存放在Java字节码文件里。名字是知道了，但是Java真正运行起来的时候，真的能靠这个名字（符号引用）就能找到相应的类和方法吗？需要解析成相应的直接引用，利用直接引用来准确地找到。\n\n* 举个例子，就相当于我在0X0300H这个地址存入了一个数526，为了方便编程，我把这个给这个地址起了个别名叫A, 以后我编程的时候(运行之前)可以用别名A来暗示访问这个空间的数据，但其实程序运行起来后，实质上还是去寻找0X0300H这片空间来获取526这个数据的。\n\n* 这样的符号引用和直接引用在运行时进行解析和链接的过程，叫动态链接。\n#### 4、方法返回地址\n\n* 返回一个值给调用它的方法，方法正常完成发生在一个方法执行过程 中遇到了方法返回的字节码指令（§2.11.8）的时候，使用哪种返回指令取决于方法返回值的数 据类型（如果有返回值的话）。\n\n#### 5、附加信息\n\n\n## 参考转载\n\n* 周志明版  《深入理解Java虚拟机》\n* https://blog.csdn.net/ychenfeng/article/details/77247807\n* https://blog.csdn.net/u014296316/article/details/82668670 \n\n","tags":["jvm"],"categories":["服务器"]},{"title":"JVM运行时数据区域(二)程序计数器","url":"/2019/03/04/backend/Java/JVM/JVM运行时数据区域(二)程序计数器/","content":"## 概述\n程序计数器是一块较小的内存空间，它可以看做是当前线程所执行的字节码的`行号指示器`，在虚拟机的概念模型里（仅仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时，就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳准、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成\n\n\n## 特点\n* 线程私有的\n* 是java虚拟机规范里面， 唯一 一个 没有规定任何 `OutOfMemoryError` 情况的区域\n* 生命周期随着线程，线程启动而产生，线程结束而消亡\n\n\n## 作用\n* 程序计数器，可以看做是当前线程执行的字节码的 行号指示器 ，这句话；要理解这句话，需要先知道字节码文件长什么样子，看下面的代码\n```java\n// java 文件被翻译为字节码的时候，字节码大概类似于下面的样子\npublic void haha(){\n// 原来的 haha 方法内部的 java 代码，被翻译为下面的类似于汇编语言的指令\n    0 xxxx ....\n    2 xxxx ....\n    4 xx  ...\n    5 xxx ...\n}\n```\n* 上面左边的 0、2、4、5 ，就是类似于字节码的行号（实际是指令的偏移地址），程序计数器中保存中的值，就是它们；字节码解释器，就是根据它们，来执行程序的\n\n* 理解了程序计数器，就好理解它的这些特点了；我们都知道，Java是支持多线程的，当CPU执行权从 A 线程，转移到 B 线程的时候，JVM就要暂时挂起线程 A ，去执行线程 B ；当线程 A 再次得到CPU执行权的时候，又会挂起B线程，继续执行 A 线程 ；\n\n* 我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？\n\n* 答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；程序计数器里面保存的是 当前线程执行的字节码的行号（看着像行号，其实是指令地址）；\n\n* 那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，`程序计数器的内存空间是线程私有的` ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！\n\n* 那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是线程被创建开始执行的时候，就要一同被`创建`；\n\n* 程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，`jvm虚拟机规范，也就没有规定，也是唯一一个没有规定 OutOfMemoryError 异常 的区域`；\n\n* 当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）；原因很简单：本地方法是C++/C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录 ；\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://blog.csdn.net/youngyouth/article/details/79868299\n\n\n\n","tags":["jvm"],"categories":["服务器"]},{"title":"JVM运行时数据区域(一)介绍","url":"/2019/03/04/backend/Java/JVM/JVM运行时数据区域(一)介绍/","content":"## 前言\n* Java虚拟机在执行Java程序的过程中会将其管理的内存划分为若干个不同的数据区域，这些区域有各自的用途、创建和销毁的时间，有些区域随虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束来建立和销毁。Java虚拟机所管理的内存包括以下几个运行时数据区域，如图\n\n![](/images/server/java/JVM/jvm1.png)\n\n* Java 虚拟机的内存结构分为两部分\n    * 线程共享的（数据）\n        * 方法区\n        * Java 堆\n    * 线程私有的（指令）\n        * 虚拟机栈\n        * 本地方法栈\n        * 程序计数器\n## 运行时数据区域\n1. 程序计数器：指向当前线程正在执行的字节码指令。线程私有的。\n2. 虚拟机栈：虚拟机栈是Java执行方法的内存模型。每个方法被执行的时候，都会创建一个栈帧，把栈帧压人栈，当方法正常返回或者抛出未捕获的异常时，栈帧就会出栈\n3. 本地方法栈：调用本地native的内存模型\n4. 方法区：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据\n5. 堆（Heap）：Java对象存储的地方\n\n## 参考转载\n* 周志明版  《深入理解Java虚拟机》\n* https://segmentfault.com/a/1190000014395186\n\n\n\n","tags":["jvm"],"categories":["服务器"]},{"title":"Spring Mvc源码(九)RequestBody注解解析之RequestResponseBodyMethodProcessor","url":"/2019/03/03/backend/spring/sourceCodeAnalysis/Spring Mvc源码(九)RequestBody注解解析之RequestResponseBodyMethodProcessor/","content":"## 1.1 前言\n* `RequestResponseBodyMethodProcessor` 的作用是处理被`@RequestBody`注解的参数，和`@ResponseBody`注解的返回值\n\n* 查看`RequestResponseBodyMethodProcessor`继承关系，可以看到它是同时继承了`HandlerMethodArgumentResolver`和`HandlerMethodReturnValueHandler`，所以就是说它同时具有参数对象解析及结果对象解析的功能，野心很大\n\n![](/images/server/spring/spring-mvc/RequestResponseBodyMethodProcessor.png)\n\n## 2.1 解析\n> RequestResponseBodyMethodProcessor.java\n```java\n/**\n * 处理被@RequestBody注解的参数，和@ResponseBody注解的返回值\n *\n * Resolves method arguments annotated with {@code @RequestBody} and handles return\n * values from methods annotated with {@code @ResponseBody} by reading and writing\n * to the body of the request or response with an {@link HttpMessageConverter}.\n *\n * <p>An {@code @RequestBody} method argument is also validated if it is annotated\n * with {@code @javax.validation.Valid}. In case of validation failure,\n * {@link MethodArgumentNotValidException} is raised and results in an HTTP 400\n * response status code if {@link DefaultHandlerExceptionResolver} is configured.\n *\n * @author Arjen Poutsma\n * @author Rossen Stoyanchev\n * @author Juergen Hoeller\n * @since 3.1\n */\npublic class RequestResponseBodyMethodProcessor extends AbstractMessageConverterMethodProcessor {\n\n\t/**\n\t * Basic constructor with converters only. Suitable for resolving\n\t * {@code @RequestBody}. For handling {@code @ResponseBody} consider also\n\t * providing a {@code ContentNegotiationManager}.\n\t */\n\tpublic RequestResponseBodyMethodProcessor(List<HttpMessageConverter<?>> converters) {\n\t\tsuper(converters);\n\t}\n\n\t/**\n\t * Basic constructor with converters and {@code ContentNegotiationManager}.\n\t * Suitable for resolving {@code @RequestBody} and handling\n\t * {@code @ResponseBody} without {@code Request~} or\n\t * {@code ResponseBodyAdvice}.\n\t */\n\tpublic RequestResponseBodyMethodProcessor(List<HttpMessageConverter<?>> converters,\n\t\t\tContentNegotiationManager manager) {\n\n\t\tsuper(converters, manager);\n\t}\n\n\t/**\n\t * Complete constructor for resolving {@code @RequestBody} method arguments.\n\t * For handling {@code @ResponseBody} consider also providing a\n\t * {@code ContentNegotiationManager}.\n\t * @since 4.2\n\t */\n\tpublic RequestResponseBodyMethodProcessor(List<HttpMessageConverter<?>> converters,\n\t\t\tList<Object> requestResponseBodyAdvice) {\n\n\t\tsuper(converters, null, requestResponseBodyAdvice);\n\t}\n\n\t/**\n\t * Complete constructor for resolving {@code @RequestBody} and handling\n\t * {@code @ResponseBody}.\n\t */\n\tpublic RequestResponseBodyMethodProcessor(List<HttpMessageConverter<?>> converters,\n\t\t\tContentNegotiationManager manager, List<Object> requestResponseBodyAdvice) {\n\n\t\tsuper(converters, manager, requestResponseBodyAdvice);\n\t}\n\n\t/**\n\t * 检测参数是否使用了@RequestBody注解\n\t *\n\t * @param parameter the method parameter to check\n\t * @return\n\t */\n\t@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) {\n\t\treturn parameter.hasParameterAnnotation(RequestBody.class);\n\t}\n\n\t/**\n\t * 检测返回结果是否使用了@ResponseBody注解\n\t *\n\t * @param returnType the method return type to check\n\t * @return\n\t */\n\t@Override\n\tpublic boolean supportsReturnType(MethodParameter returnType) {\n\t\treturn (AnnotatedElementUtils.hasAnnotation(returnType.getContainingClass(), ResponseBody.class) ||\n\t\t\t\treturnType.hasMethodAnnotation(ResponseBody.class));\n\t}\n\n\t/**\n\t * 处理被@RequestBody注解的参数\n\t *\n\t * Throws MethodArgumentNotValidException if validation fails.\n\t * @throws HttpMessageNotReadableException if {@link RequestBody#required()}\n\t * is {@code true} and there is no body content or if there is no suitable\n\t * converter to read the content with.\n\t */\n\t@Override\n\tpublic Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,\n\t\t\tNativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n\n\t\tparameter = parameter.nestedIfOptional();\n\t\tObject arg = readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType());\n\t\tString name = Conventions.getVariableNameForParameter(parameter);\n\n\t\tWebDataBinder binder = binderFactory.createBinder(webRequest, arg, name);\n\t\tif (arg != null) {\n\t\t\tvalidateIfApplicable(binder, parameter);\n\t\t\tif (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {\n\t\t\t\tthrow new MethodArgumentNotValidException(parameter, binder.getBindingResult());\n\t\t\t}\n\t\t}\n\t\tmavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());\n\n\t\treturn adaptArgumentIfNecessary(arg, parameter);\n\t}\n\n\t/**\n\t *\n\t * @param webRequest the current request\n\t * @param parameter the method parameter descriptor (may be {@code null})\n\t * @param paramType the type of the argument value to be created\n\t * @param <T>\n\t * @return\n\t * @throws IOException\n\t * @throws HttpMediaTypeNotSupportedException\n\t * @throws HttpMessageNotReadableException\n\t */\n\t@Override\n\tprotected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,\n\t\t\tType paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {\n\n\t\tHttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);\n\t\tServletServerHttpRequest inputMessage = new ServletServerHttpRequest(servletRequest);\n\n\t\tObject arg = readWithMessageConverters(inputMessage, parameter, paramType);\n\t\tif (arg == null) {\n\t\t\tif (checkRequired(parameter)) {\n\t\t\t\tthrow new HttpMessageNotReadableException(\"Required request body is missing: \" +\n\t\t\t\t\t\tparameter.getMethod().toGenericString());\n\t\t\t}\n\t\t}\n\t\treturn arg;\n\t}\n\n\t/**\n\t * 检查RequestBody注解是否required\n\t * @param parameter\n\t * @return\n\t */\n\tprotected boolean checkRequired(MethodParameter parameter) {\n\t\treturn (parameter.getParameterAnnotation(RequestBody.class).required() && !parameter.isOptional());\n\t}\n\n\t/**\n\t * 处理@ResponseBody注解的返回值\n\t *\n\t * @param returnValue the value returned from the handler method\n\t * @param returnType the type of the return value. This type must have\n\t * previously been passed to {@link #supportsReturnType} which must\n\t * have returned {@code true}.\n\t * @param mavContainer the ModelAndViewContainer for the current request\n\t * @param webRequest the current request\n\t * @throws IOException\n\t * @throws HttpMediaTypeNotAcceptableException\n\t * @throws HttpMessageNotWritableException\n\t */\n\t@Override\n\tpublic void handleReturnValue(Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n\t\t\tthrows IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n\t\tmavContainer.setRequestHandled(true);\n\t\tServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n\t\tServletServerHttpResponse outputMessage = createOutputMessage(webRequest);\n\n\t\t// Try even with null return value. ResponseBodyAdvice could get involved.\n\t\twriteWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n\t}\n\n}\n```\n### 2.1.1 处理被@RequestBody注解的参数解析\n* 参数解析需要关注此类是怎么实现的`HandlerMethodArgumentResolver`接口的\n```java\npublic interface HandlerMethodArgumentResolver {\n\n\t/**\n\t * 是否支持\n\t *\n\t * Whether the given {@linkplain MethodParameter method parameter} is\n\t * supported by this resolver.\n\t * @param parameter the method parameter to check\n\t * @return {@code true} if this resolver supports the supplied parameter;\n\t * {@code false} otherwise\n\t */\n\tboolean supportsParameter(MethodParameter parameter);\n\n\t/**\n\t * 根据request解析方法参数值\n\t *\n\t * Resolves a method parameter into an argument value from a given request.\n\t * A {@link ModelAndViewContainer} provides access to the model for the\n\t * request. A {@link WebDataBinderFactory} provides a way to create\n\t * a {@link WebDataBinder} instance when needed for data binding and\n\t * type conversion purposes.\n\t * @param parameter the method parameter to resolve. This parameter must\n\t * have previously been passed to {@link #supportsParameter} which must\n\t * have returned {@code true}.\n\t * @param mavContainer the ModelAndViewContainer for the current request\n\t * @param webRequest the current request\n\t * @param binderFactory a factory for creating {@link WebDataBinder} instances\n\t * @return the resolved argument value, or {@code null}\n\t * @throws Exception in case of errors with the preparation of argument values\n\t */\n\tObject resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,\n\t\t\tNativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;\n\n}\n``` \n* 查看`boolean supportsParameter(MethodParameter parameter);`方法的实现，实现很简单就是判断是否使用了@RequestBody注解\n```java\n\t/**\n\t * 检测参数是否使用了@RequestBody注解\n\t *\n\t * @param parameter the method parameter to check\n\t * @return\n\t */\n\t@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) {\n\t\treturn parameter.hasParameterAnnotation(RequestBody.class);\n\t}\n```\n\n\n* 查看`public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) ` 方法的实现\n```java\n\t/**\n\t * 处理被@RequestBody注解的参数\n\t *\n\t * Throws MethodArgumentNotValidException if validation fails.\n\t * @throws HttpMessageNotReadableException if {@link RequestBody#required()}\n\t * is {@code true} and there is no body content or if there is no suitable\n\t * converter to read the content with.\n\t */\n\t@Override\n\tpublic Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n\n\t\tparameter = parameter.nestedIfOptional();\n\t\t// 主体逻辑\n\t\tObject arg = readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType());\n\t\tString name = Conventions.getVariableNameForParameter(parameter);\n\n\t\tWebDataBinder binder = binderFactory.createBinder(webRequest, arg, name);\n\t\tif (arg != null) {\n\t\t\t// 校验参数是否正确 @Valid注解开启\n\t\t\tvalidateIfApplicable(binder, parameter);\n\t\t\tif (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {\n\t\t\t\tthrow new MethodArgumentNotValidException(parameter, binder.getBindingResult());\n\t\t\t}\n\t\t}\n\t\tmavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());\n\t\treturn adaptArgumentIfNecessary(arg, parameter);\n\t}\n```\n* 进入`Object arg = readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType());` \n```java\n\t@Override\n\tprotected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,\n\t\t\tType paramType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {\n\n\t\tHttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);\n\t\tServletServerHttpRequest inputMessage = new ServletServerHttpRequest(servletRequest);\n\t    // 主体逻辑\n\t\tObject arg = readWithMessageConverters(inputMessage, parameter, paramType);\n\t\tif (arg == null) {\n\t\t\tif (checkRequired(parameter)) {\n\t\t\t\tthrow new HttpMessageNotReadableException(\"Required request body is missing: \" +\n\t\t\t\t\t\tparameter.getMethod().toGenericString());\n\t\t\t}\n\t\t}\n\t\treturn arg;\n\t}\n```\n* 继续进入`Object arg = readWithMessageConverters(inputMessage, parameter, paramType);` ，可以看到是遍历 `this.messageConverters` 选择适合的消息处理器来处理参数\n```java\n\t/**\n\t * Create the method argument value of the expected parameter type by reading\n\t * from the given HttpInputMessage.\n\t * @param <T> the expected type of the argument value to be created\n\t * @param inputMessage the HTTP input message representing the current request\n\t * @param parameter the method parameter descriptor (may be {@code null})\n\t * @param targetType the target type, not necessarily the same as the method\n\t * parameter type, e.g. for {@code HttpEntity<String>}.\n\t * @return the created method argument value\n\t * @throws IOException if the reading from the request fails\n\t * @throws HttpMediaTypeNotSupportedException if no suitable message converter is found\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,\n\t\t\tType targetType) throws IOException, HttpMediaTypeNotSupportedException, HttpMessageNotReadableException {\n\n\t\tMediaType contentType;\n\t\tboolean noContentType = false;\n\t\ttry {\n\t\t\tcontentType = inputMessage.getHeaders().getContentType();\n\t\t}\n\t\tcatch (InvalidMediaTypeException ex) {\n\t\t\tthrow new HttpMediaTypeNotSupportedException(ex.getMessage());\n\t\t}\n\t\tif (contentType == null) {\n\t\t\tnoContentType = true;\n\t\t\tcontentType = MediaType.APPLICATION_OCTET_STREAM;\n\t\t}\n\n\t\tClass<?> contextClass = (parameter != null ? parameter.getContainingClass() : null);\n\t\tClass<T> targetClass = (targetType instanceof Class ? (Class<T>) targetType : null);\n\t\tif (targetClass == null) {\n\t\t\tResolvableType resolvableType = (parameter != null ?\n\t\t\t\t\tResolvableType.forMethodParameter(parameter) : ResolvableType.forType(targetType));\n\t\t\ttargetClass = (Class<T>) resolvableType.resolve();\n\t\t}\n\n\t\tHttpMethod httpMethod = ((HttpRequest) inputMessage).getMethod();\n\t\tObject body = NO_VALUE;\n\n\t\ttry {\n\t\t\tinputMessage = new EmptyBodyCheckingHttpInputMessage(inputMessage);\n\n\t\t\t// 遍历 this.messageConverters 选择适合的消息处理器来处理参数\n\t\t\tfor (HttpMessageConverter<?> converter : this.messageConverters) {\n\t\t\t\tClass<HttpMessageConverter<?>> converterType = (Class<HttpMessageConverter<?>>) converter.getClass();\n\t\t\t\tif (converter instanceof GenericHttpMessageConverter) {\n\t\t\t\t\tGenericHttpMessageConverter<?> genericConverter = (GenericHttpMessageConverter<?>) converter;\n\t\t\t\t\t// 判断是否适合处理参数\n\t\t\t\t\tif (genericConverter.canRead(targetType, contextClass, contentType)) {\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Read [\" + targetType + \"] as \\\"\" + contentType + \"\\\" with [\" + converter + \"]\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (inputMessage.getBody() != null) {\n\t\t\t\t\t\t\tinputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType);\n\t\t\t\t\t\t\tbody = genericConverter.read(targetType, contextClass, inputMessage);\n\t\t\t\t\t\t\tbody = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbody = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (targetClass != null) {\n\t\t\t\t\tif (converter.canRead(targetClass, contentType)) {\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Read [\" + targetType + \"] as \\\"\" + contentType + \"\\\" with [\" + converter + \"]\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (inputMessage.getBody() != null) {\n\t\t\t\t\t\t\tinputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType);\n\t\t\t\t\t\t\tbody = ((HttpMessageConverter<T>) converter).read(targetClass, inputMessage);\n\t\t\t\t\t\t\tbody = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbody = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new HttpMessageNotReadableException(\"I/O error while reading input message\", ex);\n\t\t}\n\n\t\tif (body == NO_VALUE) {\n\t\t\tif (httpMethod == null || !SUPPORTED_METHODS.contains(httpMethod) ||\n\t\t\t\t\t(noContentType && inputMessage.getBody() == null)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tthrow new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes);\n\t\t}\n\n\t\treturn body;\n\t}\n```\n\n* 查看`this.messageConverters`有哪些呢？见下图\n\n![](/images/server/spring/spring-mvc/MessageConverters.jpg)\n\n* 下图是主要`MessageConverter`的功能介绍\n\n![](/images/server/spring/spring-mvc/MessageConverter.png)\n\n### 2.1.2 处理被@ResponseBody注解的返回值解析\n\n* 返回值解析需要关注此类是怎样实现`HandlerMethodArgumentResolver`接口的方法的\n```java\npublic interface HandlerMethodReturnValueHandler {\n\n\t/**\n\t * 是否支持\n\t *\n\t * Whether the given {@linkplain MethodParameter method return type} is\n\t * supported by this handler.\n\t * @param returnType the method return type to check\n\t * @return {@code true} if this handler supports the supplied return type;\n\t * {@code false} otherwise\n\t */\n\tboolean supportsReturnType(MethodParameter returnType);\n\n\t/**\n\t * 处理结果集\n\t *\n\t * Handle the given return value by adding attributes to the model and\n\t * setting a view or setting the\n\t * {@link ModelAndViewContainer#setRequestHandled} flag to {@code true}\n\t * to indicate the response has been handled directly.\n\t * @param returnValue the value returned from the handler method\n\t * @param returnType the type of the return value. This type must have\n\t * previously been passed to {@link #supportsReturnType} which must\n\t * have returned {@code true}.\n\t * @param mavContainer the ModelAndViewContainer for the current request\n\t * @param webRequest the current request\n\t * @throws Exception if the return value handling results in an error\n\t */\n\tvoid handleReturnValue(Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;\n\n}\n```\n* 查看`boolean supportsReturnType(MethodParameter returnType);`的方法的实现，实现也很简单就是判断是否使用了@ResponseBody注解\n```java\n\t/**\n\t * 检测返回结果是否使用了@ResponseBody注解\n\t *\n\t * @param returnType the method return type to check\n\t * @return\n\t */\n\t@Override\n\tpublic boolean supportsReturnType(MethodParameter returnType) {\n\t\treturn (AnnotatedElementUtils.hasAnnotation(returnType.getContainingClass(), ResponseBody.class) ||\n\t\t\t\treturnType.hasMethodAnnotation(ResponseBody.class));\n\t}\n```\n* 查看`public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest)`的实现\n```java\n\t/**\n\t * 处理@ResponseBody注解的返回值\n\t *\n\t * @param returnValue the value returned from the handler method\n\t * @param returnType the type of the return value. This type must have\n\t * previously been passed to {@link #supportsReturnType} which must\n\t * have returned {@code true}.\n\t * @param mavContainer the ModelAndViewContainer for the current request\n\t * @param webRequest the current request\n\t * @throws IOException\n\t * @throws HttpMediaTypeNotAcceptableException\n\t * @throws HttpMessageNotWritableException\n\t */\n\t@Override\n\tpublic void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n\t\t\tthrows IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n\t\tmavContainer.setRequestHandled(true);\n\t\tServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n\t\tServletServerHttpResponse outputMessage = createOutputMessage(webRequest);\n\n\t\t// Try even with null return value. ResponseBodyAdvice could get involved.\n\t\twriteWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n\t}\n```\n\n## 3.1 总结\n* 我们知道，Http请求和响应报文本质上都是一串字符串，当请求报文来到java世界，它会被封装成为一个ServletInputStream的输入流，供我们读取报文。响应报文则是通过一个ServletOutputStream的输出流，来输出响应报文，我们得到输入输出流之后需要把它转成我们的java实体类对象，这个是怎样转换的呢，就是通过我们的`HttpMessageConverter`消息转换器来实现的\n* 下图是`HttpMessageConverter`的工作流程图\n \n  ![](/images/server/spring/spring-mvc/HttpMessageConverter.png)\n\n\n## 4.1 参考\n\n官方文档: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\n\nhttps://my.oschina.net/lichhao/blog/172562","tags":["spring"],"categories":["服务器"]},{"title":"Spring Mvc源码(八)RequestMappingHanlderAdapter","url":"/2019/03/03/backend/spring/sourceCodeAnalysis/Spring Mvc源码(八)RequestMappingHanlderAdapter/","content":"## 1.1 前言\n* `RequestMappingHanlderAdapter`是 `HanlderAdapter` 中最复杂的也是最常用的处理适配器，他的作用是根据`HanlderMapping`找到的`Handler`调用我们`Controller` 里的方法\n* 既然是调用方法我们推测它的工作应该主要设及3步， 1、方法参数绑定，2、方法执行，3、返回结果处理 ， 方法执行的流程已经在代码里写好了，重点是参数绑定及结果处理，各个方法参数类型不同个数不同，想想就复杂，下面来看人家是怎么做的\n\n## 2.1 RequestMappingHanlderAdapter初始化解析\n* 查看`RequestMappingHanlderAdapter`的继承关系\n\n![](/images/server/spring/spring-mvc/RequestMappingHandlerAdapter.png)\n\n> RequestMappingHandlerAdapter.java\n\n```java\n/**\n * An {@link AbstractHandlerMethodAdapter} that supports {@link HandlerMethod}s\n * with their method argument and return type signature, as defined via\n * {@code @RequestMapping}.\n *\n * <p>Support for custom argument and return value types can be added via\n * {@link #setCustomArgumentResolvers} and {@link #setCustomReturnValueHandlers}.\n * Or alternatively, to re-configure all argument and return value types,\n * use {@link #setArgumentResolvers} and {@link #setReturnValueHandlers}.\n *\n * @author Rossen Stoyanchev\n * @author Juergen Hoeller\n * @since 3.1\n * @see HandlerMethodArgumentResolver\n * @see HandlerMethodReturnValueHandler\n */\npublic class RequestMappingHandlerAdapter extends AbstractHandlerMethodAdapter\n\t\timplements BeanFactoryAware, InitializingBean {\n\n\tprivate List<HandlerMethodArgumentResolver> customArgumentResolvers;\n\n\t// 用于给处理器方法和注释了@ModelAttribute的方法设置参数\n\tprivate HandlerMethodArgumentResolverComposite argumentResolvers;\n\n\t// 用于添加了@initBinder的方法设置参数\n\tprivate HandlerMethodArgumentResolverComposite initBinderArgumentResolvers;\n\n\tprivate List<HandlerMethodReturnValueHandler> customReturnValueHandlers;\n\n\t// 用于将处理器的返回值处理为ModelAndView类型\n\tprivate HandlerMethodReturnValueHandlerComposite returnValueHandlers;\n\n\tprivate List<ModelAndViewResolver> modelAndViewResolvers;\n\n\tprivate ContentNegotiationManager contentNegotiationManager = new ContentNegotiationManager();\n\n\tprivate List<HttpMessageConverter<?>> messageConverters;\n\n\tprivate List<Object> requestResponseBodyAdvice = new ArrayList<Object>();\n\n\tprivate WebBindingInitializer webBindingInitializer;\n\n\tprivate AsyncTaskExecutor taskExecutor = new SimpleAsyncTaskExecutor(\"MvcAsync\");\n\n\tprivate Long asyncRequestTimeout;\n\n\tprivate CallableProcessingInterceptor[] callableInterceptors = new CallableProcessingInterceptor[0];\n\n\tprivate DeferredResultProcessingInterceptor[] deferredResultInterceptors = new DeferredResultProcessingInterceptor[0];\n\n\tprivate boolean ignoreDefaultModelOnRedirect = false;\n\n\tprivate int cacheSecondsForSessionAttributeHandlers = 0;\n\n\tprivate boolean synchronizeOnSession = false;\n\n\tprivate SessionAttributeStore sessionAttributeStore = new DefaultSessionAttributeStore();\n\n\tprivate ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();\n\n\tprivate ConfigurableBeanFactory beanFactory;\n\n\n\tprivate final Map<Class<?>, SessionAttributesHandler> sessionAttributesHandlerCache =\n\t\t\tnew ConcurrentHashMap<Class<?>, SessionAttributesHandler>(64);\n\n\tprivate final Map<Class<?>, Set<Method>> initBinderCache = new ConcurrentHashMap<Class<?>, Set<Method>>(64);\n\n\tprivate final Map<ControllerAdviceBean, Set<Method>> initBinderAdviceCache =\n\t\t\tnew LinkedHashMap<ControllerAdviceBean, Set<Method>>();\n\n\tprivate final Map<Class<?>, Set<Method>> modelAttributeCache = new ConcurrentHashMap<Class<?>, Set<Method>>(64);\n\n\tprivate final Map<ControllerAdviceBean, Set<Method>> modelAttributeAdviceCache =\n\t\t\tnew LinkedHashMap<ControllerAdviceBean, Set<Method>>();\n\n\n\tpublic RequestMappingHandlerAdapter() {\n\t\tStringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n\t\tstringHttpMessageConverter.setWriteAcceptCharset(false);  // see SPR-7316\n\n\t\tthis.messageConverters = new ArrayList<HttpMessageConverter<?>>(4);\n\t\tthis.messageConverters.add(new ByteArrayHttpMessageConverter());\n\t\tthis.messageConverters.add(stringHttpMessageConverter);\n\t\tthis.messageConverters.add(new SourceHttpMessageConverter<Source>());\n\t\tthis.messageConverters.add(new AllEncompassingFormHttpMessageConverter());\n\t}\n\n```\n* 可以看到实现了`InitializingBean`接口，这个方法注册了`this.argumentResolvers` `this.initBinderArgumentResolvers` `this.returnValueHandlers`\n```java\n\t@Override\n\tpublic void afterPropertiesSet() {\n\t\t// Do this first, it may add ResponseBody advice beans\n\t\tinitControllerAdviceCache();\n\n\t\tif (this.argumentResolvers == null) {\n\t\t\tList<HandlerMethodArgumentResolver> resolvers = getDefaultArgumentResolvers();\n\t\t\tthis.argumentResolvers = new HandlerMethodArgumentResolverComposite().addResolvers(resolvers);\n\t\t}\n\t\tif (this.initBinderArgumentResolvers == null) {\n\t\t\tList<HandlerMethodArgumentResolver> resolvers = getDefaultInitBinderArgumentResolvers();\n\t\t\tthis.initBinderArgumentResolvers = new HandlerMethodArgumentResolverComposite().addResolvers(resolvers);\n\t\t}\n\t\tif (this.returnValueHandlers == null) {\n\t\t\tList<HandlerMethodReturnValueHandler> handlers = getDefaultReturnValueHandlers();\n\t\t\tthis.returnValueHandlers = new HandlerMethodReturnValueHandlerComposite().addHandlers(handlers);\n\t\t}\n\t}\n```\n* 例如`getDefaultArgumentResolvers方法`，可以看到是直接写死了有那些默认的参数解析组件\n```java\n\t/**\n\t * Return the list of argument resolvers to use including built-in resolvers\n\t * and custom resolvers provided via {@link #setCustomArgumentResolvers}.\n\t */\n\tprivate List<HandlerMethodArgumentResolver> getDefaultArgumentResolvers() {\n\t\tList<HandlerMethodArgumentResolver> resolvers = new ArrayList<HandlerMethodArgumentResolver>();\n\n\t\t// Annotation-based argument resolution\n\t\tresolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), false));\n\t\tresolvers.add(new RequestParamMapMethodArgumentResolver());\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolver());\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolver());\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.MatrixVariableMethodArgumentResolver());\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.MatrixVariableMapMethodArgumentResolver());\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor(false));\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor(getMessageConverters(), this.requestResponseBodyAdvice));\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver(getMessageConverters(), this.requestResponseBodyAdvice));\n\t\tresolvers.add(new RequestHeaderMethodArgumentResolver(getBeanFactory()));\n\t\tresolvers.add(new RequestHeaderMapMethodArgumentResolver());\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.ServletCookieValueMethodArgumentResolver(getBeanFactory()));\n\t\tresolvers.add(new ExpressionValueMethodArgumentResolver(getBeanFactory()));\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.SessionAttributeMethodArgumentResolver());\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.RequestAttributeMethodArgumentResolver());\n\n\t\t// Type-based argument resolution\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver());\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.ServletResponseMethodArgumentResolver());\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor(getMessageConverters(), this.requestResponseBodyAdvice));\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesMethodArgumentResolver());\n\t\tresolvers.add(new ModelMethodProcessor());\n\t\tresolvers.add(new MapMethodProcessor());\n\t\tresolvers.add(new ErrorsMethodArgumentResolver());\n\t\tresolvers.add(new SessionStatusMethodArgumentResolver());\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilderMethodArgumentResolver());\n\n\t\t// Custom arguments\n\t\tif (getCustomArgumentResolvers() != null) {\n\t\t\tresolvers.addAll(getCustomArgumentResolvers());\n\t\t}\n\n\t\t// Catch-all\n\t\tresolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), true));\n\t\tresolvers.add(new org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor(true));\n\n\t\treturn resolvers;\n\t}\n\n```\n\n## 2.2 处理解析\n* `RequestMappingHanlderAdapter` 处理请求入口方法是`handleInternal(HttpServletRequest request,HttpServletResponse response, HandlerMethod handlerMethod) `，进入该方法\n```java\n\t@Override\n\tprotected ModelAndView handleInternal(HttpServletRequest request,\n\t\t\t\t\t\t\t\t\t\t  HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n\t\tModelAndView mav;\n\t\tcheckRequest(request);\n\t\t// Execute invokeHandlerMethod in synchronized block if required.\n\t\tif (this.synchronizeOnSession) {\n\t\t\tHttpSession session = request.getSession(false);\n\t\t\tif (session != null) {\n\t\t\t\tObject mutex = WebUtils.getSessionMutex(session);\n\t\t\t\tsynchronized (mutex) {\n\t\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// No HttpSession available -> no mutex necessary\n\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t\t}\n\t\t} else {\n\t\t\t// 具体执行请求的处理\n\t\t\t// No synchronization on session demanded at all...\n\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t}\n\t\tif (!response.containsHeader(HEADER_CACHE_CONTROL)) {\n\t\t\tif (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) {\n\t\t\t\tapplyCacheSeconds(response, this.cacheSecondsForSessionAttributeHandlers);\n\t\t\t} else {\n\t\t\t\tprepareResponse(response);\n\t\t\t}\n\t\t}\n\t\treturn mav;\n\t}\n```\n* 关注`mav = invokeHandlerMethod(request, response, handlerMethod);`方法，进入该方法之后可以看到该方法主要是一些参数准备及组装各种处理单元，先备兵粮\n```java\n\t/**\n\t * Invoke the {@link RequestMapping} handler method preparing a {@link ModelAndView}\n\t * if view resolution is required.\n\t * @since 4.2\n\t * @see #createInvocableHandlerMethod(HandlerMethod)\n\t */\n\tprotected ModelAndView invokeHandlerMethod(HttpServletRequest request,\n\t\t\tHttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n\n\t\tServletWebRequest webRequest = new ServletWebRequest(request, response);\n\t\ttry {\n\t\t\t// 创建WebDataBinder，WebDataBinder用于参数绑定，将符合条件的注释了@InitBinder的方法找出来\n\t\t\tWebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);\n\t\t\t// 用来处理Model，在处理器具体处理之前对Model进行初始化，在处理完请求之后对Model参数进行更新\n\t\t\tModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);\n\n\t\t\t// 继承自HandlerMethod，实际请求的处理就是通过它来执行的，包括参数绑定，请求处理，以及返回值处理都是在它里面完成\n\t\t\torg.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);\n\t\t\tinvocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\n\t\t\tinvocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\n\t\t\tinvocableMethod.setDataBinderFactory(binderFactory);\n\t\t\tinvocableMethod.setParameterNameDiscoverer(this.parameterNameDiscoverer);\n\n\t\t\t// ModelAndViewContainer承载着整个请求过程中数据的传递工作\n\t\t\tModelAndViewContainer mavContainer = new ModelAndViewContainer();\n\t\t\tmavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));\n\t\t\tmodelFactory.initModel(webRequest, mavContainer, invocableMethod);\n\t\t\tmavContainer.setIgnoreDefaultModelOnRedirect(this.ignoreDefaultModelOnRedirect);\n\n\t\t\tAsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);\n\t\t\tasyncWebRequest.setTimeout(this.asyncRequestTimeout);\n\n\t\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\t\t\tasyncManager.setTaskExecutor(this.taskExecutor);\n\t\t\tasyncManager.setAsyncWebRequest(asyncWebRequest);\n\t\t\tasyncManager.registerCallableInterceptors(this.callableInterceptors);\n\t\t\tasyncManager.registerDeferredResultInterceptors(this.deferredResultInterceptors);\n\n\t\t\tif (asyncManager.hasConcurrentResult()) {\n\t\t\t\tObject result = asyncManager.getConcurrentResult();\n\t\t\t\tmavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];\n\t\t\t\tasyncManager.clearConcurrentResult();\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Found concurrent result value [\" + result + \"]\");\n\t\t\t\t}\n\t\t\t\tinvocableMethod = invocableMethod.wrapConcurrentResult(result);\n\t\t\t}\n\t\t\t// 执行方法\n\t\t\tinvocableMethod.invokeAndHandle(webRequest, mavContainer);\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn getModelAndView(mavContainer, modelFactory, webRequest);\n\t\t}\n\t\tfinally {\n\t\t\twebRequest.requestCompleted();\n\t\t}\n\t}\n```\n\n* 这个方法重点关注`ServletInvocableHandlerMethod`此对象，该类继承自`HandlerMethod`，实际请求的处理就是通过它来执行的，包括参数绑定，请求处理，以及返回值处理都是在它里面完成\n\n```java\n// 继承自HandlerMethod，实际请求的处理就是通过它来执行的，包括参数绑定，请求处理，以及返回值处理都是在它里面完成\norg.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);\ninvocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\ninvocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\ninvocableMethod.setDataBinderFactory(binderFactory);\ninvocableMethod.setParameterNameDiscoverer(this.parameterNameDiscoverer);\n```\n\n* 查看上面代码可以看到这里设置了参数解析器 结果解析器 等等\n\n* `ServletInvocableHandlerMethod` 解析\n\n    * 先查看`ServletInvocableHandlerMethod`的继承关系，此类的继承关系有三层\n        \n    ![](/images/server/spring/spring-mvc/ServletInvocableHandlerMethod.png)\n    \n    * 顶层`HandlerMethod`类，该类封装了方法调用相关信息，比如是属于哪个`bean`下的的，那个`Method`，方法的参数`MethodParameter[]`等等\n    ```java\n        /**\n         * 封装了方法调用相关信息,子类还提供调用,参数准备和返回值处理的职责\n         * \n         * Encapsulates information about a handler method consisting of a\n         * {@linkplain #getMethod() method} and a {@linkplain #getBean() bean}.\n         * Provides convenient access to method parameters, the method return value,\n         * method annotations, etc.\n         *\n         * <p>The class may be created with a bean instance or with a bean name\n         * (e.g. lazy-init bean, prototype bean). Use {@link #createWithResolvedBean()}\n         * to obtain a {@code HandlerMethod} instance with a bean instance resolved\n         * through the associated {@link BeanFactory}.\n         *\n         * @author Arjen Poutsma\n         * @author Rossen Stoyanchev\n         * @author Juergen Hoeller\n         * @author Sam Brannen\n         * @since 3.1\n         */\n        public class HandlerMethod {\n        \n            /** Logger that is available to subclasses */\n            protected final Log logger = LogFactory.getLog(getClass());\n        \n            private final Object bean;\n        \n            private final BeanFactory beanFactory;\n        \n            private final Class<?> beanType;\n        \n            private final Method method;\n        \n            private final Method bridgedMethod;\n        \n            /**\n             * 方法的参数\n             */\n            private final MethodParameter[] parameters;\n        \n            private HttpStatus responseStatus;\n        \n            private String responseStatusReason;\n        \n            private HandlerMethod resolvedFromHandlerMethod;\n          \n            ...\n    ```\n    * `InvocableHandlerMethod` 类 `HandlerMethod`类的基础上添加了方法调用功能及注册了参数解析组件\n    ```java\n        /**\n         * 在 HandlerMethod类的基础上添加了方法调用功能及注册了参数解析组件\n         *\n         * Provides a method for invoking the handler method for a given request after resolving its\n         * method argument values through registered {@link HandlerMethodArgumentResolver}s.\n         *\n         * <p>Argument resolution often requires a {@link WebDataBinder} for data binding or for type\n         * conversion. Use the {@link #setDataBinderFactory(WebDataBinderFactory)} property to supply\n         * a binder factory to pass to argument resolvers.\n         *\n         * <p>Use {@link #setHandlerMethodArgumentResolvers} to customize the list of argument resolvers.\n         *\n         * @author Rossen Stoyanchev\n         * @author Juergen Hoeller\n         * @since 3.1\n         */\n        public class InvocableHandlerMethod extends HandlerMethod {\n        \n            /**\n             * 用于参数解析器ArgumentResolver\n             */\n            private WebDataBinderFactory dataBinderFactory;\n        \n            /**\n             * 解析参数\n             */\n            private org.springframework.web.method.support.HandlerMethodArgumentResolverComposite argumentResolvers = new org.springframework.web.method.support.HandlerMethodArgumentResolverComposite();\n        \n            /**\n             * 用来获取参数名\n             */\n            private ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();\n        \n        \n            /**\n             * Create an instance from a {@code HandlerMethod}.\n             */\n            public InvocableHandlerMethod(HandlerMethod handlerMethod) {\n                super(handlerMethod);\n            }\n            \n            ...\n    ```\n* 得到`ServletInvocableHandlerMethod` 对象之后进入到`ServletInvocableHandlerMethod` 类的`invocableMethod.invokeAndHandle(webRequest, mavContainer);` 方法，可以说这个方法是`RequestMappingHandlerAdapter`的核心方法，可以看到`Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);` 是执行了方法体，得到`returnValue` 之后就是调用`this.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);`该方法处理结果对象\n```java\n\t/**\n\t * Invoke the method and handle the return value through one of the\n\t * configured {@link HandlerMethodReturnValueHandler}s.\n\t * @param webRequest the current request\n\t * @param mavContainer the ModelAndViewContainer for this request\n\t * @param providedArgs \"given\" arguments matched by type (not resolved)\n\t */\n\tpublic void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);\n\t\tsetResponseStatus(webRequest);\n\n\t\tif (returnValue == null) {\n\t\t\tif (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {\n\t\t\t\tmavContainer.setRequestHandled(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (StringUtils.hasText(getResponseStatusReason())) {\n\t\t\tmavContainer.setRequestHandled(true);\n\t\t\treturn;\n\t\t}\n\n\t\tmavContainer.setRequestHandled(false);\n\t\ttry {\n\t\t\tthis.returnValueHandlers.handleReturnValue(\n\t\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(getReturnValueHandlingErrorMessage(\"Error handling return value\", returnValue), ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n* 进入`Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);` 方法，可以看到该方法很简单，先是得到方法参数`Object[] args`，然后执行`Object returnValue = doInvoke(args);` 该方法得到结果\n```java\n\t/**\n\t * Invoke the method after resolving its argument values in the context of the given request.\n\t * <p>Argument values are commonly resolved through {@link HandlerMethodArgumentResolver}s.\n\t * The {@code providedArgs} parameter however may supply argument values to be used directly,\n\t * i.e. without argument resolution. Examples of provided argument values include a\n\t * {@link WebDataBinder}, a {@link SessionStatus}, or a thrown exception instance.\n\t * Provided argument values are checked before argument resolvers.\n\t * @param request the current request\n\t * @param mavContainer the ModelAndViewContainer for this request\n\t * @param providedArgs \"given\" arguments matched by type, not resolved\n\t * @return the raw value returned by the invoked method\n\t * @exception Exception raised if no suitable argument resolver can be found,\n\t * or if the method raised an exception\n\t */\n\tpublic Object invokeForRequest(NativeWebRequest request, org.springframework.web.method.support.ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Invoking '\" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +\n\t\t\t\t\t\"' with arguments \" + Arrays.toString(args));\n\t\t}\n\t\tObject returnValue = doInvoke(args);\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Method [\" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +\n\t\t\t\t\t\"] returned [\" + returnValue + \"]\");\n\t\t}\n\t\treturn returnValue;\n\t}\n```\n\n### 2.1.1 方法参数绑定\n\n* 方法参数的绑定需要关注`Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);` 这行代码，先进入该方法，可以看到该方法有两种解析形式 `1： providedArgs 2：argumentResolvers`\n```java\n\t/**\n\t * 根据当前请求获取方法的请求参数\n\t * Get the method argument values for the current request.\n\t * 两种解析形式 1： providedArgs 2：argumentResolvers 在RequestMappingHandlerAdapter中只有argumentResolvers解析\n\t *\n\t */\n\tprivate Object[] getMethodArgumentValues(NativeWebRequest request, org.springframework.web.method.support.ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\t\t// 获取方法的参数，在HanderMethod中\n\t\tMethodParameter[] parameters = getMethodParameters();\n\t\t// 用于保存解析出参数的值\n\t\tObject[] args = new Object[parameters.length];\n\t\t// 遍历每一个参数进行解析\n\t\tfor (int i = 0; i < parameters.length; i++) {\n\t\t\tMethodParameter parameter = parameters[i];\n\t\t\t// 给Parameter设置参数名解析器\n\t\t\tparameter.initParameterNameDiscovery(this.parameterNameDiscoverer);\n\t\t\t// 如果相应类型的参数已经在providedArgs中提供了，则直接设置到parameter\n\t\t\targs[i] = resolveProvidedArgument(parameter, providedArgs);\n\t\t\tif (args[i] != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.argumentResolvers.supportsParameter(parameter)) {\n\t\t\t\ttry {\n\t\t\t\t\t// 使用argumentResolvers解析参数\n\t\t\t\t\targs[i] = this.argumentResolvers.resolveArgument(\n\t\t\t\t\t\t\tparameter, mavContainer, request, this.dataBinderFactory);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(getArgumentResolutionErrorMessage(\"Failed to resolve\", i), ex);\n\t\t\t\t\t}\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 解析不出来，抛异常\n\t\t\tif (args[i] == null) {\n\t\t\t\tthrow new IllegalStateException(\"Could not resolve method parameter at index \" +\n\t\t\t\t\t\tparameter.getParameterIndex() + \" in \" + parameter.getMethod().toGenericString() +\n\t\t\t\t\t\t\": \" + getArgumentResolutionErrorMessage(\"No suitable resolver for\", i));\n\t\t\t}\n\t\t}\n\t\treturn args;\n\t}\n```\n* 在`RequestMappingHandlerAdapter`中只有`argumentResolvers`解析，因为`\tinvocableMethod.invokeAndHandle(webRequest, mavContainer);` 只传了两个参数，到了`Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);` 方法之后也是没有传入`providedArgs`的\n\n* `argumentResolvers` 存放在`HandlerMethodArgumentResolverComposite` 类中，所有的`ArgumentResolver`都存放在`List<HandlerMethodArgumentResolver> argumentResolvers`中，也可以看到该类也做了一个`argumentResolverCacheCache`处理，也是为了性能\n```java\n/**\n * HandlerMethodArgumentResolver 的仓库\n * \n * Resolves method parameters by delegating to a list of registered {@link HandlerMethodArgumentResolver}s.\n * Previously resolved method parameters are cached for faster lookups.\n *\n * @author Rossen Stoyanchev\n * @author Juergen Hoeller\n * @since 3.1\n */\npublic class HandlerMethodArgumentResolverComposite implements HandlerMethodArgumentResolver {\n\n\tprotected final Log logger = LogFactory.getLog(getClass());\n\n\tprivate final List<HandlerMethodArgumentResolver> argumentResolvers =\n\t\t\tnew LinkedList<HandlerMethodArgumentResolver>();\n\n\tprivate final Map<MethodParameter, HandlerMethodArgumentResolver> argumentResolverCache =\n\t\t\tnew ConcurrentHashMap<MethodParameter, HandlerMethodArgumentResolver>(256);\n\n\n\t/**\n\t * Add the given {@link HandlerMethodArgumentResolver}.\n\t */\n\tpublic HandlerMethodArgumentResolverComposite addResolver(HandlerMethodArgumentResolver resolver) {\n\t\tthis.argumentResolvers.add(resolver);\n\t\treturn this;\n\t}\n```\n\n* 通过调试可以看到有下面这些`argumentResolvers`，看类名称是不是很熟悉，就是我们平常使用的`@RequestBody` `@RequestParam` 是一一对应的，还是专人做专事，可以得出不同的参数是有不同的参数解析组件来专门处理的\n\n![](/images/server/spring/spring-mvc/argumentResolvers.jpg)\n\n* 下面来看主要`XXXArgumentResolver`的作用\n\n```java\n1. SessionAttributeMethodArgumentResolver\n    针对 被 @SessionAttribute 修饰的参数起作用, 参数的获取一般通过 HttpServletRequest.getAttribute(name, RequestAttributes.SCOPE_SESSION)    \n2. RequestParamMethodArgumentResolver\n    针对被 @RequestParam 注解修饰, 但类型不是 Map, 或类型是 Map, 并且 @RequestParam 中指定 name, 一般通过 MultipartHttpServletRequest | HttpServletRequest 获取数据\n3. RequestHeaderMethodArgumentResolver\n    针对 参数被 RequestHeader 注解, 并且 参数不是 Map 类型, 数据通过 HttpServletRequest.getHeaderValues(name) 获取\n4. RequestAttributeMethodArgumentResolver\n    针对 被 @RequestAttribute 修饰的参数起作用, 参数的获取一般通过 HttpServletRequest.getAttribute(name, RequestAttributes.SCOPE_REQUEST)\n5. PathVariableMethodArgumentResolver\n    解决被注解 @PathVariable 注释的参数 <- 这个注解对应的是 uri 中的数据, 在解析 URI 中已经进行解析好了 <- 在 RequestMappingInfoHandlerMapping.handleMatch -> getPathMatcher().extractUriTemplateVariables\n6. MatrixVariableMethodArgumentResolver\n    针对被 @MatrixVariable 注解修饰的参数起作用,  从 HttpServletRequest 中获取去除 ; 的 URI Template Variables 获取数据\n7. ExpressionValueMethodArgumentResolver\n    针对被 @Value 修饰, 返回 ExpressionValueNamedValueInfo\n8. ServletCookieValueMethodArgumentResolver\n    针对被 @CookieValue 修饰, 通过 HttpServletRequest.getCookies 获取对应数据\n```\n\n* 然后进入`HandlerMethodArgumentResolverComposite`类的`args[i] = this.argumentResolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);` 方法，可以看到逻辑十分简单，就是遍历`this.argumentResolvers` 然后做了个缓存处理，得到`HandlerMethodArgumentResolver`之后就是调用`resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);`方法了，该方法是参数解析的主体方法\n```java\n\t/**\n\t * 迭代注册过的 HandlerMethodArgumentResolver, 然后找到对应的ArgumentResolver\n\t * Iterate over registered {@link HandlerMethodArgumentResolver}s and invoke the one that supports it.\n\t * @throws IllegalStateException if no suitable {@link HandlerMethodArgumentResolver} is found.\n\t */\n\t@Override\n\tpublic Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,\n\t\t\tNativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n\n\t\tHandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);\n\t\tif (resolver == null) {\n\t\t\tthrow new IllegalArgumentException(\"Unknown parameter type [\" + parameter.getParameterType().getName() + \"]\");\n\t\t}\n\t\treturn resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);\n\t}\n\n\t/**\n\t * 先从缓存里取，没有的再遍历，注意这里是先来先得的\n\t * Find a registered {@link HandlerMethodArgumentResolver} that supports the given method parameter.\n\t */\n\tprivate HandlerMethodArgumentResolver getArgumentResolver(MethodParameter parameter) {\n\t\tHandlerMethodArgumentResolver result = this.argumentResolverCache.get(parameter);\n\t\tif (result == null) {\n\t\t\tfor (HandlerMethodArgumentResolver methodArgumentResolver : this.argumentResolvers) {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"Testing if argument resolver [\" + methodArgumentResolver + \"] supports [\" +\n\t\t\t\t\t\t\tparameter.getGenericParameterType() + \"]\");\n\t\t\t\t}\n\t\t\t\tif (methodArgumentResolver.supportsParameter(parameter)) {\n\t\t\t\t\tresult = methodArgumentResolver;\n\t\t\t\t\tthis.argumentResolverCache.put(parameter, result);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n```\n* 再来回顾`HandlerMethodArgumentResolver`接口，该接口就两个方法\n```java\n/**\n * 方法参数解析器\n *\n * Strategy interface for resolving method parameters into argument values in\n * the context of a given request.\n *\n * @author Arjen Poutsma\n * @since 3.1\n * @see HandlerMethodReturnValueHandler\n */\npublic interface HandlerMethodArgumentResolver {\n\n\t/**\n\t * 是否支持\n\t *\n\t * Whether the given {@linkplain MethodParameter method parameter} is\n\t * supported by this resolver.\n\t * @param parameter the method parameter to check\n\t * @return {@code true} if this resolver supports the supplied parameter;\n\t * {@code false} otherwise\n\t */\n\tboolean supportsParameter(MethodParameter parameter);\n\n\t/**\n\t * 根据request解析方法参数值\n\t *\n\t * Resolves a method parameter into an argument value from a given request.\n\t * A {@link ModelAndViewContainer} provides access to the model for the\n\t * request. A {@link WebDataBinderFactory} provides a way to create\n\t * a {@link WebDataBinder} instance when needed for data binding and\n\t * type conversion purposes.\n\t * @param parameter the method parameter to resolve. This parameter must\n\t * have previously been passed to {@link #supportsParameter} which must\n\t * have returned {@code true}.\n\t * @param mavContainer the ModelAndViewContainer for the current request\n\t * @param webRequest the current request\n\t * @param binderFactory a factory for creating {@link WebDataBinder} instances\n\t * @return the resolved argument value, or {@code null}\n\t * @throws Exception in case of errors with the preparation of argument values\n\t */\n\tObject resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,\n\t\t\tNativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception;\n\n}\n```\n* `HandlerMethodArgumentResolver`的 `resolveArgument` 的解析将在之后的章节介绍\n### 2.2.2 方法执行\n* 回到`InvocableHandlerMethod`类的`invokeForRequest` 方法，上一小节介绍了方法参数绑定的主体逻辑(`Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);`)，这一小节介绍`Object returnValue = doInvoke(args);`，该行代码是方法执行的主体方法\n```java\n\tpublic Object invokeForRequest(NativeWebRequest request, org.springframework.web.method.support.ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Invoking '\" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +\n\t\t\t\t\t\"' with arguments \" + Arrays.toString(args));\n\t\t}\n\t\tObject returnValue = doInvoke(args);\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Method [\" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +\n\t\t\t\t\t\"] returned [\" + returnValue + \"]\");\n\t\t}\n\t\treturn returnValue;\n\t}\n```\n* 进入`Object returnValue = doInvoke(args);` 方法，可以看到调用了`getBridgedMethod().invoke(getBean(), args);` 来执行方法，`getBridgedMethod()` 得到的是`private final Method bridgedMethod`，百度了一下这个桥接方法的用途是为了和jdk1.5之前的字节码兼容. 因为范型是在jdk1.5之后才引入的. 在jdk1.5之前例如集合的操作都是没有范型支持的, 所以生成的字节码中参数都是用Object接收的, 所以也可以往集合中放入任意类型的对象, 集合类型的校验也被拖到运行期.\n```java\n\t/**\n\t * Invoke the handler method with the given argument values.\n\t */\n\tprotected Object doInvoke(Object... args) throws Exception {\n\t\t// 强制将他变为可调用 即使是private方法\n\t\tReflectionUtils.makeAccessible(getBridgedMethod());\n\t\ttry {\n\t\t\treturn getBridgedMethod().invoke(getBean(), args);\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\tassertTargetBean(getBridgedMethod(), getBean(), args);\n\t\t\tString text = (ex.getMessage() != null ? ex.getMessage() : \"Illegal argument\");\n\t\t\tthrow new IllegalStateException(getInvocationErrorMessage(text, args), ex);\n\t\t}\n\t\tcatch (InvocationTargetException ex) {\n\t\t\t// Unwrap for HandlerExceptionResolvers ...\n\t\t\tThrowable targetException = ex.getTargetException();\n\t\t\tif (targetException instanceof RuntimeException) {\n\t\t\t\tthrow (RuntimeException) targetException;\n\t\t\t}\n\t\t\telse if (targetException instanceof Error) {\n\t\t\t\tthrow (Error) targetException;\n\t\t\t}\n\t\t\telse if (targetException instanceof Exception) {\n\t\t\t\tthrow (Exception) targetException;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString text = getInvocationErrorMessage(\"Failed to invoke handler method\", args);\n\t\t\t\tthrow new IllegalStateException(text, targetException);\n\t\t\t}\n\t\t}\n\t}\n```\n* 在此方法执行完成\n\n### 2.2.3 返回结果处理\n\n* 方法执行完成之后就对返回结果的处理了，回到`ServletInvocableHandlerMethod`类，现在方法体已经执行了，就是对结果对象的处理了\n```java\n\t/**\n\t * Invoke the method and handle the return value through one of the\n\t * configured {@link HandlerMethodReturnValueHandler}s.\n\t * @param webRequest the current request\n\t * @param mavContainer the ModelAndViewContainer for this request\n\t * @param providedArgs \"given\" arguments matched by type (not resolved)\n\t */\n\tpublic void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);\n\t\tsetResponseStatus(webRequest);\n\n\t\tif (returnValue == null) {\n\t\t\tif (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {\n\t\t\t\tmavContainer.setRequestHandled(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (StringUtils.hasText(getResponseStatusReason())) {\n\t\t\tmavContainer.setRequestHandled(true);\n\t\t\treturn;\n\t\t}\n\n\t\tmavContainer.setRequestHandled(false);\n\t\ttry {\n\t\t\tthis.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(getReturnValueHandlingErrorMessage(\"Error handling return value\", returnValue), ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n* 查看上面的代码可以看到`this.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);` 这行代码作用是对结果对象的处理，查看`returnValueHandlers` 对象（`private HandlerMethodReturnValueHandlerComposite returnValueHandlers;`）可以看到和我们之前的参数绑定的处理是相似的，`HandlerMethodReturnValueHandlerComposite`存放了各种结果处理组件\n> HandlerMethodReturnValueHandlerComposite.java\n\n```java\n\n/**\n * Handles method return values by delegating to a list of registered {@link HandlerMethodReturnValueHandler}s.\n * Previously resolved return types are cached for faster lookups.\n *\n * @author Rossen Stoyanchev\n * @since 3.1\n */\npublic class HandlerMethodReturnValueHandlerComposite implements AsyncHandlerMethodReturnValueHandler {\n\n\tprotected final Log logger = LogFactory.getLog(getClass());\n\n\t// 结果处理组件\n\tprivate final List<HandlerMethodReturnValueHandler> returnValueHandlers =\n\t\tnew ArrayList<HandlerMethodReturnValueHandler>();\n```\n\n> HandlerMethodReturnValueHandler.java\n\n```java\n/**\n * 结果对象处理\n *\n * Strategy interface to handle the value returned from the invocation of a\n * handler method .\n *\n * @author Arjen Poutsma\n * @since 3.1\n * @see HandlerMethodArgumentResolver\n */\npublic interface HandlerMethodReturnValueHandler {\n\n\t/**\n\t * 是否支持\n\t * \n\t * Whether the given {@linkplain MethodParameter method return type} is\n\t * supported by this handler.\n\t * @param returnType the method return type to check\n\t * @return {@code true} if this handler supports the supplied return type;\n\t * {@code false} otherwise\n\t */\n\tboolean supportsReturnType(MethodParameter returnType);\n\n\t/**\n\t * 处理结果集\n\t * \n\t * Handle the given return value by adding attributes to the model and\n\t * setting a view or setting the\n\t * {@link ModelAndViewContainer#setRequestHandled} flag to {@code true}\n\t * to indicate the response has been handled directly.\n\t * @param returnValue the value returned from the handler method\n\t * @param returnType the type of the return value. This type must have\n\t * previously been passed to {@link #supportsReturnType} which must\n\t * have returned {@code true}.\n\t * @param mavContainer the ModelAndViewContainer for the current request\n\t * @param webRequest the current request\n\t * @throws Exception if the return value handling results in an error\n\t */\n\tvoid handleReturnValue(Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;\n\n}\n\n```\n\n* 进入`handleReturnValue`方法，可以看到和之前方法参数绑定处理是一样的套路的\n```java\n\t/**\n\t * 迭代注册过的 HandlerMethodReturnValueHandler, 然后找到对应的ReturnValueHandler\n\t * Iterate over registered {@link HandlerMethodReturnValueHandler}s and invoke the one that supports it.\n\t * @throws IllegalStateException if no suitable {@link HandlerMethodReturnValueHandler} is found.\n\t */\n\t@Override\n\tpublic void handleReturnValue(Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n\n\t\tHandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);\n\t\tif (handler == null) {\n\t\t\tthrow new IllegalArgumentException(\"Unknown return value type: \" + returnType.getParameterType().getName());\n\t\t}\n\t\thandler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);\n\t}\n\t\n    private HandlerMethodReturnValueHandler selectHandler(Object value, MethodParameter returnType) {\n        boolean isAsyncValue = isAsyncReturnValue(value, returnType);\n        for (HandlerMethodReturnValueHandler handler : this.returnValueHandlers) {\n            if (isAsyncValue && !(handler instanceof AsyncHandlerMethodReturnValueHandler)) {\n                continue;\n            }\n            if (handler.supportsReturnType(returnType)) {\n                return handler;\n            }\n        }\n        return null;\n    }\n```\n\n* 如下图可以看到有如下`this.returnValueHandlers`\n\n![](/images/server/spring/spring-mvc/HandlerComposite.jpg)\n\n## 3.1 总结\n* `RequestMappingHanlderAdapter` 的功能主要是 `1、方法参数绑定，2、方法执行，3、返回结果处理` \n* `HandlerMethodArgumentResolver` 的方法参数绑定处理是针对于不同的方法参数有专门的`ArgumentResolver` 专人做专事，专业\n* `HandlerMethodReturnValueHandler` 的返回结果处理也是和参数处理那样是针对于不同的返回对象有专门的`ReturnValueHandler`\n\n## 4.1 参考\n\n官方文档: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\n\n","tags":["spring"],"categories":["服务器"]},{"title":"Spring Mvc源码(七)处理适配器HanlderAdapter","url":"/2019/02/28/backend/spring/sourceCodeAnalysis/Spring Mvc源码(七)处理适配器HanlderAdapter/","content":"## 1.1 前言\n* 前几章介绍了`HandlerMapping`处理流程， `HandlerMapping`负责根据`request`请求找到对应的`Handler`处理器及`Interceptor`拦截器，的到处理器`Handler`之后，`Spring MVC` 又根据该`Handler` 找出对应的 `HandlerAdapter`，这一章节来介绍`HandlerAdapter`，`HandlerAdapter`是具体使用`Handler` 来干活的\n\n* 下面还是方法体`doDispatch(HttpServletRequest request, HttpServletResponse response)` 的处理代码，可以看到得到`Handler`处理器之后就是遍历所有的 `HandlerAdapter`，找到可以处理该 `Handler` 的 `HandlerAdapter`，找到之后就是`mv = ha.handle(processedRequest, response, mappedHandler.getHandler());` 调用真正的处理方法了\n\n```java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    HttpServletRequest processedRequest = request;\n    HandlerExecutionChain mappedHandler = null;\n    boolean multipartRequestParsed = false;\n    // 获取当前请求的WebAsyncManager，如果没找到则创建并与请求关联\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n    try {\n        ModelAndView mv = null;\n        Exception dispatchException = null;\n\n        try {\n            // 检查是否是文件上传请求 Multipart，有则将请求转换为 Multipart 请求\n            processedRequest = checkMultipart(request);\n            multipartRequestParsed = (processedRequest != request);\n\n            // Determine handler for the current request.\n            // 遍历所有的 HandlerMapping 找到与请求对应的 Handler，并将其与一堆拦截器封装到 HandlerExecution 对象中\n            mappedHandler = getHandler(processedRequest);\n            if (mappedHandler == null || mappedHandler.getHandler() == null) {\n                noHandlerFound(processedRequest, response);\n                return;\n            }\n            \n            // Determine handler adapter for the current request.\n            // 遍历所有的 HandlerAdapter，找到可以处理该 Handler 的 HandlerAdapter\n            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n            \n            // Process last-modified header, if supported by the handler.\n            // 处理 last-modified 请求头\n            String method = request.getMethod();\n            boolean isGet = \"GET\".equals(method);\n            if (isGet || \"HEAD\".equals(method)) {\n                long lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n                }\n                if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n                    return;\n                }\n            }\n            // 执行相应拦截器Interceptor的preHandle\n            if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n                return;\n            }\n\n            // Actually invoke the handler.\n            // 执行实际的处理程序，执行Controller里的方法\n            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n```\n\n## 2.1 处理适配器HanlderAdapter解析\n\n### 2.1.1 HanlderAdapter 解析\n* 先看`HanlderAdapter` 这个接口有哪些方法\n\n```java\n/**\n * Handler 处理适配器, 适配不同的 Handler\n *\n * MVC framework SPI, allowing parameterization of the core MVC workflow.\n *\n * <p>Interface that must be implemented for each handler type to handle a request.\n * This interface is used to allow the {@link DispatcherServlet} to be indefinitely\n * extensible. The {@code DispatcherServlet} accesses all installed handlers through\n * this interface, meaning that it does not contain code specific to any handler type.\n *\n * <p>Note that a handler can be of type {@code Object}. This is to enable\n * handlers from other frameworks to be integrated with this framework without\n * custom coding, as well as to allow for annotation-driven handler objects that\n * do not obey any specific Java interface.\n *\n * <p>This interface is not intended for application developers. It is available\n * to handlers who want to develop their own web workflow.\n *\n * <p>Note: {@code HandlerAdapter} implementors may implement the {@link\n * org.springframework.core.Ordered} interface to be able to specify a sorting\n * order (and thus a priority) for getting applied by the {@code DispatcherServlet}.\n * Non-Ordered instances get treated as lowest priority.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @see org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\n * @see org.springframework.web.servlet.handler.SimpleServletHandlerAdapter\n */\npublic interface HandlerAdapter {\n\n\t/**\n\t * 检测 HandlerAdapter 是否支持这个 handler\n\t *\n\t * Given a handler instance, return whether or not this {@code HandlerAdapter}\n\t * can support it. Typical HandlerAdapters will base the decision on the handler\n\t * type. HandlerAdapters will usually only support one handler type each.\n\t * <p>A typical implementation:\n\t * <p>{@code\n\t * return (handler instanceof MyHandler);\n\t * }\n\t * @param handler handler object to check\n\t * @return whether or not this object can use the given handler\n\t */\n\tboolean supports(Object handler);\n\n\t/**\n\t * 处理 HttpServletRequest 的入口方法\n\t *\n\t * Use the given handler to handle this request.\n\t * The workflow that is required may vary widely.\n\t * @param request current HTTP request\n\t * @param response current HTTP response\n\t * @param handler handler to use. This object must have previously been passed\n\t * to the {@code supports} method of this interface, which must have\n\t * returned {@code true}.\n\t * @throws Exception in case of errors\n\t * @return ModelAndView object with the name of the view and the required\n\t * model data, or {@code null} if the request has been handled directly\n\t */\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;\n\n\t/**\n\t *  获取Http 请求中的lastModifiedTime\n\t *\n\t * Same contract as for HttpServlet's {@code getLastModified} method.\n\t * Can simply return -1 if there's no support in the handler class.\n\t * @param request current HTTP request\n\t * @param handler handler to use\n\t * @return the lastModified value for the given handler\n\t * @see javax.servlet.http.HttpServlet#getLastModified\n\t * @see org.springframework.web.servlet.mvc.LastModified#getLastModified\n\t */\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\n}\n\n```\n\n* 下图是`HanlderAdapter`涉及子类的继承关系，看方法名是不是很熟悉，没错和前几章的`HandlerMapping`是差不多是一一对应的\n\n![image](/images/server/spring/spring-mvc/HandlerAdapter.png)\n\n\n* 查看这些类可以看到除了`RequestMappingHandlerAdapter` 的实现比较复杂之外，其他的`HandlerAdapter`都是调用`Handler`里固定的方法，比如下图的`SimpleControllerHandlerAdapter`\n```java\npublic class SimpleControllerHandlerAdapter implements HandlerAdapter {\n\n\t@Override\n\tpublic boolean supports(Object handler) {\n\t\treturn (handler instanceof Controller);\n\t}\n\n\t@Override\n\tpublic ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler)\n\t\t\tthrows Exception {\n\n\t\treturn ((Controller) handler).handleRequest(request, response);\n\t}\n\n\t@Override\n\tpublic long getLastModified(HttpServletRequest request, Object handler) {\n\t\tif (handler instanceof LastModified) {\n\t\t\treturn ((LastModified) handler).getLastModified(request);\n\t\t}\n\t\treturn -1L;\n\t}\n\n}\n```\n* 查看`AbstractHandlerMethodAdapter`可以看到内容也很少，`HandlerAdapter` 接口的实现都转发到自己的抽象方法里去了\n```java\n/**\n * Abstract base class for {@link HandlerAdapter} implementations that support\n * handlers of type {@link HandlerMethod}.\n *\n * @author Arjen Poutsma\n * @since 3.1\n */\npublic abstract class AbstractHandlerMethodAdapter extends WebContentGenerator implements HandlerAdapter, Ordered {\n\n\tprivate int order = Ordered.LOWEST_PRECEDENCE;\n\n\n\tpublic AbstractHandlerMethodAdapter() {\n\t\t// no restriction of HTTP methods by default\n\t\tsuper(false);\n\t}\n\n\n\t/**\n\t * Specify the order value for this HandlerAdapter bean.\n\t * <p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered.\n\t * @see org.springframework.core.Ordered#getOrder()\n\t */\n\tpublic void setOrder(int order) {\n\t\tthis.order = order;\n\t}\n\n\t@Override\n\tpublic int getOrder() {\n\t\treturn this.order;\n\t}\n\n\n\t/**\n\t * 先判断是否是HandlerMethod，然后转向抽象方法supportsInternal\n\t * This implementation expects the handler to be an {@link HandlerMethod}.\n\t * @param handler the handler instance to check\n\t * @return whether or not this adapter can adapt the given handler\n\t */\n\t@Override\n\tpublic final boolean supports(Object handler) {\n\t\treturn (handler instanceof HandlerMethod && supportsInternal((HandlerMethod) handler));\n\t}\n\n\t/**\n\t * Given a handler method, return whether or not this adapter can support it.\n\t * @param handlerMethod the handler method to check\n\t * @return whether or not this adapter can adapt the given method\n\t */\n\tprotected abstract boolean supportsInternal(HandlerMethod handlerMethod);\n\n\t/**\n\t * 转向抽象方法 handleInternal()\n\t * This implementation expects the handler to be an {@link HandlerMethod}.\n\t */\n\t@Override\n\tpublic final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler)\n\t\t\tthrows Exception {\n\n\t\treturn handleInternal(request, response, (HandlerMethod) handler);\n\t}\n\n\t/**\n\t * Use the given handler method to handle the request.\n\t * @param request current HTTP request\n\t * @param response current HTTP response\n\t * @param handlerMethod handler method to use. This object must have previously been passed to the\n\t * {@link #supportsInternal(HandlerMethod)} this interface, which must have returned {@code true}.\n\t * @return ModelAndView object with the name of the view and the required model data,\n\t * or {@code null} if the request has been handled directly\n\t * @throws Exception in case of errors\n\t */\n\tprotected abstract ModelAndView handleInternal(HttpServletRequest request,\n\t\t\tHttpServletResponse response, HandlerMethod handlerMethod) throws Exception;\n\n\t/**\n\t * 转向抽象方法 getLastModifiedInternal()\n\t * This implementation expects the handler to be an {@link HandlerMethod}.\n\t */\n\t@Override\n\tpublic final long getLastModified(HttpServletRequest request, Object handler) {\n\t\treturn getLastModifiedInternal(request, (HandlerMethod) handler);\n\t}\n\n\t/**\n\t * Same contract as for {@link javax.servlet.http.HttpServlet#getLastModified(HttpServletRequest)}.\n\t * @param request current HTTP request\n\t * @param handlerMethod handler method to use\n\t * @return the lastModified value for the given handler\n\t */\n\tprotected abstract long getLastModifiedInternal(HttpServletRequest request, HandlerMethod handlerMethod);\n\n}\n```\n### 2.1.2 各个 `HandlerAdapter`作用 \n#### AnnotationMethodHandlerAdapter\n`AnnotationMethodHandlerAdapter`主要是适配注解类处理器，注解类处理器就是我们经常使用的`@Controller`的这类处理器，不过该类已经被`@Deprecated` 标记了（@deprecated as of Spring 3.2, in favor of`） \n\n####  HttpRequestHandlerAdapter\n`HttpRequestHandlerAdapter` 主要是适配静态资源处理器，静态资源处理器就是实现了`HttpRequestHandler`接口的处理器，这类处理器的作用是处理通过`SpringMVC`来访问的静态资源的请求。        \n\n#### SimpleControllerHandlerAdapter\n`SimpleControllerHandlerAdapter` 是`Controller`处理适配器，适配实现了`Controller`接口或`Controller`接口子类的处理器，比如我们经常自己写的`Controller`来继承`MultiActionController`\n\n#### SimpleServletHandlerAdapter\n`SimpleServletHandlerAdapter`是`Servlet`处理适配器,适配实现了`Servlet`接口或`Servlet`的子类的处理器，我们不仅可以在web.xml里面配置Servlet，其实也可以用SpringMVC来配置Servlet，不过这个适配器很少用到，而且SpringMVC默认的适配器没有他，默认的是前面的三种。\n\n\n\n### 2.1.3 `HandlerAdapter` 注册过程\n* `HandlerAdapter` 注册过程 和 `HandlerMapping` 的注册过程是一样的，回到`DispatcherServlet` 类中`onRefresh` 方法\n```java\n\t/**\n\t * Initialize the strategy objects that this servlet uses.\n\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t */\n\tprotected void initStrategies(ApplicationContext context) {\n\t\t// 上传组件组件初始化\n\t\tinitMultipartResolver(context);\n\t\tinitLocaleResolver(context);\n\t\tinitThemeResolver(context);\n\t\t// 请求映射处理组件初始化\n\t\tinitHandlerMappings(context);\n\t\t// 处理适配器组建初始化\n\t\tinitHandlerAdapters(context);\n\t\t// 异常处理组件初始化\n\t\tinitHandlerExceptionResolvers(context);\n\t\tinitRequestToViewNameTranslator(context);\n\t\t// 视图处理组件初始化\n\t\tinitViewResolvers(context);\n\t\tinitFlashMapManager(context);\n\t}\n```\n* 进入`initHandlerAdapters(context);` 从下面代码也可以看到也是通过扫描`HandlerAdapter`类 `bean`的形式来注册`HandlerAdapter`\n```java\n\t/**\n\t * Initialize the HandlerAdapters used by this class.\n\t * <p>If no HandlerAdapter beans are defined in the BeanFactory for this namespace,\n\t * we default to SimpleControllerHandlerAdapter.\n\t */\n\tprivate void initHandlerAdapters(ApplicationContext context) {\n\t\tthis.handlerAdapters = null;\n\n\t\tif (this.detectAllHandlerAdapters) {\n\t\t\t// 加载所有实现了HandlerAdapter接口的bean\n\t\t\t// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.\n\t\t\tMap<String, HandlerAdapter> matchingBeans =\n\t\t\t\t\tBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, true, false);\n\t\t\tif (!matchingBeans.isEmpty()) {\n\t\t\t\tthis.handlerAdapters = new ArrayList<HandlerAdapter>(matchingBeans.values());\n\t\t\t\t// We keep HandlerAdapters in sorted order.\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.handlerAdapters);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tHandlerAdapter ha = context.getBean(HANDLER_ADAPTER_BEAN_NAME, HandlerAdapter.class);\n\t\t\t\tthis.handlerAdapters = Collections.singletonList(ha);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\t// Ignore, we'll add a default HandlerAdapter later.\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we have at least some HandlerAdapters, by registering\n\t\t// default HandlerAdapters if no other adapters are found.\n\t\tif (this.handlerAdapters == null) {\n\t\t\tthis.handlerAdapters = getDefaultStrategies(context, HandlerAdapter.class);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"No HandlerAdapters found in servlet '\" + getServletName() + \"': using default\");\n\t\t\t}\n\t\t}\n\t}\n```\n\n\n## 3.1 总结\n* `HanlderAdapter` 从字面上的意思就是处理适配器，他的作用就是根据用户的请求调用具体的方法，根据`HandlerMapping`传过来`Hanler`与注册好的`HandlerAdapter`一一匹配，如果找到了其中一种`HandlerAdapter`是支持传过来的`controller`类型，那么该`HandlerAdapter`会调用自己的`handle`方法\n* 不同的`HanlderAdapter`可以适应不同的request需求\n\n## 4.1 参考\n\n官方文档: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\n\nhttps://www.jianshu.com/p/3d6df6b725e4\n\nhttps://blog.csdn.net/weixin_38399962/article/details/85288660","tags":["spring"],"categories":["服务器"]},{"title":"Spring Mvc源码(六)基于注解实现的RequestMappingHandlerMapping工作流程","url":"/2019/02/27/backend/spring/sourceCodeAnalysis/Spring Mvc源码(六)基于注解实现的RequestMappingHandlerMapping工作流程/","content":"## 1.1 前言\n* 上一章节介绍了 `RequestMappingHandlerMapping` 这个 `HandlerMapping` 的加载过程，这一章节来介绍`RequestMappingHandlerMapping`实现流程\n\n## 2.1 找到与请求对应的 Handler 解析\n\n* 还是回到这个方法`doDispatch(HttpServletRequest request, HttpServletResponse response)` ，下面的代码是发挥`RequestMappingHandlerMapping`作用的地方\n\n```java\nHandlerExecutionChain mappedHandler = null;\n...\n\n// Determine handler for the current request.\n// 遍历所有的 HandlerMapping 找到与请求对应的 Handler，并将其与一堆拦截器封装到 HandlerExecution 对象中\nmappedHandler = getHandler(processedRequest);\nif (mappedHandler == null || mappedHandler.getHandler() == null) {\n    noHandlerFound(processedRequest, response);\n    return;\n}\n```\n* 还是进入 `getHandler`方法，这里会遍历到我们的`RequestMappingHandlerMapping` 这个`HandlerMapping`，通过`HandlerExecutionChain handler = hm.getHandler(request);` 得到`HandlerExecutionChain`\n\n```java\nprotected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n    // 循环handlerMappings eg: RequestMappingHandlerMapping、SimpleUrlHandlerMapping、BeanNameUrlHandlerMapping\n    for (HandlerMapping hm : this.handlerMappings) {\n        if (logger.isTraceEnabled()) {\n            logger.trace(\n                    \"Testing handler map [\" + hm + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n        }\n        // 遍历HandlerMapping实现类的找到对应的 HandlerExecutionChain\n        HandlerExecutionChain handler = hm.getHandler(request);\n        if (handler != null) {\n            // 注意这里是找到第一个就直接返回\n            return handler;\n        }\n    }\n    return null;\n}\n```\n* 进入`hm.getHandler(request);` 会跳到我们的`AbstractHandlerMapping` 类中，`RequestMappingHandlerMapping` 继承该类，由下面代码可以看到这里这里获取了 `handler` 及 `Interceptor` 并封装为`HandlerExecutionChain` 返回调用者 \n```java\n/**\n * Look up a handler for the given request, falling back to the default\n * handler if no specific one is found.\n * @param request current HTTP request\n * @return the corresponding handler instance, or the default handler\n * @see #getHandlerInternal\n */\n@Override\npublic final HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n    // 在这里获取 处理器handler，模板方法实现， RequestMappingHandlerMapping 跳到 AbstractHandlerMethodMapping\n    Object handler = getHandlerInternal(request);\n    if (handler == null) {\n        handler = getDefaultHandler();\n    }\n    if (handler == null) {\n        return null;\n    }\n    // Bean name or resolved handler?\n    if (handler instanceof String) {\n        String handlerName = (String) handler;\n        handler = getApplicationContext().getBean(handlerName);\n    }\n    // 获取 拦截器Interceptor\n    HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);\n    if (CorsUtils.isCorsRequest(request)) {\n        CorsConfiguration globalConfig = this.corsConfigSource.getCorsConfiguration(request);\n        CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);\n        CorsConfiguration config = (globalConfig != null ? globalConfig.combine(handlerConfig) : handlerConfig);\n        executionChain = getCorsHandlerExecutionChain(request, executionChain, config);\n    }\n    return executionChain;\n}\n```\n* 关注`Object handler = getHandlerInternal(request);` 这里是获取`handler`的地方，这时又会跳到`AbstractHandlerMethodMapping` 类中，这样跳来跳去可以看到封装的特性及使用模板方法提高了扩展性\n```java\n/**\n * Look up a handler method for the given request.\n */\n@Override\nprotected HandlerMethod getHandlerInternal(HttpServletRequest request) throws Exception {\n    // 获取请求url路径 localhost:8080/pub/account/list >>> /pub/account/list\n    String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);\n    if (logger.isDebugEnabled()) {\n        logger.debug(\"Looking up handler method for path \" + lookupPath);\n    }\n    // mappingRegistry添加读锁，其他线程只能读不能写\n    this.mappingRegistry.acquireReadLock();\n    try {\n        // 根据request获取对应的HandlerMethod\n        HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);\n        if (logger.isDebugEnabled()) {\n            if (handlerMethod != null) {\n                logger.debug(\"Returning handler method [\" + handlerMethod + \"]\");\n            }\n            else {\n                logger.debug(\"Did not find handler method for [\" + lookupPath + \"]\");\n            }\n        }\n        return (handlerMethod != null ? handlerMethod.createWithResolvedBean() : null);\n    }\n    finally {\n        this.mappingRegistry.releaseReadLock();\n    }\n}\n```\n* 关注 `HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);` 这行代码，进入该方法，可以看到这个方法的作用是得到`HandlerMethod`\n```java\n/**\n * 查找当前request请求 最为匹配的处理方法HandlerMethod，如果有多个匹配结果，则选择最佳匹配结果\n * Look up the best-matching handler method for the current request.\n * If multiple matches are found, the best match is selected.\n * @param lookupPath mapping lookup path within the current servlet mapping\n * @param request the current request\n * @return the best-matching handler method, or {@code null} if no match\n * @see #handleMatch(Object, String, HttpServletRequest)\n * @see #handleNoMatch(Set, String, HttpServletRequest)\n */\nprotected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletRequest request) throws Exception {\n    List<Match> matches = new ArrayList<Match>();\n    // 根据URL来获取,springMVC会在初始化的时候建立URL和相应RequestMappingInfo的映射。如果不是restful接口，这里就可以直接获取到了， lookupPath: /pub/account/list\n    List<T> directPathMatches = this.mappingRegistry.getMappingsByUrl(lookupPath);\n    if (directPathMatches != null) {\n        // 匹配校验\n        addMatchingMappings(directPathMatches, matches, request);\n    }\n    if (matches.isEmpty()) {\n        // 全盘扫描\n        // No choice but to go through all mappings...\n        addMatchingMappings(this.mappingRegistry.getMappings().keySet(), matches, request);\n    }\n    // 得到匹配结果\n    if (!matches.isEmpty()) {\n        Comparator<Match> comparator = new MatchComparator(getMappingComparator(request));\n        Collections.sort(matches, comparator);\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"Found \" + matches.size() + \" matching mapping(s) for [\" +\n                    lookupPath + \"] : \" + matches);\n        }\n        Match bestMatch = matches.get(0);\n        if (matches.size() > 1) {\n            if (CorsUtils.isPreFlightRequest(request)) {\n                return PREFLIGHT_AMBIGUOUS_MATCH;\n            }\n            Match secondBestMatch = matches.get(1);\n            // 如果最佳匹配 第二佳匹配都是同一个则报错\n            if (comparator.compare(bestMatch, secondBestMatch) == 0) {\n                Method m1 = bestMatch.handlerMethod.getMethod();\n                Method m2 = secondBestMatch.handlerMethod.getMethod();\n                throw new IllegalStateException(\"Ambiguous handler methods mapped for HTTP path '\" +\n                        request.getRequestURL() + \"': {\" + m1 + \", \" + m2 + \"}\");\n            }\n        }\n        // 设置HttpServletRequest值\n        handleMatch(bestMatch.mapping, lookupPath, request);\n        return bestMatch.handlerMethod;\n    }\n    else {\n        // 没有找到匹配，返回null\n        return handleNoMatch(this.mappingRegistry.getMappings().keySet(), lookupPath, request);\n    }\n}\n```\n* 查看这行代码可以看到是通过url来获取`this.mappingRegistry.getMappingsByUrl(lookupPath);`，进入该方法，可以看到`this.urlLookup`是`MappingRegistry`类中的一个`Map`,直接通过 `url`为`key`得到值\n\n```java\nclass MappingRegistry {\n\n    private final Map<T, MappingRegistration<T>> registry = new HashMap<T, MappingRegistration<T>>();\n\n    private final Map<T, HandlerMethod> mappingLookup = new LinkedHashMap<T, HandlerMethod>();\n\n    private final MultiValueMap<String, T> urlLookup = new LinkedMultiValueMap<String, T>();\n\n    private final Map<String, List<HandlerMethod>> nameLookup =\n            new ConcurrentHashMap<String, List<HandlerMethod>>();\n\n    private final Map<HandlerMethod, CorsConfiguration> corsLookup =\n            new ConcurrentHashMap<HandlerMethod, CorsConfiguration>();\n\n    private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n    \n    ...\n    \n\n    */\n    public List<T> getMappingsByUrl(String urlPath) {\n        //  MultiValueMap<String, T> urlLookup 就是个map\n        return this.urlLookup.get(urlPath);\n    }\n```\n\n> 下图是this.urlLookup.get(urlPath) 的到的结果，返回的是个list\n\n![image](/images/server/spring/spring-mvc/getMappingsByUrl.jpg)\n\n* 返回到`lookupHandlerMethod(String lookupPath, HttpServletRequest request)` 方法，这里使用了`Match`做了匹配处理，得到最佳`Match bestMatch` 对象，最后返回`HandlerMethod`，在此终于得到了`HandlerMethod`\n\n \n## 3.1 总结\n* `RequestMappingHandlerMapping` 的主要功能就是通过 `reqeust` 获取 `HandlerExecutionChain` 的 `HandlerMethod`、`Interceptor`。\n\n* 下图是`RequestMappingHandlerMapping`工作流程图，可以看到`RequestMappingHandlerMapping` 一个类的实现分了4层，`HandlerMapping` 接口定义顶级方法，两个抽象类又分两次封装，由上而下，逐渐细分功能\n\n![image](/images/server/spring/spring-mvc/RequestMappingInfoHandlerMapping.png)\n\n## 4.1 参考\n\n官方文档: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\n","tags":["spring"],"categories":["服务器"]},{"title":"Spring Mvc源码(五)基于注解实现的RequestMappingHandlerMapping加载过程","url":"/2019/02/26/backend/spring/sourceCodeAnalysis/Spring Mvc源码(五)基于注解实现的RequestMappingHandlerMapping加载过程/","content":"## 1.1 前言\n* 上一章节介绍了`请求映射处理组件HandlerMapping`的主体处理流程，根据`request url` 获取对应的处理器`Handler`，这一章节来详细介绍我们平常最多使用的`RequestMappingHandlerMapping`的加载，这个`HandlerMapping` 是怎样加载基于`@Controller,@RequestMapping` 实现的`Controller`\n\n## 2.1 解析\n* 接下来我们关注`RequestMappingHandlerMapping`这个`HandlerMapping`，因为这个是我们开发过程中最为常用的`HandlerMapping`，那么它是怎样实现`HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception;` 这个方法，先看一下`RequestMappingHandlerMapping`的继承关系\n\n![image](/images/server/spring/spring-mvc/RequestMappingHandlerMapping.png)\n\n### 2.1.1 `RequestMappingHandlerMapping` 加载过程\n\n* 有上图可以看到`RequestMappingHandlerMapping` 的父类`AbstractHandlerMethodMapping` 实现了`InitializingBean` 接口，InitializingBean接口为bean提供了初始化方法的方式，它只包括afterPropertiesSet方法，凡是继承该接口的类， 在初始化bean的时候都会执行该方法。\n```java\npublic interface InitializingBean {\n\n\t/**\n\t * Invoked by a BeanFactory after it has set all bean properties supplied\n\t * (and satisfied BeanFactoryAware and ApplicationContextAware).\n\t * <p>This method allows the bean instance to perform initialization only\n\t * possible when all bean properties have been set and to throw an\n\t * exception in the event of misconfiguration.\n\t * @throws Exception in the event of misconfiguration (such\n\t * as failure to set an essential property) or if initialization fails.\n\t */\n\tvoid afterPropertiesSet() throws Exception;\n\n}\n```\n\n* 查看`AbstractHandlerMethodMapping`类 `afterPropertiesSet()`的实现\n```java\n/**\n * Detects handler methods at initialization.\n */\n@Override\npublic void afterPropertiesSet() {\n    initHandlerMethods();\n}\n```\n* 又抽象了一个方法，通过方法名可以得到是初始化`HandlerMethods`，进入`initHandlerMethods();` 方法，这个方法是扫描`ApplicationContext` 所有的bean，如果发现了该bean是`Handler`，并把它注册为`handler methods`\n```java\n/**\n * Scan beans in the ApplicationContext, detect and register handler methods.\n * @see #isHandler(Class)\n * @see #getMappingForMethod(Method, Class)\n * @see #handlerMethodsInitialized(Map)\n */\nprotected void initHandlerMethods() {\n    if (logger.isDebugEnabled()) {\n        logger.debug(\"Looking for request mappings in application context: \" + getApplicationContext());\n    }\n    // 首先拿到容器的所有的beanName数组\n    String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ?\n            BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) :\n            getApplicationContext().getBeanNamesForType(Object.class));\n\n    for (String beanName : beanNames) {\n        if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) {\n            // 得到bean类型\n            Class<?> beanType = null;\n            try {\n                beanType = getApplicationContext().getType(beanName);\n            }\n            catch (Throwable ex) {\n                // An unresolvable bean type, probably from a lazy bean - let's ignore it.\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Could not resolve target class for bean with name '\" + beanName + \"'\", ex);\n                }\n            }\n            // 检查bean所在的类是否有Controller注解及RequestMapping注解\n            if (beanType != null && isHandler(beanType)) {\n                // 负责将Handler保存到Map里\n                detectHandlerMethods(beanName);\n            }\n        }\n    }\n    // 对Handler进行一些初始化，是一个模板方法\n    handlerMethodsInitialized(getHandlerMethods());\n}\n```\n> String[] beanNames 示例\n\n![iamge](/images/server/spring/spring-mvc/beanNames.jpg)\n\n* 进入`isHandler(beanType)`方法，，此方法由`RequestMappingHandlerMapping`实现， 此方法检查`bean`所在的类是否有`Controller`注解及`RequestMapping`注解，可以看到此方法的实现是在`RequestMappingHandlerMapping`里，是不是看到了我们熟悉的两个注解\n```java\n/**\n * 检查bean所在的类是否有Controller注解及RequestMapping注解\n * {@inheritDoc}\n * Expects a handler to have a type-level @{@link Controller} annotation.\n */\n@Override\nprotected boolean isHandler(Class<?> beanType) {\n    return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||\n            AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));\n}\n```\n* 如果该`bean`有 `Controller`注解及`RequestMapping`注解，则执行`detectHandlerMethods(beanName);`方法，下面举个例子，我们有一个`UserController`里面有五个方法，下面来看是怎么处理这个类的\n```java\n@RestController\n@RequestMapping(\"/pub/account\")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    @GetMapping(\"/list\")\n    public List<User> findAll() {\n        return userService.findAll();\n    }\n\n    @GetMapping(\"/view\")\n    public User view() {\n        return userService.findById(1);\n    }\n\n    @GetMapping(\"/{id}\")\n    public User view(@PathVariable(\"id\") Integer id) {\n        return userService.findById(id);\n    }\n\n    @PostMapping(\"/\")\n    public void updateUser(@RequestBody User user) {\n        User user1 = userService.findById(user.getId());\n        user1.setUsername(\"update\");\n        userService.saveSelective(user1);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public void deleteUser(@PathVariable(\"id\") Integer id) {\n        userService.logicDeleteOne(id);\n    }\n}\n```\n* 进入`detectHandlerMethods(beanName);`方法，可以看到`Map<Method, T> methods = MethodIntrospector.selectMethods` 获取到了我们五个方法，`Map<Method, T> methods` 以`Method`为key，`RequestMappingInfo`为value\n\n![image](/images/server/spring/spring-mvc/detectHandlerMethods.jpg)\n\n```java\n/**\n * Look for handler methods in a handler.\n * @param handler the bean name of a handler or a handler instance\n */\nprotected void detectHandlerMethods(final Object handler) {\n    // 获取Handler的类型\n    Class<?> handlerType = (handler instanceof String ?\n            getApplicationContext().getType((String) handler) : handler.getClass());\n    final Class<?> userType = ClassUtils.getUserClass(handlerType);\n\n    // 这里获取 RequestMapping方法，会过滤掉普通方法\n    Map<Method, T> methods = MethodIntrospector.selectMethods(userType,\n            new MethodIntrospector.MetadataLookup<T>() {\n                @Override\n                public T inspect(Method method) {\n                    try {\n                        return getMappingForMethod(method, userType);\n                    }\n                    catch (Throwable ex) {\n                        throw new IllegalStateException(\"Invalid mapping on handler class [\" +\n                                userType.getName() + \"]: \" + method, ex);\n                    }\n                }\n            });\n\n    if (logger.isDebugEnabled()) {\n        logger.debug(methods.size() + \" request handler methods found on \" + userType + \": \" + methods);\n    }\n    for (Map.Entry<Method, T> entry : methods.entrySet()) {\n        Method invocableMethod = AopUtils.selectInvocableMethod(entry.getKey(), userType);\n        T mapping = entry.getValue();\n        // 注册 mappingRegistry\n        registerHandlerMethod(handler, invocableMethod, mapping);\n    }\n}\n```\n\n* 进入`getMappingForMethod(method, userType)` ，此方法在`RequestMappingHandlerMapping`实现，这里解析分两步解析，一个是方法`method`解析，另一个是方法所在类`handlerType`的解析，然后拼接成一个`RequestMappingInfo`，可以看到也是对`RequestMapping`注解的解析\n\n```java\n/**\n * 没有使用 {@code @RequestMapping} 注解会返回null\n * Uses method and type-level @{@link RequestMapping} annotations to create\n * the RequestMappingInfo.\n * @return the created RequestMappingInfo, or {@code null} if the method\n * does not have a {@code @RequestMapping} annotation.\n * @see #getCustomMethodCondition(Method)\n * @see #getCustomTypeCondition(Class)\n */\n@Override\nprotected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {\n    // 解析method的@RequestMapping\n    RequestMappingInfo info = createRequestMappingInfo(method);\n    if (info != null) {\n        // 解析Class的@RequestMapping\n        RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);\n        if (typeInfo != null) {\n            // 合并两个RequestMappingInfo 比如url拼接\n            info = typeInfo.combine(info);\n        }\n    }\n    // 不是RequestMapping方法返回null\n    return info;\n}\n\n\nprivate RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {\n        // 拿到注解\n        RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);\n        RequestCondition<?> condition = (element instanceof Class ?\n                getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element));\n        return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);\n}\n\nprotected RequestMappingInfo createRequestMappingInfo(\n        RequestMapping requestMapping, RequestCondition<?> customCondition) {\n    // 用@RequestMapping的属性生成RequestMappingInfo\n    return RequestMappingInfo\n            .paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))\n            .methods(requestMapping.method())\n            .params(requestMapping.params())\n            .headers(requestMapping.headers())\n            .consumes(requestMapping.consumes())\n            .produces(requestMapping.produces())\n            .mappingName(requestMapping.name())\n            .customCondition(customCondition)\n            .options(this.config)\n            .build();\n}\n```\n \n> RequestMappingInfo.java 对请求映射的一个抽象，它包含了请求路径，请求方法，请求头等信息。其实可以看做是@RequestMapping的一个对应类。\n\n```java\npublic final class RequestMappingInfo implements RequestCondition<RequestMappingInfo> {\n\n\tprivate final String name;\n\n\tprivate final PatternsRequestCondition patternsCondition;\n\n\tprivate final RequestMethodsRequestCondition methodsCondition;\n\n\tprivate final ParamsRequestCondition paramsCondition;\n\n\tprivate final HeadersRequestCondition headersCondition;\n\n\tprivate final ConsumesRequestCondition consumesCondition;\n\n\tprivate final ProducesRequestCondition producesCondition;\n\n\tprivate final RequestConditionHolder customConditionHolder;\n\t\n\t...\n```\n\n* 返回到`detectHandlerMethods`方法\n\n```java\nprotected void detectHandlerMethods(final Object handler) {\n    // 获取Handler的类型\n    Class<?> handlerType = (handler instanceof String ?\n            getApplicationContext().getType((String) handler) : handler.getClass());\n    final Class<?> userType = ClassUtils.getUserClass(handlerType);\n\n    // 这里获取 RequestMapping方法，会过滤掉普通方法\n    Map<Method, T> methods = MethodIntrospector.selectMethods(userType,\n            new MethodIntrospector.MetadataLookup<T>() {\n                @Override\n                public T inspect(Method method) {\n                    try {\n                        return getMappingForMethod(method, userType);\n                    }\n                    catch (Throwable ex) {\n                        throw new IllegalStateException(\"Invalid mapping on handler class [\" +\n                                userType.getName() + \"]: \" + method, ex);\n                    }\n                }\n            });\n    if (logger.isDebugEnabled()) {\n        logger.debug(methods.size() + \" request handler methods found on \" + userType + \": \" + methods);\n    }\n    for (Map.Entry<Method, T> entry : methods.entrySet()) {\n        Method invocableMethod = AopUtils.selectInvocableMethod(entry.getKey(), userType);\n        T mapping = entry.getValue();\n        // 注册 mappingRegistry\n        registerHandlerMethod(handler, invocableMethod, mapping);\n    }\n}\n```\n\n* 得到`Map<Method, T> methods`方法之后，就是把这些信息保存起来，`registerHandlerMethod(handler, invocableMethod, mapping);` 这行代码就是做的这个功能\n```java\nprotected void registerHandlerMethod(Object handler, Method method, T mapping) {\n    this.mappingRegistry.register(mapping, handler, method);\n}\n\t\npublic void register(T mapping, Object handler, Method method) {\n    // 加锁\n    this.readWriteLock.writeLock().lock();\n    try {\n        // 创建HandlerMethod\n        HandlerMethod handlerMethod = createHandlerMethod(handler, method);\n        assertUniqueMethodMapping(handlerMethod, mapping);\n\n        if (logger.isInfoEnabled()) {\n            logger.info(\"Mapped \\\"\" + mapping + \"\\\" onto \" + handlerMethod);\n        }\n        this.mappingLookup.put(mapping, handlerMethod);\n\n        List<String> directUrls = getDirectUrls(mapping);\n        for (String url : directUrls) {\n            this.urlLookup.add(url, mapping);\n        }\n\n        String name = null;\n        if (getNamingStrategy() != null) {\n            name = getNamingStrategy().getName(handlerMethod, mapping);\n            addMappingName(name, handlerMethod);\n        }\n\n        CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);\n        if (corsConfig != null) {\n            this.corsLookup.put(handlerMethod, corsConfig);\n        }\n        /**\n         * private final Map<T, MappingRegistration<T>> registry = new HashMap<T, MappingRegistration<T>>();\n         * key: RequestMappingInfo\n         */\n        this.registry.put(mapping, new MappingRegistration<T>(mapping, handlerMethod, directUrls, name));\n    }\n    finally {\n        this.readWriteLock.writeLock().unlock();\n    }\n}\n```\n\n* 查看`private final Map<T, MappingRegistration<T>> registry` 对象，见下图`key`值是`RequestMappingInfo` `value`是`MappingRegistration`\n\n![image](/images/server/spring/spring-mvc/registry.jpg)\n\n> MappingRegistration.java\n\n```java\nprivate static class MappingRegistration<T> {\n\n    private final T mapping;\n\n    private final HandlerMethod handlerMethod;\n\n    private final List<String> directUrls;\n\n    private final String mappingName;\n    \n    ...\n```\n\n## 3.1 总结\n\n* `Spring Mvc`提供了各种各样的抽象，你能感受到面向对象的魅力。\n\n    * `RequestMappingInfo` 这个类是对请求映射的一个抽象，它包含了请求路径，请求方法，请求头等信息。其实可以看做是@RequestMapping的一个对应类。\n\n    * `HandlerMethod`这个类封装了处理器实例`（Controller Bean）`和 处理方法实例`（Method）`以及方法参数数组`（MethodParameter[]）`\n\n    * `MethodParameter`  这个类从2.0就有了，它封装了方法某个参数的相关信息及行为，如该参数的索引，该参数所属方法实例或构造器实例，该参数的类型等。\n\n    * `HandlerMapping` 该接口的实现类用来定义请求和处理器之前的映射关系，其中只定义了一个方法`getHandler`。\n\n    * `AbstractHandlerMethodMapping` 这是`HandlerMapping`的一个基本实现类，该类定义了请求与`HandlerMethod`实例的映射关系。\n\n    * `RequestMappingInfoHandlerMapping`这个是`AbstractHandlerMethodMapping`的实现类，他维护了一个`RequestMappingInfo`和`HandlerMethod`的Map属性。\n\n    * `RequestMappingHandlerMapping` 这个是`RequestMappingInfoHandlerMapping`的子类，它将`@RequestMapping`注解转化为`RequestMappingInfo`实例，并为父类使用。也就是我们处理@RequestMapping的终点。\n\n    * `InitializingBean` 这个接口定义了其实现`Bean`在容器完成属性设置后可以执行自定义初始化操作，我们的`AbstractHandlerMethodMapping`便实现了这个接口，并且定义了一组自定义操作，就是用来检测处理我们的@RequestMapping注解。\n\n## 4.1 参考\n官方文档: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\n\nhttps://www.cnblogs.com/taotingkai/p/8438360.html","tags":["spring"],"categories":["服务器"]},{"title":"Spring Mvc源码(四)请求映射处理组件HandlerMapping","url":"/2019/02/25/backend/spring/sourceCodeAnalysis/Spring Mvc源码(四)请求映射处理组件HandlerMapping/","content":"## 1.1 前言\n* 上一章节介绍了`Spring Mvc`执行一个普通请求的整体流程，这一章节介绍其请求映射处理组件`HandlerMapping` 的作用\n\n* `HandlerMapping`负责根据`request`请求找到对应的`Handler`处理器及`Interceptor`拦截器,并将它们封装在`HandlerExecutionChain`对象内，返回给中央调度器\n\n\n## 2.1 请求映射处理组件`HandlerMapping` 解析\n\n### 2.1.1 `HandlerMapping` 解析\n* 先来回顾核心方法体`doDispatch(HttpServletRequest request, HttpServletResponse response)`，查看`HandlerMapping` 对应的处理逻辑\n\n```java\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\t\t// 获取当前请求的WebAsyncManager，如果没找到则创建并与请求关联\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\t// 检查是否有 Multipart，有则将请求转换为 Multipart 请求\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\t// 遍历所有的 HandlerMapping 找到与请求对应的 Handler，并将其与一堆拦截器封装到 HandlerExecution 对象中\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null || mappedHandler.getHandler() == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\t// 遍历所有的 HandlerAdapter，找到可以处理该 Handler 的 HandlerAdapter\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\t// 处理 last-modified 请求头\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n\t\t\t\t\t}\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\t// 执行实际的处理程序\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\t// 遍历拦截器，执行它们的 postHandle() 方法\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tcatch (Throwable err) {\n\t\t\t\t// As of 4.3, we're processing Errors thrown from handler methods as well,\n\t\t\t\t// making them available for @ExceptionHandler methods and other scenarios.\n\t\t\t\tdispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n\t\t\t}\n\t\t    // 处理执行结果，是一个 ModelAndView 或 Exception，然后进行渲染\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Throwable err) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,\n\t\t\t\t\tnew NestedServletException(\"Handler processing failed\", err));\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\t// 遍历拦截器，执行它们的 afterCompletion() 方法\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n\n\n* 下面是请求映射处理组件`HandlerMapping` 主要的处理代码\n```java\n    HandlerExecutionChain mappedHandler = null;\n    ...\n    \n    // Determine handler for the current request.\n    // 遍历所有的 HandlerMapping 找到与请求对应的 Handler，并将其与一堆拦截器封装到 HandlerExecution 对象中\n    mappedHandler = getHandler(processedRequest);\n    if (mappedHandler == null || mappedHandler.getHandler() == null) {\n        noHandlerFound(processedRequest, response);\n        return;\n    }\n```\n\n\n\n* 继续在`doDispatch`方法中`mappedHandler = getHandler(processedRequest);` 这行代码打好断点，进入该方法\n```java\n\t/**\n\t * Return the HandlerExecutionChain for this request.\n\t * <p>Tries all handler mappings in order.\n\t * @param request current HTTP request\n\t * @return the HandlerExecutionChain, or {@code null} if no handler could be found\n\t */\n\tprotected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n\t\t// 循环handlerMappings eg: RequestMappingHandlerMapping、SimpleUrlHandlerMapping、BeanNameUrlHandlerMapping\n\t\tfor (HandlerMapping hm : this.handlerMappings) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\n\t\t\t\t\t\t\"Testing handler map [\" + hm + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t\t// 遍历HandlerMapping实现类的找到对应的 HandlerExecutionChain\n\t\t\tHandlerExecutionChain handler = hm.getHandler(request);\n\t\t\tif (handler != null) {\n\t\t\t\t// 注意这里是找到第一个就直接返回\n\t\t\t\treturn handler;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n\n> this.handlerMappings\n \n```java\n/** List of HandlerMappings used by this servlet */\nprivate List<HandlerMapping> handlerMappings;\n```\n\n* 可以看到是遍历了`this.handlerMappings`这个对象，这个对象是个`list`，`HandlerMapping`的初始化处理在第二章有其介绍， 在调试过程中，我们可以看到，默认加载的是如下图所示的的`HandlerMapping`，\n\n\n![](/images/server/spring/spring-mvc/HandlerMapping1.png)\n\n\n* 下面来介绍这三种常用的`HandlerMapping`的作用 \n    * `RequestMappingHandlerMapping`是三个中最常用的`handlerMapping`，使用注解方式最为方便快捷，`SpringMvc`项目开发都是采用这种形式，配合`@RequestMapping()`相关注释就可以完成开发\n        ```java\n            <!-- 注册HandlerMapper、HandlerAdapter两个映射类 -->\n            <mvc:annotation-driven />\n             \n            <!-- 访问静态资源 -->\n            <mvc:default-servlet-handler />\n             \n            <!-- 配置扫描的包 -->\n            <context:component-scan base-package=\"com.songsy.*\" />\n   \n            @RestController\n            @RequestMapping(\"/hello\")\n            public class HelloController {\n                protected final Log logger = LogFactory.getLog(this.getClass());\n             \n                @RequestMapping(\"/index\")\n                public String index(){\n                    return \"test\";\n                }\n            }\n        ```\n    * `SimpleUrlHandlerMapping`\n    \n        `SimpleUrlHandlerMapping`的`Controller`处理类需要实现`Controller`接口，并注册成`Bean`就可以完成配置，处理逻辑写在`handleRequest`方法体内\n        ```java\n            <bean class=\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\">\n                <property name=\"mappings\">\n                    <props>\n                        <prop key=\"/simpleUrlHandlerMapping.do\">welcomeController</prop>\n                    </props>\n                 </property>\n            </bean>\n\n            /**\n             * @author Rob Harrop\n             */\n            public class WelcomeController implements Controller {\n            \n                @Override\n                public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) {\n                    return new ModelAndView(\"welcomeView\");\n                }\n            \n            }\n\n        ```\n    * `BeanNameUrlHandlerMapping`需要配置 `<bean id=\"/index\" class=\"com.alipay.web.TestController\" />`，注意在bean的id中要加上斜杆，Controller方面的测试代码跟前面的SimpleUrlHandlerMapping一样，实现Controller，重写handlerRequest()方法即可。\n\n### 2.1.2 `HandlerMapping` 注册过程\n\n* 回到`DispatcherServlet` 类中`onRefresh` 方法\n```java\n\t/**\n\t * Initialize the strategy objects that this servlet uses.\n\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t */\n\tprotected void initStrategies(ApplicationContext context) {\n\t\t// 上传组件组件初始化\n\t\tinitMultipartResolver(context);\n\t\tinitLocaleResolver(context);\n\t\tinitThemeResolver(context);\n\t\t// 请求映射处理组件初始化\n\t\tinitHandlerMappings(context);\n\t\t// 处理适配器组建初始化\n\t\tinitHandlerAdapters(context);\n\t\t// 异常处理组件初始化\n\t\tinitHandlerExceptionResolvers(context);\n\t\tinitRequestToViewNameTranslator(context);\n\t\t// 视图处理组件初始化\n\t\tinitViewResolvers(context);\n\t\tinitFlashMapManager(context);\n\t}\n```\n\n* 进入`initHandlerMappings(context);`方法，这里实现了`HandlerMappings`的注册过程， `BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);` 可以看到用了`Spring`的工具类 `beansOfTypeIncludingAncestors` 返回给定类型或子类型的所有bean\n```java\n\t/**\n\t * Initialize the HandlerMappings used by this class.\n\t * <p>If no HandlerMapping beans are defined in the BeanFactory for this namespace,\n\t * we default to BeanNameUrlHandlerMapping.\n\t */\n\tprivate void initHandlerMappings(ApplicationContext context) {\n\t\tthis.handlerMappings = null;\n\n\t\tif (this.detectAllHandlerMappings) {\n\t\t\t// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\n            // 在ApplicationContext bean中找到所有HandlerMappings\n\t\t\tMap<String, HandlerMapping> matchingBeans =\n\t\t\t\t\tBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\n\t\t\tif (!matchingBeans.isEmpty()) {\n\t\t\t\tthis.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());\n\t\t\t\t// We keep HandlerMappings in sorted order.\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.handlerMappings);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tHandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n\t\t\t\tthis.handlerMappings = Collections.singletonList(hm);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\t// Ignore, we'll add a default HandlerMapping later.\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we have at least one HandlerMapping, by registering\n\t\t// a default HandlerMapping if no other mappings are found.\n\t\tif (this.handlerMappings == null) {\n\t\t\tthis.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n\t\t\t}\n\t\t}\n\t}\n```\n\n* 下一章节来跟进`RequestMappingHandlerMapping`这个`HandlerMapping` 的具体实现\n\n## 3.1 总结\n* `HandlerMapping`我们知道他的作用是根据`request`找到对应的`Handler`，`Handler`具体表现形式可以为类，也可以为方法，上面的三种常用的`HandlerMapping`有其介绍，我们平常使用`@RequestMapping`注解来标识一个方法，这个注解的作用就是将这个方法注册为`Handler`\n* 为什么需要要多种`HandlerMapping`呢，当然是为了其可扩展性，实现`HandlerMapping`接口就可以实现自定义`Handler`的获取，从而实现定制化\n* `Spring Mvc` 大量使用了`模版方法模式`，父类定义流程，子类实现，而这些口子都是所谓的模板方法，可以自由指定，从而保证了灵活性，良好的抽象设计，是整个框架变得非常灵活\n* `Spring Mvc` 核心类中所有的变量声明，几乎都以接口的形式给出，并没有绑定在具体的实现类上\n\n## 4.1 参考\n官方文档: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\n\nhttps://www.jianshu.com/p/e4f1c9326223\n\nhttps://blog.csdn.net/gaoshan12345678910/article/details/81778587\n\nhttps://blog.csdn.net/lang_programmer/article/details/71598042\n\n","tags":["spring"],"categories":["服务器"]},{"title":"Spring Mvc源码(三)核心分发器DispatcherServlet处理流程","url":"/2019/01/28/backend/spring/sourceCodeAnalysis/Spring Mvc源码(三)核心分发器DispatcherServlet处理流程/","content":"## 1.1 前言\n上一章节介绍了`DispatcherServlet`的初始化过程，这一章节介绍核心分发器`DispatcherServlet`是怎样处理请求的\n\n## 2.1 DispatcherServlet 处理请求过程\n\n![](/images/server/spring/spring-mvc/spring-mvc-handle.png)\n\n* 既然`DispatcherServlet`本身是`Servlet`，我们就要专注于它的`service、doGet、doPost`等相关方法，在`FrameworkServlet`里可以看到`service、doGet、doPost`这些方法的重载实现，可以看到都是流转到`processRequest(request, response);`这个方法中\n```java\n\t/**\n\t * Override the parent class implementation in order to intercept PATCH requests.\n\t */\n\t@Override\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tHttpMethod httpMethod = HttpMethod.resolve(request.getMethod());\n\t\tif (HttpMethod.PATCH == httpMethod || httpMethod == null) {\n\t\t\tprocessRequest(request, response);\n\t\t}\n\t\telse {\n\t\t\tsuper.service(request, response);\n\t\t}\n\t}\n\n\t/**\n\t * Delegate GET requests to processRequest/doService.\n\t * <p>Will also be invoked by HttpServlet's default implementation of {@code doHead},\n\t * with a {@code NoBodyResponse} that just captures the content length.\n\t * @see #doService\n\t * @see #doHead\n\t */\n\t@Override\n\tprotected final void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate POST requests to {@link #processRequest}.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected final void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate PUT requests to {@link #processRequest}.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected final void doPut(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate DELETE requests to {@link #processRequest}.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected final void doDelete(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n```\n* 根据`service`方法，我们一步步找到一个方法链`service –> processRequest –> doService –> doDispatch`，我们最终将目光定位在`doDispatch`，因为从它的方法体就可以看出它是整个`SpringMVC`的核心方法。\n```java\n\t/**\n\t * Process the actual dispatching to the handler.\n\t * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n\t * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n\t * to find the first that supports the handler class.\n\t * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n\t * themselves to decide which methods are acceptable.\n\t * @param request current HTTP request\n\t * @param response current HTTP response\n\t * @throws Exception in case of any kind of processing failure\n\t */\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\t\t// 获取当前请求的WebAsyncManager，如果没找到则创建并与请求关联\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\t// 检查是否有 Multipart，有则将请求转换为 Multipart 请求\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\t// 遍历所有的 HandlerMapping 找到与请求对应的 Handler，并将其与一堆拦截器封装到 HandlerExecution 对象中\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null || mappedHandler.getHandler() == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\t// 遍历所有的 HandlerAdapter，找到可以处理该 Handler 的 HandlerAdapter\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\t// 处理 last-modified 请求头\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n\t\t\t\t\t}\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\t// 执行实际的处理程序\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\t// 遍历拦截器，执行它们的 postHandle() 方法\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tcatch (Throwable err) {\n\t\t\t\t// As of 4.3, we're processing Errors thrown from handler methods as well,\n\t\t\t\t// making them available for @ExceptionHandler methods and other scenarios.\n\t\t\t\tdispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n\t\t\t}\n\t\t    // 处理执行结果，是一个 ModelAndView 或 Exception，然后进行渲染\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Throwable err) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,\n\t\t\t\t\tnew NestedServletException(\"Handler processing failed\", err));\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\t// 遍历拦截器，执行它们的 afterCompletion() 方法\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n* 说它是核心一点也不为过，从上述代码的中文注释可以看出，它包含了解析请求，执行相关拦截器，执行handle方法，这行代码是真正执行我们controller的方法`mv = ha.handle(processedRequest, response, mappedHandler.getHandler());`，那`SpringMvc`是怎样找到我们的方法的呢，下一章节将介绍\n\n## 3.1 总结\n* `Spring Mvc` 的处理方式是先在顶层设计好整体结构，然后将具体的处理交给不同的组件具体去实现\n* `DispatcherServlet`中的`doDispatch`方法完成了具体的请求处理，下面是主要流程\n    *  遍历所有的 `HandlerMapping` 找到与请求对应的 `Handler`，并将其与一堆拦截器封装到 `HandlerExecutionChain` 对象中\n    *  遍历所有的 `HandlerAdapter`，找到可以处理该 `Handler` 的 `HandlerAdapter`\n    *  执行相应拦截器`Interceptor`的`preHandle`方法\n    *  `HandlerAdapter` 执行`Hander`，由`Hander` 执行实际的处理程序，执行Controller里的方法\n    *  调用`processDispatchResult`处理结果\n    *  执行相应拦截器`Interceptor`的`postHandle`方法\n* 下面是流程图\n\n![](/images/server/spring/spring-mvc/dispatcherServlet1.png) \n\n* 下面的章节将详细介绍这些流程\n    * 1、请求映射处理组件`HandlerMapping`处理 \n    * 2、`HandlerAdapter`处理 \n    * 3、`Interceptor`的`preHandle`方法处理\n    * 4、`Hander` 执行实际的处理程序，执行Controller里的方法 \n    * 5、调用`processDispatchResult`处理结果\n    * 6、Interceptor`的`postHandle`方法处理\n## 4.1 参考\n官方文档: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\n\nhttp://www.cnblogs.com/fangjian0423/p/springMVC-dispatcherServlet.html\n\nhttps://blog.csdn.net/lang_programmer/article/details/71598042\n\n","tags":["spring"],"categories":["服务器"]},{"title":"Spring Mvc源码(二)核心分发器DispatcherServlet初始化","url":"/2019/01/23/backend/spring/sourceCodeAnalysis/Spring Mvc源码(二)核心分发器DispatcherServlet初始化/","content":"## 1.1 前言\n我们都知道`DispatcherServlet`是所谓前端控制器，是整个`Spring Mvc`的入口，但是这个前端控制器里面又有很多箱子，每一个箱子都有其独有的功能，当我们翻开一个箱子之后看看里面有什么的时候，又会发现箱子里面装着又一个箱子，所以我们需要一个个的探究这些箱子。\n\n## 2.1 DispatcherServlet 初始化过程\n### 2.1.1 配置 DispatcherServlet\n* 首先，Tomcat每次启动时都会加载并解析/WEB-INF/web.xml文件，所以可以先从web.xml找突破口，主要代码如下\n```xml\n  <servlet >\n    <servlet-name >spring-mvc</servlet-name>\n    <!-- servlet类 -->\n    <servlet-class >org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <!-- 初始化参数 -->\n    <init-param >\n      <param-name >contextConfigLocation</param-name>\n      <param-value >classpath:/spring-mvc.xml</param-value>\n    </init-param>\n    <!-- 启动时加载 -->\n    <load-on-startup >1</load-on-startup>\n  </servlet>\n  <servlet-mapping >\n    <servlet-name >spring-mvc</servlet-name>\n    <url-pattern >/</url-pattern>\n  </servlet-mapping>\n```\n* 可以看到 `DispatcherServlet` 本身就是个`Servlet`，那么看看`DispatcherServlet`做了什么呢，我们先看下DispatcherServlet的继承关系，重点关注`HttpServletBean` 和`FrameworkServlet` 这两个类\n```java\nGenericServlet (javax.servlet)\n    HttpServlet (javax.servlet.http)\n        HttpServletBean (org.springframework.web.servlet)\n            FrameworkServlet (org.springframework.web.servlet)\n                DispatcherServlet (org.springframework.web.servlet)\n```\n![](source/images/server/spring/spring-mvc/DispatcherServlet.png)\n\n* 通过上图可以看到 `DispatcherServlet` 实现了Spring 的`ApplicationContextAware`、`EnvironmentCapable`、 `EnvironmentAware`这些`Spring`中的接口，`XXXAware`在`Spring`中表示对XXX可以感知，通俗点可以说在某个类中想使用`Spring`的一些东西，就可以实现`XXXAware`接口告诉`Spring`我要这个东西，比如`ApplicationContextAware`，该接口只有一个方法就是`setApplicationContext(ApplicationContext applicationContext)`, 通过该方法可以得到`ApplicationContext`，`Spring`容器会检测容器中的所有`Bean`，如果发现某个`Bean`实现了`ApplicationContextAware`接口，Spring容器会在创建该`Bean`之后，自动调用该`Bean`的`setApplicationContextAware()`方法，调用该方法时，会将容器本身作为参数传给该方法——该方法中的实现部分将`Spring`传入的参数（容器本身）赋给该类对象的`applicationContext`实例变量，因此接下来可以通过该applicationContext实例变量来访问容器本身。实现`XXXCapable`接口表示可以得到某种能力，实现`EnvironmentCapable`接口说明可以得到`Environment`的能力，也就是可以提供`Environment`\n```java\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) {\n\t\tif (this.webApplicationContext == null && applicationContext instanceof WebApplicationContext) {\n\t\t\tthis.webApplicationContext = (WebApplicationContext) applicationContext;\n\t\t\tthis.webApplicationContextInjected = true;\n\t\t}\n\t}\n```\n```java\n@Override\n\tpublic ConfigurableEnvironment getEnvironment() {\n\t\tif (this.environment == null) {\n\t\t\tthis.environment = createEnvironment();\n\t\t}\n\t\treturn this.environment;\n\t}\n```\n\n\n* `HttpServletBean` 覆写了`GenericServlet` 的`init`方法，此方法是第一次访问该`DispatcherServlet`的时候就会执行，对初始化过程做了一些处理，`HttpServletBean` 这个类的作用主要做一些初始化的工作，将`web.xml`中配置的参数设置到`Servlet`中。比如`servlet`标签的子标签`init-param`标签中配置的参数(classpath:/spring-mvc.xml)。\n```java\n\t@Override\n\tpublic final void init() throws ServletException {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Initializing servlet '\" + getServletName() + \"'\");\n\t\t}\n\n\t\t// 构造过程中会使用ServletConfig对象找出web.xml配置文件中的配置参数并设置到ServletConfigPropertyValues内部\n\t\t// Set bean properties from init parameters.\n\t\tPropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n\t\tif (!pvs.isEmpty()) {\n\t\t\ttry {\n\t\t\t\t// 使用BeanWrapper构造DispatcherServlet\n\t\t\t\tBeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n\t\t\t\tResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n\t\t\t\tbw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n\t\t\t\tinitBeanWrapper(bw);\n\t\t\t\t// 设置DispatcherServlet属性\n\t\t\t\tbw.setPropertyValues(pvs, true);\n\t\t\t}\n\t\t\tcatch (BeansException ex) {\n\t\t\t\tif (logger.isErrorEnabled()) {\n\t\t\t\t\tlogger.error(\"Failed to set bean properties on servlet '\" + getServletName() + \"'\", ex);\n\t\t\t\t}\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t\t// 让子类去做一些事情，这种在父类定义在子类实现的方式叫做模版方法模式\n\t\t// Let subclasses do whatever initialization they like\n\t\tinitServletBean();\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Servlet '\" + getServletName() + \"' configured successfully\");\n\t\t}\n\t}\n```\n* 关注`initServletBean()`方法，该方法的实现在`FrameworkServlet` 类里，这个类的作用是将Servlet与Spring容器上下文关联。其实也就是初始化FrameworkServlet的属性webApplicationContext\n```java\n\t/**\n\t * Overridden method of {@link HttpServletBean}, invoked after any bean properties\n\t * have been set. Creates this servlet's WebApplicationContext.\n\t */\n\t@Override\n\tprotected final void initServletBean() throws ServletException {\n\t\tgetServletContext().log(\"Initializing Spring FrameworkServlet '\" + getServletName() + \"'\");\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tthis.logger.info(\"FrameworkServlet '\" + getServletName() + \"': initialization started\");\n\t\t}\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\ttry {\n\t\t\t// 初始化 WebApplicationContext (即SpringMVC的IOC容器)\n\t\t\tthis.webApplicationContext = initWebApplicationContext();\n\t\t\tinitFrameworkServlet();\n\t\t}\n\t\tcatch (ServletException ex) {\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\n\t\t\tthrow ex;\n\t\t}\n\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;\n\t\t\tthis.logger.info(\"FrameworkServlet '\" + getServletName() + \"': initialization completed in \" +\n\t\t\t\t\telapsedTime + \" ms\");\n\t\t}\n\t}\n```\n* 进入`this.webApplicationContext = initWebApplicationContext();`方法，这个方法的作用是先得到根上下文`rootContext` 然后创建`webApplicationContext`并设置根上下文（将 Spring 的容器设为 SpringMVC 容器的父容器），最后就是发布这个 `WebApplicationContext` 容器到 `ServletContext` 中\n```java\n\t/**\n\t * Initialize and publish the WebApplicationContext for this servlet.\n\t * <p>Delegates to {@link #createWebApplicationContext} for actual creation\n\t * of the context. Can be overridden in subclasses.\n\t * @return the WebApplicationContext instance\n\t * @see #FrameworkServlet(WebApplicationContext)\n\t * @see #setContextClass\n\t * @see #setContextConfigLocation\n\t */\n\tprotected WebApplicationContext initWebApplicationContext() {\n\t\t// 获取ContextLoaderListener 初始化并注册在 ServletContext 中的根容器，即 Spring 的容器\n\t\tWebApplicationContext rootContext =\n\t\t\t\tWebApplicationContextUtils.getWebApplicationContext(getServletContext());\n\t\tWebApplicationContext wac = null;\n\n\t\tif (this.webApplicationContext != null) {\n\t\t\t// A context instance was injected at construction time -> use it\n\t\t\twac = this.webApplicationContext;\n\t\t\tif (wac instanceof ConfigurableWebApplicationContext) {\n\t\t\t\tConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;\n\t\t\t\tif (!cwac.isActive()) {\n\t\t\t\t\t// The context has not yet been refreshed -> provide services such as\n\t\t\t\t\t// setting the parent context, setting the application context id, etc\n\t\t\t\t\tif (cwac.getParent() == null) {\n\t\t\t\t\t\t// The context instance was injected without an explicit parent -> set\n\t\t\t\t\t\t// the root application context (if any; may be null) as the parent\n\t\t\t\t\t\t// 将 Spring 的容器设为 SpringMVC 容器的父容器\n\t\t\t\t\t\tcwac.setParent(rootContext);\n\t\t\t\t\t}\n\t\t\t\t\tconfigureAndRefreshWebApplicationContext(cwac);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (wac == null) {\n\t\t\t// No context instance was injected at construction time -> see if one\n\t\t\t// has been registered in the servlet context. If one exists, it is assumed\n\t\t\t// that the parent context (if any) has already been set and that the\n\t\t\t// user has performed any initialization such as setting the context id\n\t\t\t// 如果 WebApplicationContext 为空，则进行查找，能找到说明上下文已经在别处初始化。\n\t\t\twac = findWebApplicationContext();\n\t\t}\n\t\tif (wac == null) {\n\t\t\t// No context instance is defined for this servlet -> create a local one\n\t\t\t// 如果 WebApplicationContext 仍为空，则以 Spring 的容器为父上下文建立一个新的，并设置根上下文为父上下文\n\t\t\twac = createWebApplicationContext(rootContext);\n\t\t}\n\t\tif (!this.refreshEventReceived) {\n\t\t\t// Either the context is not a ConfigurableApplicationContext with refresh\n\t\t\t// support or the context injected at construction time had already been\n\t\t\t// refreshed -> trigger initial onRefresh manually here.\n\t\t\t// 模版方法，由 DispatcherServlet 实现\n\t\t\tonRefresh(wac);\n\t\t}\n\t\tif (this.publishContext) {\n\t\t\t// Publish the context as a servlet context attribute.\n\t\t\t// 发布这个 WebApplicationContext 容器到 ServletContext 中\n\t\t\tString attrName = getServletContextAttributeName();\n\t\t\tgetServletContext().setAttribute(attrName, wac);\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tthis.logger.debug(\"Published WebApplicationContext of servlet '\" + getServletName() +\n\t\t\t\t\t\t\"' as ServletContext attribute with name [\" + attrName + \"]\");\n\t\t\t}\n\t\t}\n\t\treturn wac;\n\t}\n```\n* 这里的根上下文是`web.xml`中配置的`ContextLoaderListener`监听器中根据`contextConfigLocation`路径生成的上下文。比如这段配置文件中根据`classpath:springConfig/applicationContext.xml`下的`xml`文件生成的根上下文。`ContextLoaderListener` 实现了`ServletContextListener`，当配置了`listener`之后启动web容器就会执行它实现的方法，使用`ServletContextListener`接口，开发者能够在客户端请求提供服务之前向`ServletContext`中添加任意的对象，`ServletContext`在web容器运行期间都是可见的\n```xml\n    <context-param>\n      <param-name>contextConfigLocation</param-name>  \n      <param-value>classpath:springConfig/applicationContext.xml</param-value>  \n    </context-param>\n    <listener>\n      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  \n    </listener>\n```\n\n\n* `onRefresh(wac);` 由 `DispatcherServlet` 实现，这里的操作就是`Spring Mvc`自身的初始化过程\n```java\n\t/**\n\t * This implementation calls {@link #initStrategies}.\n\t */\n\t@Override\n\tprotected void onRefresh(ApplicationContext context) {\n\t\t// initStrategies方法内部会初始化各个策略接口的实现类。\n\t\tinitStrategies(context);\n\t}\n\n\t/**\n\t * Initialize the strategy objects that this servlet uses.\n\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t */\n\tprotected void initStrategies(ApplicationContext context) {\n\t\t// 上传组件组件初始化\n\t\tinitMultipartResolver(context);\n\t\tinitLocaleResolver(context);\n\t\tinitThemeResolver(context);\n\t\t// 请求映射处理组件初始化\n\t\tinitHandlerMappings(context);\n\t\t// 处理适配器组建初始化\n\t\tinitHandlerAdapters(context);\n\t\t// 异常处理组件初始化\n\t\tinitHandlerExceptionResolvers(context);\n\t\tinitRequestToViewNameTranslator(context);\n\t\t// 视图处理组件初始化\n\t\tinitViewResolvers(context);\n\t\tinitFlashMapManager(context);\n\t}\n```\n\n### 2.1.1 DispatcherServlet 默认加载bean\n\n* `DispatcherServlet` 初始化的时候会默认加载一些组件，代码如下，可以看到是在`static`代码块中读取一个配置文件并把它注册为`Properties defaultStrategies`对象\n```java\n\t/**\n\t * Name of the class path resource (relative to the DispatcherServlet class)\n\t * that defines DispatcherServlet's default strategy names.\n\t */\n\tprivate static final String DEFAULT_STRATEGIES_PATH = \"DispatcherServlet.properties\";\n\t\n\t...\n\t\n    static {\n        // Load default strategy implementations from properties file.\n        // This is currently strictly internal and not meant to be customized\n        // by application developers.\n        try {\n            ClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.class);\n            defaultStrategies = PropertiesLoaderUtils.loadProperties(resource);\n        }\n        catch (IOException ex) {\n            throw new IllegalStateException(\"Could not load '\" + DEFAULT_STRATEGIES_PATH + \"': \" + ex.getMessage());\n        }\n    }\n\t\n```\n\n* 查看`DispatcherServlet.properties`文件，该文件在`Spring web mvc` 包下\n```properties\n# Default implementation classes for DispatcherServlet's strategy interfaces.\n# Used as fallback when no matching beans are found in the DispatcherServlet context.\n# Not meant to be customized by application developers.\n\norg.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver\n\norg.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver\n\norg.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\\\n\torg.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\n\norg.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\\\n\torg.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\\\n\torg.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\n\norg.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\\n\torg.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\\n\torg.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver\n\norg.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator\n\norg.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver\n\norg.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager\n```\n\n* 从如上配置可以看出`DispatcherServlet` 配置的是一些类的全限定名，那它是在哪里调用的呢，还是回到之前的`onRefresh(wac);` 的`initStrategies(ApplicationContext context)`方法\n```java\nprotected void initStrategies(ApplicationContext context) {\n    // 上传组件组件初始化\n    initMultipartResolver(context);\n    initLocaleResolver(context);\n    initThemeResolver(context);\n    // 请求映射处理组件初始化\n    initHandlerMappings(context);\n    // 处理适配器组建初始化\n    initHandlerAdapters(context);\n    // 异常处理组件初始化\n    initHandlerExceptionResolvers(context);\n    initRequestToViewNameTranslator(context);\n    // 视图处理组件初始化\n    initViewResolvers(context);\n    initFlashMapManager(context);\n}\n```\n* 进入`initHandlerMappings(context);` 方法\n```java\n\tprivate void initHandlerMappings(ApplicationContext context) {\n\t\tthis.handlerMappings = null;\n\n\t\tif (this.detectAllHandlerMappings) {\n\t\t\t// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\n            // 在ApplicationContext bean中找到所有HandlerMappings， beansOfTypeIncludingAncestors 返回给定类型或子类型的所有bean\n\t\t\tMap<String, HandlerMapping> matchingBeans =\n\t\t\t\t\tBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\n\t\t\tif (!matchingBeans.isEmpty()) {\n\t\t\t\tthis.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());\n\t\t\t\t// We keep HandlerMappings in sorted order.\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.handlerMappings);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tHandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n\t\t\t\tthis.handlerMappings = Collections.singletonList(hm);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\t// Ignore, we'll add a default HandlerMapping later.\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we have at least one HandlerMapping, by registering\n\t\t// a default HandlerMapping if no other mappings are found.\n\t\tif (this.handlerMappings == null) {\n\t\t\t// 在这里将设置\n\t\t\tthis.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n\t\t\t}\n\t\t}\n\t}\n```\n* 关注`this.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);` 这行代码，可以看到`this.handlerMappings` 在这里赋值，继续进入该方法\n```java\nprotected <T> List<T> getDefaultStrategies(ApplicationContext context, Class<T> strategyInterface) {\n    String key = strategyInterface.getName();\n    String value = defaultStrategies.getProperty(key);\n    if (value != null) {\n        String[] classNames = StringUtils.commaDelimitedListToStringArray(value);\n        List<T> strategies = new ArrayList<T>(classNames.length);\n        for (String className : classNames) {\n            try {\n                Class<?> clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());\n                Object strategy = createDefaultStrategy(context, clazz);\n                strategies.add((T) strategy);\n            }\n            catch (ClassNotFoundException ex) {\n                throw new BeanInitializationException(\n                        \"Could not find DispatcherServlet's default strategy class [\" + className +\n                                \"] for interface [\" + key + \"]\", ex);\n            }\n            catch (LinkageError err) {\n                throw new BeanInitializationException(\n                        \"Error loading DispatcherServlet's default strategy class [\" + className +\n                                \"] for interface [\" + key + \"]: problem with class file or dependent class\", err);\n            }\n        }\n        return strategies;\n    }\n    else {\n        return new LinkedList<T>();\n    }\n}\n```\n* 从可以看到`String value = defaultStrategies.getProperty(key);` 这里使用了我们的配置对象，`createDefaultStrategy` 方法就是根据`Class`对象来创建`bean`\n```java\n\tprotected Object createDefaultStrategy(ApplicationContext context, Class<?> clazz) {\n\t\treturn context.getAutowireCapableBeanFactory().createBean(clazz);\n\t}\n```\n\n\n## 3.1 总结\n* HttpServletBean 主要做一些初始化的工作，将web.xml中配置的参数设置到Servlet中。比如servlet标签的子标签init-param标签中配置的参数。\n\n* FrameworkServlet 将Servlet与Spring容器上下文关联。其实也就是初始化FrameworkServlet的属性webApplicationContext，这个属性代表SpringMVC上下文，它有个父类上下文，既web.xml中配置的ContextLoaderListener监听器初始化的容器上下文。\n\n* DispatcherServlet 初始化各个功能的实现类。比如异常处理、视图处理、请求映射处理等。\n\n* `DispatcherServlet`会自动注册一些特殊的`Bean`，无需我们注册，如果我们注册了，默认的将不会注册。 因此`BeanNameUrlHandlerMapping、SimpleControllerHandlerAdapter`是不需要注册的，`DispatcherServlet`默认会注册这两个`Bean`。\n\n## 4.1 参考\n官方文档: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\n\nhttp://www.cnblogs.com/fangjian0423/p/springMVC-dispatcherServlet.html\n\nhttps://blog.csdn.net/lang_programmer/article/details/71598042\n\n","tags":["spring"],"categories":["服务器"]},{"title":"Spring Mvc源码(一)Spring Mvc介绍","url":"/2019/01/23/backend/spring/sourceCodeAnalysis/Spring Mvc源码(一)Spring Mvc介绍/","content":"\n### 1.1 什么是Spring Mvc\n* 在JavaEE体系结构中一个应用可以划分为四个层次，从上到下分别是应用层、Web层、业务层、持久层，现在的项目大都是按照这种结构来开发，我们这一系列介绍的是Web层的处理框架`Spring Mvc`\n\n* `Spring Web Mvc`是一种基于Java的轻量级Web框架，使用了MVC架构模式的思想，将web层进行职责解耦，基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们简化开发。\n\n### 2.1 为什么要使用Spring Mvc\n#### 2.1.1 没有使用Spring Mvc会怎么样\n在Web开发模式中，主要有两个开发模式，称为模式一（Mode I）和模式二（Mode II）. 模式二是因为受不了模式一的缺点而进化出来的，而Spring Mvc则是模式二的进化版本，下面是两种模式的介绍：\n* 模式一（Mode I）指的就是在开发中将显示层、控制层、数据层的操作统一交给JSP或者JavaBean来进行处理！\n    * 优点\n        * 开发速度贼快，适合炒鸡简单的应用 \n    * 缺点\n        * 程序的可读性差、复用性低、代码复杂！什么jsp代码、html代码都往上面写，这肯定很难阅读，很难重用！\n        * 要求开发者不仅要掌握 Java ，还要有高超的前端水平\n        * 前端和后端相互依赖，前端需要等待后端完成，后端也依赖前端完成，才能进行有效的测试\n        \n![](/images/server/spring/spring-mvc/model1.png)\n\n* 模式二（Mode II）中所有的开发都是以Servlet为主体展开的，由Servlet接收所有的客户端请求，然后根据请求调用相对应的JavaBean，并所有的显示结果交给JSP完成！，也就是俗称的MVC设计模式\n    * 优点\n        * 相比模式一，耦合度降低了，添加了Servlet来协调视图处理及业务数据处理\n    * 缺点\n        * 需要定义大量的Servlet来处理应用\n        \n    * MVC设计模式\n        * 模型层（Mode）：模型是什么呢？ 模型就是数据，就是 dao,bean\n        * 显示层（View）：视图是什么呢？ 就是网页, JSP，用来展示模型中的数据\n        * 控制层（Controller）：控制器是什么？ 控制器的作用就是把不同的数据(Model)，显示在不同的视图(View)上，Servlet 扮演的就是这样的角色。\n \n* 很多应用程序的问题在于处理业务数据的对象和显示业务数据的视图之间存在紧密耦合，\n\n![](/images/server/spring/spring-mvc/model2.png)\n\n* 模式二（Mode II）就很完美吗，不不不，还可以进行优化，所以有了Web Mvc框架\n\n    * 常见的Web Mvc框架有`Sturts`及主角`Spring Mvc`\n\n![](/images/server/spring/spring-mvc/model3.png)\n#### 2.1.2 对比其他WEB框架有那些优势\n* 使用简单，对于开发人员来说实现一个功能肯定是实现越简单越好，Spring Mvc配合一系列注解即可完成Web应用的开发，尤其是在SpringBoot上的体现越明显\n* 性能上Spring会稍微比Struts快。Spring mvc是基于方法的设计，而Sturts是基于类，每次发一次请求都会实例一个action，每个action都会被注入属性，而Spring基于方法，粒度更细，但要小心把握像在Servlet控制数据一样。\n* 易于和Spring容器集成，毕竟是自己家里人\n\n### 3.1 使用Spring Mvc\n\n\n### 4.1 总结\n* 框架本身就是为了找到一个平衡，用哪个合适，就用哪个\n\n### 5.1 参考\n* 官方文档: https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\n* https://www.cnblogs.com/wmyskxz/p/8848461.html\n\n","tags":["spring"],"categories":["服务器"]},{"title":"Mybatis源码(二十二)使用拦截器Interceptor完成分页","url":"/2018/12/22/backend/mybatis/sourceCodeAnalysis/Mybatis源码(二十二)使用拦截器Interceptor完成分页/","content":"## 前言\n只要有列表就会有分页功能，利用Mybatis拦截器Interceptor可以十分方便的完成分页功能\n\n## 思路\n在执行查询sql之前的时候只要添加`limit`关键字，即可完成分页，除了分页之外需要`count(*)`获取数据总数，然后通过页码得到页数\n\n## 实现\n* `Page.java` 分页对象\n```java\npublic class Page<T> {\n    private int end;                                        // 当前页尾条记录位置\n    private int limit;                                      // 每页记录数\n    private int page;                                       // 当前页\n    private long total;                                     // 总记录数\n    private String sortName;                                // 排序列\n    private String sortOrder;                               // 排序方式\n    private Map<String, Object> params = new HashMap<>();   // 请求参数\n    private List<String> columns = Lists.newArrayList();    // 查询出来的参数\n    private List<T> rows = new ArrayList<>();               // 记录\n\n    /**\n     * 限制分页长度\n     * limit：0 不限制大小\n     * @param limit\n     */\n    public Page(int limit) {\n        this.limit = limit;\n    }\n\n    public Page(HttpServletRequest request) {\n        String param = null;\n        String value = null;\n\n        param = \"pageIndex\";\n        value = request.getParameter(param);\n        if (value != null && value.length() > 0) {\n            this.page = Integer.parseInt(value);\n        } else {\n            this.page = 1;\n        }\n\n        param = \"limit\";\n        value = request.getParameter(param);\n        if (value != null && value.length() > 0) {\n            this.limit = Integer.parseInt(value);\n            if (this.limit > 15) {\n                this.limit = 15;\n            }\n        } else {\n            this.limit = 15;\n        }\n\n        param = \"sortName\";\n        value = request.getParameter(param);\n        if (value != null && value.length() > 0) {\n            this.sortName = CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, value);\n        }\n\n        param = \"sortOrder\";\n        value = request.getParameter(param);\n        if (value != null && value.length() > 0) {\n            this.sortOrder = value;\n        } else {\n            this.sortOrder = \"asc\";\n        }\n\n        Map<String, String[]> paramMap = request.getParameterMap();\n        for (String key : paramMap.keySet()) {\n            if (key.startsWith(\"s_\")) {\n                String vkey = key.substring(2);\n                String[] _params = paramMap.get(key);\n                if (_params.length > 0 && StringUtils.isNotEmpty(_params[0])) {\n                    getParams().put(vkey, StringUtils.join(_params, \">\").trim());\n                }\n            }\n        }\n    }\n\n    /**\n     * 当前页首条记录位置\n     *\n     * @return\n     */\n    public int getStart() {\n        if (page == 0) {\n            return 0;\n        }\n        return (page - 1) * limit;\n    }\n\n    /**\n     * 总页数\n     *\n     * @return\n     */\n    public int getTotalPage() {\n        if (limit == 0) {\n            return 0;\n        }\n        return (int) Math.ceil(total / Double.valueOf(limit));\n    }\n\n    /**\n     * 必须和数据库字段一致\n     *\n     * @param sortName\n     */\n    public void setSortName(String sortName) {\n        this.sortName = sortName;\n    }\n\n    /**\n     * 设置默认排序方式\n     *\n     * @param sortName  需要排序的表字段，数据库字段\n     * @param sortOrder\n     */\n    public void sortDefault(String sortName, String sortOrder) {\n        if (org.apache.commons.lang3.StringUtils.isEmpty(getSortName()) || org.apache.commons.lang3.StringUtils.isEmpty(getSortOrder())) {\n            setSortName(sortName);\n            setSortOrder(sortOrder);\n        }\n    }\n\n    public String getSortName() {\n        return sortName;\n    }\n\n    public String getSortOrder() {\n        return sortOrder;\n    }\n\n    public void setSortOrder(String sortOrder) {\n        this.sortOrder = sortOrder;\n    }\n\n    public Map<String, Object> getParams() {\n        return params;\n    }\n\n    public void setParams(Map<String, Object> params) {\n        this.params = params;\n    }\n\n    public void setParams(String key, Object value) {\n        Assert.notNull(key, \"key must be not null\");\n        Assert.notNull(value, \"value must be not null \");\n        this.params.put(key, value);\n    }\n\n    public List<T> getRows() {\n        return rows;\n    }\n\n    public void setRows(List<T> rows) {\n        this.rows = rows;\n    }\n\n    public List<String> getColumns() {\n        return columns;\n    }\n\n    public void setColumns(List<String> columns) {\n        this.columns = columns;\n    }\n\n    public int getEnd() {\n        return end;\n    }\n\n    public void setEnd(int end) {\n        this.end = end;\n    }\n\n    public int getLimit() {\n        return limit;\n    }\n\n    public void setLimit(int limit) {\n        this.limit = limit;\n    }\n\n    public int getPage() {\n        return page;\n    }\n\n    public void setPage(int page) {\n        this.page = page;\n    }\n\n    public long getTotal() {\n        return total;\n    }\n\n    public void setTotal(long total) {\n        this.total = total;\n    }\n}\n```\n\n\n* `PageInterceptor.java` 拦截器，此类`intercept` 方法是完成分页实现方法\n```java\n/**\n * mybatis拦截器，实现接口分页，拦截Executor接口的query方法\n */\n@Component\n@Intercepts({ @Signature(type = Executor.class, method = \"query\", args = { MappedStatement.class, Object.class,\n        RowBounds.class, ResultHandler.class }) })\npublic class PageInterceptor implements Interceptor {\n    private static Logger logger = LoggerFactory.getLogger(PageInterceptor.class);\n\n    static int MAPPED_STATEMENT_INDEX = 0;\n    static int PARAMETER_INDEX = 1;\n    static int ROWBOUNDS_INDEX = 2;\n    static int RESULT_HANDLER_INDEX = 3;\n\n    // 需要拦截的ID(正则匹配)\n    private static final String DEFAULT_PAGE_SQL_ID = \".*Page$\";\n\n\n    /**\n     * setProperties方法是用于在Mybatis配置文件中指定一些属性的。\n     * @param properties\n     */\n    @Override\n    public void setProperties(Properties properties) {\n\n    }\n\n    /**\n     * 拦截器用于封装目标对象\n     * 在plugin方法中我们可以决定是否要进行拦截进而决定要返回一个什么样的目标对象\n     * @param o\n     * @return\n     */\n    @Override\n    public Object plugin(Object o) {\n        if (Executor.class.isAssignableFrom(o.getClass())) {\n            // 在这里返回新的 PageExecutor，用于装饰原Executor\n            return Plugin.wrap(new PageExecutor((Executor) o), this);\n        }\n        return Plugin.wrap(o, this);\n    }\n\n    /**\n     * 在这里完成分页及排序操作得到 新的BoundSql 然后执行查询\n     * @param invocation\n     * @return\n     * @throws Throwable\n     */\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n        final Object[] queryArgs = invocation.getArgs();\n        // MappedStatement对象对应Mapper配置文件中的一个select/update/insert/delete节点，主要描述的是一条SQL语句\n        final MappedStatement mappedStatement = (MappedStatement) queryArgs[MAPPED_STATEMENT_INDEX];\n        // 获取查询参数\n        final Object parameterObject = queryArgs[PARAMETER_INDEX];\n        BoundSql boundSql = mappedStatement.getBoundSql(parameterObject);\n        // 拦截以Page结尾的查询方法\n        if (mappedStatement.getId().matches(DEFAULT_PAGE_SQL_ID)) {\n            if (parameterObject == null) {\n                throw new NullPointerException(\"parameterObject is null!\");\n            } else {\n                // 如果查询参数是Page对象\n                if (parameterObject instanceof Page<?>) {\n                    Page<?> page = (Page<?>) parameterObject;\n                    // 执行总记录数查询\n                    setTotalRecord(page, mappedStatement, boundSql);\n                    // 拼接排序sql\n                    String orderSql = getOrderSql(boundSql.getSql(), page);\n                    // 拼接分页sql\n                    String pageSql = getPageSql(orderSql, page);\n                    logger.debug(\"page sql :  {} \", pageSql);\n                    BoundSql newBoundSql = copyFromBoundSql(mappedStatement, boundSql, pageSql);\n                    MappedStatement newMappedStatement = copyFromMappedStatement(mappedStatement,\n                            new BoundSqlSqlSource(newBoundSql));\n                    queryArgs[ROWBOUNDS_INDEX] = new RowBounds(RowBounds.NO_ROW_OFFSET, RowBounds.NO_ROW_LIMIT);\n                    queryArgs[MAPPED_STATEMENT_INDEX] = newMappedStatement;\n                }\n            }\n        }\n        return invocation.proceed();\n    }\n\n    /**\n     * 得到新的 BoundSql\n     * @param ms\n     * @param boundSql\n     * @param sql\n     * @return\n     */\n    public static BoundSql copyFromBoundSql(MappedStatement ms, BoundSql boundSql, String sql) {\n        BoundSql newBoundSql = new BoundSql(ms.getConfiguration(), sql, boundSql.getParameterMappings(),\n                boundSql.getParameterObject());\n        for (ParameterMapping mapping : boundSql.getParameterMappings()) {\n            String prop = mapping.getProperty();\n            if (boundSql.hasAdditionalParameter(prop)) {\n                newBoundSql.setAdditionalParameter(prop, boundSql.getAdditionalParameter(prop));\n            }\n        }\n        return newBoundSql;\n    }\n\n    /**\n     * 得到新的 MappedStatement\n     * @param ms\n     * @param newSqlSource\n     * @return\n     */\n    private static MappedStatement copyFromMappedStatement(MappedStatement ms, SqlSource newSqlSource) {\n        MappedStatement.Builder builder = new MappedStatement.Builder(ms.getConfiguration(), ms.getId(), newSqlSource,\n                ms.getSqlCommandType());\n\n        builder.resource(ms.getResource());\n        builder.fetchSize(ms.getFetchSize());\n        builder.statementType(ms.getStatementType());\n        builder.keyGenerator(ms.getKeyGenerator());\n        String[] keyProperties = ms.getKeyProperties();\n        builder.keyProperty(keyProperties == null ? null : keyProperties[0]);\n        builder.timeout(ms.getTimeout());\n        builder.parameterMap(ms.getParameterMap());\n        builder.resultMaps(ms.getResultMaps());\n        builder.resultSetType(ms.getResultSetType());\n        builder.cache(ms.getCache());\n        builder.flushCacheRequired(ms.isFlushCacheRequired());\n        builder.useCache(ms.isUseCache());\n\n        return builder.build();\n    }\n\n    public static class BoundSqlSqlSource implements SqlSource {\n        BoundSql boundSql;\n\n        public BoundSqlSqlSource(BoundSql boundSql) {\n            this.boundSql = boundSql;\n        }\n\n        public BoundSql getBoundSql(Object parameterObject) {\n            return boundSql;\n        }\n    }\n\n    /**\n     * 查询数据总数\n     * @param page\n     * @param mappedStatement\n     * @param boundSql\n     */\n    private void setTotalRecord(Page<?> page, MappedStatement mappedStatement, BoundSql boundSql) throws Throwable {\n        String sql = getCountSql(boundSql.getSql());\n        List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n        BoundSql countBoundSql = new BoundSql(mappedStatement.getConfiguration(), sql, parameterMappings, page);\n        ParameterHandler parameterHandler = new DefaultParameterHandler(mappedStatement, page, countBoundSql);\n        Connection con = mappedStatement.getConfiguration().getEnvironment().getDataSource().getConnection();\n        PreparedStatement stmt = null;\n        ResultSet rs = null;\n        try {\n            int total = 0;\n            stmt = con.prepareStatement(sql);\n            parameterHandler.setParameters(stmt);\n            rs = stmt.executeQuery();\n            if (rs.next()) {\n                total = rs.getInt(1);\n            }\n            page.setTotal(total);\n            logger.debug(\"page count sql   : {}\", sql);\n            logger.debug(\"page count total : {}\", total);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            JdbcUtils.close(rs, stmt);\n            JdbcUtils.close(con);\n        }\n    }\n\n    /**\n     * 得到统计总数sql\n     * @param sql\n     * @return\n     */\n    private String getCountSql(String sql) {\n        int index = sql.indexOf(\"from\") == -1 ? sql.indexOf(\"FROM\") : sql.indexOf(\"from\");\n        return \"select count(*) \" + sql.substring(index);\n    }\n\n    /**\n     * 得到分页sql\n     * @param sql\n     * @param page\n     * @return\n     */\n    private String getPageSql(String sql, Page<?> page) {\n        if (page != null && page.getLimit() > 0) {\n            StringBuilder pageSql = getMySQLPageSql(sql, page);\n            return pageSql.toString();\n        } else {\n            return sql;\n        }\n    }\n\n    /**\n     * 得到排序sql\n     * @param sql\n     * @param page\n     * @return\n     */\n    private String getOrderSql(String sql, Page<?> page) {\n        if (org.apache.commons.lang3.StringUtils.isNotEmpty(page.getSortName())) {\n            StringBuilder pageSql = new StringBuilder(100);\n            pageSql.append(sql);\n            if ((page.getSortName().indexOf(\"_\") == -1)) {\n                page.setSortName(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, page.getSortName()));\n            }\n            if ((\"asc\".equalsIgnoreCase(page.getSortOrder()) || \"desc\".equalsIgnoreCase(page.getSortOrder()))) {\n                pageSql.append(\" order by \" + page.getSortName() + \" \" + page.getSortOrder());\n            }\n            return pageSql.toString();\n        } else {\n            return sql;\n        }\n    }\n\n    /**\n     * 得到mysql 分页语句\n     * @param sql\n     * @param page\n     * @return\n     */\n    public StringBuilder getMySQLPageSql(String sql, Page page) {\n        StringBuilder pageSql = new StringBuilder(100);\n        pageSql.append(sql);\n        pageSql.append(\" limit \" + page.getStart() + \",\" + page.getLimit());\n        return pageSql;\n    }\n}\n```\n* `PageExecutor.java` 用于装饰之前的`Executor`用于将结果赋值到Page对象的rows属性中\n```java\npublic class PageExecutor implements Executor {\n    private static Logger logger = LoggerFactory.getLogger(PageExecutor.class);\n\n    private final Executor executor;\n\n    public PageExecutor(Executor executor) {\n        this.executor = executor;\n    }\n\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler,\n                             CacheKey cacheKey, BoundSql boundSql) throws SQLException {\n        final List<E> rows = executor.query(ms, parameter, rowBounds, resultHandler);\n        if (parameter != null && parameter instanceof Page<?>) {\n            Page<E> page = (Page<E>) parameter;\n            doCache(ms, page, parameter, rowBounds);\n            // 将结果赋值到Page对象的rows属性\n            page.setRows(rows);\n        }\n        return rows;\n    }\n\n    @Override\n    public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n        final List<E> rows = executor.query(ms, parameter, rowBounds, resultHandler);\n        if (parameter != null && parameter instanceof Page<?>) {\n            Page<E> page = (Page<E>) parameter;\n            doCache(ms, page, parameter, rowBounds);\n            // 将结果赋值到Page对象的rows属性\n            page.setRows(rows);\n        }\n        return rows;\n    }\n\n    private <E> void doCache(MappedStatement ms, Page<E> result, Object parameter, RowBounds rowBounds) {\n        final Cache cache = ms.getCache();\n        if (executor.getClass().isAssignableFrom(CachingExecutor.class) && cache != null) {\n            BoundSql boundSql = ms.getBoundSql(parameter);\n            final CacheKey cacheKey = createCacheKey(ms, parameter, rowBounds, boundSql);\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"cache executor the cache's kye  is \" + cacheKey);\n            }\n            cache.putObject(cacheKey, result);\n        }\n    }\n\n    @Override\n    public void setExecutorWrapper(Executor executor) {\n        executor.setExecutorWrapper(executor);\n    }\n\n    @Override\n    public int update(MappedStatement ms, Object parameter) throws SQLException {\n        return executor.update(ms, parameter);\n    }\n\n    @Override\n    public List<BatchResult> flushStatements() throws SQLException {\n        return executor.flushStatements();\n    }\n\n    @Override\n    public void commit(boolean required) throws SQLException {\n        executor.commit(required);\n    }\n\n    @Override\n    public void rollback(boolean required) throws SQLException {\n        executor.rollback(required);\n    }\n\n    @Override\n    public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {\n        return executor.createCacheKey(ms, parameterObject, rowBounds, boundSql);\n    }\n\n    @Override\n    public boolean isCached(MappedStatement ms, CacheKey key) {\n        return executor.isCached(ms, key);\n    }\n\n    @Override\n    public void clearLocalCache() {\n        executor.clearLocalCache();\n    }\n\n    @Override\n    public void deferLoad(MappedStatement mappedStatement, MetaObject metaObject, String s, CacheKey cacheKey, Class<?> aClass) {\n        executor.deferLoad(mappedStatement, metaObject, s, cacheKey, aClass);\n    }\n\n    @Override\n    public Transaction getTransaction() {\n        return executor.getTransaction();\n    }\n\n    @Override\n    public void close(boolean forceRollback) {\n        executor.close(forceRollback);\n    }\n\n    @Override\n    public boolean isClosed() {\n        return executor.isClosed();\n    }\n\n\t@Override\n\tpublic <E> Cursor<E> queryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds) throws SQLException {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n}\n```\n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(二十三)Mybatis中#{}和${}","url":"/2018/12/22/backend/mybatis/sourceCodeAnalysis/Mybatis源码(二十三)Mybatis中#{}和${}/","content":"## 前言\n`Mybatis`的Sql语句传参有两种方式：`#{}`和`${}`\n\n* `#{}`是预编译处理\n    * Mybatis在处理`#{}`时，会将sql中的`#{}`替换为?号，调用PreparedStatement的set方法来赋值；\n    * 使用`#{}`可以有效的防止SQL注入，提高系统安全。\n    * 如：`order by #{sortName}#`，如果传入的值是111,那么解析成sql时的值为`order by \"111\"`,\n* `${}`是字符串替换\n    * Mybatis在处理`${}`时，就是把`${}`替换成变量的值。\n    * 如果是在SQL语句中插入一个不改变的字符串。比如，像`ORDER BY`，你可以这样来使用：`ORDER BY ${columnName}`\n\n\n## 举个栗子\n* 现在通过一个例子来分析其两者的区别\n> 测试类\n```java\n    /**\n     * 测试 $ 和 #\n     * @throws Exception\n     */\n    @Test\n    public void selectByUsernameAndPasswordTest() throws Exception {\n        // 读取配置文件\n        File file = new File(\"src/test/java/resources/mybatis-config.xml\");\n        InputStream inputStream = new FileInputStream(file);\n        // 构建SqlSessionFactory\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        // 得到SqlSession\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        // 得到Mapper\n        UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n        User user = new User();\n        user.setUsername(\"songsy\");\n        user.setPassword(\"root\");\n        System.out.println(mapper.selectByUsernameAndPassword(user));\n    }\n```\n> Mapper.xml 配置文件\n```xml\n    SELECT\n      *\n    FROM\n      sys_user\n    WHERE\n      username = ${username}\n    AND password = #{password}\n```\n\n* 执行`mapper`方法，打好断点，进入到`Executor`的query方法，关注`BoundSql boundSql = ms.getBoundSql(parameterObject);` 这行，`BoundSql`对象存放了处理完成之后的sql\n```java\n  @Override\n  public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n    BoundSql boundSql = ms.getBoundSql(parameterObject);\n\t//query时传入一个cachekey参数\n    CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);\n    return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n  }\n```\n* 如下图所示，`${username}` 已经替换成了 `songsy` ， #{password} 替换成了 `?`\n\n![image](/images/server/mybatis/boundSql.jpg)\n\n## 栗子剖析\n* Mybatis是怎样完成上面的替换解析过程呢，进入`BoundSql boundSql = ms.getBoundSql(parameterObject);` 方法，可以看到其实就是调用`sqlSource.getBoundSql`\n```java\n  public BoundSql getBoundSql(Object parameterObject) {\n\t// 其实就是调用sqlSource.getBoundSql\n    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);\n    List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n    if (parameterMappings == null || parameterMappings.isEmpty()) {\n      boundSql = new BoundSql(configuration, boundSql.getSql(), parameterMap.getParameterMappings(), parameterObject);\n    }\n    // check for nested result maps in parameter mappings (issue #30)\n    for (ParameterMapping pm : boundSql.getParameterMappings()) {\n      String rmId = pm.getResultMapId();\n      if (rmId != null) {\n        ResultMap rm = configuration.getResultMap(rmId);\n        if (rm != null) {\n          hasNestedResultMaps |= rm.hasNestedResultMaps();\n        }\n      }\n    }\n    return boundSql;\n  }\n```\n* 进入`sqlSource.getBoundSql(parameterObject);` ，因为sql不是静态sql所以进入`DynamicSqlSource` 类的`getBoundSql`方法，这里传入了我们的`user`查询对象\n```java\n/**\n * 动态SQL源码\n * @author Clinton Begin\n */\npublic class DynamicSqlSource implements SqlSource {\n\n  private Configuration configuration;\n  private SqlNode rootSqlNode;\n\n  public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {\n    this.configuration = configuration;\n    this.rootSqlNode = rootSqlNode;\n  }\n\n  // 得到绑定的SQL\n  @Override\n  public BoundSql getBoundSql(Object parameterObject) {\n    // 生成一个动态上下文\n    DynamicContext context = new DynamicContext(configuration, parameterObject);\n\t// 这里SqlNode.apply只是将${}这种参数替换掉，并没有替换#{}这种参数\n    rootSqlNode.apply(context);\n\t// 调用SqlSourceBuilder\n    SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);\n    Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();\n\t// SqlSourceBuilder.parse,注意这里返回的是StaticSqlSource,解析完了就把那些参数都替换成?了，也就是最基本的JDBC的SQL写法\n    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());\n\t// 看似是又去递归调用SqlSource.getBoundSql，其实因为是StaticSqlSource，所以没问题，不是递归调用\n    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);\n    for (Map.Entry<String, Object> entry : context.getBindings().entrySet()) {\n      boundSql.setAdditionalParameter(entry.getKey(), entry.getValue());\n    }\n    return boundSql;\n  }\n}\n```\n* 下面的语句是动态sql的处理，循环执行`SqlNode.apply`方法，进入 `rootSqlNode.apply(context);`方法\n```java\n  DynamicContext context = new DynamicContext(configuration, parameterObject);\n  // 这里SqlNode.apply只是将${}这种参数替换掉，并没有替换#{}这种参数\n  rootSqlNode.apply(context);\n```\n* 进入`rootSqlNode.apply(context);` 之后来到了`MixedSqlNode`类，这里依次调用list里每个元素的apply，如下图所示\n\n![image](/images/server/mybatis/MixeSqlNode.jpg)\n\n* 执行`sqlNode.apply(context);`方法这里进入到`TextSqlNode`的`apply`方法，这里又调用了`GenericTokenParser`类的`parser.parse(text)`方法\n\n```java\npublic class TextSqlNode implements SqlNode {\n  private String text;\n  private Pattern injectionFilter;\n\n  public TextSqlNode(String text) {\n    this(text, null);\n  }\n  \n  public TextSqlNode(String text, Pattern injectionFilter) {\n    this.text = text;\n    this.injectionFilter = injectionFilter;\n  }\n  \n  //判断是否是动态sql\n  public boolean isDynamic() {\n    DynamicCheckerTokenParser checker = new DynamicCheckerTokenParser();\n    GenericTokenParser parser = createParser(checker);\n    parser.parse(text);\n    return checker.isDynamic();\n  }\n\n  @Override\n  public boolean apply(DynamicContext context) {\n    GenericTokenParser parser = createParser(new BindingTokenParser(context, injectionFilter));\n    context.appendSql(parser.parse(text));\n    return true;\n  }\n  \n  ...\n```\n* 进入 `GenericTokenParser`类的`parser.parse(text)`方法，可以看到这个类是处理`#{}和${}参数`的主要方法\n```java\n/**\n * 普通记号解析器，处理#{}和${}参数\n * @author Clinton Begin\n */\npublic class GenericTokenParser {\n\n  // 有一个开始和结束记号\n  private final String openToken;\n  private final String closeToken;\n  // 记号处理器\n  private final TokenHandler handler;\n\n  public GenericTokenParser(String openToken, String closeToken, TokenHandler handler) {\n    this.openToken = openToken;\n    this.closeToken = closeToken;\n    this.handler = handler;\n  }\n\n  public String parse(String text) {\n    StringBuilder builder = new StringBuilder();\n    if (text != null && text.length() > 0) {\n      char[] src = text.toCharArray();\n      int offset = 0;\n      int start = text.indexOf(openToken, offset);\n      // #{favouriteSection,jdbcType=VARCHAR}\n      // 这里是循环解析参数，参考GenericTokenParserTest,比如可以解析${first_name} ${initial} ${last_name} reporting.这样的字符串,里面有3个 ${}\n      while (start > -1) {\n    \t  // 判断一下 ${ 前面是否是反斜杠，这个逻辑在老版的mybatis中（如3.1.0）是没有的\n        if (start > 0 && src[start - 1] == '\\\\') {\n          // the variable is escaped. remove the backslash.\n      \t  // 新版已经没有调用substring了，改为调用如下的offset方式，提高了效率\n          // issue #760\n          builder.append(src, offset, start - offset - 1).append(openToken);\n          offset = start + openToken.length();\n        } else {\n          int end = text.indexOf(closeToken, start);\n          if (end == -1) {\n            builder.append(src, offset, src.length - offset);\n            offset = src.length;\n          } else {\n            builder.append(src, offset, start - offset);\n            offset = start + openToken.length();\n            String content = new String(src, offset, end - offset);\n            // 得到一对大括号里的字符串后，调用handler.handleToken,比如替换变量 ${username}这种功能\n            builder.append(handler.handleToken(content));\n            offset = end + closeToken.length();\n          }\n        }\n        start = text.indexOf(openToken, offset);\n      }\n      if (offset < src.length) {\n        builder.append(src, offset, src.length - offset);\n      }\n    }\n    return builder.toString();\n  }\n\n}\n```\n* 执行完`builder.append(handler.handleToken(content));` 这行代码之后就可以看到`${username}` 已经替换成`songsy`了\n\n![image](/images/server/mybatis/parse.jpg)\n\n\n* 到现在已经完成了`${username}` 的处理，回到 `DynamicSqlSource` 类中，现在是处理`#{password}` 这些参数了\n```java\npublic class DynamicSqlSource implements SqlSource {\n\n  private Configuration configuration;\n  private SqlNode rootSqlNode;\n\n  public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {\n    this.configuration = configuration;\n    this.rootSqlNode = rootSqlNode;\n  }\n\n  // 得到绑定的SQL\n  @Override\n  public BoundSql getBoundSql(Object parameterObject) {\n    // 生成一个动态上下文\n    DynamicContext context = new DynamicContext(configuration, parameterObject);\n\t// 这里SqlNode.apply只是将${}这种参数替换掉，并没有替换#{}这种参数\n    rootSqlNode.apply(context);\n\t// 调用SqlSourceBuilder\n    SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);\n    Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();\n\t// SqlSourceBuilder.parse,注意这里返回的是StaticSqlSource,解析完了就把那些参数#{password}都替换成?了，也就是最基本的JDBC的SQL写法\n    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());\n\t// 看似是又去递归调用SqlSource.getBoundSql，其实因为是StaticSqlSource，所以没问题，不是递归调用\n    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);\n    for (Map.Entry<String, Object> entry : context.getBindings().entrySet()) {\n      boundSql.setAdditionalParameter(entry.getKey(), entry.getValue());\n    }\n    return boundSql;\n  }\n}\n```\n* 下图是处理完动态sql节点及`${username}`之后的结果\n\n![](/images/server/mybatis/getBoundSql.jpg)\n\n* 处理完`${username}` 节点之后现在就是处理`#{password}` 节点了，解析完了就把那些参数#{password}都替换成?了，也就是最基本的JDBC的SQL写法\n```java\n\t// 调用SqlSourceBuilder\n    SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);\n    Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();\n\t// SqlSourceBuilder.parse,注意这里返回的是StaticSqlSource,解析完了就把那些参数#{password}都替换成?了，也就是最基本的JDBC的SQL写法\n    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());\n```\n* 进入`sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());`方法，之后又是进入 `GenericTokenParser`类的`parser.parse(text)`方法，只不过`handleToken`方法执行的是下面的代码\n```java\n   @Override\n    public String handleToken(String content) {\n      // 先构建参数映射\n      parameterMappings.add(buildParameterMapping(content));\n      // 如何替换很简单，永远是一个问号，但是参数的信息要记录在parameterMappings里面供后续使用\n      return \"?\";\n    }\n```\n* 最后拼接成的结果如下\n```sql\n        SELECT\n          *\n        FROM\n          sys_user\n        WHERE\n          username = songsy\n        AND password = ?\n```\n## 总结\n* `#{}`在一定程度上可以防止SQL的注入\n* `${}`一般用在动态表名，动态字段，设置排序字段上\n\n## 参考\n\nhttps://www.jianshu.com/p/a9cb929b533e","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(二十一)拦截器Interceptor原理探究","url":"/2018/12/21/backend/mybatis/sourceCodeAnalysis/Mybatis源码(二十一)拦截器Interceptor原理探究/","content":"## 前言\n* MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用，拦截后用户可以完成一些额外的定制操作，比如实现分页，这一章节来介绍拦截器的一些基本知识及实现原理，下一章节将介绍如何用拦截器实现查询分页功能\n\n* 默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：\n````java\n// 拦截执行器的方法\nExecutor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)\n// 拦截参数的处理\nParameterHandler (getParameterObject, setParameters)\n// 拦截结果集的处理\nResultSetHandler (handleResultSets, handleOutputParameters)\n// 拦截Sql语法构建的处理\nStatementHandler (prepare, parameterize, batch, update, query)\n````\n## 拦截器的使用\n* 通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。\n```java\n// ExamplePlugin.java\n@Intercepts({@Signature(\n  type= Executor.class,\n  method = \"update\",\n  args = {MappedStatement.class,Object.class})})\npublic class ExamplePlugin implements Interceptor {\n  public Object intercept(Invocation invocation) throws Throwable {\n    return invocation.proceed();\n  }\n  public Object plugin(Object target) {\n    return Plugin.wrap(target, this);\n  }\n  public void setProperties(Properties properties) {\n  }\n}\n```\n* xml 配置\n```xml\n<!-- mybatis-config.xml -->\n<plugins>\n  <plugin interceptor=\"org.mybatis.example.ExamplePlugin\">\n    <property name=\"someProperty\" value=\"100\"/>\n  </plugin>\n</plugins>\n```\n* 上面的插件将会拦截在 `Executor` 实例中所有的名为`update` 且参数为`(MappedStatement.class,Object.class)`的方法调用， 这里的 Executor 是负责执行低层映射语句的内部对象。\n## 拦截器原理探究\n\n### 拦截器定义\n* 首先我们看下MyBatis拦截器的接口定义 `Interceptor.java`\n```java\n/**\n * 拦截器\n * @author Clinton Begin\n */\npublic interface Interceptor {\n\n  // 在这里完成拦截操作\n  Object intercept(Invocation invocation) throws Throwable;\n\n  // 用于封装目标对象，我们可以决定是否要进行拦截进而决定要返回一个什么样的目标对象\n  Object plugin(Object target);\n\n  // 用于在Mybatis配置文件中指定一些属性的。\n  void setProperties(Properties properties);\n\n}\n```\n* `Signature`注解用于定义拦截方法，规则为：`type`这个类下方法名为`method`且参数为`args`的方法\n```java\n/**\n * 就是定义哪些类，方法，参数需要被拦截\n * @author Clinton Begin\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Signature {\n\n  Class<?> type();\n\n  String method();\n\n  Class<?>[] args();\n}\n```\n* 当定义拦截器类之后就是要让`Mybatis`知道有哪些拦截器了，那`Mybatis`是怎么知道有哪些拦截器呢，通过以上章节可以知道Spring集成Mybatis有两种方法，一种是通过xml配置的方式，另一种是通过注解的方式，下面来介绍这两种方式是怎样获取定义好的拦截器的\n    * 通过xml配置的方式\n        * 先是在 `mybatis-config.xml` 定义好哪些拦截器\n            ```xml\n                <!-- mybatis-config.xml -->\n                <plugins>\n                  <plugin interceptor=\"org.mybatis.example.ExamplePlugin\">\n                    <property name=\"someProperty\" value=\"100\"/>\n                  </plugin>\n                </plugins>\n            ```\n        * 定义好之后那么Mybatis就会解析`pluginElement` 然后将会添加到`Configuration` 对象的`InterceptorChain`对象中，这样拦截器就解析完成了\n            ```java\n              private void pluginElement(XNode parent) throws Exception {\n                if (parent != null) {\n                  for (XNode child : parent.getChildren()) {\n                    String interceptor = child.getStringAttribute(\"interceptor\");\n                    Properties properties = child.getChildrenAsProperties();\n                    Interceptor interceptorInstance = (Interceptor) resolveClass(interceptor).newInstance();\n                    interceptorInstance.setProperties(properties);\n                    //调用InterceptorChain.addInterceptor\n                    configuration.addInterceptor(interceptorInstance);\n                  }\n                }\n              }\n            ```\n        * 看看`InterceptorChain`类，内部就是一个拦截器的List，可以定义多个拦截器\n            ```java\n               \n              /**\n               * 拦截器链\n               * @author Clinton Begin\n               */\n              public class InterceptorChain {\n              \n                // 内部就是一个拦截器的List，可以定义多个拦截器\n                private final List<Interceptor> interceptors = new ArrayList<Interceptor>();\n              \n                public Object pluginAll(Object target) {\n                  // 循环调用每个Interceptor.plugin方法\n                  for (Interceptor interceptor : interceptors) {\n                    target = interceptor.plugin(target);\n                  }\n                  return target;\n                }\n              \n                public void addInterceptor(Interceptor interceptor) {\n                  interceptors.add(interceptor);\n                }\n                \n                public List<Interceptor> getInterceptors() {\n                  return Collections.unmodifiableList(interceptors);\n                }\n              \n              }\n            ```\n    * 通过注解的方式\n        * 通过注解的方式获取拦截器需要准备环境，查看第十九章\n        \n        * 在拦截器那个类添加`@Component` 让拦截器类注册成`Spring bean`，这样此拦截器将会自动装配到`Mybatis`中\n        ```java\n          @Component\n          @Intercepts({@Signature(\n            type= Executor.class,\n            method = \"update\",\n            args = {MappedStatement.class,Object.class})})\n          public class ExamplePlugin implements Interceptor {\n            public Object intercept(Invocation invocation) throws Throwable {\n              return invocation.proceed();\n            }\n            public Object plugin(Object target) {\n              return Plugin.wrap(target, this);\n            }\n            public void setProperties(Properties properties) {\n            }\n          }\n        ```\n        * 那么是怎么实现拦截器的自动装配到`Mybatis`中，可以查看`org.mybatis.spring.boot.autoconfigure` 包下的`MybatisAutoConfiguration` 类，查看其构造方法，关注`this.interceptors = interceptorsProvider.getIfAvailable();` 方法，这里实现了查找实现了`Interceptor`接口的的类，这个方法是Spring的方法，所以之前需要将拦截器类注册成Bean，这样Spring才能找到对应的拦截器\n        ```java\n            public MybatisAutoConfiguration(MybatisProperties properties,\n                                            ObjectProvider<Interceptor[]> interceptorsProvider,\n                                            ResourceLoader resourceLoader,\n                                            ObjectProvider<DatabaseIdProvider> databaseIdProvider,\n                                            ObjectProvider<List<ConfigurationCustomizer>> configurationCustomizersProvider) {\n              this.properties = properties;\n              this.interceptors = interceptorsProvider.getIfAvailable();\n              this.resourceLoader = resourceLoader;\n              this.databaseIdProvider = databaseIdProvider.getIfAvailable();\n              this.configurationCustomizers = configurationCustomizersProvider.getIfAvailable();\n            }\n        ```\n        * 现在来看`SqlSessionFactory`注册为Bean的过程，得到`interceptors`之后就需要将其添加到万能类`Configuration`中， 查看`SqlSessionFactoryBean`的`buildSqlSessionFactory` 方法，下面的代码就是此操作的实现\n        ```java\n           if (!isEmpty(this.plugins)) {\n              for (Interceptor plugin : this.plugins) {\n                configuration.addInterceptor(plugin);\n                if (LOGGER.isDebugEnabled()) {\n                  LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n                }\n              }\n            }\n        ```\n### 拦截器是如何拦截的\n* 以下4个方法都是`Configuration`的方法。这些方法在`MyBatis`的新增，删除，修改，查询这些操作中都会被执行到，执行的先后顺序是`Executor，ParameterHandler，ResultSetHandler，StatementHandler`(其中ParameterHandler和ResultSetHandler的创建是在创建StatementHandler（3个可用的实现类CallableStatementHandler,PreparedStatementHandler,SimpleStatementHandler）的时候，其构造函数调用的（这3个实现类的构造函数其实都调用了父类BaseStatementHandler的构造函数）。\n\n```java\npublic ParameterHandler newParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {\n    ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);\n    parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);\n    return parameterHandler;\n}\n\npublic ResultSetHandler newResultSetHandler(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,\n  ResultHandler resultHandler, BoundSql boundSql) {\n    ResultSetHandler resultSetHandler = new DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);\n    resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);\n    return resultSetHandler;\n}\n\npublic StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {\n    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);\n    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);\n    return statementHandler;\n}\n\npublic Executor newExecutor(Transaction transaction, ExecutorType executorType, boolean autoCommit) {\n    executorType = executorType == null ? defaultExecutorType : executorType;\n    executorType = executorType == null ? ExecutorType.SIMPLE : executorType;\n    Executor executor;\n    if (ExecutorType.BATCH == executorType) {\n      executor = new BatchExecutor(this, transaction);\n    } else if (ExecutorType.REUSE == executorType) {\n      executor = new ReuseExecutor(this, transaction);\n    } else {\n      executor = new SimpleExecutor(this, transaction);\n    }\n    if (cacheEnabled) {\n      executor = new CachingExecutor(executor, autoCommit);\n    }\n    executor = (Executor) interceptorChain.pluginAll(executor);\n    return executor;\n}\n```\n* 这4个方法实例化了对应的对象之后，都会调用interceptorChain的pluginAll方法，InterceptorChain的pluginAll刚才已经介绍过了，就是遍历所有的拦截器，然后调用各个拦截器的plugin方法。注意：拦截器的plugin方法的返回值会直接被赋值给原先的对象\n```java\npublic Object pluginAll(Object target) {\n    // 循环调用每个Interceptor.plugin方法\n    for (Interceptor interceptor : interceptors) {\n      target = interceptor.plugin(target);\n    }\n    return target;\n  }\n```\n* 回到之前的拦截器类，这里查看`plugin`方法`Plugin.wrap(target, this);`，这里执行了`Plugin`类的`wrap(target, this)` 方法，返回了一个新的对象。注意：拦截器的plugin方法的返回值会直接被赋值给原先的对象\n```java\n@Intercepts({@Signature(\n  type= Executor.class,\n  method = \"update\",\n  args = {MappedStatement.class,Object.class})})\npublic class ExamplePlugin implements Interceptor {\n  public Object intercept(Invocation invocation) throws Throwable {\n    return invocation.proceed();\n  }\n  public Object plugin(Object target) {\n    return Plugin.wrap(target, this);\n  }\n  public void setProperties(Properties properties) {\n  }\n}\n```\n* 进入`Plugin`类，可以看到这里用了动态代理模式来实现拦截器的拦截操作`Plugin.wrap(target, this);`返回的是一个动态代理对象，当其动态代理对象执行方法的时候就会执行本`Plugin`类的`invoke`方法\n```java\n/**\n * 插件,用的代理模式\n * @author Clinton Begin\n */\npublic class Plugin implements InvocationHandler {\n\n  private Object target;\n  private Interceptor interceptor;\n  private Map<Class<?>, Set<Method>> signatureMap;\n\n  private Plugin(Object target, Interceptor interceptor, Map<Class<?>, Set<Method>> signatureMap) {\n    this.target = target;\n    this.interceptor = interceptor;\n    this.signatureMap = signatureMap;\n  }\n\n  public static Object wrap(Object target, Interceptor interceptor) {\n    // 取得签名Map\n    Map<Class<?>, Set<Method>> signatureMap = getSignatureMap(interceptor);\n    // 取得要改变行为的类(ParameterHandler|ResultSetHandler|StatementHandler|Executor)\n    Class<?> type = target.getClass();\n    // 取得接口\n    Class<?>[] interfaces = getAllInterfaces(type, signatureMap);\n    // 产生代理\n    if (interfaces.length > 0) {\n      return Proxy.newProxyInstance(\n          type.getClassLoader(),\n          interfaces,\n          new Plugin(target, interceptor, signatureMap));\n    }\n    return target;\n  }\n\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    try {\n      // 看看如何拦截\n      Set<Method> methods = signatureMap.get(method.getDeclaringClass());\n      // 看哪些方法需要拦截\n      if (methods != null && methods.contains(method)) {\n        // 调用Interceptor.intercept，也即插入了我们自己的逻辑\n        return interceptor.intercept(new Invocation(target, method, args));\n      }\n      // 最后还是执行原来逻辑\n      return method.invoke(target, args);\n    } catch (Exception e) {\n      throw ExceptionUtil.unwrapThrowable(e);\n    }\n  }\n\n  // 取得签名Map\n  private static Map<Class<?>, Set<Method>> getSignatureMap(Interceptor interceptor) {\n    // 取Intercepts注解，例子可参见ExamplePlugin.java\n    Intercepts interceptsAnnotation = interceptor.getClass().getAnnotation(Intercepts.class);\n    // issue #251\n    // 必须得有Intercepts注解，没有报错\n    if (interceptsAnnotation == null) {\n      throw new PluginException(\"No @Intercepts annotation was found in interceptor \" + interceptor.getClass().getName());      \n    }\n    // value是数组型，Signature的数组\n    Signature[] sigs = interceptsAnnotation.value();\n    // 每个class里有多个Method需要被拦截,所以这么定义\n    Map<Class<?>, Set<Method>> signatureMap = new HashMap<Class<?>, Set<Method>>();\n    for (Signature sig : sigs) {\n      Set<Method> methods = signatureMap.get(sig.type());\n      if (methods == null) {\n        methods = new HashSet<Method>();\n        signatureMap.put(sig.type(), methods);\n      }\n      try {\n        Method method = sig.type().getMethod(sig.method(), sig.args());\n        methods.add(method);\n      } catch (NoSuchMethodException e) {\n        throw new PluginException(\"Could not find method on \" + sig.type() + \" named \" + sig.method() + \". Cause: \" + e, e);\n      }\n    }\n    return signatureMap;\n  }\n\n  // 取得接口\n  private static Class<?>[] getAllInterfaces(Class<?> type, Map<Class<?>, Set<Method>> signatureMap) {\n    Set<Class<?>> interfaces = new HashSet<Class<?>>();\n    while (type != null) {\n      for (Class<?> c : type.getInterfaces()) {\n        //貌似只能拦截ParameterHandler|ResultSetHandler|StatementHandler|Executor\n        //拦截其他的无效\n        //当然我们可以覆盖Plugin.wrap方法，达到拦截其他类的功能\n        if (signatureMap.containsKey(c)) {\n          interfaces.add(c);\n        }\n      }\n      type = type.getSuperclass();\n    }\n    return interfaces.toArray(new Class<?>[interfaces.size()]);\n  }\n\n}\n```\n* 查看`invoke方法`,从而调用了我们之前定义的`interceptor.intercept();`的方法，这里是实现拦截的核心，`interceptor.intercept(new Invocation(target, method, args));` 这里插入了我们自己的逻辑\n```java\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    try {\n      // 看看如何拦截\n      Set<Method> methods = signatureMap.get(method.getDeclaringClass());\n      // 看哪些方法需要拦截\n      if (methods != null && methods.contains(method)) {\n        // 调用Interceptor.intercept，也即插入了我们自己的逻辑\n        return interceptor.intercept(new Invocation(target, method, args));\n      }\n      // 最后还是执行原来逻辑\n      return method.invoke(target, args);\n    } catch (Exception e) {\n      throw ExceptionUtil.unwrapThrowable(e);\n    }\n  }\n```\n* 回到之前的节点，在构建`Executor`的时候，`executor = (Executor) interceptorChain.pluginAll(executor);`这里返回的是 `Plugin.wrap(target, this);`一个动态代理对象\n```java\npublic Executor newExecutor(Transaction transaction, ExecutorType executorType, boolean autoCommit) {\n    executorType = executorType == null ? defaultExecutorType : executorType;\n    executorType = executorType == null ? ExecutorType.SIMPLE : executorType;\n    Executor executor;\n    if (ExecutorType.BATCH == executorType) {\n      executor = new BatchExecutor(this, transaction);\n    } else if (ExecutorType.REUSE == executorType) {\n      executor = new ReuseExecutor(this, transaction);\n    } else {\n      executor = new SimpleExecutor(this, transaction);\n    }\n    if (cacheEnabled) {\n      executor = new CachingExecutor(executor, autoCommit);\n    }\n    executor = (Executor) interceptorChain.pluginAll(executor);\n    return executor;\n}\n```\n* 所以当`SqlSession`执行`Executor`的方法时候，这里`Executor`是个动态代理之后的`Executor`，当执行`Executor`的方法的时候就会执行动态代理的invoke方法，在invoke方法执行我们额外的代码\n\n* 在此拦截器的任务才真正完成\n\n## 参考\n官网：http://www.mybatis.org/mybatis-3/zh/configuration.html#plugins\n\nhttps://www.cnblogs.com/fangjian0423/p/mybatis-interceptor.html","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(二十)Spring Mybatis集成之事务管理","url":"/2018/12/18/backend/mybatis/sourceCodeAnalysis/Mybatis源码(二十)Spring Mybatis集成之事务管理/","content":"## 前言\n使用 `MyBatis-Spring` 的主要原因是它允许 `MyBatis` 参与到 `Spring` 的事务管理中。而 不是给 `MyBatis` 创建一个新的特定的事务管理器,`MyBatis-Spring` 利用了存在于 Spring 中的 `DataSourceTransactionManager`。\n\n### 如何集成 `Spring`的事务管理\n \n* 配置 `DataSourceTransactionManager` Bean\n```xml\n    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n```\n* 要注意, 为事务管理器指定的 DataSource 必须和用来创建 SqlSessionFactoryBean 的 是同一个数据源,否则事务管理器就无法工作了。\n\n* 一旦 `Spring` 的 `DataSourceTransactionManager` 配置好了,你可以在 `Spring` 中你可以使用`@Transactional` 注解来完成事物操作。在事务处理期间,一个单独的 `SqlSession` 对象（线程级别）将会被创建 和使用。当事务完成时,这个 `SqlSession` 会以合适的方式提交或回滚。相反如果没有开启事物那么`SqlSession` 对象就是方法级别的了，每次调用Mapper里的方法都会返回一个新的`SqlSession` 来处理，下面来看其内部是怎么实现的\n\n### 事务实现解析\n* 与Spring集成以后，Spring提供了一个全局唯一的`SqlSessionTemplate` 来完成`DefailtSqlSession`的功能\n\n* 进入`SqlSessionTemplate` 可以看到里面有个`SqlSession` 属性，看属性名可以看出这里又用了动态代理，为什么又要代理呢？下面来看看\n```java\n  // SqlSession代理\n  private final SqlSession sqlSessionProxy;\n```\n* 观察其构造方法，这里形成SqlSession代理类，再来看动态代理类`SqlSessionInterceptor`做了什么\n```java\n public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,\n      PersistenceExceptionTranslator exceptionTranslator) {\n\n    notNull(sqlSessionFactory, \"Property 'sqlSessionFactory' is required\");\n    notNull(executorType, \"Property 'executorType' is required\");\n\n    this.sqlSessionFactory = sqlSessionFactory;\n    this.executorType = executorType;\n    this.exceptionTranslator = exceptionTranslator;\n    // 形成SqlSession代理类\n    this.sqlSessionProxy = (SqlSession) newProxyInstance(\n        SqlSessionFactory.class.getClassLoader(),\n        new Class[] { SqlSession.class },\n        new SqlSessionInterceptor());\n  }\n```\n* 进入`SqlSessionInterceptor`类，这个`SqlSession`代理类的出现是为了让Spring 来管理`SqlSession` 的，从而实现事物管理\n\n```java\n  /**\n   * SqlSession 代理类，MyBatis路由方法调用得到有Spring Transaction的SqlSession\n   * Proxy needed to route MyBatis method calls to the proper SqlSession got\n   * from Spring's Transaction Manager\n   * It also unwraps exceptions thrown by {@code Method#invoke(Object, Object...)} to\n   * pass a {@code PersistenceException} to the {@code PersistenceExceptionTranslator}.\n   */\n  private class SqlSessionInterceptor implements InvocationHandler {\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n      // 获取SqlSession(这个SqlSession才是真正使用的，它不是线程安全的)\n      SqlSession sqlSession = getSqlSession(\n          SqlSessionTemplate.this.sqlSessionFactory,\n          SqlSessionTemplate.this.executorType,\n          SqlSessionTemplate.this.exceptionTranslator);\n      try {\n        // 调用真实SqlSession的方法\n        Object result = method.invoke(sqlSession, args);\n        // 判断一下当前的sqlSession是否被Spring托管\n        if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) {\n          // force commit even on non-dirty sessions because some databases require\n          // a commit/rollback before calling close()\n          // 没有使用事务\n          sqlSession.commit(true);\n        }\n        return result;\n      } catch (Throwable t) {\n        Throwable unwrapped = unwrapThrowable(t);\n        if (SqlSessionTemplate.this.exceptionTranslator != null && unwrapped instanceof PersistenceException) {\n          // release the connection to avoid a deadlock if the translator is no loaded. See issue #22\n          closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n          sqlSession = null;\n          Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);\n          if (translated != null) {\n            unwrapped = translated;\n          }\n        }\n        throw unwrapped;\n      } finally {\n        if (sqlSession != null) {\n          // 关闭SqlSession,如果sqlSession被Spring管理 则调用holder.released(); 使计数器-1\n          closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n        }\n      }\n    }\n  }\n```\n* 进入`getSqlSession()`方法，这里是获取`SqlSession` 的方法\n```java\n  public static SqlSession getSqlSession(SqlSessionFactory sessionFactory, ExecutorType executorType, PersistenceExceptionTranslator exceptionTranslator) {\n\n    notNull(sessionFactory, NO_SQL_SESSION_FACTORY_SPECIFIED);\n    notNull(executorType, NO_EXECUTOR_TYPE_SPECIFIED);\n\n    // 根据sqlSessionFactory从当前线程对应的资源map中获取SqlSessionHolder\n    SqlSessionHolder holder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);\n\n    SqlSession session = sessionHolder(executorType, holder);\n    if (session != null) {\n      return session;\n    }\n    // 如果找不到，则根据执行类型构造一个新的sqlSession\n    LOGGER.debug(() -> \"Creating a new SqlSession\");\n    session = sessionFactory.openSession(executorType);\n\n    registerSessionHolder(sessionFactory, executorType, exceptionTranslator, session);\n\n    return session;\n  }\n```\n* 关注`TransactionSynchronizationManager` 内部成员，这里使用`TreadLocal`记录事务的一些属性，用于应用扩展同步器的使用，在事务的开启，挂起，提交等各个点上回调应用的逻辑\n```java\n    // 应用代码随事务的声明周期绑定的对象\n\tprivate static final ThreadLocal<Map<Object, Object>> resources =\n\t\t\tnew NamedThreadLocal<>(\"Transactional resources\");\n\n    // synchronizations-使用的同步器，用于应用扩展\n\tprivate static final ThreadLocal<Set<TransactionSynchronization>> synchronizations =\n\t\t\tnew NamedThreadLocal<>(\"Transaction synchronizations\");\n    \n\t// 事务的名称\n\tprivate static final ThreadLocal<String> currentTransactionName =\n\t\t\tnew NamedThreadLocal<>(\"Current transaction name\");\n    \n\t// 事务是否是只读\n\tprivate static final ThreadLocal<Boolean> currentTransactionReadOnly =\n\t\t\tnew NamedThreadLocal<>(\"Current transaction read-only status\");\n    \n\t// 事务的隔离界别\n\tprivate static final ThreadLocal<Integer> currentTransactionIsolationLevel =\n\t\t\tnew NamedThreadLocal<>(\"Current transaction isolation level\");\n    \n\t// 事务是否开启\n\tprivate static final ThreadLocal<Boolean> actualTransactionActive =\n\t\t\tnew NamedThreadLocal<>(\"Actual transaction active\");\n\n```\n\n* 回到`SqlSessionInterceptor` 类`invoke`方法，这里有个if判断` if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) {` 来判断是否开启了Spring事务，如果该Session未被Spring托管则自动commit\n```java\n  public static boolean isSqlSessionTransactional(SqlSession session, SqlSessionFactory sessionFactory) {\n    notNull(session, NO_SQL_SESSION_SPECIFIED);\n    notNull(sessionFactory, NO_SQL_SESSION_FACTORY_SPECIFIED);\n\n    SqlSessionHolder holder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);\n\n    return (holder != null) && (holder.getSqlSession() == session);\n  }\n```\n\n* 关注`invoke`方法的`finally`块的 `closeSqlSession()方法`，如果是开启了事务则没有执行`session.close();`\n```java\n    finally {\n        if (sqlSession != null) {\n          // 关闭SqlSession,如果sqlSession被Spring管理 则调用holder.released(); 使计数器-1\n          closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n        }\n      }\n```\n```java\n  public static void closeSqlSession(SqlSession session, SqlSessionFactory sessionFactory) {\n    notNull(session, NO_SQL_SESSION_SPECIFIED);\n    notNull(sessionFactory, NO_SQL_SESSION_FACTORY_SPECIFIED);\n\n    SqlSessionHolder holder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);\n    if ((holder != null) && (holder.getSqlSession() == session)) {\n      LOGGER.debug(() -> \"Releasing transactional SqlSession [\" + session + \"]\");\n      // 如果是开启了事务 SqlSession是没有被close的，所以方法体内使用的是一个SqlSession，当然一级缓存是生效的\n      holder.released();\n    } else {\n      LOGGER.debug(() -> \"Closing non transactional SqlSession [\" + session + \"]\");\n      session.close();\n    }\n  }\n```\n## 总结\n* 通过上述代码可以得出如果开启了事务，同一事务中同一个sqlSessionFactory创建的唯一sqlSession，一个事务中使用的是同一个sqlSession，为什么要用同一个sqlSession呢，是为了使用同一个connection (JDBC)\n* 如果没有开启事务，调用一次mapper里的方法将会新建一个sqlSession来执行方法\n\n## 参考\n\nhttp://www.mybatis.org/spring/zh/factorybean.html\n\nhttps://www.cnblogs.com/daxin/p/3544188.html","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(十九)Spring Mybatis集成之基于注解的配置原理解析","url":"/2018/12/18/backend/mybatis/sourceCodeAnalysis/Mybatis源码(十九)Spring Mybatis集成之基于注解的配置原理解析/","content":"## 前言\nMybatis与Spring的集成实现有两种方式，一种是通过XML配置，另一种是通过注解的信息进行配置，上一章节介绍了通过XML的方式来集成，这一章节来介绍如何通过注解的形式来在`Spring Boot`环境中集成`Mybatis`\n\n### 环境准备\n* 基于`MyBatis-Spring-Boot-Starter` 快速在`Spring Boot`环境中集成Mybatis，使用注解解决一切问题\n\n* 基于`Spring Boot`环境中添加依赖\n```xml\n    <dependency>\n        <groupId>org.mybatis.spring.boot</groupId>\n        <artifactId>mybatis-spring-boot-starter</artifactId>\n        <version>1.3.2</version>\n    </dependency>\n```\n* 配置类中添加注解\n```xml\n@MapperScan(\"com.songsy.iframe.mapper\")\n```\n\n* 添加配置（选填）\n```java\nmybatis:\n    type-aliases-package: com.songsy.iframe.model\n    type-handlers-package: com.songsy.iframe.typehandler\n    configuration:\n        map-underscore-to-camel-case: true\n        default-fetch-size: 100\n        default-statement-timeout: 30\n```\n* 以上完成之后就可以使用Mybatis了\n\n### 原理解析\n* 打开`mybatis-spring-boot-starter` 源码可以看到是个空壳子\n\n![image](/images/server/mybatis/spring-boot-starter.jpg)\n\n* 打开里面的`pom.xml`文件，可以看到其依赖，里面已经帮我们导入了`mybatis`及`mybatis-spring`的包\n```java\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot</artifactId>\n    <version>1.3.1</version>\n  </parent>\n  <artifactId>mybatis-spring-boot-starter</artifactId>\n  <name>mybatis-spring-boot-starter</name>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-jdbc</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.mybatis.spring.boot</groupId>\n      <artifactId>mybatis-spring-boot-autoconfigure</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis-spring</artifactId>\n    </dependency>\n  </dependencies>\n```\n* 关注`mybatis-spring-boot-autoconfigure` 包，这里完成了其自动配置的功能，可以看到里面就只有几个类\n\n![image](/images/server/mybatis/springboot-configure.jpg)\n\n* `MybatisProperties.java`是属性配置类\n```java\n@ConfigurationProperties(prefix = MybatisProperties.MYBATIS_PREFIX)\npublic class MybatisProperties {\n\n  public static final String MYBATIS_PREFIX = \"mybatis\";\n\n  /**\n   * Location of MyBatis xml config file.\n   */\n  private String configLocation;\n\n  /**\n   * Locations of MyBatis mapper files.\n   */\n  private String[] mapperLocations;\n\n  /**\n   * Packages to search type aliases. (Package delimiters are \",; \\t\\n\")\n   */\n  private String typeAliasesPackage;\n\n  /**\n   * Packages to search for type handlers. (Package delimiters are \",; \\t\\n\")\n   */\n  private String typeHandlersPackage;\n\n  /**\n   * Indicates whether perform presence check of the MyBatis xml config file.\n   */\n  private boolean checkConfigLocation = false;\n\n  /**\n   * Execution mode for {@link org.mybatis.spring.SqlSessionTemplate}.\n   */\n  private ExecutorType executorType;\n\n  /**\n   * Externalized properties for MyBatis configuration.\n   */\n  private Properties configurationProperties;\n\n  /**\n   * A Configuration object for customize default settings. If {@link #configLocation}\n   * is specified, this property is not used.\n   */\n  @NestedConfigurationProperty\n  private Configuration configuration;\n  \n  ...\n```\n* `MybatisAutoConfiguration` 是完成自动配置的主要实现类，可以看到这里定义了`SqlSessionFactory`及`SqlSessionTemplate` Bean，这里完成了之前使用xml配置bean的功能\n```java\n/**\n * {@link EnableAutoConfiguration Auto-Configuration} for Mybatis. Contributes a\n * {@link SqlSessionFactory} and a {@link SqlSessionTemplate}.\n *\n * If {@link org.mybatis.spring.annotation.MapperScan} is used, or a\n * configuration file is specified as a property, those will be considered,\n * otherwise this auto-configuration will attempt to register mappers based on\n * the interface definitions in or under the root auto-configuration package.\n *\n * @author Eddú Meléndez\n * @author Josh Long\n * @author Kazuki Shimizu\n * @author Eduardo Macarrón\n */\n@org.springframework.context.annotation.Configuration\n@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class })\n@ConditionalOnBean(DataSource.class)\n@EnableConfigurationProperties(MybatisProperties.class)\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\npublic class MybatisAutoConfiguration {\n\n  private static final Logger logger = LoggerFactory.getLogger(MybatisAutoConfiguration.class);\n\n  private final MybatisProperties properties;\n\n  private final Interceptor[] interceptors;\n\n  private final ResourceLoader resourceLoader;\n\n  private final DatabaseIdProvider databaseIdProvider;\n\n  private final List<ConfigurationCustomizer> configurationCustomizers;\n\n  public MybatisAutoConfiguration(MybatisProperties properties,\n                                  ObjectProvider<Interceptor[]> interceptorsProvider,\n                                  ResourceLoader resourceLoader,\n                                  ObjectProvider<DatabaseIdProvider> databaseIdProvider,\n                                  ObjectProvider<List<ConfigurationCustomizer>> configurationCustomizersProvider) {\n    this.properties = properties;\n    this.interceptors = interceptorsProvider.getIfAvailable();\n    this.resourceLoader = resourceLoader;\n    this.databaseIdProvider = databaseIdProvider.getIfAvailable();\n    this.configurationCustomizers = configurationCustomizersProvider.getIfAvailable();\n  }\n\n  @PostConstruct\n  public void checkConfigFileExists() {\n    if (this.properties.isCheckConfigLocation() && StringUtils.hasText(this.properties.getConfigLocation())) {\n      Resource resource = this.resourceLoader.getResource(this.properties.getConfigLocation());\n      Assert.state(resource.exists(), \"Cannot find config location: \" + resource\n          + \" (please add config file or check your Mybatis configuration)\");\n    }\n  }\n\n  @Bean\n  @ConditionalOnMissingBean\n  public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n    SqlSessionFactoryBean factory = new SqlSessionFactoryBean();\n    factory.setDataSource(dataSource);\n    factory.setVfs(SpringBootVFS.class);\n    if (StringUtils.hasText(this.properties.getConfigLocation())) {\n      factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n    }\n    Configuration configuration = this.properties.getConfiguration();\n    if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n      configuration = new Configuration();\n    }\n    if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n      for (ConfigurationCustomizer customizer : this.configurationCustomizers) {\n        customizer.customize(configuration);\n      }\n    }\n    factory.setConfiguration(configuration);\n    if (this.properties.getConfigurationProperties() != null) {\n      factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n    }\n    if (!ObjectUtils.isEmpty(this.interceptors)) {\n      factory.setPlugins(this.interceptors);\n    }\n    if (this.databaseIdProvider != null) {\n      factory.setDatabaseIdProvider(this.databaseIdProvider);\n    }\n    if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n      factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n    }\n    if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n      factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n    }\n    if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n      factory.setMapperLocations(this.properties.resolveMapperLocations());\n    }\n\n    return factory.getObject();\n  }\n\n  @Bean\n  @ConditionalOnMissingBean\n  public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n    ExecutorType executorType = this.properties.getExecutorType();\n    if (executorType != null) {\n      return new SqlSessionTemplate(sqlSessionFactory, executorType);\n    } else {\n      return new SqlSessionTemplate(sqlSessionFactory);\n    }\n  }\n\n  /**\n   * This will just scan the same base package as Spring Boot does. If you want\n   * more power, you can explicitly use\n   * {@link org.mybatis.spring.annotation.MapperScan} but this will get typed\n   * mappers working correctly, out-of-the-box, similar to using Spring Data JPA\n   * repositories.\n   */\n  public static class AutoConfiguredMapperScannerRegistrar\n      implements BeanFactoryAware, ImportBeanDefinitionRegistrar, ResourceLoaderAware {\n\n    private BeanFactory beanFactory;\n\n    private ResourceLoader resourceLoader;\n\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\n      logger.debug(\"Searching for mappers annotated with @Mapper\");\n\n      ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);\n\n      try {\n        if (this.resourceLoader != null) {\n          scanner.setResourceLoader(this.resourceLoader);\n        }\n\n        List<String> packages = AutoConfigurationPackages.get(this.beanFactory);\n        if (logger.isDebugEnabled()) {\n          for (String pkg : packages) {\n            logger.debug(\"Using auto-configuration base package '{}'\", pkg);\n          }\n        }\n\n        scanner.setAnnotationClass(Mapper.class);\n        scanner.registerFilters();\n        scanner.doScan(StringUtils.toStringArray(packages));\n      } catch (IllegalStateException ex) {\n        logger.debug(\"Could not determine auto-configuration package, automatic mapper scanning disabled.\", ex);\n      }\n    }\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n      this.beanFactory = beanFactory;\n    }\n\n    @Override\n    public void setResourceLoader(ResourceLoader resourceLoader) {\n      this.resourceLoader = resourceLoader;\n    }\n  }\n\n  /**\n   * {@link org.mybatis.spring.annotation.MapperScan} ultimately ends up\n   * creating instances of {@link MapperFactoryBean}. If\n   * {@link org.mybatis.spring.annotation.MapperScan} is used then this\n   * auto-configuration is not needed. If it is _not_ used, however, then this\n   * will bring in a bean registrar and automatically register components based\n   * on the same component-scanning path as Spring Boot itself.\n   */\n  @org.springframework.context.annotation.Configuration\n  @Import({ AutoConfiguredMapperScannerRegistrar.class })\n  @ConditionalOnMissingBean(MapperFactoryBean.class)\n  public static class MapperScannerRegistrarNotFoundConfiguration {\n\n    @PostConstruct\n    public void afterPropertiesSet() {\n      logger.debug(\"No {} found.\", MapperFactoryBean.class.getName());\n    }\n  }\n\n}\n```\n\n* 通过注解配置来集成Spring、Mybatis 的方式可以看到是通过这个注解`@MapperScan`来实现的，查看注解可以看到通过`@Import(MapperScannerRegistrar.class)`把实例加入springIOC容器中\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\n@Import(MapperScannerRegistrar.class) // 通过导入的方式实现把实例加入springIOC容器中\n@Repeatable(MapperScans.class)// 被此注解修饰的注解是可以重复的。注解的参数是可重复注解的存储容器注解类型。@Repeatable括号内的就相当于用来保存该注解内容的容器。\npublic @interface MapperScan {\n```\n* 查看`MapperScannerRegistrar`类，可以看到实现了 `ImportBeanDefinitionRegistrar`接口，重写了`registerBeanDefinitions`方法， 由于实现了该接口让该类成为了拥有注册bean的能力\n\n![image](/images/server/mybatis/MapperScannerRegistrar.png)\n\n* 进入`registerBeanDefinitions`方法\n```java\n  @Override\n  public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n    // 拿到注解信息，内部实现是 LinkedHashMap\n    AnnotationAttributes mapperScanAttrs = AnnotationAttributes\n        .fromMap(importingClassMetadata.getAnnotationAttributes(MapperScan.class.getName()));\n    if (mapperScanAttrs != null) {\n      registerBeanDefinitions(mapperScanAttrs, registry);\n    }\n  }\n```\n* 进入第二个`registerBeanDefinitions`方法，可以看到又出现了`ClassPathMapperScanner`这个类，果不其然，还是调用了`scanner.doScan(StringUtils.toStringArray(basePackages));` 这个方法完成了Mapper的注册\n```java\n  void registerBeanDefinitions(AnnotationAttributes annoAttrs, BeanDefinitionRegistry registry) {\n    // 获得spring的注册器registry\n    ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);\n\n    // this check is needed in Spring 3.1\n    if (resourceLoader != null) {\n      scanner.setResourceLoader(resourceLoader);\n    }\n\n    Class<? extends Annotation> annotationClass = annoAttrs.getClass(\"annotationClass\");\n    if (!Annotation.class.equals(annotationClass)) {\n      scanner.setAnnotationClass(annotationClass);\n    }\n\n    Class<?> markerInterface = annoAttrs.getClass(\"markerInterface\");\n    if (!Class.class.equals(markerInterface)) {\n      scanner.setMarkerInterface(markerInterface);\n    }\n\n    Class<? extends BeanNameGenerator> generatorClass = annoAttrs.getClass(\"nameGenerator\");\n    if (!BeanNameGenerator.class.equals(generatorClass)) {\n      scanner.setBeanNameGenerator(BeanUtils.instantiateClass(generatorClass));\n    }\n\n    Class<? extends MapperFactoryBean> mapperFactoryBeanClass = annoAttrs.getClass(\"factoryBean\");\n    if (!MapperFactoryBean.class.equals(mapperFactoryBeanClass)) {\n      scanner.setMapperFactoryBean(BeanUtils.instantiateClass(mapperFactoryBeanClass));\n    }\n\n    scanner.setSqlSessionTemplateBeanName(annoAttrs.getString(\"sqlSessionTemplateRef\"));\n    scanner.setSqlSessionFactoryBeanName(annoAttrs.getString(\"sqlSessionFactoryRef\"));\n\n    List<String> basePackages = new ArrayList<>();\n    // 如果配置了包路径则将入进去\n    basePackages.addAll(\n        Arrays.stream(annoAttrs.getStringArray(\"value\"))\n            .filter(StringUtils::hasText)\n            .collect(Collectors.toList()));\n    // 与上面功能一致\n    basePackages.addAll(\n        Arrays.stream(annoAttrs.getStringArray(\"basePackages\"))\n            .filter(StringUtils::hasText)\n            .collect(Collectors.toList()));\n\n    basePackages.addAll(\n        Arrays.stream(annoAttrs.getClassArray(\"basePackageClasses\"))\n            .map(ClassUtils::getPackageName)\n            .collect(Collectors.toList()));\n\n    scanner.registerFilters();\n    // 开始扫描包\n    scanner.doScan(StringUtils.toStringArray(basePackages));\n  }\n```\n## 总结\n* 使用注解的方式集成Mybatis比xml配置的方式更为简洁，在`Spring Boot`项目中就是以这种方式来配置的\n* `mybatis-spring-boot-autoconfigure` 帮助我们完成了以下功能\n```xml\n  自动检测现有的DataSource。\n  将创建并注册的一个实例的SqlSessionFactory传递一个数据源作为使用输入SqlSessionFactoryBean的。\n  将创建并注册SqlSessionTemplate的实例从SqlSessionFactory中获取。\n  自动扫描映射器，将它们链接到SqlSessionTemplate并将它们注册到Spring上下文，以便将它们注入到bean中。\n```\n\n\n## 参考\n\nhttp://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/\n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(十八)Spring Mybatis集成之基于XML的配置原理解析","url":"/2018/12/18/backend/mybatis/sourceCodeAnalysis/Mybatis源码(十八)Spring Mybatis集成之基于XML的配置原理解析/","content":"## 前言\n在实际项目开发中，Mybatis一般都是与Spring集成配合使用的，Mybatis与Spring集成需要另一个项目`https://github.com/mybatis/spring`，该项目提供了Mybatis与Spring的集成实现，Mybatis与Spring的集成实现有两种方式，一种是通过XML配置，另一种是通过注解的信息进行配置，这一章节来介绍如何通过XML的方式来在Spring中集成Mybatis及实现原理\n\n### 开始集成\n* 在Spring环境中集成MyBatis\n\n* 添加依赖\n```xml\n    <dependency>\n        <groupId>org.mybatis</groupId>\n        <artifactId>mybatis</artifactId>\n        <version>31-SNAPSHOT</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.mybatis</groupId>\n        <artifactId>mybatis-spring</artifactId>\n        <version>2.0.0-SNAPSHOT</version>\n    </dependency>\n```\n* 添加xml配置\n```xml\n    <!-- 数据库连接池 -->\n    <bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n          init-method=\"init\" destroy-method=\"close\">\n        <property name=\"driverClassName\" value=\"${driver.encryption}\"/>\n        <property name=\"url\" value=\"${url.encryption}\"/>\n        <property name=\"username\" value=\"${user.encryption}\"/>\n        <property name=\"password\" value=\"${password.encryption}\"/>\n        <property name=\"initialSize\" value=\"1\"/>\n        <property name=\"minIdle\" value=\"1\"/>\n        <property name=\"maxActive\" value=\"20\"/>\n        <property name=\"maxWait\" value=\"60000\"/>\n        <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n        <property name=\"minEvictableIdleTimeMillis\" value=\"300000\"/>\n        <property name=\"validationQuery\" value=\"SELECT 1 FROM DUAL\"/>\n        <property name=\"testWhileIdle\" value=\"true\"/>\n        <property name=\"testOnBorrow\" value=\"false\"/>\n        <property name=\"testOnReturn\" value=\"false\"/>\n        <property name=\"poolPreparedStatements\" value=\"true\"/>\n        <property name=\"maxPoolPreparedStatementPerConnectionSize\" value=\"20\"/>\n        <property name=\"filters\" value=\"stat,wall,log4j\"/>\n        <property name=\"connectionProperties\">\n            <value>clientEncoding=UTF-8</value>\n        </property>\n    </bean>\n\n    <!-- 配置SqlSessionFactory对象 -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/>\n        <property name=\"typeAliasesPackage\" value=\"com.songsy.admin.entity\"/>\n        <property name=\"mapperLocations\" value=\"classpath:mapper/*.xml\"/>\n    </bean>\n\n    <!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\n        <property name=\"basePackage\" value=\"com.songsy.admin.dao\"></property>\n    </bean>\n\n\n    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n```\n### 实现解析\n#### dataSource 配置数据源 \n* 在Spring框架中有如下3种获得DataSource对象的方法:\n1. 从JNDI获得DataSource\n2. 从第三方的连接池获得DataSource\n3. 使用DriverManagerDataSource获得DataSource\n\n* 用户可以根据需要选择不同的数据源配置\n#### 使用 SqlSessionFactoryBean 来创建`SqlSession`工厂\n* 在基本的 `MyBatis` 中,`session` 工厂可以使用 `SqlSessionFactoryBuilder` 来创建。而在 `MyBatis-Spring` 中,则使用 `SqlSessionFactoryBean` 来替代。\n\n\n* `SqlSessionFactoryBean.java`\n```java\npublic class SqlSessionFactoryBean implements FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ApplicationEvent> {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(SqlSessionFactoryBean.class);\n\n  private Resource configLocation;\n\n  private Configuration configuration;\n\n  private Resource[] mapperLocations;\n\n  private DataSource dataSource;\n\n  private TransactionFactory transactionFactory;\n\n  private Properties configurationProperties;\n\n  private SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n\n  private SqlSessionFactory sqlSessionFactory;\n\n  //EnvironmentAware requires spring 3.1\n  private String environment = SqlSessionFactoryBean.class.getSimpleName();\n\n  private boolean failFast;\n\n  private Interceptor[] plugins;\n\n  private TypeHandler<?>[] typeHandlers;\n\n  private String typeHandlersPackage;\n\n  private Class<?>[] typeAliases;\n\n  private String typeAliasesPackage;\n\n  private Class<?> typeAliasesSuperType;\n\n  //issue #19. No default provider.\n  private DatabaseIdProvider databaseIdProvider;\n\n  private Class<? extends VFS> vfs;\n\n  private Cache cache;\n\n  private ObjectFactory objectFactory;\n\n  private ObjectWrapperFactory objectWrapperFactory;\n  \n  @Override\n  public void afterPropertiesSet() throws Exception {\n    notNull(dataSource, \"Property 'dataSource' is required\");\n    notNull(sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\");\n    state((configuration == null && configLocation == null) || !(configuration != null && configLocation != null),\n           \"Property 'configuration' and 'configLocation' can not specified with together\");\n   \n    this.sqlSessionFactory = buildSqlSessionFactory();\n   }\n    \n   ...\n\n```\n* 要注意 SqlSessionFactoryBean 实现了 Spring 的 FactoryBean 接口,这就说明了由 Spring 最终创建的 bean 不是 SqlSessionFactoryBean 本身, 。 而是工厂类的 getObject()返回的方法的结果。这种情况下,Spring 将会在应用启动时为你 创建 SqlSessionFactory 对象,然后将它以 SqlSessionFactory 为名来存储。在 Java 中, 相同的代码是:\n```java\n    SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();\n    SqlSessionFactory sessionFactory = factoryBean.getObject();\n```\n\n* 关注`afterPropertiesSet` 方法，这个方法将在`Spring`将所有的属性被初始化后调用，只需要实现`InitializingBean`接口就行，里面的`buildSqlSessionFactory();` 方法，此方法是构建`SqlSessionFactory`的主体方法\n```java\n  protected SqlSessionFactory buildSqlSessionFactory() throws IOException {\n\n    Configuration configuration;\n\n    XMLConfigBuilder xmlConfigBuilder = null;\n    if (this.configuration != null) {\n      configuration = this.configuration;\n      if (configuration.getVariables() == null) {\n        configuration.setVariables(this.configurationProperties);\n      } else if (this.configurationProperties != null) {\n        configuration.getVariables().putAll(this.configurationProperties);\n      }\n    } else if (this.configLocation != null) {\n      // 解析Mybatis配置文件\n      xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties);\n      configuration = xmlConfigBuilder.getConfiguration();\n    } else {\n      LOGGER.debug(() -> \"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n      configuration = new Configuration();\n      if (this.configurationProperties != null) {\n        configuration.setVariables(this.configurationProperties);\n      }\n    }\n  \n    if (this.objectFactory != null) {\n      configuration.setObjectFactory(this.objectFactory);\n    }\n\n    if (this.objectWrapperFactory != null) {\n      configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n    }\n\n    if (this.vfs != null) {\n      configuration.setVfsImpl(this.vfs);\n    }\n    // 基于包名注册别名\n    if (hasLength(this.typeAliasesPackage)) {\n      String[] typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage,\n          ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n      for (String packageToScan : typeAliasPackageArray) {\n        configuration.getTypeAliasRegistry().registerAliases(packageToScan,\n                typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n        LOGGER.debug(() -> \"Scanned package: '\" + packageToScan + \"' for aliases\");\n      }\n    }\n    // 注册别名\n    if (!isEmpty(this.typeAliases)) {\n      for (Class<?> typeAlias : this.typeAliases) {\n        configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n        LOGGER.debug(() -> \"Registered type alias: '\" + typeAlias + \"'\");\n      }\n    }\n    // 添加插件\n    if (!isEmpty(this.plugins)) {\n      for (Interceptor plugin : this.plugins) {\n        configuration.addInterceptor(plugin);\n        LOGGER.debug(() -> \"Registered plugin: '\" + plugin + \"'\");\n      }\n    }\n    // 基于包名注册类型处理器\n    if (hasLength(this.typeHandlersPackage)) {\n      String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,\n          ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n      for (String packageToScan : typeHandlersPackageArray) {\n        configuration.getTypeHandlerRegistry().register(packageToScan);\n        LOGGER.debug(() -> \"Scanned package: '\" + packageToScan + \"' for type handlers\");\n      }\n    }\n    // 添加类型处理器\n    if (!isEmpty(this.typeHandlers)) {\n      for (TypeHandler<?> typeHandler : this.typeHandlers) {\n        configuration.getTypeHandlerRegistry().register(typeHandler);\n        LOGGER.debug(() -> \"Registered type handler: '\" + typeHandler + \"'\");\n      }\n    }\n\n    if (this.databaseIdProvider != null) {//fix #64 set databaseId before parse mapper xmls\n      try {\n        configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n      } catch (SQLException e) {\n        throw new NestedIOException(\"Failed getting a databaseId\", e);\n      }\n    }\n\n    if (this.cache != null) {\n      configuration.addCache(this.cache);\n    }\n\n    if (xmlConfigBuilder != null) {\n      try {\n        xmlConfigBuilder.parse();\n        LOGGER.debug(() -> \"Parsed configuration file: '\" + this.configLocation + \"'\");\n      } catch (Exception ex) {\n        throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex);\n      } finally {\n        ErrorContext.instance().reset();\n      }\n    }\n\n    if (this.transactionFactory == null) {\n      this.transactionFactory = new SpringManagedTransactionFactory();\n    }\n\n    configuration.setEnvironment(new Environment(this.environment, this.transactionFactory, this.dataSource));\n    // 解析Mapper\n    if (!isEmpty(this.mapperLocations)) {\n      for (Resource mapperLocation : this.mapperLocations) {\n        if (mapperLocation == null) {\n          continue;\n        }\n\n        try {\n          XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),\n              configuration, mapperLocation.toString(), configuration.getSqlFragments());\n          xmlMapperBuilder.parse();\n        } catch (Exception e) {\n          throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n        } finally {\n          ErrorContext.instance().reset();\n        }\n        LOGGER.debug(() -> \"Parsed mapper file: '\" + mapperLocation + \"'\");\n      }\n    } else {\n      LOGGER.debug(() -> \"Property 'mapperLocations' was not specified or no matching resources found\");\n    }\n\n    return this.sqlSessionFactoryBuilder.build(configuration);\n  }\n```\n\n* 如下配置可以看到设置了数据源`dataSource`，指定了Mybatis的配置文件`mybatis-config.xml`，配置了别名包路径`typeAliasesPackage`，及Mapper文件的路径\n```xml\n    <!-- 配置SqlSessionFactory对象 -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/>\n        <property name=\"typeAliasesPackage\" value=\"com.songsy.admin.entity\"/>\n        <property name=\"mapperLocations\" value=\"classpath:mapper/*.xml\"/>\n    </bean>\n```\n* basePackage 属性是让你为映射器接口文件设置基本的包路径。 你可以使用分号或逗号 作为分隔符设置多于一个的包路径。每个映射器将会在指定的包路径中递归地被搜索到。\n\n* `SqlSessionFactory` 有一个单独的必须属性,就是 `JDBC` 的 `DataSource`。这可以是任意 的 `DataSource`,其配置应该和其它 `Spring` 数据库连接是一样的。\n\n* 要注意这个配置文件不需要是一个完整的 `MyBatis` 配置。确切地说,任意环境,数据源 和 `MyBatis` 的事务管理器都会被忽略。`SqlSessionFactoryBean` 会创建它自己的,使用这些 值定制 `MyBatis` 的 `Environment` 时是需要的。\n\n#### 使用 MapperScannerConfigurer 来扫描Mapper \n* 使用`MapperScannerConfigurer`来注册所有的映射器，它将会查找类路径下的映射器并自动将它们创建成`MapperFactoryBean`，把`SqlSession`或者`SqlSessionFactory`注入进去\n\n![image](/images/server/mybatis/MapperScannerConfigurer.png)\n\n* `MapperScannerConfigurer`实现了 `BeanDefinitionRegistryPostProcessor`接口，如果实现了该接口，那么说明在`Spring Application`初始化的时候将会调用下面的方法\n```xml\n  @Override\n  public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {\n    if (this.processPropertyPlaceHolders) {\n      // 处理PropertyResourceConfigurers 加载属性配置问题\n      processPropertyPlaceHolders();\n    }\n\n    ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);\n    scanner.setAddToConfig(this.addToConfig);\n    scanner.setAnnotationClass(this.annotationClass);\n    scanner.setMarkerInterface(this.markerInterface);\n    scanner.setSqlSessionFactory(this.sqlSessionFactory);\n    scanner.setSqlSessionTemplate(this.sqlSessionTemplate);\n    scanner.setSqlSessionFactoryBeanName(this.sqlSessionFactoryBeanName);\n    scanner.setSqlSessionTemplateBeanName(this.sqlSessionTemplateBeanName);\n    scanner.setResourceLoader(this.applicationContext);\n    scanner.setBeanNameGenerator(this.nameGenerator);\n    scanner.registerFilters();\n    scanner.scan(StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));\n  }\n```\n* 从上面代码可以看到是通过`ClassPathMapperScanner` 这个类来实现解析的，重点关注`scanner.scan()` 方法，进入该方法，因为`ClassPathMapperScanner`继承了`ClassPathBeanDefinitionScanner` 所以这里调用的是`ClassPathBeanDefinitionScanner`这个类的`scan()`方法，可以看到第二行`doScan(basePackages);` 这个方法是`ClassPathMapperScanner` 的本地方法，该方法重载了`ClassPathBeanDefinitionScanner`的`doScan`方法\n```java\n\tpublic int scan(String... basePackages) {\n\t\tint beanCountAtScanStart = this.registry.getBeanDefinitionCount();\n\n\t\tdoScan(basePackages);\n\n\t\t// Register annotation config processors, if necessary.\n\t\tif (this.includeAnnotationConfig) {\n\t\t\tAnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);\n\t\t}\n\n\t\treturn (this.registry.getBeanDefinitionCount() - beanCountAtScanStart);\n\t}\n```\n* 进入`doScan(basePackages);` 返回到`ClassPathMapperScanner` 这个类，这里是实现MapperScan的核心方法，可以看到通过Spring 的`ClassPathBeanDefinitionScanner` 类来生成`BeanDefinitionHolder`，这里是一个接口一个`BeanDefinitionHolder`\n```java\n  @Override\n  public Set<BeanDefinitionHolder> doScan(String... basePackages) {\n    // 通过Spring 的ClassPathBeanDefinitionScanner 类来生成BeanDefinitionHolder\n    Set<BeanDefinitionHolder> beanDefinitions = super.doScan(basePackages);\n\n    if (beanDefinitions.isEmpty()) {\n      LOGGER.warn(() -> \"No MyBatis mapper was found in '\" + Arrays.toString(basePackages) + \"' package. Please check your configuration.\");\n    } else {\n      // 在这里完成对Spring Bean的属性配置\n      processBeanDefinitions(beanDefinitions);\n    }\n    return beanDefinitions;\n  }\n```\n* 进入`processBeanDefinitions(beanDefinitions);` 方法，关注`definition.setBeanClass(this.mapperFactoryBean.getClass());`这一行，可以看到这里设置了Mapper类的Bean，实际的源头Bean是`MapperFactoryBean`\n```java\n  private void processBeanDefinitions(Set<BeanDefinitionHolder> beanDefinitions) {\n    GenericBeanDefinition definition;\n    for (BeanDefinitionHolder holder : beanDefinitions) {\n      definition = (GenericBeanDefinition) holder.getBeanDefinition();\n      String beanClassName = definition.getBeanClassName();\n      LOGGER.debug(() -> \"Creating MapperFactoryBean with name '\" + holder.getBeanName()\n          + \"' and '\" + beanClassName + \"' mapperInterface\");\n\n      // the mapper interface is the original class of the bean\n      // but, the actual class of the bean is MapperFactoryBean\n      definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); // issue #59\n      // 设置了Mapper类的Bean，实际的源头Bean是MapperFactoryBean，Mapper是由该bean生成\n      definition.setBeanClass(this.mapperFactoryBean.getClass());\n\n      definition.getPropertyValues().add(\"addToConfig\", this.addToConfig);\n\n      boolean explicitFactoryUsed = false;\n      if (StringUtils.hasText(this.sqlSessionFactoryBeanName)) {\n        definition.getPropertyValues().add(\"sqlSessionFactory\", new RuntimeBeanReference(this.sqlSessionFactoryBeanName));\n        explicitFactoryUsed = true;\n      } else if (this.sqlSessionFactory != null) {\n        definition.getPropertyValues().add(\"sqlSessionFactory\", this.sqlSessionFactory);\n        explicitFactoryUsed = true;\n      }\n\n      if (StringUtils.hasText(this.sqlSessionTemplateBeanName)) {\n        if (explicitFactoryUsed) {\n          LOGGER.warn(() -> \"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.\");\n        }\n        definition.getPropertyValues().add(\"sqlSessionTemplate\", new RuntimeBeanReference(this.sqlSessionTemplateBeanName));\n        explicitFactoryUsed = true;\n      } else if (this.sqlSessionTemplate != null) {\n        if (explicitFactoryUsed) {\n          LOGGER.warn(() -> \"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.\");\n        }\n        definition.getPropertyValues().add(\"sqlSessionTemplate\", this.sqlSessionTemplate);\n        explicitFactoryUsed = true;\n      }\n\n      if (!explicitFactoryUsed) {\n        LOGGER.debug(() -> \"Enabling autowire by type for MapperFactoryBean with name '\" + holder.getBeanName() + \"'.\");\n        definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);\n      }\n    }\n  }\n```\n* `MapperScannerConfigurer`不需要指定`SqlSessionFactory` 或`SqlSessionTemplate`,`MapperScannerConfigurer` 将会创建 `MapperFactoryBean`之后自动装配，如果你使用了一个以上的 DataSource ,那么自动装配可能会失效 。这种情况下你可以使用 `SqlSessionFactoryBeanName` 或 `SqlSessionTemplateBeanName` 属性来设置正确的 `Bean` 名 称来使用\n\n* 下面来看一下`MapperFactoryBean`，可以看到`getObject()`方法调用的是 `SqlSessionDaoSupport`类中 `SqlSessionTemplate` 类的`getMapper(this.mapperInterface);`方法，该Bean将会在这里返回了Mapper接口的动态代理类\n```java\npublic class MapperFactoryBean<T> extends SqlSessionDaoSupport implements FactoryBean<T> {\n\n  private Class<T> mapperInterface;\n\n  private boolean addToConfig = true;\n\n  public MapperFactoryBean() {\n    //intentionally empty \n  }\n  \n  public MapperFactoryBean(Class<T> mapperInterface) {\n    this.mapperInterface = mapperInterface;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  protected void checkDaoConfig() {\n    super.checkDaoConfig();\n\n    notNull(this.mapperInterface, \"Property 'mapperInterface' is required\");\n\n    Configuration configuration = getSqlSession().getConfiguration();\n    if (this.addToConfig && !configuration.hasMapper(this.mapperInterface)) {\n      try {\n        configuration.addMapper(this.mapperInterface);\n      } catch (Exception e) {\n        logger.error(\"Error while adding the mapper '\" + this.mapperInterface + \"' to configuration.\", e);\n        throw new IllegalArgumentException(e);\n      } finally {\n        ErrorContext.instance().reset();\n      }\n    }\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public T getObject() throws Exception {\n    return getSqlSession().getMapper(this.mapperInterface);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Class<T> getObjectType() {\n    return this.mapperInterface;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean isSingleton() {\n    return true;\n  }\n\n  //------------- mutators --------------\n\n  /**\n   * Sets the mapper interface of the MyBatis mapper\n   *\n   * @param mapperInterface class of the interface\n   */\n  public void setMapperInterface(Class<T> mapperInterface) {\n    this.mapperInterface = mapperInterface;\n  }\n\n  /**\n   * Return the mapper interface of the MyBatis mapper\n   *\n   * @return class of the interface\n   */\n  public Class<T> getMapperInterface() {\n    return mapperInterface;\n  }\n\n  /**\n   * If addToConfig is false the mapper will not be added to MyBatis. This means\n   * it must have been included in mybatis-config.xml.\n   * <p>\n   * If it is true, the mapper will be added to MyBatis in the case it is not already\n   * registered.\n   * <p>\n   * By default addToConfig is true.\n   *\n   * @param addToConfig a flag that whether add mapper to MyBatis or not\n   */\n  public void setAddToConfig(boolean addToConfig) {\n    this.addToConfig = addToConfig;\n  }\n\n  /**\n   * Return the flag for addition into MyBatis config.\n   *\n   * @return true if the mapper will be added to MyBatis in the case it is not already\n   * registered.\n   */\n  public boolean isAddToConfig() {\n    return addToConfig;\n  }\n}\n```\n* `MapperFactoryBean` 创建的代理类实现了 `UserMapper` 接口,并且注入到应用程序中。 因为代理创建在运行时环境中(Runtime,译者注),那么指定的映射器必须是一个接口,而不是一个具体的实现类\n\n* `SqlSessionTemplate` 是`MyBatis-Spring`的核心。这个类负责管理`MyBatis`的`SqlSession`,调用MyBatis的SQL方法。`SqlSessionTemplate`是线程安全的，可以被多个DAO所共享使用\n\n```java\npublic class SqlSessionTemplate implements SqlSession, DisposableBean {\n\n  private final SqlSessionFactory sqlSessionFactory;\n\n  private final ExecutorType executorType;\n  // SqlSession代理\n  private final SqlSession sqlSessionProxy;\n\n  private final PersistenceExceptionTranslator exceptionTranslator;\n\n  /**\n   * Constructs a Spring managed SqlSession with the {@code SqlSessionFactory}\n   * provided as an argument.\n   *\n   * @param sqlSessionFactory a factory of SqlSession\n   */\n  public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n    this(sqlSessionFactory, sqlSessionFactory.getConfiguration().getDefaultExecutorType());\n  }\n\n  /**\n   * Constructs a Spring managed SqlSession with the {@code SqlSessionFactory}\n   * provided as an argument and the given {@code ExecutorType}\n   * {@code ExecutorType} cannot be changed once the {@code SqlSessionTemplate}\n   * is constructed.\n   *\n   * @param sqlSessionFactory a factory of SqlSession\n   * @param executorType an executor type on session\n   */\n  public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType) {\n    this(sqlSessionFactory, executorType,\n        new MyBatisExceptionTranslator(\n            sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(), true));\n  }\n\n  /**\n   * Constructs a Spring managed {@code SqlSession} with the given\n   * {@code SqlSessionFactory} and {@code ExecutorType}.\n   * A custom {@code SQLExceptionTranslator} can be provided as an\n   * argument so any {@code PersistenceException} thrown by MyBatis\n   * can be custom translated to a {@code RuntimeException}\n   * The {@code SQLExceptionTranslator} can also be null and thus no\n   * exception translation will be done and MyBatis exceptions will be\n   * thrown\n   *\n   * @param sqlSessionFactory a factory of SqlSession\n   * @param executorType an executor type on session\n   * @param exceptionTranslator a translator of exception\n   */\n  public SqlSessionTemplate(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,\n      PersistenceExceptionTranslator exceptionTranslator) {\n\n    notNull(sqlSessionFactory, \"Property 'sqlSessionFactory' is required\");\n    notNull(executorType, \"Property 'executorType' is required\");\n\n    this.sqlSessionFactory = sqlSessionFactory;\n    this.executorType = executorType;\n    this.exceptionTranslator = exceptionTranslator;\n    // 形成SqlSession代理类\n    this.sqlSessionProxy = (SqlSession) newProxyInstance(\n        SqlSessionFactory.class.getClassLoader(),\n        new Class[] { SqlSession.class },\n        new SqlSessionInterceptor());\n  }\n\n  /**\n   * SqlSession 代理类，MyBatis路由方法调用得到有Spring Transaction的SqlSession\n   * Proxy needed to route MyBatis method calls to the proper SqlSession got\n   * from Spring's Transaction Manager\n   * It also unwraps exceptions thrown by {@code Method#invoke(Object, Object...)} to\n   * pass a {@code PersistenceException} to the {@code PersistenceExceptionTranslator}.\n   */\n  private class SqlSessionInterceptor implements InvocationHandler {\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n      // 每次新生成一个SqlSession，一次调用一个SqlSession\n      SqlSession sqlSession = getSqlSession(\n          SqlSessionTemplate.this.sqlSessionFactory,\n          SqlSessionTemplate.this.executorType,\n          SqlSessionTemplate.this.exceptionTranslator);\n      try {\n        Object result = method.invoke(sqlSession, args);\n        // 判断是否事务\n        if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) {\n          // force commit even on non-dirty sessions because some databases require\n          // a commit/rollback before calling close()\n          // 没有使用事务\n          sqlSession.commit(true);\n        }\n        return result;\n      } catch (Throwable t) {\n        Throwable unwrapped = unwrapThrowable(t);\n        if (SqlSessionTemplate.this.exceptionTranslator != null && unwrapped instanceof PersistenceException) {\n          // release the connection to avoid a deadlock if the translator is no loaded. See issue #22\n          closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n          sqlSession = null;\n          Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);\n          if (translated != null) {\n            unwrapped = translated;\n          }\n        }\n        throw unwrapped;\n      } finally {\n        if (sqlSession != null) {\n          // 关闭SqlSession\n          closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n        }\n      }\n    }\n  }\n  \n  ...\n  \n```\n* `SqlSessionTemplate` 自动装配实现\n\nTODO\n\n## 总结\n* `SqlSessionFactory` 为什么能被`Spring Ioc`容器管理的原因是因为`FactoryBean`这个接口，这是个支持泛型的接口，Spring 将会在应用启动时为你 创建`SqlSessionFactory`对象,然后将它以 `SqlSessionFactory`为名来存储。当把这个bean注入到Spring中去了以后，IOC容器中的其他类型就可以拿到`SqlSession`实例了，就可以进行相关的SQL执行任务了。\n* 当`SqlSessionFactory` 被`Spring`管理之后，如果单纯的使用`Mybatis`的话，是使用`session.getMapper(UserMapper.class)`来获取`mapper`的，但是现在在Spring环境中一般都是通过如下形式来调用的\n```java\n    @Autowire\n    private UserMapper userMapper;\n```\n* 所以`Spring Mybatis` 通过`MapperScannerConfigurer` 来将各个`UserMapper RoleMapper...`注册成为`Spring bean` (MapperFactoryBean)，由`MapperFactoryBean`来生成Mapper的代理类对象\n\n\n\n## 参考\n\nhttp://www.mybatis.org/spring/zh/factorybean.html\n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(十七)结果映射DefaultResultSetHandler","url":"/2018/12/09/backend/mybatis/sourceCodeAnalysis/Mybatis源码(十七)结果映射DefaultResultSetHandler/","content":"## 前言\n上一章节介绍了Mybatis的参数绑定处理，本章将介绍Mybatis的结果映射过程，有执行就应该有结果，那Mybaits是怎样处理Jdbc返回的结果，并将结果映射成我们需要的对象呢？\n\n## 结果映射解析\n \n### 原生Jdbc结果映射\n\n> 还是老套路，在介绍Mybatis结果映射处理之前先来看一下原生Jdbc结果映射是怎样处理的，可以看到通过迭代`resultSet`并根据列名来获取的值\n```java\nresultSet=statement.executeQuery(sql);\nwhile (resultSet.next()){\n    String loginName=resultSet.getString(\"loginName\");\n    String userName=resultSet.getString(\"userName\");\n    String password=resultSet.getString(\"password\");\n    int sex=resultSet.getInt(\"sex\");\n}\n```\n### Mybatis结果映射解析\n#### 下面还是通过一个示例来介绍\n* 测试用例\n\n```java\n// 读取配置文件\nFile file = new File(\"src/test/java/resources/mybatis-config.xml\");\nInputStream inputStream = new FileInputStream(file);\n// 构建SqlSessionFactory\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n// 得到SqlSession\nSqlSession sqlSession = sqlSessionFactory.openSession();\n// 得到Mapper\nUserMapper userMapper1 = sqlSession.getMapper(UserMapper.class);\nUser user = new User();\nuser.setUsername(\"admin\");\nSystem.out.println(userMapper1.selectSelective(user));\n```\n\n* xml 配置\n\n```java\n    <select id=\"selectSelective\" resultType=\"org.apache.songsy.entity.User\" parameterType=\"org.apache.songsy.entity.User\">\n        SELECT\n          *\n        FROM\n          sys_user\n        <where>\n            <if test=\"id != null\">\n                AND id = #{id}\n            </if>\n            <if test=\"username != null and username != ''\">\n                AND username = #{username}\n            </if>\n            <if test=\"password != null\">\n                AND password = #{password}\n            </if>\n        </where>\n    </select>\n```\n* 还是打入断点进入`SimpleExecutor` 的 `doQuery` 方法\n```java\n  @Override\n  public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n    Statement stmt = null;\n    try {\n      Configuration configuration = ms.getConfiguration();\n      // 新建一个StatementHandler\n      // 这里看到ResultHandler传入了\n      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n      // 准备语句\n      stmt = prepareStatement(handler, ms.getStatementLog());\n      // StatementHandler.query\n      return handler.<E>query(stmt, resultHandler);\n    } finally {\n      closeStatement(stmt);\n    }\n  }\n```\n* 上一章节已经完成了`stmt = prepareStatement(handler, ms.getStatementLog());`操作，这一章节来处理`return handler.<E>query(stmt, resultHandler);`\n\n* 进入该方法之后转到 `RoutingStatementHandler` 之后又转入 `PreparedStatementHandler` 进入`query` 方法，如下如可以看到又出现了Jdbc代码`ps.execute();`\n```java\n  @Override\n  public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {\n    PreparedStatement ps = (PreparedStatement) statement;\n    ps.execute();\n    return resultSetHandler.<E> handleResultSets(ps);\n  }\n```\n* `execute` 完成之后就是处理结果集了`resultSetHandler.<E> handleResultSets(ps)`， 进入该方法之后进入到`DefaultResultSetHandler` 类的`handleResultSets` 方法，\n以下代码可以知道数据结果都是存放在`multipleResults` 里面\n\n```java\n  /**\n   * 处理ResultSets 并返回结果集\n   * @param stmt\n   * @return\n   * @throws SQLException\n   */\n  @Override\n  public List<Object> handleResultSets(Statement stmt) throws SQLException {\n    ErrorContext.instance().activity(\"handling results\").object(mappedStatement.getId());\n    // 存放所有数据\n    final List<Object> multipleResults = new ArrayList<Object>();\n\n    int resultSetCount = 0;\n    ResultSetWrapper rsw = getFirstResultSet(stmt);\n    // 由MappedStatement 获取ResultMap\n    List<ResultMap> resultMaps = mappedStatement.getResultMaps();\n    // 一般resultMaps里只有一个元素\n    int resultMapCount = resultMaps.size();\n    validateResultMapsCount(rsw, resultMapCount);\n    while (rsw != null && resultMapCount > resultSetCount) {\n      ResultMap resultMap = resultMaps.get(resultSetCount);\n      // 处理结果集\n      handleResultSet(rsw, resultMap, multipleResults, null);\n      rsw = getNextResultSet(stmt);\n      cleanUpAfterHandlingResultSet();\n      resultSetCount++;\n    }\n\n    String[] resultSets = mappedStatement.getResulSets();\n    if (resultSets != null) {\n      while (rsw != null && resultSetCount < resultSets.length) {\n        ResultMapping parentMapping = nextResultMaps.get(resultSets[resultSetCount]);\n        if (parentMapping != null) {\n          String nestedResultMapId = parentMapping.getNestedResultMapId();\n          ResultMap resultMap = configuration.getResultMap(nestedResultMapId);\n          handleResultSet(rsw, resultMap, null, parentMapping);\n        }\n        rsw = getNextResultSet(stmt);\n        cleanUpAfterHandlingResultSet();\n        resultSetCount++;\n      }\n    }\n    return collapseSingleResultList(multipleResults);\n  }\n```\n* 继续跳入`handleResultSet(rsw, resultMap, multipleResults, null);` ，可以看到这行代码`multipleResults.add(defaultResultHandler.getResultList());` 将结果赋值到了`multipleResults`，下面的方法对`resultHandler` 进行了判断，我们现在是没有指定`ResultHandler`所以这里该值为`null`，将跳入默认的`ResultHandler` 处理类\n```java\n  // 处理结果集\n  private void handleResultSet(ResultSetWrapper rsw, ResultMap resultMap, List<Object> multipleResults, ResultMapping parentMapping) throws SQLException {\n    try {\n      if (parentMapping != null) {\n        handleRowValues(rsw, resultMap, null, RowBounds.DEFAULT, parentMapping);\n      } else {\n        if (resultHandler == null) {\n          // 如果没有resultHandler\n          // 新建DefaultResultHandler\n          DefaultResultHandler defaultResultHandler = new DefaultResultHandler(objectFactory);\n          // 调用自己的handleRowValues\n          handleRowValues(rsw, resultMap, defaultResultHandler, rowBounds, null);\n          // 得到记录的list\n          multipleResults.add(defaultResultHandler.getResultList());\n        } else {\n          //如果有resultHandler\n          handleRowValues(rsw, resultMap, resultHandler, rowBounds, null);\n        }\n      }\n    } finally {\n      //最后别忘了关闭结果集，这个居然出bug了\n      // issue #228 (close resultsets)\n      closeResultSet(rsw.getResultSet());\n    }\n  }\n```\n* 跳入`handleRowValues(rsw, resultMap, defaultResultHandler, rowBounds, null);`，这里有个是否有嵌套的结果集判读，当然如果是有的话肯定要特殊处理的\n```java\n  private void handleRowValues(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler resultHandler, RowBounds rowBounds, ResultMapping parentMapping) throws SQLException {\n    // 是否有嵌套的结果集\n    if (resultMap.hasNestedResultMaps()) {\n      ensureNoRowBounds();\n      checkResultHandler();\n      handleRowValuesForNestedResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);\n    } else {\n      handleRowValuesForSimpleResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);\n    }\n  }  \n```\n* 我们现在这没有嵌套，所以`else`进入`handleRowValuesForSimpleResultMap` 方法，可以看到这里是一行一行的处理结果，`ResultSetWrapper` 是对`ResultSet`的包装\n```java\n  /**\n   * 见方法名知 ResultMap根据处理行数据\n   * @param rsw\n   * @param resultMap\n   * @param resultHandler 结果存放在这，里面是一个List<Object>\n   * @param rowBounds\n   * @param parentMapping\n   * @throws SQLException\n   */\n  private void handleRowValuesForSimpleResultMap(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler resultHandler, RowBounds rowBounds, ResultMapping parentMapping)\n      throws SQLException {\n    DefaultResultContext resultContext = new DefaultResultContext();\n    skipRows(rsw.getResultSet(), rowBounds);\n    // 一行一行赋值 rsw.getResultSet().next() Jdbc\n    while (shouldProcessMoreRows(resultContext, rowBounds) && rsw.getResultSet().next()) {\n      ResultMap discriminatedResultMap = resolveDiscriminatedResultMap(rsw.getResultSet(), resultMap, null);\n      // 获取一行数据\n      Object rowValue = getRowValue(rsw, discriminatedResultMap);\n      storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());\n    }\n  }\n```\n\n* 重点关注`Object rowValue = getRowValue(rsw, discriminatedResultMap);` 这里的处理，这里是处理一行的数据\n \n```java\n  // 核心，取得一行的值\n  private Object getRowValue(ResultSetWrapper rsw, ResultMap resultMap) throws SQLException {\n    // 实例化ResultLoaderMap(延迟加载器)\n    final ResultLoaderMap lazyLoader = new ResultLoaderMap();\n    // 调用自己的createResultObject,内部就是new一个对象(如果是简单类型，new完也把值赋进去)\n    Object resultObject = createResultObject(rsw, resultMap, lazyLoader, null);\n    if (resultObject != null && !typeHandlerRegistry.hasTypeHandler(resultMap.getType())) {\n      // 一般不是简单类型不会有typehandler,这个if会进来\n      final MetaObject metaObject = configuration.newMetaObject(resultObject);\n      boolean foundValues = !resultMap.getConstructorResultMappings().isEmpty();\n      if (shouldApplyAutomaticMappings(resultMap, false)) {        \n        // 自动映射咯\n        // 这里把每个列的值都赋到相应的字段里去了\n    \tfoundValues = applyAutomaticMappings(rsw, resultMap, metaObject, null) || foundValues;\n      }\n      foundValues = applyPropertyMappings(rsw, resultMap, metaObject, lazyLoader, null) || foundValues;\n      foundValues = lazyLoader.size() > 0 || foundValues;\n      resultObject = foundValues ? resultObject : null;\n      return resultObject;\n    }\n    return resultObject;\n  }\n```\n* 跳入`applyAutomaticMappings` 方法，可以看到这里是结果映射的核心代码，巧妙的用TypeHandler取得结果，根据columnName从ResultSet取值\n\n```java\n  /**\n   * 自动映射\n   * @param rsw 对 ResultSet 的包装\n   * @param resultMap ResultMap\n   * @param metaObject 返回的对象\n   * @param columnPrefix\n   * @return\n   * @throws SQLException\n   */\n  private boolean applyAutomaticMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix) throws SQLException {\n    // 得到表列名list\n    final List<String> unmappedColumnNames = rsw.getUnmappedColumnNames(resultMap, columnPrefix);\n    boolean foundValues = false;\n    // 一列一列数据循环赋值\n    for (String columnName : unmappedColumnNames) {\n      String propertyName = columnName;\n      if (columnPrefix != null && !columnPrefix.isEmpty()) {\n        // When columnPrefix is specified,\n        // ignore columns without the prefix.\n        if (columnName.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) {\n          propertyName = columnName.substring(columnPrefix.length());\n        } else {\n          continue;\n        }\n      }\n      final String property = metaObject.findProperty(propertyName, configuration.isMapUnderscoreToCamelCase());\n      if (property != null && metaObject.hasSetter(property)) {\n        final Class<?> propertyType = metaObject.getSetterType(property);\n        if (typeHandlerRegistry.hasTypeHandler(propertyType)) {\n          // 根据实体类字段类型获取对应的TypeHandler\n          final TypeHandler<?> typeHandler = rsw.getTypeHandler(propertyType, columnName);\n          // 巧妙的用TypeHandler取得结果，根据columnName从ResultSet取值\n          final Object value = typeHandler.getResult(rsw.getResultSet(), columnName);\n          // issue #377, call setter on nulls\n          if (value != null || configuration.isCallSettersOnNulls()) {\n            if (value != null || !propertyType.isPrimitive()) {\n              // 然后巧妙的用反射来设置到对象\n              metaObject.setValue(property, value);\n            }\n            foundValues = true;\n          }\n        }\n      }\n    }\n    return foundValues;\n  }\n```\n* 又出现了`TypeHandler`，下面的方法出现了Jdbc代码` return rs.getString(columnName);`\n\n```java\npublic class StringTypeHandler extends BaseTypeHandler<String> {\n\n\n  @Override\n  public String getNullableResult(ResultSet rs, String columnName)\n      throws SQLException {\n    return rs.getString(columnName);\n  }\n```\n\n* 在此Mybatis结果映射处理完成\n\n## 总结\n* Mybatis的参数绑定和结果映射最终处理都是通过不同的`TypeHandler`来处理的，Mybatis也支持自定义`TypeHandler` 但一般情况Mybatis提供的就可以应付常见需求了\n\n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(十六)参数绑定DefaultParameterHandler","url":"/2018/12/09/backend/mybatis/sourceCodeAnalysis/Mybatis源码(十六)参数绑定DefaultParameterHandler/","content":"## 前言\nMybatis 一个重要功能是参数的自动绑定，Mybatis是怎样帮我们做好Jdbc的参数绑定的呢，这一章节来介绍Mybatis的参数绑定\n\n## 参数绑定解析\n \n### 原生Jdbc参数绑定\n\n> 在介绍Mybatis参数绑定之前先来看一下原生Jdbc参数绑定是怎样处理的，从下面的Jdbc代码可以看到，是通过下标顺序来设置参数值的，一个问号一个参数\n\n```java\nString sql = \"insert into user(sno,name,age)values(?,?,?)\";//定义一个要执行的SQL语句\nPreparedStatement ps = connection.prepareStatement(sql);\nps.setString(1,student.getSno());//设置SQL语句的第一个参数\nps.setString(2,student.getName());//设置SQL语句的第二个参数\nps.setInt(3,student.getAge());//设置SQL语句的第三个参数\n```\n### Mybatis参数绑定解析\n#### 下面通过一个示例来介绍\n\n* 测试用例，下面的代码是通过User对象来查找对应的数据，user设置了两个属性值id 和 admin\n\n```java\n// 读取配置文件\nFile file = new File(\"src/test/java/resources/mybatis-config.xml\");\nInputStream inputStream = new FileInputStream(file);\n// 构建SqlSessionFactory\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n// 得到SqlSession\nSqlSession sqlSession = sqlSessionFactory.openSession();\n// 得到Mapper\nUserMapper userMapper1 = sqlSession.getMapper(UserMapper.class);\nUser user = new User();\nuser.setId(1);\nuser.setUsername(\"admin\");\nSystem.out.println(userMapper1.selectSelective(user));\n```\n\n* xml 配置\n\n```java\n    <select id=\"selectSelective\" resultType=\"org.apache.songsy.entity.User\" parameterType=\"org.apache.songsy.entity.User\">\n        SELECT\n          *\n        FROM\n          sys_user\n        <where>\n            <if test=\"id != null\">\n                AND id = #{id}\n            </if>\n            <if test=\"username != null and username != ''\">\n                AND username = #{username}\n            </if>\n            <if test=\"password != null\">\n                AND password = #{password}\n            </if>\n        </where>\n    </select>\n```\n\n* 从第十五章可以知道，由传入的参数对象配合`SqlSource` 完成了动态Sql的处理， 下面是得到的结果 `SELECT * FROM sys_user WHERE id = ? AND username = ?`，这里得到了Jdbc的代码，现在要Mybatis要处理的就是这两个问号`?`\n\n![image](/images/server/mybatis/boundSql结果.png)\n\n* 还是打入断点进入`SimpleExecutor` 的 `doQuery` 方法，在这里可以看到这里新建了一个 `StatementHandler` 这个是SQL语句的执行器，在由来调度sql的参数绑定，sql执行，sql结果映射，现在重点关注`stmt = prepareStatement(handler, ms.getStatementLog());` 这一行，看方法名称就大概知道这里是sql之前预备处理\n\n```java\n  @Override\n  public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n    Statement stmt = null;\n    try {\n      Configuration configuration = ms.getConfiguration();\n      // 新建一个StatementHandler\n      // 这里看到ResultHandler传入了\n      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n      // 准备语句\n      stmt = prepareStatement(handler, ms.getStatementLog());\n      // StatementHandler.query\n      return handler.<E>query(stmt, resultHandler);\n    } finally {\n      closeStatement(stmt);\n    }\n  }\n```\n* 进入`stmt = prepareStatement(handler, ms.getStatementLog());` 方法，这里主要是对`Connection` 和 `sql参数` 进行了设置，继续跳入`handler.parameterize(stmt);`\n```java\n  private Statement prepareStatement(StatementHandler handler, Log statementLog) throws SQLException {\n    Statement stmt;\n    Connection connection = getConnection(statementLog);\n    // 调用StatementHandler.prepare 设置Connection\n    stmt = handler.prepare(connection);\n    // 调用StatementHandler.parameterize 设置参数\n    handler.parameterize(stmt);\n    return stmt;\n  }\n```\n\n* 进入`handler.parameterize(stmt);`方法之后，转到 `RoutingStatementHandler` 之后又转入 `PreparedStatementHandler`，一系列的转发之后进入`DefaultParameterHandler` 类的`setParameters` 方法\n\n```java\npublic class DefaultParameterHandler implements ParameterHandler {\n\n  private final TypeHandlerRegistry typeHandlerRegistry;\n\n  private final MappedStatement mappedStatement;\n  // 参数对象\n  private final Object parameterObject;\n  // BoundSql\n  private BoundSql boundSql;\n  // 万能Configuration\n  private Configuration configuration;\n\n  public DefaultParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {\n    this.mappedStatement = mappedStatement;\n    this.configuration = mappedStatement.getConfiguration();\n    this.typeHandlerRegistry = mappedStatement.getConfiguration().getTypeHandlerRegistry();\n    this.parameterObject = parameterObject;\n    this.boundSql = boundSql;\n  }\n\n  @Override\n  public Object getParameterObject() {\n    return parameterObject;\n  }\n\n  // 设置参数\n  @Override\n  public void setParameters(PreparedStatement ps) throws SQLException {\n    ErrorContext.instance().activity(\"setting parameters\").object(mappedStatement.getParameterMap().getId());\n    List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n    if (parameterMappings != null) {\n      // 循环设参数\n      for (int i = 0; i < parameterMappings.size(); i++) {\n        ParameterMapping parameterMapping = parameterMappings.get(i);\n        if (parameterMapping.getMode() != ParameterMode.OUT) {\n          // 如果不是OUT，才设进去\n          Object value;\n          String propertyName = parameterMapping.getProperty();\n          if (boundSql.hasAdditionalParameter(propertyName)) { // issue #448 ask first for additional params\n            // 若有额外的参数, 设为额外的参数\n            value = boundSql.getAdditionalParameter(propertyName);\n          } else if (parameterObject == null) {\n            // 若参数为null，直接设null\n            value = null;\n          } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n            // 若参数有相应的TypeHandler，直接设object\n            value = parameterObject;\n          } else {\n            // 除此以外，MetaObject.getValue反射取得值设进去\n            MetaObject metaObject = configuration.newMetaObject(parameterObject);\n            value = metaObject.getValue(propertyName);\n          }\n          // 类型处理器\n          TypeHandler typeHandler = parameterMapping.getTypeHandler();\n          JdbcType jdbcType = parameterMapping.getJdbcType();\n          if (value == null && jdbcType == null) {\n            // 不同类型的set方法不同，所以委派给子类的setParameter方法\n            jdbcType = configuration.getJdbcTypeForNull();\n          }\n          // 用在类型处理器进行赋值\n          typeHandler.setParameter(ps, i + 1, value, jdbcType);\n        }\n      }\n    }\n  }\n}\n```\n* 进入`setParameters` 方法之后，可以看到通过我们之前的`BoundSql` 得到 `ParamterMappings`对象，如下图可以知道是两个属性，然后下面的操作就是依次赋值了，不过这里有个特殊的地方，也是Mybatis参数绑定高明之处，就是赋值的操作是通过`TypeHandler` 来赋值的\n\n![image](/images/server/mybatis/paramterMappings.png)\n\n* 继续跳入`typeHandler.setParameter(ps, i + 1, value, jdbcType);` 来到 `IntegerTypeHandler`的 `setNonNullParameter`方法，有没有看到曙光`ps.setInt(i, parameter);` ,在这里做了Jdbc的参数绑定操作\n\n```java\npublic class IntegerTypeHandler extends BaseTypeHandler<Integer> {\n\n  @Override\n  public void setNonNullParameter(PreparedStatement ps, int i, Integer parameter, JdbcType jdbcType)\n      throws SQLException {\n    ps.setInt(i, parameter);\n  }\n```  \n* 同理第二个参数是字符类型，所以跳到`StringTypeHandler`\n```java\npublic class StringTypeHandler extends BaseTypeHandler<String> {\n\n  @Override\n  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType)\n      throws SQLException {\n    ps.setString(i, parameter);\n  }\n```\n\n* 在此完成Mybatis参数绑定\n\n## 总结\n* Mybatis的参数绑定是通过循环 `ParamterMappings`对象来依次对对象赋值的，具体赋值工作是对应的`TypeHandler` 来处理的，当然不同类型有不同的处理类","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(十五)动态Sql实现之BoundSql","url":"/2018/12/08/backend/mybatis/sourceCodeAnalysis/Mybatis源码(十五)动态Sql实现之BoundSql/","content":"## 前言\n上一章节介绍了`SqlSource` ，这一章节来介绍 `BoundSql`，`BoundSql` 由 `SqlSource` 生产，`BoundSql` 存放了动态sql处理后的`private String sql;`,动态内容处理完成得到的SQL语句字符串，其中包括?,还有绑定的参数\n\n## BoundSql 介绍\n\n* 下面是 `BoundSql` 的源码，里面又对其变量的介绍\n\n```java\n/**\n * 绑定的SQL,是从SqlSource而来，将动态内容都处理完成得到的SQL语句字符串，其中包括?,还有绑定的参数\n *\n * An actual SQL String got form an {@link SqlSource} after having processed any dynamic content.\n * The SQL may have SQL placeholders \"?\" and an list (ordered) of an parameter mappings\n * with the additional information for each parameter (at least the property name of the input object to read\n * the value from).\n * </br>\n * Can also have additional parameters that are created by the dynamic language (for loops, bind...).\n * @author Clinton Begin\n */\npublic class BoundSql {\n\n  // 处理完成得到的SQL语句字符串，其中包括?,还有绑定的参数\n  private String sql;\n  // 参数映射对象\n  private List<ParameterMapping> parameterMappings;\n  // 外面传入的sql参数\n  private Object parameterObject;\n  // 额外参数？\n  private Map<String, Object> additionalParameters;\n  // 参数元数据\n  private MetaObject metaParameters;\n\n  public BoundSql(Configuration configuration, String sql, List<ParameterMapping> parameterMappings, Object parameterObject) {\n    this.sql = sql;\n    this.parameterMappings = parameterMappings;\n    this.parameterObject = parameterObject;\n    this.additionalParameters = new HashMap<String, Object>();\n    this.metaParameters = configuration.newMetaObject(additionalParameters);\n  }\n\n  public String getSql() {\n    return sql;\n  }\n\n  public List<ParameterMapping> getParameterMappings() {\n    return parameterMappings;\n  }\n\n  public Object getParameterObject() {\n    return parameterObject;\n  }\n\n  public boolean hasAdditionalParameter(String name) {\n    return metaParameters.hasGetter(name);\n  }\n\n  public void setAdditionalParameter(String name, Object value) {\n    metaParameters.setValue(name, value);\n  }\n\n  public Object getAdditionalParameter(String name) {\n    return metaParameters.getValue(name);\n  }\n}\n```\n\n## BoundSql 构造\n\n* `BoundSql` 由 `SqlSource` 生产，`SqlSource` 有四个实现类，但最常用的是 `DynamicSqlSource`，下面是其源码，可以看到只有一个方法`public BoundSql getBoundSql(Object parameterObject) `\n\n```java\n/**\n * 动态SQL源码\n * @author Clinton Begin\n */\npublic class DynamicSqlSource implements SqlSource {\n\n  private Configuration configuration;\n  private SqlNode rootSqlNode;\n\n  public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {\n    this.configuration = configuration;\n    this.rootSqlNode = rootSqlNode;\n  }\n\n  // 得到绑定的SQL\n  @Override\n  public BoundSql getBoundSql(Object parameterObject) {\n    // 生成一个动态上下文\n    DynamicContext context = new DynamicContext(configuration, parameterObject);\n\t// 这里SqlNode.apply只是将${}这种参数替换掉，并没有替换#{}这种参数\n    rootSqlNode.apply(context);\n\t// 调用SqlSourceBuilder\n    SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);\n    Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();\n\t// SqlSourceBuilder.parse,注意这里返回的是StaticSqlSource,解析完了就把那些参数都替换成?了，也就是最基本的JDBC的SQL写法\n    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());\n\t// 看似是又去递归调用SqlSource.getBoundSql，其实因为是StaticSqlSource，所以没问题，不是递归调用\n    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);\n    for (Map.Entry<String, Object> entry : context.getBindings().entrySet()) {\n      boundSql.setAdditionalParameter(entry.getKey(), entry.getValue());\n    }\n    return boundSql;\n  }\n}\n```\n\n* 下面通过一个例子来解析 `BoundSql` 的构造\n\n> xml 配置文件\n```xml\n    <select id=\"selectSelective\" resultType=\"org.apache.songsy.entity.User\" parameterType=\"org.apache.songsy.entity.User\">\n        SELECT\n          *\n        FROM\n          sys_user\n        <where>\n            <if test=\"id != null\">\n                AND id = #{id}\n            </if>\n            <if test=\"username != null and username != ''\">\n                AND username = #{username}\n            </if>\n            <if test=\"password != null\">\n                AND password = #{password}\n            </if>\n        </where>\n    </select>\n```\n\n> 测试用例，user对象给id和username赋值了对象\n\n```java\n        // 读取配置文件\n        File file = new File(\"src/test/java/resources/mybatis-config.xml\");\n        InputStream inputStream = new FileInputStream(file);\n        // 构建SqlSessionFactory\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        // 得到SqlSession\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        // 得到Mapper\n        UserMapper userMapper1 = sqlSession.getMapper(UserMapper.class);\n        User user = new User();\n        user.setId(1);\n        user.setUsername(\"admin\");\n        System.out.println(userMapper1.selectSelective(user));\n```\n\n* 打好断点进入到 `CachingExecutor` 的query方法，第一行可以看到 `BoundSql` 是由`MappedStatement` 的方法得到的，`getBoundSql` 方法只传入了参数对象，在这里是`User`对象\n\n```java\n  @Override\n  public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n    BoundSql boundSql = ms.getBoundSql(parameterObject);\n\t//query时传入一个cachekey参数\n    CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);\n    return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n  }\n```\n\n* 进入`ms.getBoundSql(parameterObject);` 方法，重点关注 `BoundSql boundSql = sqlSource.getBoundSql(parameterObject);`，没错在这里出现了我们的`SqlSource`对象\n\n```java\n  public BoundSql getBoundSql(Object parameterObject) {\n\t//其实就是调用sqlSource.getBoundSql\n    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);\n    List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n    if (parameterMappings == null || parameterMappings.isEmpty()) {\n      boundSql = new BoundSql(configuration, boundSql.getSql(), parameterMap.getParameterMappings(), parameterObject);\n    }\n\n    // check for nested result maps in parameter mappings (issue #30)\n    for (ParameterMapping pm : boundSql.getParameterMappings()) {\n      String rmId = pm.getResultMapId();\n      if (rmId != null) {\n        ResultMap rm = configuration.getResultMap(rmId);\n        if (rm != null) {\n          hasNestedResultMaps |= rm.hasNestedResultMaps();\n        }\n      }\n    }\n    return boundSql;\n  }\n```\n\n* 进入`sqlSource.getBoundSql(parameterObject)` 方法，这个方法是`DynamicSqlSource` 的唯一方法，当然SqlSource作用就是得到绑定后的`BoundSql`对象\n\n```java\n/**\n * 动态SQL源码\n * @author Clinton Begin\n */\npublic class DynamicSqlSource implements SqlSource {\n\n  private Configuration configuration;\n  private SqlNode rootSqlNode;\n\n  public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {\n    this.configuration = configuration;\n    this.rootSqlNode = rootSqlNode;\n  }\n\n  // 得到绑定的SQL\n  @Override\n  public BoundSql getBoundSql(Object parameterObject) {\n    // 生成一个动态上下文\n    DynamicContext context = new DynamicContext(configuration, parameterObject);\n\t// 这里SqlNode.apply只是将${}这种参数替换掉，并没有替换#{}这种参数\n    rootSqlNode.apply(context);\n\t// 调用SqlSourceBuilder\n    SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);\n    Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();\n\t// SqlSourceBuilder.parse,注意这里返回的是StaticSqlSource,解析完了就把那些参数都替换成?了，也就是最基本的JDBC的SQL写法\n    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());\n\t// 看似是又去递归调用SqlSource.getBoundSql，其实因为是StaticSqlSource，所以没问题，不是递归调用\n    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);\n    for (Map.Entry<String, Object> entry : context.getBindings().entrySet()) {\n      boundSql.setAdditionalParameter(entry.getKey(), entry.getValue());\n    }\n    return boundSql;\n  }\n}\n```\n\n* 先看`rootSqlNode.apply(context);` 这行代码，打开断点进入会发现这里依次调用list里每个元素的apply方法，这里是实现动态SQL的关键，如果有嵌套的话也会嵌套执行里面的apply方法\n\n![image](/images/server/mybatis/MixedSqlNode.png)\n\n> 静态sqlNode 的apply方法就是直接 appendSql\n\n```java\npublic class StaticTextSqlNode implements SqlNode {\n  private String text;\n\n  public StaticTextSqlNode(String text) {\n    this.text = text;\n  }\n\n  @Override\n  public boolean apply(DynamicContext context) {\n\t//将文本加入context\n    context.appendSql(text);\n    return true;\n  }\n\n}\n```\n\n> if SQL节点的apply方法 会做一个判断，如果 `test=\"id != null\"` 这个表达式为true就会 `contents.apply(context);` 添加到`DynamicContext`中，`DynamicContext` 内部成员 `StringBuilder sqlBuilder` 来存放解析后的sql\n \n```java\n/**\n * if SQL节点\n *\n */\npublic class IfSqlNode implements SqlNode {\n  private ExpressionEvaluator evaluator;\n  private String test;\n  private SqlNode contents;\n\n  public IfSqlNode(SqlNode contents, String test) {\n    this.test = test;\n    this.contents = contents;\n    this.evaluator = new ExpressionEvaluator();\n  }\n\n  @Override\n  public boolean apply(DynamicContext context) {\n    // 如果满足条件，则apply，并返回true\n    if (evaluator.evaluateBoolean(test, context.getBindings())) {\n      contents.apply(context);\n      return true;\n    }\n    return false;\n  }\n\n}\n```\n* `rootSqlNode.apply(context);` 处理完成之后就会得到拼接后的sql如下图所示，可以看到这里SqlNode.apply只是将${}这种参数替换掉，并没有替换#{}这种参数\n\n![image](/images/server/mybatis/DynamicContext.png)\n\n* `SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());` 这个方法是解析完了就把那些参数都替换成?，也就是最基本的JDBC的SQL写法，这个方法在以后章节将介绍\n\n* 最终的到的结果(`BoundSql`)如下图所示\n\n![image](/images/server/mybatis/boundSql结果.png)\n\n## 总结\n* `BoundSql` 由 `SqlSource` 构造而成，最终得到的是JDBC的SQL，而实现动态Sql的关键是 各个`SqlNode`的 `apply`方法\n* 通过源码可以看到Mybatis动态sql设计巧妙，分工明确","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(十四)动态Sql实现之SqlSource","url":"/2018/12/08/backend/mybatis/sourceCodeAnalysis/Mybatis源码(十四)动态Sql实现之SqlSource/","content":"## 前言\n从本章开始将介绍Mybatis是怎样实现动态sql的，介绍动态sql实现之前先介绍几个重要对象`SqlSource`，`SqlNode` ，`BoundSql` ,本章开始介绍`SqlSource`对象，\n\n前面第九章及第十章介绍了`SqlSource`的构造过程，在xml配置的select update节点的sql将会构造成 `SqlSource`，其 `SqlSource` 由一组`SqlNode`组成，现在来看一下`SqlSource`能做什么\n\n### SqlSource 分析\n* 查看`SqlSource` 是个接口，但他只有一个方法就是`BoundSql getBoundSql(Object parameterObject);` ，方法参数是sql的参数，然后根据参数来构造成`BoundSql`，所以他的作用是根据参数对象生产`BoundSql`，那么`BoundSql`有什么用呢，下一章节将介绍其作用\n```java\npublic interface SqlSource {\n\n  BoundSql getBoundSql(Object parameterObject);\n\n}\n```\n* 下图可以看到`SqlSource` 其实现类，主要有4种类型\n![image](/images/server/mybatis/SqlSource.gif)\n  \n1. DynamicSqlSource:处理动态sql语句。\n2. RawSqlSource：处理静态sql语句，其内部装饰StaticSqlSource。\n3. StaticSqlSource：处理静态sql，无论是静态sql，还是动态sql，最终的处理结果，都是静态sql。\n4. ProviderSqlSource:处理注解Annotation形式的sql。\n5. VelocitySqlSource:只是Mybatis的一个测试类\n\n* 举个栗子，下面是一个动态sql的xml\n```xml\n    <select id=\"selectSelective\" resultType=\"org.apache.songsy.entity.User\" parameterType=\"org.apache.songsy.entity.User\">\n        SELECT\n          *\n        FROM\n          sys_user\n        <where>\n            <if test=\"id != null\">\n                AND id = #{id}\n            </if>\n            <if test=\"username != null and username != ''\">\n                AND username = #{username}\n            </if>\n            <if test=\"password != null\">\n                AND password = #{password}\n            </if>\n        </where>\n    </select>\n```\n* 那么解析成`SqlSource`将会是下面的样子，`SqlSource` 是存放在`MappedStatement`对象的，可以看到`SqlSource`是一堆嵌套的`SqlNode`组成\n\n![image](/images/server/mybatis/sqlSource.png)\n\n## 总结\n* 有图有栗子来理解`SqlSource` 就很形象了，有了`SqlSource`就相当于生产商品有基本原材料了，当然原材料(`SqlNode`)种类有很多，Mybatis会根据用户的需求(`**Mapper.xml`) 来采购不同的原材料","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(十三)基于Mapper的二级缓存","url":"/2018/12/07/backend/mybatis/sourceCodeAnalysis/Mybatis源码(十三)基于Mapper的二级缓存/","content":"## 前言\nmybatis的二级缓存主要是在Executor对象上来做文章，当mybatis发现你在mybatis.xml配置文件中设置了cacheEnabled=true时，mybatis在创建sqlsession时创建Executor对象，同时会对Executor加上装饰者【CacheExecutor】。CacheExecutor对于查询请求，会判断application级别的二级缓存是否有缓存结果，如果有查询结果则直接返回，如果没有再交给查询器Executor实现类，也就是【SimpleExecutor】来执行查询。再就是缓存结果，返回给用户。\n\n## 二级缓存的使用\n> 配置 mybatis-config.xml\n```xml\n    <settings>\n        <!--开启二级缓存-->\n        <setting name=\"cacheEnabled\" value=\"true\"/>\n    </settings>\n```\n> 配置Mapper xml文件，加上`<cache/>`\n```java\n    <cache/>\n```\n\n> 测试代码\n\n```java\n// 读取配置文件\nFile file = new File(\"src/test/java/resources/mybatis-config.xml\");\nInputStream inputStream = new FileInputStream(file);\n// 构建SqlSessionFactory\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n// 得到SqlSession\nSqlSession sqlSession1 = sqlSessionFactory.openSession();\nSqlSession sqlSession2 = sqlSessionFactory.openSession();\nUserMapper userMapper1 = sqlSession1.getMapper(UserMapper.class);\nUserMapper userMapper2 = sqlSession2.getMapper(UserMapper.class);\n// 测试二级缓存\nSystem.out.println(userMapper1.selectByPrimaryKey(1));\nSystem.out.println(userMapper2.selectByPrimaryKey(1));\n```\n* 打好断点进入，这里是二级缓存的处理，从下面可以看到缓存是存放在`MappedStatement` 对象中的，所以说二级缓存是基于`Mapper`的，这是与多个`SqlSession`能够共享缓存的关键\n```java\n  public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)\n      throws SQLException {\n    Cache cache = ms.getCache();\n    // 默认情况下是没有开启缓存的(二级缓存).要开启二级缓存,你需要在你的 SQL 映射文件中添加一行: <cache/>\n    // 简单的说，就是先查CacheKey，查不到再委托给实际的执行器去查\n    if (cache != null) {\n      flushCacheIfRequired(ms);\n      if (ms.isUseCache() && resultHandler == null) {\n        ensureNoOutParams(ms, parameterObject, boundSql);\n        @SuppressWarnings(\"unchecked\")\n        List<E> list = (List<E>) tcm.getObject(cache, key);\n        if (list == null) {\n          list = delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n          tcm.putObject(cache, key, list); // issue #578 and #116\n        }\n        return list;\n      }\n    }\n    return delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n  }\n```\n* 可以看到缓存放在`tcm` 变量上，打开 `TransactionalCacheManager` 类\n```java\npublic class TransactionalCacheManager {\n\n  //管理了许多TransactionalCache\n  private Map<Cache, TransactionalCache> transactionalCaches = new HashMap<Cache, TransactionalCache>();\n\n  public void clear(Cache cache) {\n    getTransactionalCache(cache).clear();\n  }\n\n  //得到某个TransactionalCache的值\n  public Object getObject(Cache cache, CacheKey key) {\n    return getTransactionalCache(cache).getObject(key);\n  }\n  \n  public void putObject(Cache cache, CacheKey key, Object value) {\n    getTransactionalCache(cache).putObject(key, value);\n  }\n\n  //提交时全部提交\n  public void commit() {\n    for (TransactionalCache txCache : transactionalCaches.values()) {\n      txCache.commit();\n    }\n  }\n\n  //回滚时全部回滚\n  public void rollback() {\n    for (TransactionalCache txCache : transactionalCaches.values()) {\n      txCache.rollback();\n    }\n  }\n\n  private TransactionalCache getTransactionalCache(Cache cache) {\n    TransactionalCache txCache = transactionalCaches.get(cache);\n    if (txCache == null) {\n      txCache = new TransactionalCache(cache);\n      transactionalCaches.put(cache, txCache);\n    }\n    return txCache;\n  }\n\n}\n```\n## 二级缓存过期策略\n* 映射语句文件中的所有 select 语句将会被缓存。\n* 映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。\n* 缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。\n* 根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。\n* 缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。\n* 缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。\n\n### 二级缓存配置\n所有的这些属性都可以通过缓存元素的属性来修改。比如:\n```xml\n<cache\n  eviction=\"FIFO\"\n  flushInterval=\"60000\"\n  size=\"512\"\n  readOnly=\"true\"/>\n``` \n* 这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会 导致冲突。\n\n可用的收回策略有: 默认的是 LRU。\n\n```xml\nLRU – 最近最少使用的:移除最长时间不被使用的对象。\nFIFO – 先进先出:按对象进入缓存的顺序来移除它们。\nSOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。\nWEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。\n```\n\n\n\nflushInterval(刷新间隔)可以被设置为任意的正整数,而且它们代表一个合理的毫秒 形式的时间段。默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。\n\nsize(引用数目)可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024。\n\nreadOnly(只读)属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。\n\n\n## 二级缓存设计\n\n![image]('/images/server/mybatis/level2Cache.jpg')\n\n## 总结\n* mybatis的二级缓存主要是在Executor对象上来做文章，当mybatis发现你在mybatis.xml配置文件中设置了cacheEnabled=true时，mybatis在创建sqlsession时创建Executor对象，同时会对Executor加上装饰者【CacheExecutor】。CacheExecutor对于查询请求，会判断application级别的二级缓存是否有缓存结果，如果有查询结果则直接返回，如果没有再交给查询器Executor实现类，也就是【SimpleExecutor】来执行查询。再就是缓存结果，返回给用户。\n* 避免使用二级缓存，如果出现联合查询语句，如果其中一张表发生了变化，就会出现脏数据的问题，因为缓存节点是根据namespace\n\n\n参考： http://www.mybatis.org/mybatis-3/zh\n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(十二)基于SqlSession的一级缓存","url":"/2018/12/06/backend/mybatis/sourceCodeAnalysis/Mybatis源码(十二)基于SqlSession的一级缓存/","content":"## 前言\nMyBatis提供了一级缓存、二级缓存 这两种缓存机制，能够很好地处理和维护缓存，以提高系统的性能。本章的内容是介绍MyBatis的一级缓存，深入源码，解析MyBatis一级缓存的实现原理，二级缓存将在下一章介绍\n\n### 一级缓存的使用\n* 下面来通过代码来实践一级缓存，看看第二次查询是否使用了缓存\n```java\n// 读取配置文件\nFile file = new File(\"src/test/java/resources/mybatis-config.xml\");\nInputStream inputStream = new FileInputStream(file);\n// 构建SqlSessionFactory\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n// 得到SqlSession\nSqlSession sqlSession = sqlSessionFactory.openSession();\n// 得到Mapper\nUserMapper userMapper = sqlSession.getMapper(UserMapper.class);\nSystem.out.println(\"第一次查询: \"+userMapper.selectByPrimaryKey(1));\nSystem.out.println(\"第二次查询: \"+userMapper.selectByPrimaryKey(1));\n```\n* 上面的代码是用`SqlSession`获取了`UserMapper`，然后用`UserMapper` 进行了两次查询，打好断点进入`MapperProxy` 的`invoke` 方法\n```java\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    // 代理以后，所有Mapper的方法调用时，都会调用这个invoke方法\n    // 并不是任何一个方法都需要执行调用代理对象进行执行，如果这个方法是Object中通用的方法（toString、hashCode等）无需执行\n    if (Object.class.equals(method.getDeclaringClass())) {\n      try {\n        return method.invoke(this, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n    // 这里优化了，去缓存中找MapperMethod\n    final MapperMethod mapperMethod = cachedMapperMethod(method);\n    //执行\n    return mapperMethod.execute(sqlSession, args);\n  }\n```\n* 进入`mapperMethod.execute(sqlSession, args)` 之后跳呀跳进入`BaseExecutor` 的 `query` 方法，这个看到会创建一个`CacheKey`\n```java\n  @Override\n  public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n    // 得到绑定sql\n    BoundSql boundSql = ms.getBoundSql(parameter);\n    // 创建缓存Key\n    CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);\n    // 查询\n    return query(ms, parameter, rowBounds, resultHandler, key, boundSql);\n }\n```\n* 下面来看一下这个`key`是怎么生成的\n```java\n  //创建缓存Key\n  @Override\n  public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {\n    if (closed) {\n      throw new ExecutorException(\"Executor was closed.\");\n    }\n    CacheKey cacheKey = new CacheKey();\n    // MyBatis 对于其 Key 的生成采取规则为：[mappedStementId + offset + limit + SQL + queryParams + environment]生成一个哈希码\n    cacheKey.update(ms.getId());\n    cacheKey.update(Integer.valueOf(rowBounds.getOffset()));\n    cacheKey.update(Integer.valueOf(rowBounds.getLimit()));\n    cacheKey.update(boundSql.getSql());\n    List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n    TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();\n    // mimic DefaultParameterHandler logic\n    // 模仿DefaultParameterHandler的逻辑,不再重复，请参考DefaultParameterHandler\n    for (int i = 0; i < parameterMappings.size(); i++) {\n      ParameterMapping parameterMapping = parameterMappings.get(i);\n      if (parameterMapping.getMode() != ParameterMode.OUT) {\n        Object value;\n        String propertyName = parameterMapping.getProperty();\n        if (boundSql.hasAdditionalParameter(propertyName)) {\n          value = boundSql.getAdditionalParameter(propertyName);\n        } else if (parameterObject == null) {\n          value = null;\n        } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n          value = parameterObject;\n        } else {\n          MetaObject metaObject = configuration.newMetaObject(parameterObject);\n          value = metaObject.getValue(propertyName);\n        }\n        cacheKey.update(value);\n      }\n    }\n    if (configuration.getEnvironment() != null) {\n      // issue #176\n      cacheKey.update(configuration.getEnvironment().getId());\n    }\n    return cacheKey;\n  }   \n```\n* 得到`CacheKey` 之后 跳入`return query(ms, parameter, rowBounds, resultHandler, key, boundSql);` 在这里对一级缓存进行了处理\n```java\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n    ErrorContext.instance().resource(ms.getResource()).activity(\"executing a query\").object(ms.getId());\n    //如果已经关闭，报错\n    if (closed) {\n      throw new ExecutorException(\"Executor was closed.\");\n    }\n    //先清局部缓存，再查询.但仅查询堆栈为0，才清。为了处理递归调用\n    if (queryStack == 0 && ms.isFlushCacheRequired()) {\n      clearLocalCache();\n    }\n    List<E> list;\n    try {\n      //加一,这样递归调用到上面的时候就不会再清局部缓存了\n      queryStack++;\n      //先根据cachekey从localCache去查\n      list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;\n      if (list != null) {\n        //若查到localCache缓存，处理localOutputParameterCache\n        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n      } else {\n        //从数据库查\n        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n      }\n    } finally {\n      //清空堆栈\n      queryStack--;\n    }\n    if (queryStack == 0) {\n      //延迟加载队列中所有元素\n      for (DeferredLoad deferredLoad : deferredLoads) {\n        deferredLoad.load();\n      }\n      // issue #601\n      //清空延迟加载队列\n      deferredLoads.clear();\n      if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {\n        // issue #482\n    \t//如果是STATEMENT，清本地缓存\n        clearLocalCache();\n      }\n    }\n    return list;\n  }\n```\n* 重点是下面几行代码，可以看到先根据cachekey从localCache去查，如果有就返回缓存里的数据，没有就从数据库里查\n```java\n      // 先根据cachekey从localCache去查\n      list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;\n      if (list != null) {\n        // 若查到localCache缓存，处理localOutputParameterCache\n        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n      } else {\n        // 从数据库查\n        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n      }\n```\n* 下面来看`localCache` 的本体`PerpetualCache`, 从下面的代码就可以看见其内部实现就是`Map<Object, Object> cache`\n```java\n/**\n * 永久缓存\n * 一旦存入就一直保持\n * @author Clinton Begin\n */\npublic class PerpetualCache implements Cache {\n\n  // 每个永久缓存有一个ID来识别\n  private String id;\n\n  // 内部就是一个HashMap,所有方法基本就是直接调用HashMap的方法\n  private Map<Object, Object> cache = new HashMap<Object, Object>();\n\n  public PerpetualCache(String id) {\n    this.id = id;\n  }\n\n  @Override\n  public String getId() {\n    return id;\n  }\n\n  @Override\n  public int getSize() {\n    return cache.size();\n  }\n\n  @Override\n  public void putObject(Object key, Object value) {\n    cache.put(key, value);\n  }\n\n  @Override\n  public Object getObject(Object key) {\n    return cache.get(key);\n  }\n\n  @Override\n  public Object removeObject(Object key) {\n    return cache.remove(key);\n  }\n\n  @Override\n  public void clear() {\n    cache.clear();\n  }\n\n  @Override\n  public ReadWriteLock getReadWriteLock() {\n    return null;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    //只要id相等就认为两个cache相同\n    if (getId() == null) {\n      throw new CacheException(\"Cache instances require an ID.\");\n    }\n    if (this == o) {\n      return true;\n    }\n    if (!(o instanceof Cache)) {\n      return false;\n    }\n\n    Cache otherCache = (Cache) o;\n    return getId().equals(otherCache.getId());\n  }\n\n  @Override\n  public int hashCode() {\n    if (getId() == null) {\n      throw new CacheException(\"Cache instances require an ID.\");\n    }\n    return getId().hashCode();\n  }\n\n}\n```\n* 现在回到主线，因为第一次查询一级缓存是没有数据的，所以继续执行`queryFromDatabase`，从下面的方法可以看到在这里实现了缓存的加入操作`localCache.putObject(key, list);`\n```java\n  // 从数据库查\n  private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n    List<E> list;\n    // 先向缓存中放入占位符\n    localCache.putObject(key, EXECUTION_PLACEHOLDER);\n    try {\n      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);\n    } finally {\n      // 最后删除占位符\n      localCache.removeObject(key);\n    }\n    // 加入缓存\n    localCache.putObject(key, list);\n    // 如果是存储过程，OUT参数也加入缓存\n    if (ms.getStatementType() == StatementType.CALLABLE) {\n      localOutputParameterCache.putObject(key, parameter);\n    }\n    return list;\n  }\n```\n### 一级缓存的生命周期有多长\n* MyBatis在开启一个数据库会话时，会 创建一个新的SqlSession对象，SqlSession对象中会有一个新的Executor对象，Executor对象中持有一个新的PerpetualCache对象；当会话结束时，SqlSession对象及其内部的Executor对象还有PerpetualCache对象也一并释放掉。\n\n![iamge](/images/server/mybatis/localCache.png)\n\n\n* 如果SqlSession调用了close()方法，会释放掉一级缓存PerpetualCache对象，一级缓存将不可用；\n```java\n  @Override\n  public void close(boolean forceRollback) {\n    try {\n      try {\n        rollback(forceRollback);\n      } finally {\n        if (transaction != null) {\n          transaction.close();\n        }\n      }\n    } catch (SQLException e) {\n      // Ignore.  There's nothing that can be done at this point.\n      log.warn(\"Unexpected exception on closing transaction.  Cause: \" + e);\n    } finally {\n      transaction = null;\n      deferredLoads = null;\n      localCache = null;\n      localOutputParameterCache = null;\n      closed = true;\n    }\n  }\n```\n* 如果SqlSession调用了clearCache()，会清空PerpetualCache对象中的数据，但是该对象仍可使用；\n```java\n  @Override\n  public void clearLocalCache() {\n    if (!closed) {\n      localCache.clear();\n      localOutputParameterCache.clear();\n    }\n  }\n```\n* SqlSession中执行了任何一个update操作(update()、delete()、insert()) ，都会清空PerpetualCache对象的数据，但是该对象可以继续使用；\n```java\n  // SqlSession.update/insert/delete会调用此方法\n  @Override\n  public int update(MappedStatement ms, Object parameter) throws SQLException {\n    ErrorContext.instance().resource(ms.getResource()).activity(\"executing an update\").object(ms.getId());\n    if (closed) {\n      throw new ExecutorException(\"Executor was closed.\");\n    }\n    //先清局部缓存，再更新，如何更新交由子类，模板方法模式\n    clearLocalCache();\n    return doUpdate(ms, parameter);\n  }\n```\n### 缓存分析\n \n#### 为什么要使用一级缓存\n使用缓存是为了提高查询效率，减少资源消费，如果我们在极短的时间内做了完全相同的查询，那么它们的结果极有可能完全相同\n\n所以为了解决这一问题，减少资源的浪费，MyBatis会在表示会话的SqlSession对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了\n\n如下图所示，MyBatis会在一次会话的表示----一个SqlSession对象中创建一个本地缓存(local cache)，对于每一次查询，都会尝试根据查询的条件去本地缓存中查找是否在缓存中，如果在缓存中，就直接从缓存中取出，然后返回给用户；否则，从数据库读取数据，将查询结果存入缓存并返回给用户。\n\n![image](/images/server/mybatis/level1Cache.png)\n\n\n\n#### 一级缓存查询时序图\n![image](/images/server/mybatis/cache.png)\n\n\n#### CacheKey的定义\n> Cache最核心的实现其实就是一个Map，将本次查询使用的特征值作为key，将查询结果作为value存储到Map中。\n\n* 现在最核心的问题出现了：怎样来确定一次查询的特征值？\n\n* MyBatis认为，对于两次查询，如果以下条件都完全一样，那么就认为它们是完全相同的两次查询\n```xml\n1. 传入的statementId，对于MyBatis而言，你要使用它，必须需要一个statementId，它代表着你将执行什么样的Sql；\n\n2. MyBatis自身提供的分页功能是通过RowBounds来实现的，它通过rowBounds.offset和rowBounds.limit来过滤查询出来的结果集，这种分页功能是基于查询结果的再过滤，而不是进行数据库的物理分页；\n\n3. 由于MyBatis底层还是依赖于JDBC实现的，那么，对于两次完全一模一样的查询，MyBatis要保证对于底层JDBC而言，也是完全一致的查询才行。而对于JDBC而言，两次查询，只要传入给JDBC的SQL语句完全一致，传入的参数也完全一致，就认为是两次查询是完全一致的。\n```\n\n* 下面是创建`CacheKey`的代码\n\n```java\n  //创建缓存Key\n  @Override\n  public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {\n    if (closed) {\n      throw new ExecutorException(\"Executor was closed.\");\n    }\n    CacheKey cacheKey = new CacheKey();\n    // MyBatis 对于其 Key 的生成采取规则为：[mappedStementId + offset + limit + SQL + queryParams + environment]生成一个哈希码\n    cacheKey.update(ms.getId());\n    cacheKey.update(Integer.valueOf(rowBounds.getOffset()));\n    cacheKey.update(Integer.valueOf(rowBounds.getLimit()));\n    cacheKey.update(boundSql.getSql());\n    List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n    TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();\n    // mimic DefaultParameterHandler logic\n    // 模仿DefaultParameterHandler的逻辑,不再重复，请参考DefaultParameterHandler\n    for (int i = 0; i < parameterMappings.size(); i++) {\n      ParameterMapping parameterMapping = parameterMappings.get(i);\n      if (parameterMapping.getMode() != ParameterMode.OUT) {\n        Object value;\n        String propertyName = parameterMapping.getProperty();\n        if (boundSql.hasAdditionalParameter(propertyName)) {\n          value = boundSql.getAdditionalParameter(propertyName);\n        } else if (parameterObject == null) {\n          value = null;\n        } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n          value = parameterObject;\n        } else {\n          MetaObject metaObject = configuration.newMetaObject(parameterObject);\n          value = metaObject.getValue(propertyName);\n        }\n        cacheKey.update(value);\n      }\n    }\n    if (configuration.getEnvironment() != null) {\n      // issue #176\n      cacheKey.update(configuration.getEnvironment().getId());\n    }\n    return cacheKey;\n  }   \n```\n\n## 总结\n1. 如果缓存中有数据就不用从数据库中获取，大大提高系统性能。\n2. 一级缓存的作用级别是Session级别的，因为一个Session中存放一个Executor。而一级缓存放在Executor。\n\n\n\n参考：\nhttps://blog.csdn.net/chenyao1994/article/details/79233725","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(十一)MapperXML映射文件OGNL表达式","url":"/2018/12/06/backend/mybatis/sourceCodeAnalysis/Mybatis源码(十一)MapperXML映射文件OGNL表达式/","content":"## 基本介绍\nOGNL是Object-Graph Navigation Language的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。\n\n\nStruts2框架使用OGNL作为默认的表达式语言\n\nOGNL是一种比EL强大很多倍的语言，支持对象方法调用，支持静态方法和字段访问，支持赋值操作等等。\nxwork提供了OGNL表达式。\n其jar包为ognl-x.x.x.jar。\n\n## MyBatis常用OGNL表达式\n```sql\n•e1 or e2\n•e1 and e2\n•e1 == e2,e1 eq e2\n•e1 != e2,e1 neq e2\n•e1 lt e2：小于\n•e1 lte e2：小于等于，其他gt（大于）,gte（大于等于）\n•e1 in e2\n•e1 not in e2\n•e1 + e2,e1 * e2,e1/e2,e1 - e2,e1%e2\n•!e,not e：非，求反\n•e.method(args)调用对象方法\n•e.property对象属性值\n•e1[ e2 ]按索引取值，List,数组和Map\n•@class@method(args)调用类的静态方法\n•@class@field调用类的静态字段值\n\n```\n\n\n## MyBatis中可以使用OGNL的地方有两处\n1. 动态SQL表达式中\n2. ${param}参数中\n\n上面这两处地方在MyBatis中处理的时候都是使用OGNL处理的。\n\n下面通过举例来说明这两种情况的用法。\n\n### 动态SQL表达式中\n> 下面代码中test的值会使用OGNL计算结果。\n```sql\n<select id=\"xxx\" ...>\n select id,name,... from country\n <where>\n <if test=\"name != null and name != ''\">\n  name like concat('%', #{name}, '%')\n </if>\n </where>\n</select>\n```\n> 通用 like 查询及<bind>的value值会使用OGNL计算\n```sql\n<select id=\"xxx\" ...>\n select id,name,... from country\n <bind name=\"nameLike\" value=\"'%' + name + '%'\"/>\n <where>\n <if test=\"name != null and name != ''\">\n  name like #{nameLike}\n </if>\n </where>\n</select>\n```\n> 通用Mapper中支持一种UUID的主键\n```sql\n<bind name=\"username_bind\" value='@java.util.UUID@randomUUID().toString().replace(\"-\", \"\")' />\n```\n### ${param}参数中\n```sql\n<select id=\"xxx\" ...>\n select id,name,... from country\n <where>\n <if test=\"name != null and name != ''\">\n  name like '${'%' + name + '%'}'\n </if>\n </where>\n</select>\n \n这里注意写的是${'%' + name + '%'} ，而不是%${name}% ，这两种方式的结果一样，但是处理过程不一样。\n \n在MyBatis中处理${}的时候，只是使用OGNL计算这个结果值，然后替换SQL中对应的${xxx} ，OGNL处理的只是${这里的表达式}。\n \n这里表达式可以是OGNL支持的所有表达式，可以写的很复杂，可以调用静态方法返回值，也可以调用静态的属性值。\n```\n参考：\n\nhttps://www.jb51.net/article/116160.htm\n\n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(十)MapperXML映射文件构建SqlNode","url":"/2018/12/06/backend/mybatis/sourceCodeAnalysis/Mybatis源码(十)MapperXML映射文件构建SqlNode/","content":"## 前言\n上一章节介绍了`SqlSource`的构造过程，`SqlSource` 由一堆`SqlNode`构成，本章来介绍`SqlNode`的构造，如下图可以看到`SqlNode`的主要成员\n![image](/images/server/mybatis/SqlNode.png)\n \n## 源码解析\n\n### SqlNode\n* 还是回到 `parseScriptNode` 方法，关注`List<SqlNode> contents = parseDynamicTags(context);` 这个方法会把 `select|insert|update|delete` 这些标签的sql解析成一堆SqlNode, 包括静态SqlNode 和动态SqlNode(可见上图) \n```java\n  public SqlSource parseScriptNode() {\n    // 获取SqlNode List\n    List<SqlNode> contents = parseDynamicTags(context);\n    MixedSqlNode rootSqlNode = new MixedSqlNode(contents);\n    SqlSource sqlSource = null;\n    if (isDynamic) {\n      sqlSource = new DynamicSqlSource(configuration, rootSqlNode);\n    } else {\n      sqlSource = new RawSqlSource(configuration, rootSqlNode, parameterType);\n    }\n    return sqlSource;\n  }\n\n  List<SqlNode> parseDynamicTags(XNode node) {\n    // 一行一个SqlNode\n    List<SqlNode> contents = new ArrayList<SqlNode>();\n    NodeList children = node.getNode().getChildNodes();\n    for (int i = 0; i < children.getLength(); i++) {\n      XNode child = node.newXNode(children.item(i));\n      // 如果节点类型CDATA或者是文本，构造一个TextSqlNode或StaticTextSqlNode\n      if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n        String data = child.getStringBody(\"\");\n        TextSqlNode textSqlNode = new TextSqlNode(data);\n        if (textSqlNode.isDynamic()) {\n          contents.add(textSqlNode);\n          isDynamic = true;\n        } else {\n          contents.add(new StaticTextSqlNode(data));\n        }\n      } else if (child.getNode().getNodeType() == Node.ELEMENT_NODE) { // 如果是xml标签 trim|where|set...\n        String nodeName = child.getNode().getNodeName();\n        // 得到动态sql标签处理类 trim|where|set...\n        NodeHandler handler = nodeHandlers(nodeName);\n        if (handler == null) {\n          throw new BuilderException(\"Unknown element <\" + nodeName + \"> in SQL statement.\");\n        }\n        // 解析动态结点\n        handler.handleNode(child, contents);\n        isDynamic = true;\n      }\n    }\n    return contents;\n  }\n\n  NodeHandler nodeHandlers(String nodeName) {\n    Map<String, NodeHandler> map = new HashMap<String, NodeHandler>();\n    map.put(\"trim\", new TrimHandler());\n    map.put(\"where\", new WhereHandler());\n    map.put(\"set\", new SetHandler());\n    map.put(\"foreach\", new ForEachHandler());\n    map.put(\"if\", new IfHandler());\n    map.put(\"choose\", new ChooseHandler());\n    map.put(\"when\", new IfHandler());\n    map.put(\"otherwise\", new OtherwiseHandler());\n    map.put(\"bind\", new BindHandler());\n    return map.get(nodeName);\n  }\n```\n* SqlNode 是 Mybatis 实现动态sql的核心，下面来看看一些常用节点的的处理，`IfSqlNode` 节点\n```java\n/**\n * if SQL节点\n * @author Clinton Begin\n */\npublic class IfSqlNode implements SqlNode {\n  private ExpressionEvaluator evaluator;\n  private String test;\n  private SqlNode contents;\n\n  public IfSqlNode(SqlNode contents, String test) {\n    this.test = test;\n    this.contents = contents;\n    this.evaluator = new ExpressionEvaluator();\n  }\n\n  @Override\n  public boolean apply(DynamicContext context) {\n    // 如果满足条件，则apply，并返回true\n    if (evaluator.evaluateBoolean(test, context.getBindings())) {\n      contents.apply(context);\n      return true;\n    }\n    return false;\n  }\n}\n```\n\n* `ForEachSqlNode` 节点\n```java\n/**\n * foreach SQL节点\n * @author Clinton Begin\n */\npublic class ForEachSqlNode implements SqlNode {\n  public static final String ITEM_PREFIX = \"__frch_\";\n\n  private ExpressionEvaluator evaluator;\n  private String collectionExpression;\n  private SqlNode contents;\n  private String open;\n  private String close;\n  private String separator;\n  private String item;\n  private String index;\n  private Configuration configuration;\n\n  public ForEachSqlNode(Configuration configuration, SqlNode contents, String collectionExpression, String index, String item, String open, String close, String separator) {\n    this.evaluator = new ExpressionEvaluator();\n    this.collectionExpression = collectionExpression;\n    this.contents = contents;\n    this.open = open;\n    this.close = close;\n    this.separator = separator;\n    this.index = index;\n    this.item = item;\n    this.configuration = configuration;\n  }\n\n  @Override\n  public boolean apply(DynamicContext context) {\n    Map<String, Object> bindings = context.getBindings();\n\t//解析collectionExpression->iterable,核心用的ognl\n    final Iterable<?> iterable = evaluator.evaluateIterable(collectionExpression, bindings);\n    if (!iterable.iterator().hasNext()) {\n      return true;\n    }\n    boolean first = true;\n\t//加上(\n    applyOpen(context);\n    int i = 0;\n    for (Object o : iterable) {\n      DynamicContext oldContext = context;\n      if (first) {\n        context = new PrefixedContext(context, \"\");\n      } else if (separator != null) {\n        context = new PrefixedContext(context, separator);\n      } else {\n          context = new PrefixedContext(context, \"\");\n      }\n      int uniqueNumber = context.getUniqueNumber();\n      // Issue #709 \n      if (o instanceof Map.Entry) {\n        @SuppressWarnings(\"unchecked\") \n        Map.Entry<Object, Object> mapEntry = (Map.Entry<Object, Object>) o;\n        applyIndex(context, mapEntry.getKey(), uniqueNumber);\n        applyItem(context, mapEntry.getValue(), uniqueNumber);\n      } else {\n\t\t//索引\n        applyIndex(context, i, uniqueNumber);\n\t\t//加上一个元素\n        applyItem(context, o, uniqueNumber);\n      }\n      contents.apply(new FilteredDynamicContext(configuration, context, index, item, uniqueNumber));\n      if (first) {\n        first = !((PrefixedContext) context).isPrefixApplied();\n      }\n      context = oldContext;\n      i++;\n    }\n\t//加上)\n    applyClose(context);\n    return true;\n  }\n  \n  ...\n```\n\n* `MixedSqlNode` 这个Node比较特殊，获得的SqlNode会以list放在 `MixedSqlNode`中\n```java\n/**\n * 混合SQL节点\n * @author Clinton Begin\n */\npublic class MixedSqlNode implements SqlNode {\n  // 组合模式，拥有一个SqlNode的List\n  private List<SqlNode> contents;\n\n  public MixedSqlNode(List<SqlNode> contents) {\n    this.contents = contents;\n  }\n\n  @Override\n  public boolean apply(DynamicContext context) {\n    // 依次调用list里每个元素的apply\n    for (SqlNode sqlNode : contents) {\n      sqlNode.apply(context);\n    }\n    return true;\n  }\n}\n```\n* `selectByPrimaryKey` 解析成果，见下图\n```xml\n  <select id=\"selectByPrimaryKey\" resultMap=\"BaseResultMap\" parameterType=\"java.lang.Integer\" >\n    select \n    <include refid=\"Base_Column_List\" />\n    from sys_role\n    where id = #{id,jdbcType=INTEGER}\n  </select>\n```\n![image](/images/server/mybatis/StaticTextNode.jpg)\n\n* `updateByPrimaryKeySelective` 解析成果，见下图\n```xml\n  <update id=\"updateByPrimaryKeySelective\" parameterType=\"org.apache.songsy.entity.Role\" >\n    update sys_role\n    <set >\n      <if test=\"roleName != null\" >\n        role_name = #{roleName,jdbcType=VARCHAR},\n      </if>\n      <if test=\"roleCode != null\" >\n        role_code = #{roleCode,jdbcType=VARCHAR},\n      </if>\n      <if test=\"roleDescribe != null\" >\n        role_describe = #{roleDescribe,jdbcType=VARCHAR},\n      </if>\n      <if test=\"createdDate != null\" >\n        created_date = #{createdDate,jdbcType=TIMESTAMP},\n      </if>\n      <if test=\"createdBy != null\" >\n        created_by = #{createdBy,jdbcType=VARCHAR},\n      </if>\n      <if test=\"lastModifiedDate != null\" >\n        last_modified_date = #{lastModifiedDate,jdbcType=TIMESTAMP},\n      </if>\n      <if test=\"lastModifiedBy != null\" >\n        last_modified_by = #{lastModifiedBy,jdbcType=VARCHAR},\n      </if>\n      <if test=\"remarks != null\" >\n        remarks = #{remarks,jdbcType=VARCHAR},\n      </if>\n      <if test=\"status != null\" >\n        status = #{status,jdbcType=INTEGER},\n      </if>\n      <if test=\"enable != null\" >\n        enable = #{enable,jdbcType=BIT},\n      </if>\n    </set>\n    where id = #{id,jdbcType=INTEGER}\n  </update>\n```\n![image](/images/server/mybatis/updateNode.jpg)\n## 总结\n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(九)MapperXML映射文件构建SqlSource","url":"/2018/12/01/backend/mybatis/sourceCodeAnalysis/Mybatis源码(九)MapperXML映射文件构建SqlSource/","content":"## 前言\n上一章节介绍了`select|insert|update|delete` 这些sql标签会解析成`MappedStatement`对象，`MappedStatement` 对象的重点属性是`SqlSource`，本章来介绍`SqlSource`的构造过程，其最终执行的sql字符串就是由SqlSource提供的。\n \n## 源码解析\n\n### SqlSource 类\n\n下图可以看到其实现类，主要有4种类型\n\n![image](/images/server/mybatis/SqlSource.gif)\n\n1. DynamicSqlSource:处理动态sql语句。\n2. RawSqlSource：处理静态sql语句，其内部装饰StaticSqlSource。\n3. StaticSqlSource：处理静态sql，无论是静态sql，还是动态sql，最终的处理结果，都是静态sql。\n4. ProviderSqlSource:处理注解Annotation形式的sql。\n5. VelocitySqlSource:只是Mybatis的一个测试类\n\n\nDynamicSqlSource和StaticSqlSource的最大区别在于：StaticSqlSource的String sql，可以直接获取使用，而DynamicSqlSource的String sql需要逐一根据条件解析并拼接出最终的sql，方能使用。\n\n* Mybatis解析sql的时机\nMybatis对于用户在XXMapper.xml文件中配置的sql解析主要分为2个时机\n\n1. 静态sql：程序启动的时候解析\n\n2. 动态sql：用户进行查询等sql相关操作的时候解析\n\n* 什么是静态sql，动态sql？\n\n1. 如果select|insert|update|delete标签体内包含XML标签或者select|insert|update|delete标签体内的sql文本中包含${}参数占位符则为动态sql，否则为静态sql。\n\n2. 如下面的2个sql中，第一个为动态sql，第二个为静态sql\n```java\n<select id=\"selectUser\" parameterType=\"com.fit.bean.User\" resultType=\"com.fit.bean.User\" useCache=\"true\">\n\tselect id, name from tab_user where id = ${id}\n\t<if test=\"name!=null and name!=''\">\n\tand name=#{name}\n\t</if>\n\tand 1 = 1\n</select>\n \n<select id=\"selectUserById\" parameterType=\"int\" resultType=\"com.fit.bean.User\" useCache=\"true\">\n\tselect id, name from tab_user where id = #{id}\n</select>\n```\n\n\n* 进入 parseStatementNode 方法，关注`SqlSource sqlSource = langDriver.createSqlSource(configuration, context, parameterTypeClass);`这一行，打好断点进入`langDriver.createSqlSource(configuration, context, parameterTypeClass);` 方法\n```java\npublic void parseStatementNode() {\n    String id = context.getStringAttribute(\"id\");\n    String databaseId = context.getStringAttribute(\"databaseId\");\n\n    //如果databaseId不匹配，退出\n    if (!databaseIdMatchesCurrent(id, databaseId, this.requiredDatabaseId)) {\n      return;\n    }\n\n    //暗示驱动程序每次批量返回的结果行数\n    Integer fetchSize = context.getIntAttribute(\"fetchSize\");\n    //超时时间\n    Integer timeout = context.getIntAttribute(\"timeout\");\n    //引用外部 parameterMap,已废弃\n    String parameterMap = context.getStringAttribute(\"parameterMap\");\n    //参数类型\n    String parameterType = context.getStringAttribute(\"parameterType\");\n    Class<?> parameterTypeClass = resolveClass(parameterType);\n    //引用外部的 resultMap(高级功能)\n    String resultMap = context.getStringAttribute(\"resultMap\");\n    //结果类型\n    String resultType = context.getStringAttribute(\"resultType\");\n    //脚本语言,mybatis3.2的新功能\n    String lang = context.getStringAttribute(\"lang\");\n    //得到语言驱动\n    LanguageDriver langDriver = getLanguageDriver(lang);\n\n    Class<?> resultTypeClass = resolveClass(resultType);\n    //结果集类型，FORWARD_ONLY|SCROLL_SENSITIVE|SCROLL_INSENSITIVE 中的一种\n    String resultSetType = context.getStringAttribute(\"resultSetType\");\n    //语句类型, STATEMENT|PREPARED|CALLABLE 的一种\n    StatementType statementType = StatementType.valueOf(context.getStringAttribute(\"statementType\", StatementType.PREPARED.toString()));\n    ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType);\n\n    //获取命令类型(select|insert|update|delete)\n    String nodeName = context.getNode().getNodeName();\n    SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));\n    boolean isSelect = sqlCommandType == SqlCommandType.SELECT;\n    boolean flushCache = context.getBooleanAttribute(\"flushCache\", !isSelect);\n    //是否要缓存select结果\n    boolean useCache = context.getBooleanAttribute(\"useCache\", isSelect);\n    //仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。\n    //这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。 \n    boolean resultOrdered = context.getBooleanAttribute(\"resultOrdered\", false);\n\n    // Include Fragments before parsing\n    //解析之前先解析<include>SQL片段\n    XMLIncludeTransformer includeParser = new XMLIncludeTransformer(configuration, builderAssistant);\n    includeParser.applyIncludes(context.getNode());\n\n    // Parse selectKey after includes and remove them.\n    //解析之前先解析<selectKey>\n    processSelectKeyNodes(id, parameterTypeClass, langDriver);\n    \n    // Parse the SQL (pre: <selectKey> and <include> were parsed and removed)\n    //解析成SqlSource，一般是DynamicSqlSource\n    SqlSource sqlSource = langDriver.createSqlSource(configuration, context, parameterTypeClass);\n    String resultSets = context.getStringAttribute(\"resultSets\");\n    //(仅对 insert 有用) 标记一个属性, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值\n    String keyProperty = context.getStringAttribute(\"keyProperty\");\n    //(仅对 insert 有用) 标记一个属性, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值\n    String keyColumn = context.getStringAttribute(\"keyColumn\");\n    KeyGenerator keyGenerator;\n    String keyStatementId = id + SelectKeyGenerator.SELECT_KEY_SUFFIX;\n    keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, true);\n    if (configuration.hasKeyGenerator(keyStatementId)) {\n      keyGenerator = configuration.getKeyGenerator(keyStatementId);\n    } else {\n      keyGenerator = context.getBooleanAttribute(\"useGeneratedKeys\",\n          configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType))\n          ? new Jdbc3KeyGenerator() : new NoKeyGenerator();\n    }\n\n\t//又去调助手类\n    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,\n        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,\n        resultSetTypeEnum, flushCache, useCache, resultOrdered, \n        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);\n  }\n```\n\n\n* 进入`langDriver.createSqlSource`方法后默认是进入 `XMLLanguageDriver`类 createSqlSource 方法，可以看到又调用了`XMLScriptBuilder` 类的`builder.parseScriptNode()` 方法\n```java\npublic class XMLLanguageDriver implements LanguageDriver {\n\n  @Override\n  public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {\n    //返回默认的参数处理器\n\treturn new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);\n  }\n\n  @Override\n  public SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType) {\n\t//用XML脚本构建器解析\n    XMLScriptBuilder builder = new XMLScriptBuilder(configuration, script, parameterType);\n    return builder.parseScriptNode();\n  }\n\n  //注解方式构建mapper\n  @Override\n  public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {\n    // issue #3\n    if (script.startsWith(\"<script>\")) {\n      XPathParser parser = new XPathParser(script, false, configuration.getVariables(), new XMLMapperEntityResolver());\n      return createSqlSource(configuration, parser.evalNode(\"/script\"), parameterType);\n    } else {\n      // issue #127\n      script = PropertyParser.parse(script, configuration.getVariables());\n      TextSqlNode textSqlNode = new TextSqlNode(script);\n      //一种是动态，一种是原始\n      if (textSqlNode.isDynamic()) {\n        return new DynamicSqlSource(configuration, textSqlNode);\n      } else {\n        return new RawSqlSource(configuration, script, parameterType);\n      }\n    }\n  }\n}\n```\n* 进入`XMLScriptBuilder类` 根据 `isDynamic` 变量来返回 `DynamicSqlSource` 对象和 `RawSqlSource` 对象\n```java\npublic class XMLScriptBuilder extends BaseBuilder {\n\n  private XNode context;\n  private boolean isDynamic;\n  private Class<?> parameterType;\n\n  public XMLScriptBuilder(Configuration configuration, XNode context) {\n    this(configuration, context, null);\n  }\n\n  public XMLScriptBuilder(Configuration configuration, XNode context, Class<?> parameterType) {\n    super(configuration);\n    this.context = context;\n    this.parameterType = parameterType;\n  }\n\n  public SqlSource parseScriptNode() {\n    List<SqlNode> contents = parseDynamicTags(context);\n    MixedSqlNode rootSqlNode = new MixedSqlNode(contents);\n    SqlSource sqlSource = null;\n    if (isDynamic) {\n      sqlSource = new DynamicSqlSource(configuration, rootSqlNode);\n    } else {\n      sqlSource = new RawSqlSource(configuration, rootSqlNode, parameterType);\n    }\n    return sqlSource;\n  }\n\n  List<SqlNode> parseDynamicTags(XNode node) {\n    // 一行一个SqlNode\n    List<SqlNode> contents = new ArrayList<SqlNode>();\n    NodeList children = node.getNode().getChildNodes();\n    for (int i = 0; i < children.getLength(); i++) {\n      XNode child = node.newXNode(children.item(i));\n      // 如果节点类型CDATA或者是文本，构造一个TextSqlNode或StaticTextSqlNode\n      if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {\n        String data = child.getStringBody(\"\");\n        TextSqlNode textSqlNode = new TextSqlNode(data);\n        if (textSqlNode.isDynamic()) {\n          contents.add(textSqlNode);\n          isDynamic = true;\n        } else {\n          contents.add(new StaticTextSqlNode(data));\n        }\n      } else if (child.getNode().getNodeType() == Node.ELEMENT_NODE) { // 如果是xml标签 trim|where|set...\n        String nodeName = child.getNode().getNodeName();\n        // 得到动态sql标签处理类 trim|where|set...\n        NodeHandler handler = nodeHandlers(nodeName);\n        if (handler == null) {\n          throw new BuilderException(\"Unknown element <\" + nodeName + \"> in SQL statement.\");\n        }\n        // 解析动态结点\n        handler.handleNode(child, contents);\n        isDynamic = true;\n      }\n    }\n    return contents;\n  }\n\n  NodeHandler nodeHandlers(String nodeName) {\n    Map<String, NodeHandler> map = new HashMap<String, NodeHandler>();\n    map.put(\"trim\", new TrimHandler());\n    map.put(\"where\", new WhereHandler());\n    map.put(\"set\", new SetHandler());\n    map.put(\"foreach\", new ForEachHandler());\n    map.put(\"if\", new IfHandler());\n    map.put(\"choose\", new ChooseHandler());\n    map.put(\"when\", new IfHandler());\n    map.put(\"otherwise\", new OtherwiseHandler());\n    map.put(\"bind\", new BindHandler());\n    return map.get(nodeName);\n  }\n\n  private interface NodeHandler {\n    void handleNode(XNode nodeToHandle, List<SqlNode> targetContents);\n  }\n\n  private class BindHandler implements NodeHandler {\n    public BindHandler() {\n      // Prevent Synthetic Access\n    }\n\n    @Override\n    public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n      final String name = nodeToHandle.getStringAttribute(\"name\");\n      final String expression = nodeToHandle.getStringAttribute(\"value\");\n      final VarDeclSqlNode node = new VarDeclSqlNode(name, expression);\n      targetContents.add(node);\n    }\n  }\n\n  private class TrimHandler implements NodeHandler {\n    public TrimHandler() {\n      // Prevent Synthetic Access\n    }\n\n    @Override\n    public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n      String prefix = nodeToHandle.getStringAttribute(\"prefix\");\n      String prefixOverrides = nodeToHandle.getStringAttribute(\"prefixOverrides\");\n      String suffix = nodeToHandle.getStringAttribute(\"suffix\");\n      String suffixOverrides = nodeToHandle.getStringAttribute(\"suffixOverrides\");\n      TrimSqlNode trim = new TrimSqlNode(configuration, mixedSqlNode, prefix, prefixOverrides, suffix, suffixOverrides);\n      targetContents.add(trim);\n    }\n  }\n\n  private class WhereHandler implements NodeHandler {\n    public WhereHandler() {\n      // Prevent Synthetic Access\n    }\n\n    @Override\n    public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n      WhereSqlNode where = new WhereSqlNode(configuration, mixedSqlNode);\n      targetContents.add(where);\n    }\n  }\n\n  private class SetHandler implements NodeHandler {\n    public SetHandler() {\n      // Prevent Synthetic Access\n    }\n\n    @Override\n    public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n      SetSqlNode set = new SetSqlNode(configuration, mixedSqlNode);\n      targetContents.add(set);\n    }\n  }\n\n  private class ForEachHandler implements NodeHandler {\n    public ForEachHandler() {\n      // Prevent Synthetic Access\n    }\n\n    @Override\n    public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n      String collection = nodeToHandle.getStringAttribute(\"collection\");\n      String item = nodeToHandle.getStringAttribute(\"item\");\n      String index = nodeToHandle.getStringAttribute(\"index\");\n      String open = nodeToHandle.getStringAttribute(\"open\");\n      String close = nodeToHandle.getStringAttribute(\"close\");\n      String separator = nodeToHandle.getStringAttribute(\"separator\");\n      ForEachSqlNode forEachSqlNode = new ForEachSqlNode(configuration, mixedSqlNode, collection, index, item, open, close, separator);\n      targetContents.add(forEachSqlNode);\n    }\n  }\n\n  private class IfHandler implements NodeHandler {\n    public IfHandler() {\n      // Prevent Synthetic Access\n    }\n\n    @Override\n    public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n      String test = nodeToHandle.getStringAttribute(\"test\");\n      IfSqlNode ifSqlNode = new IfSqlNode(mixedSqlNode, test);\n      targetContents.add(ifSqlNode);\n    }\n  }\n\n  private class OtherwiseHandler implements NodeHandler {\n    public OtherwiseHandler() {\n      // Prevent Synthetic Access\n    }\n\n    @Override\n    public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n      List<SqlNode> contents = parseDynamicTags(nodeToHandle);\n      MixedSqlNode mixedSqlNode = new MixedSqlNode(contents);\n      targetContents.add(mixedSqlNode);\n    }\n  }\n\n  private class ChooseHandler implements NodeHandler {\n    public ChooseHandler() {\n      // Prevent Synthetic Access\n    }\n\n    @Override\n    public void handleNode(XNode nodeToHandle, List<SqlNode> targetContents) {\n      List<SqlNode> whenSqlNodes = new ArrayList<SqlNode>();\n      List<SqlNode> otherwiseSqlNodes = new ArrayList<SqlNode>();\n      handleWhenOtherwiseNodes(nodeToHandle, whenSqlNodes, otherwiseSqlNodes);\n      SqlNode defaultSqlNode = getDefaultSqlNode(otherwiseSqlNodes);\n      ChooseSqlNode chooseSqlNode = new ChooseSqlNode(whenSqlNodes, defaultSqlNode);\n      targetContents.add(chooseSqlNode);\n    }\n\n    private void handleWhenOtherwiseNodes(XNode chooseSqlNode, List<SqlNode> ifSqlNodes, List<SqlNode> defaultSqlNodes) {\n      List<XNode> children = chooseSqlNode.getChildren();\n      for (XNode child : children) {\n        String nodeName = child.getNode().getNodeName();\n        NodeHandler handler = nodeHandlers(nodeName);\n        if (handler instanceof IfHandler) {\n          handler.handleNode(child, ifSqlNodes);\n        } else if (handler instanceof OtherwiseHandler) {\n          handler.handleNode(child, defaultSqlNodes);\n        }\n      }\n    }\n\n    private SqlNode getDefaultSqlNode(List<SqlNode> defaultSqlNodes) {\n      SqlNode defaultSqlNode = null;\n      if (defaultSqlNodes.size() == 1) {\n        defaultSqlNode = defaultSqlNodes.get(0);\n      } else if (defaultSqlNodes.size() > 1) {\n        throw new BuilderException(\"Too many default (otherwise) elements in choose statement.\");\n      }\n      return defaultSqlNode;\n    }\n  }\n}\n```\n* 重点是这个方法`List<SqlNode> parseDynamicTags(XNode node) ` ，下面几行代码是处理动态sql的操作\n```java\n        // 得到动态sql标签处理类 trim|where|set...\n        NodeHandler handler = nodeHandlers(nodeName);\n        if (handler == null) {\n          throw new BuilderException(\"Unknown element <\" + nodeName + \"> in SQL statement.\");\n        }\n        // 解析动态结点\n        handler.handleNode(child, contents);\n        isDynamic = true;\n```\n* 通过 `nodeHandlers (nodeName)` 方法来获取相应的处理类\n```java\n  NodeHandler nodeHandlers(String nodeName) {\n    Map<String, NodeHandler> map = new HashMap<String, NodeHandler>();\n    map.put(\"trim\", new TrimHandler());\n    map.put(\"where\", new WhereHandler());\n    map.put(\"set\", new SetHandler());\n    map.put(\"foreach\", new ForEachHandler());\n    map.put(\"if\", new IfHandler());\n    map.put(\"choose\", new ChooseHandler());\n    map.put(\"when\", new IfHandler());\n    map.put(\"otherwise\", new OtherwiseHandler());\n    map.put(\"bind\", new BindHandler());\n    return map.get(nodeName);\n  }\n```\n* 各个Handler 处理类是 `XMLScriptBuilder` 的子类，实际上会转到各个SqlNode 处理类\n \n![image](/images/server/mybatis/SqlNode.png)\n\n## 总结\n* 解析mapper文件中的每个`<select/>,<insert/>,<update/>,<delete/>`节点内的SQL字符串(其中可能包含动态SQL部分,诸如`<if/>,<where/>等) `是这个`XMLScriptBuilder`类","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(八)MapperXML映射文件构建MappedStatement","url":"/2018/11/27/backend/mybatis/sourceCodeAnalysis/Mybatis源码(八)MapperXML映射文件构建MappedStatement/","content":"## 前言\n上一章节介绍了ResultMap标签的解析过程，这一章节来介绍`select|insert|update|delete` 这些sql标签的解析，这些节点会构造成`MappedStatement`类对象\n\n## 源码解析\n* 还是从 `SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);` 作为入口找到 `configurationElement(XNode context)` 方法，如下所示，按照步骤节点一步步解析，最后才是处理`select|insert|update|delete`节点 \n```java\n       private void configurationElement(XNode context) {\n         try {\n           //1.配置namespace\n           String namespace = context.getStringAttribute(\"namespace\");\n           if (namespace.equals(\"\")) {\n             throw new BuilderException(\"Mapper's namespace cannot be empty\");\n           }\n           builderAssistant.setCurrentNamespace(namespace);\n           //2.配置cache-ref\n           cacheRefElement(context.evalNode(\"cache-ref\"));\n           //3.配置cache\n           cacheElement(context.evalNode(\"cache\"));\n           //4.配置parameterMap(已经废弃,老式风格的参数映射)\n           parameterMapElement(context.evalNodes(\"/mapper/parameterMap\"));\n           //5.配置resultMap(高级功能)\n           resultMapElements(context.evalNodes(\"/mapper/resultMap\"));\n           //6.配置sql(定义可重用的 SQL 代码段)\n           sqlElement(context.evalNodes(\"/mapper/sql\"));\n           //7.配置select|insert|update|delete TODO\n           buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));\n         } catch (Exception e) {\n           throw new BuilderException(\"Error parsing Mapper XML. Cause: \" + e, e);\n         }\n       }\n```\n* 打好断点进入 `buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));` 方法，可以看到是一个或的匹配，匹配所有的select|insert|update|delete 这些标签\n```java\n  //7.配置select|insert|update|delete\n  private void buildStatementFromContext(List<XNode> list) {\n    //调用7.1构建语句\n    if (configuration.getDatabaseId() != null) {\n      buildStatementFromContext(list, configuration.getDatabaseId());\n    }\n    buildStatementFromContext(list, null);\n  }\n\n  // 7.1构建语句\n  private void buildStatementFromContext(List<XNode> list, String requiredDatabaseId) {\n    for (XNode context : list) {\n      // 构建所有语句,一个mapper下可以有很多select\n      // 语句比较复杂，核心都在这里面，所以调用XMLStatementBuilder\n      final XMLStatementBuilder statementParser = new XMLStatementBuilder(configuration, builderAssistant, context, requiredDatabaseId);\n      try {\n        // 核心XMLStatementBuilder.parseStatementNode\n        statementParser.parseStatementNode();\n      } catch (IncompleteElementException e) {\n        // 如果出现SQL语句不完整，把它记下来，塞到configuration去\n        configuration.addIncompleteStatement(statementParser);\n      }\n    }\n  }\n```\n* 可以看到又涉及到了一个`XMLStatementBuilder.java` 来对这些标签进行解析，进入`statementParser.parseStatementNode();` 方法，可以看到xml标签的一些属性解析，最后是`builderAssistant.addMappedStatement(...)` 方法将构建好的`MappedStatement`对象添加到Configuration这个大佬身上\n```java\n  //解析语句(select|insert|update|delete)\n//<select\n//  id=\"selectPerson\"\n//  parameterType=\"int\"\n//  parameterMap=\"deprecated\"\n//  resultType=\"hashmap\"\n//  resultMap=\"personResultMap\"\n//  flushCache=\"false\"\n//  useCache=\"true\"\n//  timeout=\"10000\"\n//  fetchSize=\"256\"\n//  statementType=\"PREPARED\"\n//  resultSetType=\"FORWARD_ONLY\">\n//  SELECT * FROM PERSON WHERE ID = #{id}\n//</select>\n  public void parseStatementNode() {\n    String id = context.getStringAttribute(\"id\");\n    String databaseId = context.getStringAttribute(\"databaseId\");\n\n    //如果databaseId不匹配，退出\n    if (!databaseIdMatchesCurrent(id, databaseId, this.requiredDatabaseId)) {\n      return;\n    }\n\n    //暗示驱动程序每次批量返回的结果行数\n    Integer fetchSize = context.getIntAttribute(\"fetchSize\");\n    //超时时间\n    Integer timeout = context.getIntAttribute(\"timeout\");\n    //引用外部 parameterMap,已废弃\n    String parameterMap = context.getStringAttribute(\"parameterMap\");\n    //参数类型\n    String parameterType = context.getStringAttribute(\"parameterType\");\n    Class<?> parameterTypeClass = resolveClass(parameterType);\n    //引用外部的 resultMap(高级功能)\n    String resultMap = context.getStringAttribute(\"resultMap\");\n    //结果类型\n    String resultType = context.getStringAttribute(\"resultType\");\n    //脚本语言,mybatis3.2的新功能\n    String lang = context.getStringAttribute(\"lang\");\n    //得到语言驱动\n    LanguageDriver langDriver = getLanguageDriver(lang);\n\n    Class<?> resultTypeClass = resolveClass(resultType);\n    //结果集类型，FORWARD_ONLY|SCROLL_SENSITIVE|SCROLL_INSENSITIVE 中的一种\n    String resultSetType = context.getStringAttribute(\"resultSetType\");\n    //语句类型, STATEMENT|PREPARED|CALLABLE 的一种\n    StatementType statementType = StatementType.valueOf(context.getStringAttribute(\"statementType\", StatementType.PREPARED.toString()));\n    ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType);\n\n    //获取命令类型(select|insert|update|delete)\n    String nodeName = context.getNode().getNodeName();\n    SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));\n    boolean isSelect = sqlCommandType == SqlCommandType.SELECT;\n    boolean flushCache = context.getBooleanAttribute(\"flushCache\", !isSelect);\n    //是否要缓存select结果\n    boolean useCache = context.getBooleanAttribute(\"useCache\", isSelect);\n    //仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。\n    //这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。 \n    boolean resultOrdered = context.getBooleanAttribute(\"resultOrdered\", false);\n\n    // Include Fragments before parsing\n    //解析之前先解析<include>SQL片段\n    XMLIncludeTransformer includeParser = new XMLIncludeTransformer(configuration, builderAssistant);\n    includeParser.applyIncludes(context.getNode());\n\n    // Parse selectKey after includes and remove them.\n    //解析之前先解析<selectKey>\n    processSelectKeyNodes(id, parameterTypeClass, langDriver);\n    \n    // Parse the SQL (pre: <selectKey> and <include> were parsed and removed)\n    //解析成SqlSource，一般是DynamicSqlSource\n    SqlSource sqlSource = langDriver.createSqlSource(configuration, context, parameterTypeClass);\n    String resultSets = context.getStringAttribute(\"resultSets\");\n    //(仅对 insert 有用) 标记一个属性, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值\n    String keyProperty = context.getStringAttribute(\"keyProperty\");\n    //(仅对 insert 有用) 标记一个属性, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值\n    String keyColumn = context.getStringAttribute(\"keyColumn\");\n    KeyGenerator keyGenerator;\n    String keyStatementId = id + SelectKeyGenerator.SELECT_KEY_SUFFIX;\n    keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, true);\n    if (configuration.hasKeyGenerator(keyStatementId)) {\n      keyGenerator = configuration.getKeyGenerator(keyStatementId);\n    } else {\n      keyGenerator = context.getBooleanAttribute(\"useGeneratedKeys\",\n          configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType))\n          ? new Jdbc3KeyGenerator() : new NoKeyGenerator();\n    }\n\n\t//又去调助手类\n    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,\n        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,\n        resultSetTypeEnum, flushCache, useCache, resultOrdered, \n        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);\n  }\n```\n* MappedStatement类在Mybatis框架中用于表示XML文件中一个sql语句节点，即一个<select>或者<update>标签。Mybatis框架在初始化阶段会对XML配置文件进行读取，将其中的sql语句节点对象化为一个个MappedStatement对象\n```java\npublic final class MappedStatement {\n  // xml文件位置\n  private String resource;\n  private Configuration configuration;\n  // 节点中的id属性加要命名空间比如 org.apache.songsy.mapper.RoleMapper.selectByPrimaryKey\n  private String id;\n  private Integer fetchSize;\n  private Integer timeout;\n  private StatementType statementType;\n  private ResultSetType resultSetType;\n  // SQL源码，实现动态sql\n  private SqlSource sqlSource;\n  private Cache cache;\n  private ParameterMap parameterMap;\n  private List<ResultMap> resultMaps;\n  private boolean flushCacheRequired;\n  private boolean useCache;\n  private boolean resultOrdered;\n  private SqlCommandType sqlCommandType;\n  private KeyGenerator keyGenerator;\n  private String[] keyProperties;\n  private String[] keyColumns;\n  private boolean hasNestedResultMaps;\n  private String databaseId;\n  private Log statementLog;\n  private LanguageDriver lang;\n  private String[] resultSets;\n\n  MappedStatement() {\n    // constructor disabled\n  }\n\n  //静态内部类，建造者模式\n  public static class Builder {\n    private MappedStatement mappedStatement = new MappedStatement();\n\n    public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlCommandType sqlCommandType) {\n      mappedStatement.configuration = configuration;\n      mappedStatement.id = id;\n      mappedStatement.sqlSource = sqlSource;\n      mappedStatement.statementType = StatementType.PREPARED;\n      mappedStatement.parameterMap = new ParameterMap.Builder(configuration, \"defaultParameterMap\", null, new ArrayList<ParameterMapping>()).build();\n      mappedStatement.resultMaps = new ArrayList<ResultMap>();\n      mappedStatement.timeout = configuration.getDefaultStatementTimeout();\n      mappedStatement.sqlCommandType = sqlCommandType;\n      mappedStatement.keyGenerator = configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator() : new NoKeyGenerator();\n      String logId = id;\n      if (configuration.getLogPrefix() != null) {\n        logId = configuration.getLogPrefix() + id;\n      }\n      mappedStatement.statementLog = LogFactory.getLog(logId);\n      mappedStatement.lang = configuration.getDefaultScriptingLanuageInstance();\n    }\n    ...\n```\n* `MappedStatement.java` 在哪里会调用呢，可以回顾一些第六章节`使用MapperProxy来执行方法`，下面是方法\n```java\n  // 核心selectList\n  @Override\n  public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {\n    try {\n      // 根据statement id找到对应的MappedStatement\n      MappedStatement ms = configuration.getMappedStatement(statement);\n      // 转而用执行器来查询结果,注意这里传入的ResultHandler是null\n      return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error querying database.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n``` \n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(七)MapperXML映射文件解析ResultMap","url":"/2018/11/26/backend/mybatis/sourceCodeAnalysis/Mybatis源码(七)MapperXML映射文件解析ResultMap/","content":"## 前言\nMyBatis 的真正强大在于它的映射语句，也是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单，第三章节已经介绍了Mapper XML 文件解析的整体过程，这一章节来介绍Mapper 映射文件下 `select|insert|update|delete` 这些节点的解析\n\n## 源码解析\n* 从 `SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);` 作为入口找到 `configurationElement(XNode context)` 方法，如下所示，按照步骤节点一步步解析，最后才是处理`select|insert|update|delete`节点 \n```java\n       private void configurationElement(XNode context) {\n         try {\n           //1.配置namespace\n           String namespace = context.getStringAttribute(\"namespace\");\n           if (namespace.equals(\"\")) {\n             throw new BuilderException(\"Mapper's namespace cannot be empty\");\n           }\n           builderAssistant.setCurrentNamespace(namespace);\n           //2.配置cache-ref\n           cacheRefElement(context.evalNode(\"cache-ref\"));\n           //3.配置cache\n           cacheElement(context.evalNode(\"cache\"));\n           //4.配置parameterMap(已经废弃,老式风格的参数映射)\n           parameterMapElement(context.evalNodes(\"/mapper/parameterMap\"));\n           //5.配置resultMap(高级功能)\n           resultMapElements(context.evalNodes(\"/mapper/resultMap\"));\n           //6.配置sql(定义可重用的 SQL 代码段)\n           sqlElement(context.evalNodes(\"/mapper/sql\"));\n           //7.配置select|insert|update|delete TODO\n           buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));\n         } catch (Exception e) {\n           throw new BuilderException(\"Error parsing Mapper XML. Cause: \" + e, e);\n         }\n       }\n```\n* 配置resultMap 解析，进入 `resultMapElements(context.evalNodes(\"/mapper/resultMap\"));` 方法\n```java\n  private void resultMapElements(List<XNode> list) throws Exception {\n    for (XNode resultMapNode : list) {\n      try {\n        // 循环遍历resultMap节点\n        resultMapElement(resultMapNode);\n      } catch (IncompleteElementException e) {\n        // ignore, it will be retried\n      }\n    }\n```\n* 进入 `resultMapElement(resultMapNode);` 方法, 这里就是构造ResultMap的主要方法了\n```java\n  private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> additionalResultMappings) throws Exception {\n//错误上下文\n//取得标示符   (\"resultMap[userResultMap]\")\n//    <resultMap id=\"userResultMap\" type=\"User\">\n//      <id property=\"id\" column=\"user_id\" />\n//      <result property=\"username\" column=\"username\"/>\n//      <result property=\"password\" column=\"password\"/>\n//    </resultMap>\n    ErrorContext.instance().activity(\"processing \" + resultMapNode.getValueBasedIdentifier());\n    String id = resultMapNode.getStringAttribute(\"id\",\n        resultMapNode.getValueBasedIdentifier());\n    String type = resultMapNode.getStringAttribute(\"type\",\n        resultMapNode.getStringAttribute(\"ofType\",\n            resultMapNode.getStringAttribute(\"resultType\",\n                resultMapNode.getStringAttribute(\"javaType\"))));\n    String extend = resultMapNode.getStringAttribute(\"extends\");\n    //autoMapping\n    Boolean autoMapping = resultMapNode.getBooleanAttribute(\"autoMapping\");\n    Class<?> typeClass = resolveClass(type);\n    Discriminator discriminator = null;\n    List<ResultMapping> resultMappings = new ArrayList<ResultMapping>();\n    resultMappings.addAll(additionalResultMappings);\n    // 遍历resultMap 的子节点\n    List<XNode> resultChildren = resultMapNode.getChildren();\n    for (XNode resultChild : resultChildren) {\n      if (\"constructor\".equals(resultChild.getName())) {\n        //解析result map的constructor\n        processConstructorElement(resultChild, typeClass, resultMappings);\n      } else if (\"discriminator\".equals(resultChild.getName())) {\n        //解析result map的discriminator\n        discriminator = processDiscriminatorElement(resultChild, typeClass, resultMappings);\n      } else {\n        List<ResultFlag> flags = new ArrayList<ResultFlag>();\n        if (\"id\".equals(resultChild.getName())) {\n          flags.add(ResultFlag.ID);\n        }\n        // 调5.1.1 buildResultMappingFromContext,得到ResultMapping\n        resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));\n      }\n    }\n    // 最后再调ResultMapResolver得到ResultMap\n    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings, autoMapping);\n    try {\n      return resultMapResolver.resolve();\n    } catch (IncompleteElementException  e) {\n      configuration.addIncompleteResultMap(resultMapResolver);\n      throw e;\n    }\n  }\n```\n* 下面来看看`ResultMap` 这个类，可以看到一层套一层\n```java\npublic class ResultMap {\n  private String id;\n  private Class<?> type;\n  private List<ResultMapping> resultMappings;\n  private List<ResultMapping> idResultMappings;\n  private List<ResultMapping> constructorResultMappings;\n  private List<ResultMapping> propertyResultMappings;\n  private Set<String> mappedColumns;\n  private Discriminator discriminator;\n  private boolean hasNestedResultMaps;\n  private boolean hasNestedQueries;\n  private Boolean autoMapping;\n\n  private ResultMap() {\n  }\n\n  // 静态内部类，建造者模式\n  public static class Builder {\n    private ResultMap resultMap = new ResultMap();\n\n    public Builder(Configuration configuration, String id, Class<?> type, List<ResultMapping> resultMappings) {\n      this(configuration, id, type, resultMappings, null);\n    }\n\n    public Builder(Configuration configuration, String id, Class<?> type, List<ResultMapping> resultMappings, Boolean autoMapping) {\n      resultMap.id = id;\n      resultMap.type = type;\n      resultMap.resultMappings = resultMappings;\n      resultMap.autoMapping = autoMapping;\n    }\n\n    public Builder discriminator(Discriminator discriminator) {\n      resultMap.discriminator = discriminator;\n      return this;\n    }\n    \n    ...\n```\n* ResultMap 由多个 `ResultMapping.java` 构造成，下面看看这个类，和我们的mapper文件是一一对应的\n```xml\n    <resultMap id=\"BaseResultMap\" type=\"com.songsy.imybatis.test.entity.User\">\n        <id column=\"id\" property=\"id\" jdbcType=\"INTEGER\"/>\n        <result column=\"username\" property=\"username\" jdbcType=\"VARCHAR\"/>\n        <result column=\"password\" property=\"password\" jdbcType=\"VARCHAR\"/>\n        <result column=\"nickname\" property=\"nickname\" jdbcType=\"VARCHAR\"/>\n```\n\n```java\npublic class ResultMapping {\n\n  private Configuration configuration;\n  private String property;\n  private String column;\n  private Class<?> javaType;\n  private JdbcType jdbcType;\n  private TypeHandler<?> typeHandler;\n  private String nestedResultMapId;\n  private String nestedQueryId;\n  private Set<String> notNullColumns;\n  private String columnPrefix;\n  private List<ResultFlag> flags;\n  private List<ResultMapping> composites;\n  private String resultSet;\n  private String foreignColumn;\n  private boolean lazy;\n\n  ResultMapping() {\n  }\n\n  // 静态内部类，建造者模式\n  public static class Builder {\n    private ResultMapping resultMapping = new ResultMapping();\n\n    public Builder(Configuration configuration, String property, String column, TypeHandler<?> typeHandler) {\n      this(configuration, property);\n      resultMapping.column = column;\n      resultMapping.typeHandler = typeHandler;\n    }\n\n    public Builder(Configuration configuration, String property, String column, Class<?> javaType) {\n      this(configuration, property);\n      resultMapping.column = column;\n      resultMapping.javaType = javaType;\n    }\n\n    public Builder(Configuration configuration, String property) {\n      resultMapping.configuration = configuration;\n      resultMapping.property = property;\n      resultMapping.flags = new ArrayList<ResultFlag>();\n      resultMapping.composites = new ArrayList<ResultMapping>();\n      resultMapping.lazy = configuration.isLazyLoadingEnabled();\n    }\n\n    public Builder javaType(Class<?> javaType) {\n      resultMapping.javaType = javaType;\n      return this;\n    }\n\n    public Builder jdbcType(JdbcType jdbcType) {\n      resultMapping.jdbcType = jdbcType;\n      return this;\n    }\n\n    public Builder nestedResultMapId(String nestedResultMapId) {\n      resultMapping.nestedResultMapId = nestedResultMapId;\n      return this;\n    }\n\n    .... \n```\n## 总结\n* Mybatis最强大的元素，它可以将查询到的复杂数据（比如查询到几个表中数据）映射到一个结果集当中。\n* 当返回类型直接是一个ResultMap的时候也是非常有用的，这主要用在进行复杂联合查询上，因为进行简单查询是没有什么必要的，可以使用ResultType来处理","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(六)使用MapperProxy来执行方法","url":"/2018/11/23/backend/mybatis/sourceCodeAnalysis/Mybatis源码(六)使用MapperProxy来执行方法/","content":"## 前言\n上一章节通过SqlSession来获取Mapper的代理类`MapperProxy`， 有了代理类之后就可以执行里面的方法了\n\n## MapperProxy 执行方法\n* MapperProxy 继承 InvocationHandler 实现了动态代理，只要是调用的Mapper接口的方法都会进入到 里面的`invoke` 方法中，具体解释如下代码\n```java\n/**\n * 映射器代理，代理模式\n * @author Clinton Begin\n * @author Eduardo Macarron\n */\npublic class MapperProxy<T> implements InvocationHandler, Serializable {\n\n  private static final long serialVersionUID = -6424540398559729838L;\n  private final SqlSession sqlSession;\n  private final Class<T> mapperInterface;\n  // 使用了缓存\n  private final Map<Method, MapperMethod> methodCache;\n\n  public MapperProxy(SqlSession sqlSession, Class<T> mapperInterface, Map<Method, MapperMethod> methodCache) {\n    this.sqlSession = sqlSession;\n    this.mapperInterface = mapperInterface;\n    this.methodCache = methodCache;\n  }\n\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    // 代理以后，所有Mapper的方法调用时，都会调用这个invoke方法\n    // 并不是任何一个方法都需要执行调用代理对象进行执行，如果这个方法是Object中通用的方法（toString、hashCode等）无需执行\n    if (Object.class.equals(method.getDeclaringClass())) {\n      try {\n        return method.invoke(this, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n    // 这里优化了，去缓存中找MapperMethod\n    final MapperMethod mapperMethod = cachedMapperMethod(method);\n    // 真正的方法执行\n    return mapperMethod.execute(sqlSession, args);\n  }\n\n  // 去缓存中找MapperMethod\n  private MapperMethod cachedMapperMethod(Method method) {\n    MapperMethod mapperMethod = methodCache.get(method);\n    if (mapperMethod == null) {\n      // 找不到才去new\n      mapperMethod = new MapperMethod(mapperInterface, method, sqlSession.getConfiguration());\n      methodCache.put(method, mapperMethod);\n    }\n    return mapperMethod;\n  }\n}\n```\n* 接下来关注这一行`mapperMethod.execute(sqlSession, args);` 这里是重头戏，我们打开 `MapperMethod` 这个类，重点关注`execute` 方法，可以看到在这里进行了一些路由转发(insert|update|delete|select，分别调用SqlSession的4大类方法，又回到了SqlSession中), 还有就是对查询参数的一些处理封装。\n```java\n/**\n * 映射器方法\n * @author Clinton Begin\n * @author Eduardo Macarron\n * @author Lasse Voss\n */\npublic class MapperMethod {\n\n  private final SqlCommand command;\n  private final MethodSignature method;\n\n  public MapperMethod(Class<?> mapperInterface, Method method, Configuration config) {\n    this.command = new SqlCommand(config, mapperInterface, method);\n    this.method = new MethodSignature(config, method);\n  }\n\n  //执行\n  public Object execute(SqlSession sqlSession, Object[] args) {\n    Object result;\n    //可以看到执行时就是4种情况，insert|update|delete|select，分别调用SqlSession的4大类方法\n    if (SqlCommandType.INSERT == command.getType()) {\n      Object param = method.convertArgsToSqlCommandParam(args);\n      result = rowCountResult(sqlSession.insert(command.getName(), param));\n    } else if (SqlCommandType.UPDATE == command.getType()) {\n      Object param = method.convertArgsToSqlCommandParam(args);\n      result = rowCountResult(sqlSession.update(command.getName(), param));\n    } else if (SqlCommandType.DELETE == command.getType()) {\n      Object param = method.convertArgsToSqlCommandParam(args);\n      result = rowCountResult(sqlSession.delete(command.getName(), param));\n    } else if (SqlCommandType.SELECT == command.getType()) {\n      if (method.returnsVoid() && method.hasResultHandler()) {\n        //如果有结果处理器\n        executeWithResultHandler(sqlSession, args);\n        result = null;\n      } else if (method.returnsMany()) {\n        //如果结果有多条记录\n        result = executeForMany(sqlSession, args);\n      } else if (method.returnsMap()) {\n        //如果结果是map\n        result = executeForMap(sqlSession, args);\n      } else {\n        //否则就是一条记录\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = sqlSession.selectOne(command.getName(), param);\n      }\n    } else {\n      throw new BindingException(\"Unknown execution method for: \" + command.getName());\n    }\n    if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {\n      throw new BindingException(\"Mapper method '\" + command.getName() \n          + \" attempted to return null from a method with a primitive return type (\" + method.getReturnType() + \").\");\n    }\n    return result;\n  }\n\n\n  ... 放不下\n```\n* 现在来执行一条查询，根据断点一步步发掘\n```java\nUserMapper userMapper = sqlSession.getMapper(UserMapper.class);\nSystem.out.println(userMapper.selectByPrimaryKey(1));\n```\n* 一大堆if判断进入到这里\n```java\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = sqlSession.selectOne(command.getName(), param);\n```\n* 进入 `sqlSession.selectOne(command.getName(), param);` 方法\n```java\n  @Override\n  public <T> T selectOne(String statement, Object parameter) {\n    // Popular vote was to return null on 0 results and throw exception on too many.\n    // 转而去调用selectList,很简单的，如果得到0条则返回null，得到1条则返回1条，得到多条报TooManyResultsException错\n    List<T> list = this.<T>selectList(statement, parameter);\n    if (list.size() == 1) {\n      return list.get(0);\n    } else if (list.size() > 1) {\n      throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());\n    } else {\n      return null;\n    }\n  }\n```\n* selectOne 调用的是 selectList 方法，在这里可以看到 `MappedStatement` 及 `Executor`\n```java\n  // 核心selectList\n  @Override\n  public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {\n    try {\n      // 根据statement id找到对应的MappedStatement\n      MappedStatement ms = configuration.getMappedStatement(statement);\n      // 转而用执行器来查询结果,注意这里传入的ResultHandler是null\n      return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error querying database.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n```\n\n* 查看 MappedStatement 这里可以看到我们的sql\n\n![image](/images/server/mybatis/MappedStatement.jpg)\n\n* 继续跳入 executor.query 方法，这里面跳到 `CachingExecutor` 执行，这里面使用了装饰器模式，里面有个`private Executor delegate;`，装饰SimpleExecutor , 在SimpleExecutor基础的上添加了二级缓存的功能\n```java\n  @Override\n  public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)\n      throws SQLException {\n    Cache cache = ms.getCache();\n    // 默认情况下是没有开启缓存的(二级缓存).要开启二级缓存,你需要在你的 SQL 映射文件中添加一行: <cache/>\n    // 简单的说，就是先查CacheKey，查不到再委托给实际的执行器去查\n    if (cache != null) {\n      flushCacheIfRequired(ms);\n      if (ms.isUseCache() && resultHandler == null) {\n        ensureNoOutParams(ms, parameterObject, boundSql);\n        @SuppressWarnings(\"unchecked\")\n        List<E> list = (List<E>) tcm.getObject(cache, key);\n        if (list == null) {\n          list = delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n          tcm.putObject(cache, key, list); // issue #578 and #116\n        }\n        return list;\n      }\n    }\n    return delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n  }\n```\n* 因为二级缓存是需要配置开启的，所以继续跳入 `delegate.<E> query` 方法，进入到`BaseExecutor` 方法，在这里可以看到一级缓存的处理\n\n```java\n  public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n    ErrorContext.instance().resource(ms.getResource()).activity(\"executing a query\").object(ms.getId());\n    // 如果已经关闭，报错\n    if (closed) {\n      throw new ExecutorException(\"Executor was closed.\");\n    }\n    // 先清局部缓存，再查询.但仅查询堆栈为0，才清。为了处理递归调用\n    if (queryStack == 0 && ms.isFlushCacheRequired()) {\n      clearLocalCache();\n    }\n    List<E> list;\n    try {\n      // 加一,这样递归调用到上面的时候就不会再清局部缓存了\n      queryStack++;\n      // 先根据cachekey从localCache去查\n      list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;\n      if (list != null) {\n        // 若查到localCache缓存，处理localOutputParameterCache\n        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n      } else {\n        // 从数据库查\n        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n      }\n    } finally {\n      // 清空堆栈\n      queryStack--;\n    }\n    if (queryStack == 0) {\n      // 延迟加载队列中所有元素\n      for (DeferredLoad deferredLoad : deferredLoads) {\n        deferredLoad.load();\n      }\n      // issue #601\n      // 清空延迟加载队列\n      deferredLoads.clear();\n      if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {\n        // issue #482\n    \t// 如果是STATEMENT，清本地缓存\n        clearLocalCache();\n      }\n    }\n    return list;\n  }\n```\n* 继续跳入`queryFromDatabase()` 方法，从数据库查， 跳入到SimpleExecutor类\n```java\n  @Override\n  public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n    Statement stmt = null;\n    try {\n      Configuration configuration = ms.getConfiguration();\n      // 新建一个StatementHandler\n      // 这里看到ResultHandler传入了\n      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n      // 准备语句\n      stmt = prepareStatement(handler, ms.getStatementLog());\n      //StatementHandler.query\n      return handler.<E>query(stmt, resultHandler);\n    } finally {\n      closeStatement(stmt);\n    }\n  }\n```\n* 继续跳入 `doQuery()`方法\n```java\n  //select\n  @Override\n  public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n    Statement stmt = null;\n    try {\n      Configuration configuration = ms.getConfiguration();\n      //新建一个StatementHandler\n      //这里看到ResultHandler传入了\n      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n      //准备语句\n      stmt = prepareStatement(handler, ms.getStatementLog());\n      //StatementHandler.query\n      return handler.<E>query(stmt, resultHandler);\n    } finally {\n      closeStatement(stmt);\n    }\n  }\n```\n\n\n* 继续跳入 handler.<E>query(), 这里又从`SimpleExecutor`类 跳入 `PreparedStatementHandler` 类中，终于在这里看到了我们的JDBC的代码，并通过 `ResultSetHandler` 类来处理我们的结果\n```java\n  @Override\n  public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {\n    PreparedStatement ps = (PreparedStatement) statement;\n    ps.execute();\n    return resultSetHandler.<E> handleResultSets(ps);\n  }\n```\n\n## 时序图\n![image](/images/server/mybatis/executer.png)\n\n## 总结\n* 可以看到一个方法的执行涉及到一大堆类，为什么要那么多类的，就是为了解耦，`高内聚，低耦合`，每个类都有其独有的功能，就像工厂流水线一样，一个部门做一个部门的事，专人做专事，这样也方便以后添加功能","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(五)通过SqlSession来获取Mapper的代理类","url":"/2018/11/23/backend/mybatis/sourceCodeAnalysis/Mybatis源码(五)通过SqlSession来获取MapperProxy/","content":"## 前言\n有了SqlSession 这个类之后，就可以通过`sqlSession.getMapper(UserMapper.class);`来获取`UserMapper`了\n```java\n// 读取配置文件\nFile file = new File(\"src/test/java/resources/mybatis-config.xml\");\nInputStream inputStream = new FileInputStream(file);\n// 构建SqlSessionFactory\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n// 得到SqlSession\nSqlSession sqlSession = sqlSessionFactory.openSession();\n// 得到Mapper\nUserMapper userMapper = sqlSession.getMapper(UserMapper.class);\nSystem.out.println(userMapper.selectByPrimaryKey(1));\n```\n## 获取Mapper\n* 查看代码又可以发现 Configuration 这个类的影子，哪里都有它的影子，当然因为Mapper的映射关系数据存在这里 \n```java\n  @Override\n  public <T> T getMapper(Class<T> type) {\n    // 最后会去调用MapperRegistry.getMapper\n    return configuration.<T>getMapper(type, this);\n  }\n```\n* 继续跟进 `configuration.<T>getMapper(type, this);` 方法，进入到Configuration 类中，可以发现是MapperRegistry 类维护了Mapper的映射关系\n```java\n  public <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n    return mapperRegistry.getMapper(type, sqlSession);\n  }\n```\n\n* 继续跟进`mapperRegistry.getMapper(type, sqlSession);` 方法，进入到 MapperRegistry 类中，可以看到里面的映射关系就是用`Map<Class<?>, MapperProxyFactory<?>> knownMappers` 一个Map来存放，Key是 Class对象，Value就是`MapperProxyFactory` 是Mapper代理类的生成工厂\n```java\n/**\n * 映射器注册机\n * @author Clinton Begin\n * @author Eduardo Macarron\n * @author Lasse Voss\n */\npublic class MapperRegistry {\n\n  private Configuration config;\n  // 将已经添加的映射都放入HashMap\n  private final Map<Class<?>, MapperProxyFactory<?>> knownMappers = new HashMap<Class<?>, MapperProxyFactory<?>>();\n\n  public MapperRegistry(Configuration config) {\n    this.config = config;\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  // 返回代理类\n  public <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n    final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);\n    if (mapperProxyFactory == null) {\n      throw new BindingException(\"Type \" + type + \" is not known to the MapperRegistry.\");\n    }\n    try {\n      return mapperProxyFactory.newInstance(sqlSession);\n    } catch (Exception e) {\n      throw new BindingException(\"Error getting mapper instance. Cause: \" + e, e);\n    }\n  }\n  \n  public <T> boolean hasMapper(Class<T> type) {\n    return knownMappers.containsKey(type);\n  }\n\n  // 看一下如何添加一个映射\n  public <T> void addMapper(Class<T> type) {\n    // mapper必须是接口！才会添加\n    if (type.isInterface()) {\n      if (hasMapper(type)) {\n        // 如果重复添加了，报错\n        throw new BindingException(\"Type \" + type + \" is already known to the MapperRegistry.\");\n      }\n      boolean loadCompleted = false;\n      try {\n        knownMappers.put(type, new MapperProxyFactory<T>(type));\n        // It's important that the type is added before the parser is run\n        // otherwise the binding may automatically be attempted by the\n        // mapper parser. If the type is already known, it won't try.\n        MapperAnnotationBuilder parser = new MapperAnnotationBuilder(config, type);\n        parser.parse();\n        loadCompleted = true;\n      } finally {\n        // 如果加载过程中出现异常需要再将这个mapper从mybatis中删除,这种方式比较丑陋吧，难道是不得已而为之？\n        if (!loadCompleted) {\n          knownMappers.remove(type);\n        }\n      }\n    }\n  }\n\n  /**\n   * @since 3.2.2\n   */\n  public Collection<Class<?>> getMappers() {\n    return Collections.unmodifiableCollection(knownMappers.keySet());\n  }\n\n  /**\n   * @since 3.2.2\n   */\n  public void addMappers(String packageName, Class<?> superType) {\n    // 查找包下所有是superType的类\n    ResolverUtil<Class<?>> resolverUtil = new ResolverUtil<Class<?>>();\n    resolverUtil.find(new ResolverUtil.IsA(superType), packageName);\n    Set<Class<? extends Class<?>>> mapperSet = resolverUtil.getClasses();\n    for (Class<?> mapperClass : mapperSet) {\n      addMapper(mapperClass);\n    }\n  }\n\n  /**\n   * @since 3.2.2\n   */\n  // 查找包下所有类\n  public void addMappers(String packageName) {\n    addMappers(packageName, Object.class);\n  }\n  \n}\n```\n* 查看该类可以发现 knownMappers 是通过 addMapper()方法来添加的，那么addMapper()是哪里调用的呢，大家还记得之前的`XMLConfigBuilder`这个类吗，就是这里来解析mapper节点的\n```xml\n   <mappers>\n        <mapper resource=\"resources/mapper/UserMapper.xml\"/>\n    </mappers>\n```\n回到XMLConfigBuilder类可以找到这个方法`mapperElement`，可以发现是通过 `configuration.addMappers(mapperPackage);` 及`configuration.addMapper(mapperInterface);` 来添加mapper映射的\n```xml\n  private void mapperElement(XNode parent) throws Exception {\n    if (parent != null) {\n      for (XNode child : parent.getChildren()) {\n        if (\"package\".equals(child.getName())) {\n          //10.4自动扫描包下所有映射器\n          String mapperPackage = child.getStringAttribute(\"name\");\n          configuration.addMappers(mapperPackage);\n        } else {\n          String resource = child.getStringAttribute(\"resource\");\n          String url = child.getStringAttribute(\"url\");\n          String mapperClass = child.getStringAttribute(\"class\");\n          if (resource != null && url == null && mapperClass == null) {\n            //10.1使用类路径\n            ErrorContext.instance().resource(resource);\n            InputStream inputStream = Resources.getResourceAsStream(resource);\n            //映射器比较复杂，调用XMLMapperBuilder\n            //注意在for循环里每个mapper都重新new一个XMLMapperBuilder，来解析\n            XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments());\n            mapperParser.parse();\n          } else if (resource == null && url != null && mapperClass == null) {\n            //10.2使用绝对url路径\n            ErrorContext.instance().resource(url);\n            InputStream inputStream = Resources.getUrlAsStream(url);\n            //映射器比较复杂，调用XMLMapperBuilder\n            XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url, configuration.getSqlFragments());\n            mapperParser.parse();\n          } else if (resource == null && url == null && mapperClass != null) {\n            //10.3使用java类名\n            Class<?> mapperInterface = Resources.classForName(mapperClass);\n            //直接把这个映射加入配置\n            configuration.addMapper(mapperInterface);\n          } else {\n            throw new BuilderException(\"A mapper element may only specify a url, resource or class, but not more than one.\");\n          }\n        }\n      }\n    }\n  }\n```\n* 回归主线，在 `MapperRegistry` 类的  `getMapper` 方法，可以发现是通过`mapperProxyFactory.newInstance(sqlSession);` 是通过Mapper代理类工厂来获取Mapper的\n```java\n  // 返回代理类\n  public <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n    final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);\n    if (mapperProxyFactory == null) {\n      throw new BindingException(\"Type \" + type + \" is not known to the MapperRegistry.\");\n    }\n    try {\n      return mapperProxyFactory.newInstance(sqlSession);\n    } catch (Exception e) {\n      throw new BindingException(\"Error getting mapper instance. Cause: \" + e, e);\n    }\n  }\n```\n* 继续跟进 `mapperProxyFactory.newInstance(sqlSession)` 进入到 `MapperProxyFactory`类中，没错就是在这里生成代理Mapper的，是用JDK自带的动态代理生成映射器\n```java\n/**\n * 映射器代理工厂\n * @author Lasse Voss\n */\npublic class MapperProxyFactory<T> {\n\n  private final Class<T> mapperInterface;\n  private Map<Method, MapperMethod> methodCache = new ConcurrentHashMap<Method, MapperMethod>();\n\n  public MapperProxyFactory(Class<T> mapperInterface) {\n    this.mapperInterface = mapperInterface;\n  }\n\n  public Class<T> getMapperInterface() {\n    return mapperInterface;\n  }\n\n  public Map<Method, MapperMethod> getMethodCache() {\n    return methodCache;\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  protected T newInstance(MapperProxy<T> mapperProxy) {\n    // 用JDK自带的动态代理生成映射器\n    return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);\n  }\n\n  public T newInstance(SqlSession sqlSession) {\n    final MapperProxy<T> mapperProxy = new MapperProxy<T>(sqlSession, mapperInterface, methodCache);\n    return newInstance(mapperProxy);\n  }\n\n}\n```\n* 看一下`MapperProxy.java` 的真面目，这就是真正的实现类，重点是 `mapperMethod.execute(sqlSession, args);` 这一句，这是真正的执行者\n```java\n/**\n * 映射器代理，代理模式\n * @author Clinton Begin\n * @author Eduardo Macarron\n */\npublic class MapperProxy<T> implements InvocationHandler, Serializable {\n\n  private static final long serialVersionUID = -6424540398559729838L;\n  private final SqlSession sqlSession;\n  private final Class<T> mapperInterface;\n  private final Map<Method, MapperMethod> methodCache;\n\n  public MapperProxy(SqlSession sqlSession, Class<T> mapperInterface, Map<Method, MapperMethod> methodCache) {\n    this.sqlSession = sqlSession;\n    this.mapperInterface = mapperInterface;\n    this.methodCache = methodCache;\n  }\n\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    // 代理以后，所有Mapper的方法调用时，都会调用这个invoke方法\n    // 并不是任何一个方法都需要执行调用代理对象进行执行，如果这个方法是Object中通用的方法（toString、hashCode等）无需执行\n    if (Object.class.equals(method.getDeclaringClass())) {\n      try {\n        return method.invoke(this, args);\n      } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n      }\n    }\n    // 这里优化了，去缓存中找MapperMethod\n    final MapperMethod mapperMethod = cachedMapperMethod(method);\n    // 真正的执行方法\n    return mapperMethod.execute(sqlSession, args);\n  }\n\n  // 去缓存中找MapperMethod\n  private MapperMethod cachedMapperMethod(Method method) {\n    MapperMethod mapperMethod = methodCache.get(method);\n    if (mapperMethod == null) {\n      // 找不到才去new\n      mapperMethod = new MapperMethod(mapperInterface, method, sqlSession.getConfiguration());\n      methodCache.put(method, mapperMethod);\n    }\n    return mapperMethod;\n  }\n\n}\n```\n## 时序图\n![image](/images/server/mybatis/mapper.png)\n\n## 总结\n* Mapper接口的实现类是Mybatis生成的代理类`MapperProxy.java`，所有接口的代理类是通过`MapperProxyFactory.java` 方法来生成的，这里可以看到Mybatis的高明之处就是所有Mapper接口的代理类都是通过`MapperProxy.java`来实现\n* 因为是Mapper接口，所以Mybatis代理类的实现运用的是JDK的动态代理","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(四)构建SqlSession","url":"/2018/11/22/backend/mybatis/sourceCodeAnalysis/Mybatis源码(四)构建SqlSession/","content":"## 前言\n有了SqlSessionFactory会话工厂 这个类之后，就可以通过`sqlSessionFactory.openSession();`来生成`SqlSession`了\n```java\n// 读取配置文件\nFile file = new File(\"src/test/java/resources/mybatis-config.xml\");\nInputStream inputStream = new FileInputStream(file);\n// 构建SqlSessionFactory\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n// 得到SqlSession\nSqlSession sqlSession = sqlSessionFactory.openSession();\n// 得到Mapper\nUserMapper userMapper = sqlSession.getMapper(UserMapper.class);\nSystem.out.println(userMapper.selectByPrimaryKey(1));\n```\n\n## SqlSession 简介\nSqlsession对应着一次数据库会话。由于数据库会话不是永久的，因此Sqlsession的生命周期也不应该是永久的，相反，在你每次访问数据库时都需要创建它（当然并不是说在Sqlsession里只能执行一次sql，你可以执行多次，当一旦关闭了Sqlsession就需要重新创建它）。创建Sqlsession的地方只有一个，那就是SqlsessionFactory的openSession方法\n\n\n\n## 构建 SqlSession\n* `SqlSession.java`\n```java\n/**\n * 这是MyBatis主要的一个类，用来执行SQL，获取映射器，管理事务\n * The primary Java interface for working with MyBatis.\n * Through this interface you can execute commands, get mappers and manage transactions.\n *\n * @author Clinton Begin\n */\npublic interface SqlSession extends Closeable {\n\n  // 语句执行方法\n  // 这些方法被用来执行SELECT，INSERT，UPDATE和DELETE语句。\n  /**\n   * Retrieve a single row mapped from the statement key\n   * 获取一条记录\n   * @param <T> the returned object type\n   * @param statement\n   * @return Mapped object\n   */\n  <T> T selectOne(String statement);\n\n  /**\n   * Retrieve a single row mapped from the statement key and parameter.\n   * 获取一条记录\n   * @param <T> the returned object type\n   * @param statement Unique identifier matching the statement to use.\n   * @param parameter A parameter object to pass to the statement.\n   * @return Mapped object\n   */\n  <T> T selectOne(String statement, Object parameter);\n\n  /**\n   * Retrieve a list of mapped objects from the statement key and parameter.\n   * 获取多条记录\n   * @param <E> the returned list element type\n   * @param statement Unique identifier matching the statement to use.\n   * @return List of mapped object\n   */\n  <E> List<E> selectList(String statement);\n\n  /**\n   * Retrieve a list of mapped objects from the statement key and parameter.\n   * 获取多条记录\n   * @param <E> the returned list element type\n   * @param statement Unique identifier matching the statement to use.\n   * @param parameter A parameter object to pass to the statement.\n   * @return List of mapped object\n   */\n  <E> List<E> selectList(String statement, Object parameter);\n\n  /**\n   * Retrieve a list of mapped objects from the statement key and parameter,\n   * within the specified row bounds.\n   * 获取多条记录,加上分页\n   * @param <E> the returned list element type\n   * @param statement Unique identifier matching the statement to use.\n   * @param parameter A parameter object to pass to the statement.\n   * @param rowBounds  Bounds to limit object retrieval\n   * @return List of mapped object\n   */\n  <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds);\n\n  /**\n   * The selectMap is a special case in that it is designed to convert a list\n   * of results into a Map based on one of the properties in the resulting\n   * objects.\n   * Eg. Return a of Map[Integer,Author] for selectMap(\"selectAuthors\",\"id\")\n   * 获取多条记录,并存入Map\n   * @param <K> the returned Map keys type\n   * @param <V> the returned Map values type\n   * @param statement Unique identifier matching the statement to use.\n   * @param mapKey The property to use as key for each value in the list.\n   * @return Map containing key pair data.\n   */\n  <K, V> Map<K, V> selectMap(String statement, String mapKey);\n\n  /**\n   * The selectMap is a special case in that it is designed to convert a list\n   * of results into a Map based on one of the properties in the resulting\n   * objects.\n   * 获取多条记录,并存入Map\n   * @param <K> the returned Map keys type\n   * @param <V> the returned Map values type\n   * @param statement Unique identifier matching the statement to use.\n   * @param parameter A parameter object to pass to the statement.\n   * @param mapKey The property to use as key for each value in the list.\n   * @return Map containing key pair data.\n   */\n  <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey);\n\n  /**\n   * The selectMap is a special case in that it is designed to convert a list\n   * of results into a Map based on one of the properties in the resulting\n   * objects.\n   * 获取多条记录,加上分页,并存入Map\n   * @param <K> the returned Map keys type\n   * @param <V> the returned Map values type\n   * @param statement Unique identifier matching the statement to use.\n   * @param parameter A parameter object to pass to the statement.\n   * @param mapKey The property to use as key for each value in the list.\n   * @param rowBounds  Bounds to limit object retrieval\n   * @return Map containing key pair data.\n   */\n  <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);\n\n  /**\n   * Retrieve a single row mapped from the statement key and parameter\n   * using a {@code ResultHandler}.\n   * 获取一条记录,并转交给ResultHandler处理\n   * @param statement Unique identifier matching the statement to use.\n   * @param parameter A parameter object to pass to the statement.\n   * @param handler ResultHandler that will handle each retrieved row\n   * @return Mapped object\n   */\n  void select(String statement, Object parameter, ResultHandler handler);\n\n  /**\n   * Retrieve a single row mapped from the statement\n   * using a {@code ResultHandler}.\n   * 获取一条记录,并转交给ResultHandler处理\n   * @param statement Unique identifier matching the statement to use.\n   * @param handler ResultHandler that will handle each retrieved row\n   * @return Mapped object\n   */\n  void select(String statement, ResultHandler handler);\n\n  /**\n   * Retrieve a single row mapped from the statement key and parameter\n   * using a {@code ResultHandler} and {@code RowBounds}\n   * 获取一条记录,加上分页,并转交给ResultHandler处理\n   * @param statement Unique identifier matching the statement to use.\n   * @param rowBounds RowBound instance to limit the query results\n   * @param handler ResultHandler that will handle each retrieved row\n   * @return Mapped object\n   */\n  void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);\n\n  /**\n   * Execute an insert statement.\n   * 插入记录\n   * @param statement Unique identifier matching the statement to execute.\n   * @return int The number of rows affected by the insert.\n   */\n  int insert(String statement);\n\n  /**\n   * Execute an insert statement with the given parameter object. Any generated\n   * autoincrement values or selectKey entries will modify the given parameter\n   * object properties. Only the number of rows affected will be returned.\n   * 插入记录\n   * @param statement Unique identifier matching the statement to execute.\n   * @param parameter A parameter object to pass to the statement.\n   * @return int The number of rows affected by the insert.\n   */\n  int insert(String statement, Object parameter);\n\n  /**\n   * Execute an update statement. The number of rows affected will be returned.\n   * 更新记录\n   * @param statement Unique identifier matching the statement to execute.\n   * @return int The number of rows affected by the update.\n   */\n  int update(String statement);\n\n  /**\n   * Execute an update statement. The number of rows affected will be returned.\n   * 更新记录\n   * @param statement Unique identifier matching the statement to execute.\n   * @param parameter A parameter object to pass to the statement.\n   * @return int The number of rows affected by the update.\n   */\n  int update(String statement, Object parameter);\n\n  /**\n   * Execute a delete statement. The number of rows affected will be returned.\n   * 删除记录\n   * @param statement Unique identifier matching the statement to execute.\n   * @return int The number of rows affected by the delete.\n   */\n  int delete(String statement);\n\n  /**\n   * Execute a delete statement. The number of rows affected will be returned.\n   * 删除记录\n   * @param statement Unique identifier matching the statement to execute.\n   * @param parameter A parameter object to pass to the statement.\n   * @return int The number of rows affected by the delete.\n   */\n  int delete(String statement, Object parameter);\n\n  //以下是事务控制方法,commit,rollback\n  /**\n   * Flushes batch statements and commits database connection.\n   * Note that database connection will not be committed if no updates/deletes/inserts were called.\n   * To force the commit call {@link SqlSession#commit(boolean)}\n   */\n  void commit();\n\n  /**\n   * Flushes batch statements and commits database connection.\n   * @param force forces connection commit\n   */\n  void commit(boolean force);\n\n  /**\n   * Discards pending batch statements and rolls database connection back.\n   * Note that database connection will not be rolled back if no updates/deletes/inserts were called.\n   * To force the rollback call {@link SqlSession#rollback(boolean)}\n   */\n  void rollback();\n\n  /**\n   * Discards pending batch statements and rolls database connection back.\n   * Note that database connection will not be rolled back if no updates/deletes/inserts were called.\n   * @param force forces connection rollback\n   */\n  void rollback(boolean force);\n\n  /**\n   * Flushes batch statements.\n   * 刷新批处理语句,返回批处理结果\n   * @return BatchResult list of updated records\n   * @since 3.0.6\n   */\n  List<BatchResult> flushStatements();\n\n  /**\n   * Closes the session\n   * 关闭Session\n   */\n  @Override\n  void close();\n\n  /**\n   * Clears local session cache\n   * 清理Session缓存\n   */\n  void clearCache();\n\n  /**\n   * Retrieves current configuration\n   * 得到配置\n   * @return Configuration\n   */\n  Configuration getConfiguration();\n\n  /**\n   * Retrieves a mapper.\n   * 得到映射器\n   * 这个巧妙的使用了泛型，使得类型安全\n   * 到了MyBatis 3，还可以用注解,这样xml都不用写了\n   * @param <T> the mapper type\n   * @param type Mapper interface class\n   * @return a mapper bound to this SqlSession\n   */\n  <T> T getMapper(Class<T> type);\n\n  /**\n   * Retrieves inner database connection\n   * 得到数据库连接\n   * @return Connection\n   */\n  Connection getConnection();\n}\n```\n\n* `DefaultSqlSession.java` 是 `SqlSession.java` 接口的默认实现，从`DefaultSqlSessionFactory`构建的是`DefaultSqlSession`, 查看`DefaultSqlSession.java`类成员又可以发现Configuration的影子，Executor成员是MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护\n\n```java\n/**\n * 默认SqlSession\n * @author Clinton Begin\n */\npublic class DefaultSqlSession implements SqlSession {\n\n  private Configuration configuration;\n  private Executor executor;\n\n  private boolean autoCommit;\n  private boolean dirty;\n  \n  public DefaultSqlSession(Configuration configuration, Executor executor, boolean autoCommit) {\n    this.configuration = configuration;\n    this.executor = executor;\n    this.dirty = false;\n    this.autoCommit = autoCommit;\n  }\n\n  public DefaultSqlSession(Configuration configuration, Executor executor) {\n    this(configuration, executor, false);\n  }\n\n  @Override\n  public <T> T selectOne(String statement) {\n    return this.<T>selectOne(statement, null);\n  }\n\n  // 核心selectOne\n  @Override\n  public <T> T selectOne(String statement, Object parameter) {\n    // Popular vote was to return null on 0 results and throw exception on too many.\n    // 转而去调用selectList,很简单的，如果得到0条则返回null，得到1条则返回1条，得到多条报TooManyResultsException错\n    List<T> list = this.<T>selectList(statement, parameter);\n    if (list.size() == 1) {\n      return list.get(0);\n    } else if (list.size() > 1) {\n      throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());\n    } else {\n      return null;\n    }\n  }\n\n  @Override\n  public <K, V> Map<K, V> selectMap(String statement, String mapKey) {\n    return this.selectMap(statement, null, mapKey, RowBounds.DEFAULT);\n  }\n\n  @Override\n  public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey) {\n    return this.selectMap(statement, parameter, mapKey, RowBounds.DEFAULT);\n  }\n\n  // 核心selectMap\n  @Override\n  public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {\n    //转而去调用selectList\n    final List<?> list = selectList(statement, parameter, rowBounds);\n    final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey,\n        configuration.getObjectFactory(), configuration.getObjectWrapperFactory());\n    final DefaultResultContext context = new DefaultResultContext();\n    for (Object o : list) {\n      // 循环用DefaultMapResultHandler处理每条记录\n      context.nextResultObject(o);\n      mapResultHandler.handleResult(context);\n    }\n    // 注意这个DefaultMapResultHandler里面存了所有已处理的记录(内部实现可能就是一个Map)，最后再返回一个Map\n    return mapResultHandler.getMappedResults();\n  }\n\n  @Override\n  public <E> List<E> selectList(String statement) {\n    return this.selectList(statement, null);\n  }\n\n  @Override\n  public <E> List<E> selectList(String statement, Object parameter) {\n    return this.selectList(statement, parameter, RowBounds.DEFAULT);\n  }\n\n  // 核心selectList\n  @Override\n  public <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {\n    try {\n      // 根据statement id找到对应的MappedStatement\n      MappedStatement ms = configuration.getMappedStatement(statement);\n      // 转而用执行器来查询结果,注意这里传入的ResultHandler是null\n      return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error querying database.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n\n  @Override\n  public void select(String statement, Object parameter, ResultHandler handler) {\n    select(statement, parameter, RowBounds.DEFAULT, handler);\n  }\n\n  @Override\n  public void select(String statement, ResultHandler handler) {\n    select(statement, null, RowBounds.DEFAULT, handler);\n  }\n\n  //核心select,带有ResultHandler，和selectList代码差不多的，区别就一个ResultHandler\n  @Override\n  public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {\n    try {\n      MappedStatement ms = configuration.getMappedStatement(statement);\n      executor.query(ms, wrapCollection(parameter), rowBounds, handler);\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error querying database.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n\n  @Override\n  public int insert(String statement) {\n    return insert(statement, null);\n  }\n\n  @Override\n  public int insert(String statement, Object parameter) {\n    //insert也是调用update\n    return update(statement, parameter);\n  }\n\n  @Override\n  public int update(String statement) {\n    return update(statement, null);\n  }\n\n  // 核心update\n  @Override\n  public int update(String statement, Object parameter) {\n    try {\n      // 每次要更新之前，dirty标志设为true\n      dirty = true;\n      MappedStatement ms = configuration.getMappedStatement(statement);\n      // 转而用执行器来update结果\n      return executor.update(ms, wrapCollection(parameter));\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error updating database.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n\n  @Override\n  public int delete(String statement) {\n    //delete也是调用update\n    return update(statement, null);\n  }\n\n  @Override\n  public int delete(String statement, Object parameter) {\n    return update(statement, parameter);\n  }\n\n  @Override\n  public void commit() {\n    commit(false);\n  }\n\n  // 核心commit\n  @Override\n  public void commit(boolean force) {\n    try {\n      // 转而用执行器来commit\n      executor.commit(isCommitOrRollbackRequired(force));\n      // 每次commit之后，dirty标志设为false\n      dirty = false;\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error committing transaction.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n\n  @Override\n  public void rollback() {\n    rollback(false);\n  }\n\n  // 核心rollback\n  @Override\n  public void rollback(boolean force) {\n    try {\n      // 转而用执行器来rollback\n      executor.rollback(isCommitOrRollbackRequired(force));\n      // 每次rollback之后，dirty标志设为false\n      dirty = false;\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error rolling back transaction.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n\n  // 核心flushStatements\n  @Override\n  public List<BatchResult> flushStatements() {\n    try {\n      // 转而用执行器来flushStatements\n      return executor.flushStatements();\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error flushing statements.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n\n  // 核心close\n  @Override\n  public void close() {\n    try {\n      // 转而用执行器来close\n      executor.close(isCommitOrRollbackRequired(false));\n      // 每次close之后，dirty标志设为false\n      dirty = false;\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n\n  @Override\n  public Configuration getConfiguration() {\n    return configuration;\n  }\n\n  @Override\n  public <T> T getMapper(Class<T> type) {\n    // 最后会去调用MapperRegistry.getMapper\n    return configuration.<T>getMapper(type, this);\n  }\n\n  @Override\n  public Connection getConnection() {\n    try {\n      return executor.getTransaction().getConnection();\n    } catch (SQLException e) {\n      throw ExceptionFactory.wrapException(\"Error getting a new connection.  Cause: \" + e, e);\n    }\n  }\n\n  // 核心clearCache\n  @Override\n  public void clearCache() {\n    // 转而用执行器来clearLocalCache\n    executor.clearLocalCache();\n  }\n\n  // 检查是否需要强制commit或rollback\n  private boolean isCommitOrRollbackRequired(boolean force) {\n    return (!autoCommit && dirty) || force;\n  }\n\n  // 把参数包装成Collection\n  private Object wrapCollection(final Object object) {\n    if (object instanceof Collection) {\n      // 参数若是Collection型，做collection标记\n      StrictMap<Object> map = new StrictMap<Object>();\n      map.put(\"collection\", object);\n      if (object instanceof List) {\n        // 参数若是List型，做list标记\n        map.put(\"list\", object);\n      }\n      return map;      \n    } else if (object != null && object.getClass().isArray()) {\n      // 参数若是数组型，，做array标记\n      StrictMap<Object> map = new StrictMap<Object>();\n      map.put(\"array\", object);\n      return map;\n    }\n    // 参数若不是集合型，直接返回原来值\n    return object;\n  }\n\n  // 严格的Map，如果找不到对应的key，直接抛BindingException例外，而不是返回null\n  public static class StrictMap<V> extends HashMap<String, V> {\n\n    private static final long serialVersionUID = -5741767162221585340L;\n\n    @Override\n    public V get(Object key) {\n      if (!super.containsKey(key)) {\n        throw new BindingException(\"Parameter '\" + key + \"' not found. Available parameters are \" + this.keySet());\n      }\n      return super.get(key);\n    }\n\n  }\n\n}\n```\n## 时序图\n![iamge](/images/server/mybatis/SqlSessionFactory.png)\n\n## 总结\n* 通过源码可以看到`SqlSession`就像是公司的前台人员，正在干活的是 `Executor` ，人家来找公司谈合作，首先先和前台人员联系，然后再通过前台将人指到真正的实施者\n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(三)构建SqlSessionFactory会话工厂","url":"/2018/11/22/backend/mybatis/sourceCodeAnalysis/Mybatis源码(三)构建SqlSessionFactory会话工厂/","content":"## 前言\n有了Mybatis整体脉络概念之后，现在就是来构建 SqlSessionFactory会话工厂 这个类了\n```java\n// 读取配置文件\nFile file = new File(\"src/test/java/resources/mybatis-config.xml\");\nInputStream inputStream = new FileInputStream(file);\n// 构建SqlSessionFactory\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n// 得到SqlSession\nSqlSession sqlSession = sqlSessionFactory.openSession();\n// 得到Mapper\nUserMapper userMapper = sqlSession.getMapper(UserMapper.class);\nSystem.out.println(userMapper.selectByPrimaryKey(1));\n```\n## SqlSessionFactory 简介\nSqlSessionFactory 是Mybatis的关键对象， 是创建SqlSession的工厂，工厂模式，SqlSessionFactory 由 SqlSessionFactoryBuilder 构建，每一个MyBatis的应用程序都以一个SqlSessionFactory对象的实例为核心\n\n![logo](/images/server/mybatis/SqlSessionFactory.jpg)\n\nSqlSessionFactory是个接口，它有两个实现类 `DefaultSqlSessionFactory.java`, `SqlSessionManager.java` ，Mybatis使用的是`DefaultSqlSessionFactory.java` 来作为其默认实现\n```java\npublic interface SqlSessionFactory {\n  SqlSession openSession();\n  SqlSession openSession(boolean autoCommit);\n  SqlSession openSession(Connection connection);\n  SqlSession openSession(TransactionIsolationLevel level);\n  SqlSession openSession(ExecutorType execType);\n  SqlSession openSession(ExecutorType execType, boolean autoCommit);\n  SqlSession openSession(ExecutorType execType, TransactionIsolationLevel level);\n  SqlSession openSession(ExecutorType execType, Connection connection);\n  Configuration getConfiguration();\n}\n```\n\n\n## 构建 SqlSessionFactory \n* SqlSessionFactory 是通过`SqlSessionFactoryBuilder.java` 来构建的，build方法传入了一个配置文件的输入流\n\n* 打开`SqlSessionFactoryBuilder.java`类，可以发现都是build的重载方法，主要有有俩种配置文件的输入方式，一个是Reader ，另一个是通过InputStream，可以看到里面是通过`XMLConfigBuilder.java`来解析xml文件的，\n```java\npublic class SqlSessionFactoryBuilder {\n\n  public SqlSessionFactory build(Reader reader) {\n    return build(reader, null, null);\n  }\n\n  public SqlSessionFactory build(Reader reader, String environment) {\n    return build(reader, environment, null);\n  }\n\n  public SqlSessionFactory build(Reader reader, Properties properties) {\n    return build(reader, null, properties);\n  }\n\n  // 第4种方法是最常用的，它使用了一个参照了XML文档或更特定的SqlMapConfig.xml文件的Reader实例。\n  public SqlSessionFactory build(Reader reader, String environment, Properties properties) {\n    try {\n      // 委托XMLConfigBuilder来解析xml文件，并构建\n      XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);\n      return build(parser.parse());\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error building SqlSession.\", e);\n    } finally {\n      ErrorContext.instance().reset();\n      try {\n        reader.close();\n      } catch (IOException e) {\n        // Intentionally ignore. Prefer previous error.\n      }\n    }\n  }\n\n  //以下3个方法都是调用下面第8种方法\n  public SqlSessionFactory build(InputStream inputStream) {\n    return build(inputStream, null, null);\n  }\n\n  public SqlSessionFactory build(InputStream inputStream, String environment) {\n    return build(inputStream, environment, null);\n  }\n\n  public SqlSessionFactory build(InputStream inputStream, Properties properties) {\n    return build(inputStream, null, properties);\n  }\n\n  // 第8种方法和第4种方法差不多，Reader换成了InputStream\n  // 可选的参数是environment和properties。Environment决定加载哪种环境(开发环境/生产环境)，包括数据源和事务管理器。\n  // 如果使用properties，那么就会加载那些properties（属性配置文件），那些属性可以用${propName}语法形式多次用在配置文件中。和Spring很像，一个思想？\n  public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) {\n    try {\n      // 委托XMLConfigBuilder来解析xml文件\n      XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);\n      return build(parser.parse());\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error building SqlSession.\", e);\n    } finally {\n      ErrorContext.instance().reset();\n      try {\n        inputStream.close();\n      } catch (IOException e) {\n        // Intentionally ignore. Prefer previous error.\n      }\n    }\n  }\n    \n  //最后一个build方法使用了一个Configuration作为参数,并返回DefaultSqlSessionFactory\n  public SqlSessionFactory build(Configuration config) {\n    return new DefaultSqlSessionFactory(config);\n  }\n\n}\n```\n* 打开`XMLConfigBuilder.java`\n```java\n/**\n * XML配置构建器，建造者模式,继承BaseBuilder\n * @author Clinton Begin\n */\npublic class XMLConfigBuilder extends BaseBuilder {\n\n  // 是否已解析，XPath解析器\n  private boolean parsed;\n  // XPath解析器\n  private XPathParser parser;\n  // 环境\n  private String environment;\n\n  // 以下3个一组\n  public XMLConfigBuilder(Reader reader) {\n    this(reader, null, null);\n  }\n\n  public XMLConfigBuilder(Reader reader, String environment) {\n    this(reader, environment, null);\n  }\n\n  // 构造函数，转换成XPathParser再去调用构造函数\n  public XMLConfigBuilder(Reader reader, String environment, Properties props) {\n    // 构造一个需要验证，XMLMapperEntityResolver的XPathParser\n    this(new XPathParser(reader, true, props, new XMLMapperEntityResolver()), environment, props);\n  }\n\n  // 以下3个一组\n  public XMLConfigBuilder(InputStream inputStream) {\n    this(inputStream, null, null);\n  }\n\n  public XMLConfigBuilder(InputStream inputStream, String environment) {\n    this(inputStream, environment, null);\n  }\n\n  public XMLConfigBuilder(InputStream inputStream, String environment, Properties props) {\n    this(new XPathParser(inputStream, true, props, new XMLMapperEntityResolver()), environment, props);\n  }\n\n  // 上面6个构造函数最后都合流到这个函数，传入XPathParser\n  private XMLConfigBuilder(XPathParser parser, String environment, Properties props) {\n    // 首先调用父类初始化Configuration\n    super(new Configuration());\n    // 错误上下文设置成SQL Mapper Configuration(XML文件配置),以便后面出错了报错用\n    ErrorContext.instance().resource(\"SQL Mapper Configuration\");\n    // 将Properties全部设置到Configuration里面去\n    this.configuration.setVariables(props);\n    this.parsed = false;\n    this.environment = environment;\n    this.parser = parser;\n  }\n\n  // 解析配置\n  public Configuration parse() {\n    // 如果已经解析过了，报错\n    if (parsed) {\n      throw new BuilderException(\"Each XMLConfigBuilder can only be used once.\");\n    }\n    parsed = true;\n//  <?xml version=\"1.0\" encoding=\"UTF-8\" ?> \n//  <!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \n//  \"http://mybatis.org/dtd/mybatis-3-config.dtd\"> \n//  <configuration> \n//  <environments default=\"development\"> \n//  <environment id=\"development\"> \n//  <transactionManager type=\"JDBC\"/> \n//  <dataSource type=\"POOLED\"> \n//  <property name=\"driver\" value=\"${driver}\"/> \n//  <property name=\"url\" value=\"${url}\"/> \n//  <property name=\"username\" value=\"${username}\"/> \n//  <property name=\"password\" value=\"${password}\"/> \n//  </dataSource> \n//  </environment> \n//  </environments> \n//  <mappers>  \n//  <mapper resource=\"org/mybatis/ex ample/BlogMapper.xml\"/> \n//  </mappers>  \n//  </configuration>\n    \n    // 根节点是configuration\n    parseConfiguration(parser.evalNode(\"/configuration\"));\n    return configuration;\n  }\n\n  // 解析配置\n  private void parseConfiguration(XNode root) {\n    try {\n      // 分步骤解析\n      //issue #117 read properties first\n      //1.properties\n      propertiesElement(root.evalNode(\"properties\"));\n      // 2.类型别名\n      typeAliasesElement(root.evalNode(\"typeAliases\"));\n      // 3.插件\n      pluginElement(root.evalNode(\"plugins\"));\n      // 4.对象工厂\n      objectFactoryElement(root.evalNode(\"objectFactory\"));\n      // 5.对象包装工厂\n      objectWrapperFactoryElement(root.evalNode(\"objectWrapperFactory\"));\n      // 6.设置\n      settingsElement(root.evalNode(\"settings\"));\n      // read it after objectFactory and objectWrapperFactory issue #631\n      // 7.环境\n      environmentsElement(root.evalNode(\"environments\"));\n      // 8.databaseIdProvider\n      databaseIdProviderElement(root.evalNode(\"databaseIdProvider\"));\n      // 9.类型处理器\n      typeHandlerElement(root.evalNode(\"typeHandlers\"));\n      // 10.映射器\n      mapperElement(root.evalNode(\"mappers\"));\n    } catch (Exception e) {\n      throw new BuilderException(\"Error parsing SQL Mapper Configuration. Cause: \" + e, e);\n    }\n  }\n  \n  \n  ..... 未完\n```\n* XMLMapperBuilder.java 这个类是解析sql映射文件的 ，下面是核心代码， 可以看到Mybatis是将`select|insert|update|delete`这些都作为一个单独的节点\n```java\n  // 解析\n  public void parse() {\n    // 如果没有加载过再加载，防止重复加载\n    if (!configuration.isResourceLoaded(resource)) {\n      // 解析mapper节点\n      configurationElement(parser.evalNode(\"/mapper\"));\n      // 标记一下，已经加载过了\n      configuration.addLoadedResource(resource);\n      // 绑定映射器到namespace\n      bindMapperForNamespace();\n    }\n    parsePendingResultMaps();\n    parsePendingChacheRefs();\n    parsePendingStatements();\n  }\n\n  public XNode getSqlFragment(String refid) {\n    return sqlFragments.get(refid);\n  }\n\n\t//配置mapper元素\n//\t<mapper namespace=\"org.mybatis.example.BlogMapper\">\n//\t  <select id=\"selectBlog\" parameterType=\"int\" resultType=\"Blog\">\n//\t    select * from Blog where id = #{id}\n//\t  </select>\n//\t</mapper>\n  private void configurationElement(XNode context) {\n    try {\n      //1.配置namespace\n      String namespace = context.getStringAttribute(\"namespace\");\n      if (namespace.equals(\"\")) {\n        throw new BuilderException(\"Mapper's namespace cannot be empty\");\n      }\n      builderAssistant.setCurrentNamespace(namespace);\n      //2.配置cache-ref\n      cacheRefElement(context.evalNode(\"cache-ref\"));\n      //3.配置cache\n      cacheElement(context.evalNode(\"cache\"));\n      //4.配置parameterMap(已经废弃,老式风格的参数映射)\n      parameterMapElement(context.evalNodes(\"/mapper/parameterMap\"));\n      //5.配置resultMap(高级功能)\n      resultMapElements(context.evalNodes(\"/mapper/resultMap\"));\n      //6.配置sql(定义可重用的 SQL 代码段)\n      sqlElement(context.evalNodes(\"/mapper/sql\"));\n      //7.配置select|insert|update|delete TODO\n      buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));\n    } catch (Exception e) {\n      throw new BuilderException(\"Error parsing Mapper XML. Cause: \" + e, e);\n    }\n  }\n```\n* `DefaultSqlSessionFactory.java` 是构造SqlSession的默认实现，可以看到实现都是通过`configuration`该对象来获取配置信息，从而构造SqlSession\n```java\n/**\n * 默认实现的SqlSessionFactory\n * @author Clinton Begin\n */\npublic class DefaultSqlSessionFactory implements SqlSessionFactory {\n\n  private final Configuration configuration;\n\n  public DefaultSqlSessionFactory(Configuration configuration) {\n    this.configuration = configuration;\n  }\n\n  // 最终都会调用2种方法：openSessionFromDataSource,openSessionFromConnection\n  // 以下6个方法都会调用openSessionFromDataSource\n  @Override\n  public SqlSession openSession() {\n    return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);\n  }\n\n  @Override\n  public SqlSession openSession(boolean autoCommit) {\n    return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, autoCommit);\n  }\n\n  @Override\n  public SqlSession openSession(ExecutorType execType) {\n    return openSessionFromDataSource(execType, null, false);\n  }\n\n  @Override\n  public SqlSession openSession(TransactionIsolationLevel level) {\n    return openSessionFromDataSource(configuration.getDefaultExecutorType(), level, false);\n  }\n\n  @Override\n  public SqlSession openSession(ExecutorType execType, TransactionIsolationLevel level) {\n    return openSessionFromDataSource(execType, level, false);\n  }\n\n  @Override\n  public SqlSession openSession(ExecutorType execType, boolean autoCommit) {\n    return openSessionFromDataSource(execType, null, autoCommit);\n  }\n\n  //以下2个方法都会调用openSessionFromConnection\n  @Override\n  public SqlSession openSession(Connection connection) {\n    return openSessionFromConnection(configuration.getDefaultExecutorType(), connection);\n  }\n\n  @Override\n  public SqlSession openSession(ExecutorType execType, Connection connection) {\n    return openSessionFromConnection(execType, connection);\n  }\n\n  @Override\n  public Configuration getConfiguration() {\n    return configuration;\n  }\n\n  private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {\n    Transaction tx = null;\n    try {\n      final Environment environment = configuration.getEnvironment();\n      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n      // 通过事务工厂来产生一个事务\n      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n      // 生成一个执行器(事务包含在执行器里)\n      final Executor executor = configuration.newExecutor(tx, execType);\n      // 然后产生一个DefaultSqlSession\n      return new DefaultSqlSession(configuration, executor, autoCommit);\n    } catch (Exception e) {\n      // 如果打开事务出错，则关闭它\n      closeTransaction(tx); // may have fetched a connection so lets call close()\n      throw ExceptionFactory.wrapException(\"Error opening session.  Cause: \" + e, e);\n    } finally {\n      //最后清空错误上下文\n      ErrorContext.instance().reset();\n    }\n  }\n\n  private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {\n    try {\n      boolean autoCommit;\n      try {\n        autoCommit = connection.getAutoCommit();\n      } catch (SQLException e) {\n        // Failover to true, as most poor drivers\n        // or databases won't support transactions\n        autoCommit = true;\n      }      \n      final Environment environment = configuration.getEnvironment();\n      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n      final Transaction tx = transactionFactory.newTransaction(connection);\n      final Executor executor = configuration.newExecutor(tx, execType);\n      return new DefaultSqlSession(configuration, executor, autoCommit);\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException(\"Error opening session.  Cause: \" + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n  }\n\n  private TransactionFactory getTransactionFactoryFromEnvironment(Environment environment) {\n    // 如果没有配置事务工厂，则返回托管事务工厂\n    if (environment == null || environment.getTransactionFactory() == null) {\n      return new ManagedTransactionFactory();\n    }\n    return environment.getTransactionFactory();\n  }\n\n  private void closeTransaction(Transaction tx) {\n    if (tx != null) {\n      try {\n        tx.close();\n      } catch (SQLException ignore) {\n        // Intentionally ignore. Prefer previous error.\n      }\n    }\n  }\n}\n```\n## 时序图\n![iamge](/images/server/mybatis/SqlSessionFactory.png)\n\n## 总结\n1. 涉及到两种设计模式：工厂模式(SqlSessionFactory.java)及建造者模式(XMLConfigBuilder.java)，通过命名可以发现其设计思想，学习大佬的命名规范\n2. SqlSessionFactory接口的默认实现是`DefaultSqlSessionFactory.java` DefaultSqlSessionFactory只有一个成员变量 Configuration ，所以构建SqlSessionFactory其实就是解析xml文件，构建Configuration的过程，Configuration是Mybatis的大头，所有的配置信息都存在里面\n3. 通过其运行流程可以看到每个类都有其独有的用途，各司其职，有生产SqlSession的类，又解析xml的类，有生产SqlSessionFactory的类，各个模块相互配合\n\n\n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(二)Mybatis框架架构","url":"/2018/11/22/backend/mybatis/sourceCodeAnalysis/Mybatis源码(二)Mybatis框架架构/","content":"## 引言\n本文主要讲解Mybatis的整体程序设计，理清楚框架的主要脉络，这样才能对源码有个整体的了解，先主干后分支，如果没有这些概念那么直接看源码的话肯定会很吃力的\n\n## 整体设计\n整体架构图\n![logo](/images/server/mybatis/mybatis-framework.png) \n\n### 运作流程\n#### (1)、加载配置并初始化\nMybatis配置包括两种配置，一种是Mybatis自身的框架配置，另一种是sql映射配置，Mybatis自身的框架配置有两种方式可以配置， 一处是配置文件，另一处是通过Java注解进行配置， 比如说Spring Boot项目整合Mybatis都是通过Java代码的方式来进行配置\n\n初始化是初始化框架基本配置，然后解析sql映射文件，将SQL的配置信息加载成为一个个MappedStatement对象（包括了传入参数映射配置、执行的SQL语句、结果映射配置），存储在内存中。\n\n#### (2)、接收调用请求\n通过接口来接收调用请求，真实企业环境一般都是通过接口的方式来进行调用，通过该接口将请求传递给下层的请求处理层进行处理。\n> 传统Mybatis工作模式，是创建一个和数据库打交道的SqlSession对象，然后根据Statement Id 和参数来操作数据库，这种方式固然很简单和实用，但是它不符合面向对象语言的概念和面向接口编程的编程习惯。由于面向接口的编程是面向对象的大趋势，MyBatis 为了适应这一趋势，增加了第二种使用MyBatis 支持接口（Interface）调用方式。\n\n![image](/images/server/mybatis/mybatis-call2.png)\n\n> 接口工作模式，MyBatis 将配置文件中的每一个<mapper> 节点抽象为一个 Mapper 接口，而这个接口中声明的方法和跟<mapper> 节点中的<select|update|delete|insert> 节点项对应，即<select|update|delete|insert> 节点的id值为Mapper 接口中的方法名称，parameterType 值表示Mapper 对应方法的入参类型，而resultMap 值则对应了Mapper 接口表示的返回值类型或者返回结果集的元素类型。\n\n![image](/images/server/mybatis/mybatis-call1.png)\n\n#### (3)、处理操作请求\n处理操作包括参数映射，sql解析，sql执行操作\n\n#### (4)、返回请求结果\n将操作数据库的结果按照映射的配置进行转换，可以转换成HashMap、JavaBean或者基本数据类型，并将最终结果返回。\n\n\n## MyBatis的主要的核心部件\n![logo](/images/server/mybatis/mybatis-framework2.png) \n\n|    类名    |       描述       |\n|:-------|:------------- |\n|  SqlSession   |  作为MyBatis工作的主要顶层API，表示和数据库交互的会话，完成必要数据库增删改查功能     | \n|  Executor   |   MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护    | \n|  StatementHandler   |  封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、将Statement结果集转换成List集合。     | \n|  ParameterHandler   |  负责对用户传递的参数转换成JDBC Statement 所需要的参数     | \n|  ResultSetHandler   |  负责将JDBC返回的ResultSet结果集对象转换成List类型的集合     | \n|  TypeHandler   |  负责java数据类型和jdbc数据类型之间的映射和转换     | \n|  MappedStatement   | MappedStatement维护了一条select update delete insert节点的封装      | \n|  SqlSource   |   负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中并返回    | \n|  BoundSql   |   表示动态生成的SQL语句以及相应的参数信息    | \n|  Configuration   |  MyBatis所有的配置信息都维持在Configuration对象之中。     | \n\n\n\n参考：\n\nhttps://blog.csdn.net/luanlouis/article/details/40422941\n\nhttp://chenjc-it.iteye.com/blog/1460990\n","tags":["mybatis"],"categories":["服务器"]},{"title":"Mybatis源码(一)本地编译Mybatis的源码","url":"/2018/11/21/backend/mybatis/sourceCodeAnalysis/Mybatis源码(一)本地编译Mybatis的源码/","content":"## 引言\n在开发过程中，对于Mybatis框架一直都是在使用阶段，对于其底层实现的细节不是十分清楚，所以利用空余时间学习Mybatis的源码，学习其设计思想，看看大佬是怎样设计一个框架的，提升自己的代码能力\n\n## 下载源码\n|  地址 |       网站    |     \n|:-------|:------------- |\n|  中文官网  |     http://www.mybatis.org/mybatis-3/zh/index.html    |  \n|源码地址|https://github.com/mybatis/mybatis-3|\n\n> 下载完源码包后使用maven进行编译 `mvn clean install` 可以发现会报error\n\n* 查看`pom.xml` 发现又一个父级依赖\n\n```xml\n  <parent>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-parent</artifactId>\n    <version>33-SNAPSHOT</version>\n  </parent>\n```\n* 所以需要把这些依赖下载下来\n```xml\n// 下载代码\ngit clone https://github.com/mybatis/parent.git\n\n// 编译代码\nmvn clean install\n```\n\n* 父级依赖完成之后更改Mybatis的源码，注意版本号需要一致\n```xml\n<parent>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis-parent</artifactId>\n    <version>33-SNAPSHOT</version>\n    <relativePath>../parent/pom.xml</relativePath>\n  </parent>\n```\n* 解决部分插件版本问题\n\n告诉我们部分插件没有指定的相应的版本号，出于工程的稳定性考虑需要对使用的插件指定其版本号，并给出了合适的版本号，如图红色方框中的文字。我们只要在mybatisg工程的pom.xml文件中找到相对应的插件处添加<version>$NUM</version> 标签即可， $NUM代表具体的版本号。到这我们再执行mvn clean install 指令就可以将mybatis工程构建成功了。\n\n## 源码基本结构\n打开源码可以发现如下目录，通过包名就可以大概知道其模块功能\n\n![image](/images/server/mybatis/mybatis-source.jpg)\n\n## 解析\n以下章节将从下面的示例代码来一步步解析Mybatis的源码，分析其实现过程\n```java\n// 读取配置文件\nFile file = new File(\"src/test/java/resources/mybatis-config.xml\");\nInputStream inputStream = new FileInputStream(file);\n// 构建SqlSessionFactory会话工厂\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n// 构建SqlSession\nSqlSession sqlSession = sqlSessionFactory.openSession();\n// 通过SqlSession来获取Mapper\nUserMapper userMapper = sqlSession.getMapper(UserMapper.class);\nSystem.out.println(userMapper.selectByPrimaryKey(1));~\n```\n\n--------------------- \n参考：https://blog.csdn.net/yums467/article/details/52801288 \n\n\n","tags":["mybatis"],"categories":["服务器"]},{"title":"SpringBoot配置Mybatis多数据源","url":"/2018/11/09/backend/mybatis/SpringBoot配置Mybatis多数据源/","content":"### 背景\n同一个项目数据操作有时会涉及到多个数据库，所以需要在后台配置多个数据源，通过特定的设置选择指定的数据库\n\n### 目的\n可以配置多个数据源，项目默认使用master数据源，当有新的数据源需求时，可以通过注解的形式动态切换数据源\n\n### 实现\n源码: `https://github.com/songshuiyang/iframe`\n\n> `application.yml` 配置数据源\n```xml\nspring:\n  application:\n    name: iframe\n# 主数据库\nmaster:\n  datasource:\n    use-jndi: false\n    jndi-name: jdbc/datasource\n    url: jdbc:mysql://127.0.0.1:3306/iframe?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false\n    username: root\n    password: root\n    driver-class: com.mysql.jdbc.Driver\n    initial-size: 0\n    min-idle: 10\n    max-active: 100\n    max-wait: 20000\n# 从数据库\nslave:\n  datasource:\n    use-jndi: false\n    jndi-name: jdbc/datasource\n    url: jdbc:mysql://127.0.0.1:3306/iframe?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false\n    username: root\n    password: root\n    driver-class: com.mysql.jdbc.Driver\n    initial-size: 0\n    min-idle: 10\n    max-active: 100\n    max-wait: 20000\n```\n> `Config.java` 解析数据源配置\n\n```java\n/**\n * 继承TransactionManagementConfigurer可以自定义事务管理器\n * @author songsy\n * @Date 2018/11/7 17:09\n */\n@Configuration\n@EnableTransactionManagement\npublic class Config implements TransactionManagementConfigurer {\n\n    private static final Logger logger = LoggerFactory.getLogger(Config.class);\n\n    @Autowired\n    Environment env;\n\n    /**\n     * 实现接口 TransactionManagementConfigurer 方法，其返回值代表在拥有多个事务管理器的情况下默认使用的事务管理器\n     *\n     * @return\n     */\n    @Override\n    public PlatformTransactionManager annotationDrivenTransactionManager() {\n        return transactionManager();\n    }\n\n    /**\n     * 数据源\n     *\n     * @return\n     */\n    @Bean(name = \"dataSource\")\n    public DynamicDataSource dataSource() {\n        Map<Object, Object> targetDataSources = new HashMap<>();\n        for (String prefix : DATA_SOURCE_PREFIX) {\n            targetDataSources.put(prefix, createDataSource(prefix));\n        }\n        DynamicDataSource dynamicDataSource = new DynamicDataSource();\n        dynamicDataSource.setTargetDataSources(targetDataSources);\n        dynamicDataSource.setDefaultTargetDataSource(targetDataSources.get(MASTER_DATA_SOURCE_PREFIX));\n        return dynamicDataSource;\n    }\n\n    /**\n     * 创建事务管理器\n     *\n     * @return\n     */\n    @Bean\n    public PlatformTransactionManager transactionManager() {\n        DataSourceTransactionManager txManager = new DataSourceTransactionManager();\n        txManager.setDataSource(dataSource());\n        return txManager;\n    }\n\n    /**\n     * 创建数据源\n     *\n     * @param prefix\n     * @return\n     */\n    private DataSource createDataSource(String prefix) {\n        // 是否使用数据源\n        boolean useJndi = env.getProperty(prefix + \".\" + \"datasource.use-jndi\", Boolean.class, false);\n        // 数据源名称\n        String jndiName = env.getProperty(prefix + \".\" + \"datasource.jndi-name\", \"\");\n        // 数据库链接\n        String url = env.getProperty(prefix + \".\" + \"datasource.url\", \"\");\n        String username = env.getProperty(prefix + \".\" + \"datasource.username\", \"\");\n        String password = env.getProperty(prefix + \".\" + \"datasource.password\", \"\");\n        String driverClass = env.getProperty(prefix + \".\" + \"datasource.driver-class\", \"\");\n        // 数据源默认初始链接数\n        int initialSize = env.getProperty(prefix + \".\" + \"datasource.initial-size\", Integer.class,\n                DataSouceConstant.DEFAULT_DATASOURCE_INIT_SIZE);\n        // 数据源最大连接数\n        int maxActive = env.getProperty(prefix + \".\" + \"datasource.max-active\", Integer.class,\n                DataSouceConstant.DEFAULT_DATASOURCE_MAX_ACTIVE);\n        // 数据源最小连接数\n        int minIdle = env.getProperty(prefix + \".\" + \"datasource.min-idle\", Integer.class,\n                DataSouceConstant.DEFAULT_DATASOURCE_MIN_IDLE);\n        // 配置获取连接等待超时的时间\n        int maxWait = env.getProperty(prefix + \".\" + \"datasource.max-wait\", Integer.class,\n                DataSouceConstant.DEFAULT_DATASOURCE_MAX_WAIT);\n        if (useJndi) {\n            try {\n                logger.debug(\"get datasource from jndi - [{}].\", jndiName);\n                Context context = new InitialContext();\n                DataSource dataSource = (DataSource) context.lookup(jndiName);\n                return dataSource;\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        } else {\n            logger.debug(\"create druid datasource.\");\n            logger.debug(\"url - {}.\", url);\n            logger.debug(\"username - {}.\", username);\n            logger.debug(\"password - {}.\", password);\n            logger.debug(\"driverClass - {}.\", driverClass);\n            logger.debug(\"initialSize - {}.\", initialSize);\n            logger.debug(\"maxActive - {}.\", maxActive);\n            logger.debug(\"minIdle - {}.\", minIdle);\n\n            try {\n                DruidDataSource datasource = new DruidDataSource();\n                datasource.setUrl(url);\n                datasource.setDriverClassName(driverClass);\n                datasource.setUsername(username);\n                datasource.setPassword(password);\n                datasource.setInitialSize(initialSize);\n                datasource.setMaxActive(maxActive);\n                datasource.setMinIdle(minIdle);\n                datasource.setMaxWait(maxWait);\n                datasource.setFilters(\"stat,slf4j\");\n                datasource.setProxyFilters(getDruidFilters());\n                return datasource;\n            } catch (Exception e) {\n            }\n\n        }\n        return null;\n    }\n\n    public List<Filter> getDruidFilters() {\n        Slf4jLogFilter slf4jLogFilter = new Slf4jLogFilter();\n        slf4jLogFilter.setDataSourceLogEnabled(false);\n        slf4jLogFilter.setStatementLogEnabled(false);\n        slf4jLogFilter.setStatementExecutableSqlLogEnable(true);\n        slf4jLogFilter.setResultSetLogEnabled(false);\n        slf4jLogFilter.setResultSetCloseAfterLogEnabled(false);\n        slf4jLogFilter.setConnectionLogEnabled(false);\n        List<Filter> filters = new ArrayList<>();\n        filters.add(new StatFilter());\n        filters.add(slf4jLogFilter);\n        return filters;\n    }\n}\n```\n> 新增 `@BindingDataSources` 注解，通过该注解实现数据源切换\n\n```java\n/**\n * 绑定数据源注解\n * @author songsy\n * @Date 2018/11/7 17:33\n */\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface BindingDataSources {\n\n    String value() default \"master\";\n\n}\n```\n> 新增 `DynamicDataSource.java` 实现切换数据源\n\n```java\n/**\n * 继承AbstractRoutingDataSource实现determineCurrentLookupKey方法，该方法可以实现数据库的动态切换\n * @author songsy\n * @Date 2018/11/7 17:17\n */\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return DynamicDataSourceHolder.getDataSource();\n    }\n}\n\n```\n\n> 新增 `DynamicDataSourceHolder.java` 保存当前线程绑定的数据源信息\n```java\n/**\n * 保存当前线程绑定的数据源信息\n * @author songsy\n * @Date 2018/11/7 17:18\n */\npublic class DynamicDataSourceHolder {\n\n    private static final ThreadLocal<String> dataSourceHolder = new ThreadLocal<>();\n\n    public static void setDataSource(String dataSource) {\n        Assert.notNull(dataSource, \"dataSource cannot be null\");\n        dataSourceHolder.set(dataSource);\n    }\n\n    public static String getDataSource() {\n        return dataSourceHolder.get();\n    }\n\n    public static void removeDataSource() {\n        dataSourceHolder.remove();\n    }\n\n}\n```\n\n> 通过 `DynamicDataSourceAspect.java` AOP切面来获取数据源注解信息并设置到 ` private static final ThreadLocal<String> dataSourceHolder = new ThreadLocal<>();` 变量中，那么`determineCurrentLookupKey` 方法就可以根据当前线程数据源key值去动态切换数据源\n\n```java\n/**\n * 配置数据源切面\n * @author songsy\n * @Date 2018/11/7 17:35\n */\n@Aspect\n@Order(-1)// 保证该AOP在@Transactional之前执行\n@Component\npublic class DynamicDataSourceAspect {\n\n    private final static Logger logger = LoggerFactory.getLogger(DynamicDataSourceAspect.class);\n\n    @Pointcut(\"@annotation(com.songsy.iframe.core.persistence.datasource.annotation.BindingDataSources)\")\n    public void pointcut() {\n    }\n\n    @Before(\"pointcut() && @annotation(bindingDataSources)\")\n    public void setDynamicDataSource(JoinPoint point, BindingDataSources bindingDataSources) {\n        Object target = point.getTarget();\n        Method method = ((MethodSignature) point.getSignature()).getMethod();\n        logger.debug(\"切换数据源:  类名 - {}\", target.getClass().getCanonicalName());\n        logger.debug(\"切换数据源: 方法名 - {}\", method.getName());\n        String key = bindingDataSources.value();\n        DynamicDataSourceHolder.setDataSource(key);\n        logger.debug(\"切换数据源：[{}] 数据源切换成功.\", DynamicDataSourceHolder.getDataSource());\n    }\n\n    @After(\"pointcut()\")\n    public void clearDynamicDataSource(JoinPoint point) {\n        DynamicDataSourceHolder.removeDataSource();\n    }\n}\n```","tags":["Spring"],"categories":["服务器"]},{"title":"Mybatis通用增删改查实现","url":"/2018/11/04/backend/mybatis/Mybatis通用增删改查实现/","content":"# iframe\n* 一个基于Mybtais的通用增删改查功能的工具包，mapper接口只要继承相应的接口，实体类添加几个注解即可面向对象操作数据\n* iframe 基于`Spring boot, Gradle, mybatis3`实现，代码已通过测试\n\n\n代码： `https://github.com/songshuiyang/iframe`\n\n### 为什么有这个开发需求：\n* 1、在实际整合了`Mybatis`的项目开发过程中经常会遇到变更数据库字段的情况，如果表结构发生了变化就需要重新修改mapper对应的xml文件，每次修改都要同步更新xml文件。\n* 2、在普通的mapper接口中发现普通的增删改查这些方法每一个mapper接口都有，通过对比可以发现方法除了实体类属性不一样之外，其他的都一样(如下所示)，而且mapper文件也有大量增删改查的sql\n```java\n    int deleteByPrimaryKey(E id);\n\n    int insert(T record);\n\n    int insertSelective(T record);\n\n    T selectByPrimaryKey(E id);\n\n    int updateByPrimaryKeySelective(T record);\n\n    int updateByPrimaryKey(T id);\n```\n\n### Mybatis 和 Hibernate 优缺点对比\n\n> 现在开源项目中持久层框架用到最多的基本就是 MyBatis 和 Hibernate\n\n#### Mybatis\n##### 优点\n* Mybatis入门简单，即学即用，提供了数据库查询的自动对象绑定功能，而且延续了很好的SQL使用经验\n* 可以进行更为细致的SQL优化，可以减少查询字段\n##### 缺点\n* 虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。\n\n#### Hibernate\n##### 优点\n* 不需要编写的SQL语句(不需要编辑JDBC)，只需要操作相应的对象就可以了，就可以能够存储、更新、删除、加载对象，可以提高生产效率\n* 使用Hibernate，移植性好\n##### 缺点\n* 由于对持久层封装过于完整，导致开发人员无法对SQL进行优化，无法灵活使用JDBC的原生SQL，Hibernate封装了JDBC，所以没有JDBC直接访问数据库效率高。要使用数据库的特定优化机制的时候，不适合用Hibernate\n\n### 开发目的\n对比Mybatis 和 Hibernate 优缺点，可以发现他们之间的优缺点可以互补，为何不`取其精华, 去其糟粕, 双剑合并呢`, 所以初步想法是在Mybatis的基础框架上, 扩展一下其面向对象操作的功能。\n\n### 使用方法\n\n#### 准备\n* 在自己的项目中导入 `com.songsy.iframe.core.persistence.provider` 包下的所有文件。\n* 默认数据库各张表都有如下字段, 如果不符合项目需要即可修改对应的源码\n```sql\n  `created_date` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `created_by` varchar(32) DEFAULT NULL COMMENT '创建人',\n  `last_modified_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后修改时间',\n  `last_modified_by` varchar(32) DEFAULT NULL COMMENT '最后修改人',\n  `version` bigint(20) DEFAULT NULL COMMENT '版本',\n  `remarks` varchar(255) DEFAULT NULL COMMENT '备注',\n  `enable` bit(1) DEFAULT b'1' COMMENT '是否启用',\n```\n* mybatis版本在3.0以上，需要使用其新特性\n#### 使用\n* 实体类继承`BaseEntity.class`类获得公共属性\n```java\n/**\n * 实体类基类\n * @author songshuiyang\n * @date 2018/10/28 10:13\n */\n@Getter\n@Setter\npublic class BaseEntity<ID> implements Serializable {\n\n    private static final long serialVersionUID = -3873745966284869947L;\n\n    /**\n     * 主键\n     */\n    @Id(type = Integer.class)\n    @GeneratedValue(strategy = GenerationType.CUSTOM)\n    private ID id;\n    /**\n     * 创建人\n     */\n    private String createdBy;\n    /**\n     * 创建时间\n     */\n    private Date createdDate;\n    /**\n     * 最后修改人\n     */\n    private String lastModifiedBy;\n    /**\n     * 最后修改时间\n     */\n    private Date lastModifiedDate;\n    /**\n     * 备注\n     */\n    private String remarks;\n    /**\n     * 乐观锁字段\n     */\n    @Version\n    private Long version;\n    /**\n     * 逻辑删除标识\n     */\n    @Deleted\n    private boolean enable = true;\n    @Override\n    public int hashCode() {\n        return this.id != null ? this.id.hashCode() : null;\n    }\n    @Override\n    public boolean equals(Object obj) {\n        if (!(obj instanceof BaseEntity)) {\n            return false;\n        }\n        BaseEntity i = (BaseEntity) obj;\n\n        if (i.getId() == null || this.getId() == null) {\n            return false;\n        }\n        if (this.getId().equals(i.getId())) {\n            return true;\n        }\n        return false;\n    }\n}\n```\n* 实体类加上对应的注解\n```java\n/**\n * 用户\n * @author songshuiyang\n * @date 2017/11/28 21:36\n */\n@Data\n@Entity\n@Table(name = \"sys_user\")\n@EqualsAndHashCode(callSuper = false)\npublic class User extends BaseEntity<Integer> {\n\n    private String username;\n\n    private String password;\n\n    private String nickname;\n\n    private Integer sex;\n\n    private Integer age;\n\n    private String phone;\n\n    private String email;\n\n    private String address;\n\n    private String salt;\n\n    @Column(name = \"head_portrait\")\n    private String headPortrait;\n}\n```\n> 注解是参照Jpa的注解来定制的，详情可见`com.songsy.iframe.core.persistence.provider.annotation`\n\n| 注解 | 作用 |\n| ------ | ------ | \n| @Entity | 修饰实体类，指明该类将映射到指定的数据表| \n| @Table | 当实体类与映射的数据库表名不同名时需要使用 @Table 注解，该注解与 @Entity 注解并列使用，使用其 name 属性指明数据库的表名, 不填写`name`属性则默认是类名的转化成`_`格式的表名 |\n| @Column | 当实体类属性名与数据库字段名不一致时, 可用该注解标识实体类对应在数据库的字段名| \n| @Id | 标识该属性为主键| \n| @GeneratedValue | 标注主键的生成策略，通过其 strategy 属性标识生成策略| \n| @Transient | 标注此注解后在操作数据表的时候将会忽略该属性 | \n| @Version | 标识乐观锁字段| \n| @Deleted | 逻辑删除标识| \n\n* mapper接口继承`BaseCurdMapper.java` ，Mapper层增加其通用增删改查方法, `<User,Integer>`：第一个是实体类类型，第二个标识主键类型\n```java\n/**\n * 用户\n * @author songshuiyang\n * @date 2017/11/28 20:12\n */\npublic interface UserMapper extends BaseCurdMapper<User,Integer> {\n\n}\n```\n增加的方法：\n```java\n    /**\n     * 查询所有数据\n     * @return\n     */\n    List<T> findAll();\n\n    /**\n     * 根据id查询记录\n     * @return\n     */\n    T findById(Object id);\n\n    /**\n     * 插入记录\n     * @param entity\n     * @return\n     */\n    int insert(T entity);\n\n    /**\n     * 更新记录\n     * @param entity\n     * @return\n     */\n    int update(T entity);\n\n    /**\n     * 更新记录(null值记录也更新)\n     * @param entity\n     * @return\n     */\n    int updateNull(T entity);\n\n    /**\n     * 根据id物理删除记录\n     * @param id\n     * @return\n     */\n    int deleteOne (Object id);\n\n    /**\n     * 根据id逻辑删除记录\n     * @param id\n     * @return\n     */\n    int logicDeleteOne (Object id);\n```\n\n* service接口继承`BaseService.java` ，Service层增加其通用增删改查方法\n```java\n/**\n * @author songshuiyang\n * @date 2018/10/28 10:13\n */\npublic interface UserService extends BaseService<User, Integer> {\n\n}\n```\n增加的方法：\n```java\n/**\n * @author songsy\n * @Date 2018/10/31 18:06\n */\npublic interface BaseService <T extends BaseEntity, ID extends Serializable>{\n\n    List<T> findAll();\n\n    T findById(ID id);\n\n    T saveSelective(T entity);\n\n    T saveSelective(T entity, Boolean hasId);\n\n    int updateNull(T entity);\n\n    int deleteOne (ID id);\n\n    int logicDeleteOne (ID id);\n}\n```\n\n* service实现类继承`AbstractBaseService.java` ，重写`getRepository()`方法\n```java\n/**\n * @author songshuiyang\n * @date 2018/10/28 10:13\n */\n@Service\npublic class UserServiceImpl extends AbstractBaseService<User, Integer> implements UserService  {\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Override\n    public BaseCurdMapper<User, Integer> getRepository() {\n        return userMapper;\n    }\n\n}\n```\nAbstractBaseService.java\n```java\n/**\n * 抽象service基类\n *\n * @author songsy\n * @Date 2018/131 17:17\n */\n@Slf4j\npublic abstract class AbstractBaseService<T extends BaseEntity, ID extends Serializable> {\n    \n    public abstract BaseCurdMapper<T, ID> getRepository();\n\n    public List<T> findAll() {\n        return getRepository().findAll();\n    }\n\n    public T findById(ID id) {\n        return getRepository().findById(id);\n    }\n\n    public int updateNull(T entity) {\n        return getRepository().updateNull(entity);\n    }\n\n    public int deleteOne(ID id) {\n        return getRepository().deleteOne(id);\n    }\n\n    public int logicDeleteOne(ID id) {\n        return getRepository().logicDeleteOne(id);\n    }\n\n    /**\n     * 通用插入更新方法\n     *\n     * @param entity\n     * @return\n     */\n    @Transactional\n    public T saveSelective(T entity) {\n        return saveSelective(entity, false);\n    }\n\n    @Transactional\n    public T saveSelective(T entity, Boolean hasId) {\n        if (hasId) {\n            // 之前已经生成了id\n            insertSelective(entity);\n        } else if (!StringUtils.isEmpty(entity.getId())) {\n            updateSelective(entity);\n            // 插入数据库之后 实体类乐观锁字段自增\n            entity.setVersion(entity.getVersion() + 1);\n        } else {\n            Class idClass = ReflectionUtils.getPrimarykeyClassType(entity.getClass());\n            // 如果主键是字符类型，则采用32位随机字符作为主键\n            if (idClass.equals(String.class)) {\n                entity.setId(IDGeneratorUtils.generateID());\n            } else {\n                // 默认主键由数据库自动生成（主要是自动增长型）\n            }\n            insertSelective(entity);\n        }\n        return entity;\n    }\n\n    private void insertSelective(T entity) {\n        entity.setCreatedDate(new Date());\n        entity.setLastModifiedDate(new Date());\n        entity.setVersion(new Long(1));\n        // 设置当前登录人\n//        if (null == entity.getCreatedBy()) {\n//            entity.setCreatedBy(\"\");\n//        }\n//        if (null == entity.getLastModifiedBy()) {\n//            entity.setLastModifiedBy(\"\");\n//        }\n        getRepository().insert(entity);\n    }\n\n    private void updateSelective(T entity) {\n        if (entity.getVersion() == null) {\n            throw new VersionException();\n        }\n        entity.setLastModifiedDate(new Date());\n        // 设置当前登录人\n//        if (null == entity.getLastModifiedBy()) {\n//            entity.setLastModifiedBy(\"\");\n//        }\n        Integer flag = getRepository().update(entity);\n        if (flag == 0) {\n            throw new UpdateException();\n        }\n    }\n}\n```\n#### 测试\n```java\n/**\n * @author songsy\n * @Date 2018/10/31 18:00\n */\npublic class UserServiceTest extends BaseTest {\n\n    @Autowired\n    UserService userService;\n    \n    @Test\n    public void findAll () {\n        userService.findAll();\n    }\n\n    @Test\n    public void insertUser () {\n        User user = new User();\n        user.setUsername(\"songsy\");\n        user.setAddress(\"广东深圳\");\n        user.setAge(88);\n        user.setEmail(\"1459074711@qq.com\");\n        user.setHeadPortrait(\"头像\");\n        user.setNickname(\"宋某\");\n        user.setPassword(\"root\");\n        user.setSex(1);\n        userService.saveSelective(user);\n    }\n\n    @Test\n    public void updateUser1 () {\n        User user = new User();\n        user.setId(48);\n        user.setUsername(\"songsy\");\n        user.setAddress(\"广东深圳\");\n        user.setAge(88);\n        user.setEmail(\"1459074711@qq.com\");\n        user.setHeadPortrait(\"头像\");\n        user.setNickname(\"宋某某\");\n        user.setPassword(\"root\");\n        user.setSex(1);\n        user.setVersion(1l);\n        userService.saveSelective(user);\n    }\n\n    @Test\n    public void updateUser2 () {\n        User user = userService.findAll().get(0);\n        User userDb = new User();\n        userDb.setId(user.getId());\n        userDb.setVersion(user.getVersion());\n        userDb.setUsername(\"测试乐观锁111\");\n        userService.saveSelective(userDb);\n    }\n    \n    @Test\n    public void updateNull () {\n        User user = userService.findById(50);\n        User userDb = new User();\n        userDb.setId(user.getId());\n        userDb.setVersion(user.getVersion());\n        userDb.setUsername(\"测试updateNull\");\n        userService.updateNull(userDb);\n    }\n\n    @Test\n    public void deleteOne () {\n        userService.deleteOne(48);\n    }\n\n    @Test\n    public void logicDeleteOne () {\n        userService.logicDeleteOne(49);\n    }\n}\n```\n\n#### 使用总结\n* 如果增加或者修改了数据库字段，只要修改对应的实体类文件即可，配合注解的使用可以十分方便完成修改，对于增删改查的操作代码再也不用一个个去修改xml文件了\n* 不用在每一个`mapper`接口, Mybatis xml文件添加一些重复的代码\n* 在service层即可完成通用增删改查方法，使用Mybatis也可以像`Hibernate` 那样用对象来更新数据库了\n\n### 实现解析\n> 详细实现可见`com.songsy.iframe.core.persistence.provider`\n\n按步骤解析：\n\n* 使用`Spring Aop`收集实体类信息及缓存起来，每次调用继承了`BaseCurdMapper.java`的Mapper接口就会触发\n```java\npackage com.songsy.iframe.core.persistence.provider.aspect;\n\nimport com.google.common.collect.Maps;\nimport com.songsy.iframe.core.persistence.provider.exception.ParameterizedTypeException;\nimport com.songsy.iframe.core.persistence.provider.mapper.BaseCurdMapper;\nimport com.songsy.iframe.core.persistence.provider.threadlocal.EntityProperty;\nimport com.songsy.iframe.core.persistence.provider.threadlocal.EntityThreadLocal;\nimport com.songsy.iframe.core.persistence.provider.utils.ReflectionUtils;\nimport org.apache.ibatis.binding.MapperProxy;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\n\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.Type;\nimport java.util.Map;\n\n/**\n * BaseCurdMapper接口AOP，用于获取实体类属性\n *\n * @author songshuiyang\n * @date 2018/10/30 21:44\n */\n@Aspect\n@Component\npublic class BaseCurdMapperAspect {\n\n    private final static Logger logger = LoggerFactory.getLogger(BaseCurdMapperAspect.class);\n\n    /**\n     * 缓存实体类属性\n     * key: 实体类类型\n     * value: 实体类属性对象\n     */\n    private static Map<String, EntityProperty> entityPropertyMap = Maps.newHashMap();\n\n    /**\n     * 定义切点\n     * Spring Aop是基于代理的，生成的bean也是一个代理对象，this就是这个代理对象，\n     * 当这个对象可以转换为指定的类型时，对应的切入点就是它了，Spring Aop将生效。\n     */\n    @Pointcut(\"this(com.songsy.iframe.core.persistence.provider.mapper.BaseCurdMapper)\")\n    public void pointcut() {\n    }\n\n    /**\n     * 前置增强：获取BaseCurdMapper接口 泛型属性，并设置到ThreadLocal中\n     * @param point\n     */\n    @Before(\"pointcut()\")\n    public void before(JoinPoint point) {\n        Class entityClass = null;\n        Class entityIdClass = null;\n        Object target= point.getTarget();\n        // 是否继承 BaseCurdMapper 接口\n        if (BaseCurdMapper.class.isAssignableFrom(target.getClass())) {\n            // 获取Mybatis代理类对象\n            MapperProxy mapperProxy = (MapperProxy) Proxy.getInvocationHandler(target);\n            Class mapperInterface = (Class) ReflectionUtils.getFieldValue(mapperProxy, \"mapperInterface\");\n            // 获取接口泛型对象\n            ParameterizedType parameterizedType = (ParameterizedType) mapperInterface.getGenericInterfaces()[0];\n            Type[] types = parameterizedType.getActualTypeArguments();\n            if (types.length != 2) {\n                logger.error(\"parameterizedType type length error\");\n                throw new ParameterizedTypeException(parameterizedType.getTypeName());\n            }\n            try {\n                entityClass = Class.forName(types[0].getTypeName());\n                entityIdClass = Class.forName(types[1].getTypeName());\n                // 如果不存在则加入到entityPropertyMap缓存中\n                if (!entityPropertyMap.containsKey(entityClass.getName())) {\n                    EntityProperty entityProperty = new EntityProperty(entityClass, entityIdClass);\n                    entityPropertyMap.put(entityClass.getTypeName(),entityProperty);\n                }\n            } catch (ClassNotFoundException e) {\n                logger.error(e.getMessage());\n            }\n        }\n        // 设置ThreadLocal\n        if (null != entityClass) {\n            EntityThreadLocal.set(entityPropertyMap.get(entityClass.getName()));\n        }\n    }\n\n    /**\n     * 后置增强：清除 threadLocal 防止内存泄漏\n     * @param point\n     */\n    @After(\"pointcut()\")\n    public void after(JoinPoint point) {\n        EntityThreadLocal.remove();\n    }\n\n}\n```\n* 使用`ThreadLocal` 获取当前访问线程实体类信息\n```java\n/**\n * ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。\n * 每次调用mapper接口方法的时候，先把实体类的信息存放在ThreadLocal中\n * @author songshuiyang\n * @date 2018/10/30 21:27\n */\npublic class EntityThreadLocal {\n\n    private static ThreadLocal<EntityProperty> threadLocal = new ThreadLocal<>();\n\n    /**\n     * 获取当前线程的实体类属性\n     * @return\n     */\n    public static EntityProperty get () {\n        if (null == threadLocal) {\n            initialValue();\n        }\n        return threadLocal.get();\n    }\n\n    /**\n     * 设置当前线程的实体类属性\n     * @param entityProperty\n     */\n    public static void set(EntityProperty entityProperty) {\n        if (entityProperty != null) {\n            threadLocal.set(entityProperty);\n        }\n    }\n\n    /**\n     * 清除 threadLocal\n     */\n    public static void remove() {\n        threadLocal.remove();\n    }\n\n    /**\n     * 默认初始化Object.class\n     */\n    private static void initialValue() {\n        EntityProperty entityProperty = new EntityProperty();\n        entityProperty.setEntityClass(Object.class);\n        entityProperty.setIdClass(null);\n        threadLocal.set(entityProperty);\n    }\n}\n```\n\n* 使用Mybatis3的`@SelectProvider`、` @InsertProvider`, `@UpdateProvider`,`@DeleteProvider`，使用注解来配置Mapper\n```java\n/**\n * 通用增删改查Mapper\n * @author songshuiyang\n * @date 2018/10/28 11:22\n */\npublic interface CurdMapper<T extends BaseEntity, ID extends Serializable> {\n    /**\n     * 查询所有数据\n     * @return\n     */\n    @SelectProvider(type=MybatisProvider.class,method = MybatisProvider.FIND_ALL)\n    List<T> findAll();\n\n    /**\n     * 根据id查询记录\n     * @return\n     */\n    @SelectProvider(type=MybatisProvider.class, method = MybatisProvider.FIND_BY_ID)\n    T findById(Object id);\n\n    /**\n     * 插入记录\n     * @param entity\n     * @return\n     */\n    @InsertProvider(type=MybatisProvider.class, method = MybatisProvider.INSERT)\n    int insert(T entity);\n\n    /**\n     * 更新记录\n     * @param entity\n     * @return\n     */\n    @UpdateProvider(type=MybatisProvider.class, method = MybatisProvider.UPDATE)\n    int update(T entity);\n\n    /**\n     * 更新记录(null值记录也更新)\n     * @param entity\n     * @return\n     */\n    @UpdateProvider(type=MybatisProvider.class, method = MybatisProvider.UPDATE_NULL)\n    int updateNull(T entity);\n\n    /**\n     * 根据id物理删除记录\n     * @param id\n     * @return\n     */\n    @DeleteProvider(type=MybatisProvider.class, method = MybatisProvider.DELETE_ONE)\n    int deleteOne (Object id);\n\n    /**\n     * 根据id逻辑删除记录\n     * @param id\n     * @return\n     */\n    @DeleteProvider(type=MybatisProvider.class, method = MybatisProvider.LOGIC_DELETE_ONE)\n    int logicDeleteOne (Object id);\n\n\n    /**\n     * 分页查询\n     * @param page\n     * @return\n     */\n    @SelectProvider(type=MybatisProvider.class,method = MybatisProvider.FIND_AUTO_BY_PAGE)\n    List<T> findAutoByPage(Page<T> page);\n}\n```\n* 通用增删改查实现类，在这里实现sql的拼接\n\n```java\npackage com.songsy.iframe.core.persistence.provider;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.songsy.iframe.core.persistence.provider.annotation.Version;\nimport com.songsy.iframe.core.persistence.provider.entity.ColumnEntity;\nimport com.songsy.iframe.core.persistence.provider.entity.TableEntity;\nimport com.songsy.iframe.core.persistence.provider.utils.MybatisTableUtils;\nimport com.songsy.iframe.core.persistence.provider.utils.PageUtils;\nimport com.songsy.iframe.core.persistence.provider.utils.ReflectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.lang.reflect.Field;\nimport java.text.ParseException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * 通用增删改查实现方法\n * @author songshuiyang\n * @date 2018/10/28 11:34\n */\npublic class CrudProvider {\n\n    private static Logger logger = LoggerFactory.getLogger(CrudProvider.class);\n\n    public static final String FIND_ALL = \"findAll\";\n    public static final String FIND_BY_ID = \"findById\";\n    public static final String INSERT = \"insert\";\n    public static final String UPDATE = \"update\";\n    public static final String UPDATE_NULL = \"updateNull\";\n    public static final String DELETE_ONE = \"deleteOne\";\n    public static final String LOGIC_DELETE_ONE =\"logicDeleteOne\";\n    public static final String FIND_AUTO_BY_PAGE = \"findAutoByPage\";\n\n    /**\n     * 查询所有数据\n     * @return\n     */\n    public String findAll() {\n        TableEntity tableEntity = MybatisTableUtils.getCurrentTableEntity();\n        String sql = \"SELECT * FROM \" +  tableEntity.getTableName();\n        return sql;\n    }\n\n    /**\n     * 根据id查询记录\n     * @param id\n     * @return\n     */\n    public String findById (Object id) {\n        TableEntity tableEntity = MybatisTableUtils.getCurrentTableEntity();\n        StringBuilder sb = new StringBuilder(\"SELECT \");\n        sb.append(\" * \");\n        sb.append(\"FROM\");\n        sb.append(\" \").append(tableEntity.getTableName()).append(\" \");\n        sb.append(\" WHERE \").append(tableEntity.getIdColumnEntity().getColumnName()).append(\"=\").append(id);\n        return sb.toString();\n    }\n\n    /**\n     * 插入记录\n     * @param entity\n     */\n    public String insert (Object entity) {\n        TableEntity tableEntity = MybatisTableUtils.getCurrentTableEntity();\n        List<ColumnEntity> columnEntities = tableEntity.getColumnEntities();\n        List<String> fieldNames = Lists.newArrayList();\n        List<String> columnNames = Lists.newArrayList();\n        for (ColumnEntity columnEntity : columnEntities) {\n            Object value = ReflectionUtils.getFieldValue(entity, columnEntity.getFieldName());\n            // 字段为null不插入\n            if (value != null) {\n                columnNames.add(columnEntity.getColumnName());\n                fieldNames.add(\"#{\" + columnEntity.getFieldName() + \"}\");\n            }\n        }\n        StringBuilder sb = new StringBuilder(\"INSERT INTO \");\n        sb.append(tableEntity.getTableName());\n        sb.append(\" (\");\n        sb.append(StringUtils.join(columnNames, \",\"));\n        sb.append(\") \");\n        sb.append(\" VALUES(\");\n        sb.append(StringUtils.join(fieldNames, \",\"));\n        sb.append(\")\");\n        String sql = sb.toString();\n        return sql;\n    }\n\n    /**\n     * 更新记录\n     * 字段属性为null不更新\n     * @param entity\n     */\n    public String  update (Object entity) {\n        TableEntity tableEntity = MybatisTableUtils.getCurrentTableEntity();\n        List<ColumnEntity> columnEntities = tableEntity.getColumnEntities();\n        ColumnEntity versionColumnEntity = null;\n        List<String> updateColumns = Lists.newArrayList();\n        for (ColumnEntity columnEntity : columnEntities) {\n            // 乐观锁处理 更新后version字段加一\n            Field field = columnEntity.getField();\n            Version version = field.getAnnotation(Version.class); {\n                if (version != null) {\n                    versionColumnEntity = columnEntity;\n                    updateColumns.add(columnEntity.getColumnName() + \" = \" + columnEntity.getFieldName() + \" + 1\");\n                    continue;\n                }\n            }\n            Object value = ReflectionUtils.getFieldValue(entity, columnEntity.getFieldName());\n            if (value != null) {\n                updateColumns.add(columnEntity.getColumnName() + \" = \" + \"#{\" + columnEntity.getFieldName() + \"}\");\n            }\n        }\n        StringBuilder sb = new StringBuilder(\"UPDATE \");\n        sb.append(tableEntity.getTableName());\n        sb.append(\" SET \");\n        sb.append(StringUtils.join(updateColumns, \",\"));\n        sb.append(\" WHERE \");\n        sb.append(tableEntity.getIdColumnEntity().getColumnName());\n        sb.append(\" = \");\n        sb.append(\"#{\" + tableEntity.getIdColumnEntity().getFieldName() + \"}\");\n        sb.append(\" and \");\n        sb.append(versionColumnEntity.getColumnName());\n        sb.append(\" = \");\n        sb.append(\"#{\" + versionColumnEntity.getFieldName() + \"}\");\n        String sql = sb.toString();\n        return sql;\n    }\n\n    /**\n     * 更新记录\n     * 字段属性为null 也会更新为null\n     * @param entity\n     */\n    public String  updateNull (Object entity) {\n        TableEntity tableEntity = MybatisTableUtils.getCurrentTableEntity();\n        List<ColumnEntity> columnEntities = tableEntity.getColumnEntities();\n        ColumnEntity versionColumnEntity = null;\n        List<String> updateColumns = Lists.newArrayList();\n        for (ColumnEntity columnEntity : columnEntities) {\n            // 乐观锁处理 更新后version字段加一\n            Field field = columnEntity.getField();\n            Version version = field.getAnnotation(Version.class); {\n                if (version != null) {\n                    versionColumnEntity = columnEntity;\n                    updateColumns.add(columnEntity.getColumnName() + \" = \" + columnEntity.getFieldName() + \" + 1\");\n                    continue;\n                }\n            }\n            updateColumns.add(columnEntity.getColumnName() + \" = \" + \"#{\" + columnEntity.getFieldName() + \"}\");\n        }\n        StringBuilder sb = new StringBuilder(\"UPDATE \");\n        sb.append(tableEntity.getTableName());\n        sb.append(\" SET \");\n        sb.append(StringUtils.join(updateColumns, \",\"));\n        sb.append(\" WHERE \");\n        sb.append(tableEntity.getIdColumnEntity().getColumnName());\n        sb.append(\" = \");\n        sb.append(\"#{\" + tableEntity.getIdColumnEntity().getFieldName() + \"}\");\n        sb.append(\" and \");\n        sb.append(versionColumnEntity.getColumnName());\n        sb.append(\" = \");\n        sb.append(\"#{\" + versionColumnEntity.getFieldName() + \"}\");\n        String sql = sb.toString();\n        return sql;\n    }\n\n    /**\n     * 根据id物理删除记录\n     * @param id\n     * @return\n     */\n    public String deleteOne(Object id) {\n        TableEntity tableEntity = MybatisTableUtils.getCurrentTableEntity();\n        String sql = \"DELETE FROM \" + tableEntity.getTableName() + \" WHERE \" + tableEntity.getIdColumnEntity().getColumnName()\n                + \" = #{id}\";\n        return sql;\n    }\n\n    /**\n     * 根据id逻辑删除记录\n     * @param id\n     * @return\n     */\n    public String logicDeleteOne(Object id) {\n        TableEntity tableEntity = MybatisTableUtils.getCurrentTableEntity();\n        String sql = \"UPDATE \" +\n                tableEntity.getTableName() +\n                \" SET \" + tableEntity.getDeleteColunmEntity().getColumnName() + \" = 0 \" +\n                \"WHERE \" + tableEntity.getIdColumnEntity().getColumnName() + \" = #{id}\";\n        return sql;\n    }\n}\n```\n\n","tags":["Spring"],"categories":["服务器"]},{"title":"Spring Aop 定义切点","url":"/2018/11/01/backend/spring/Spring Aop 定义切点/","content":"> Spring AOP 中，需要使用 AspectJ 的切点表达式来定义切点。\n\n|  AspectJ 指示器 | 描述    | \n| -----   | :-----   | \n| arg ()     | 限制连接点的指定参数为指定类型的执行方法   |\n| @args ()     | 限制连接点匹配参数由指定注解标注的执行方法        |\n| execution ()    | 用于匹配连接点的执行方法 |\n| this ()   | 限制连接点匹配 AOP 代理的 Bean 引用为指定类型的类           |\n| target ()   | 限制连接点匹配特定的执行对象，这些对象对应的类要具备指定类型注解           |\n| within ()   | 限制连接点匹配指定类型           |\n| @within ()   | 限制连接点匹配指定注释所标注的类型（当使用 Spring AOP 时，方法定义在由指定的注解所标注的类里）           |\n| @annotation ()   | 限制匹配带有指定注释的连接点           |\n\n","tags":["Spring"],"categories":["服务器"]},{"title":"Markdown语法","url":"/2018/11/01/backend/Markdown语法/","content":"### 图片\n```xml\n![logo](/images/server/mybatis/mybatis-framework.png) \n```\n![logo](/images/server/mybatis/mybatis-framework.png) \n\n### 表格:\n```xml\n|    a    |       b       |      c     |\n|:-------:|:------------- | ----------:|\n|   居中  |     左对齐    |   右对齐   |\n|=========|===============|============|\n```\n\n|    a    |       b       |      c     |\n|:-------:|:------------- | ----------:|\n|   居中  |     左对齐    |   右对齐   |\n|=========|===============|============|\n","tags":["java"],"categories":["server"]},{"title":"guava工具包.md","url":"/2018/10/31/backend/Java/utils/guava工具包/","content":"### 驼峰字符和下划线字符相互转换工具类\n\n导入Maven\n```xml\n<dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>21.0</version>\n</dependency>\n```\n示例：\n```xml\nimport org.junit.Test;\n\nimport com.google.common.base.CaseFormat;\n\npublic class GuavaTester {\n    @Test\n    public void test() {\n        System.out.println(CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL, \"test-data\"));//testData\n        System.out.println(CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, \"test_data\"));//testData\n        System.out.println(CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, \"test_data\"));//TestData\n\n        System.out.println(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, \"testdata\"));//testdata\n        System.out.println(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, \"TestData\"));//test_data\n        System.out.println(CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_HYPHEN, \"testData\"));//test-data\n    }\n}\n```\n\n","tags":["Java"],"categories":["server"]},{"title":"SpringBoot Maven中parent问题","url":"/2018/10/30/backend/spring/spring-cloud/SpringBootMaven中parent问题/","content":"集成Spring boot时，官方示例中，都是让我们继承一个spring的 spring-boot-starter-parent 这个parent：\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.1.RELEASE</version>\n</parent>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n但是，一般情况下，在我们自己的项目中，会定义一下自己的 parent 项目，这种情况下，上面的这种做法就行不通了。那么，该如何来做呢？其实，在spring的官网也给出了变通的方法的，在我们自己 parent 项目中，加下下面的声明：\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>1.5.1.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n> 请注意，它的 type 是 pom，scope 是 import，这种类型的 dependency 只能在 dependencyManagement 标签中声明，然后，把我们项目中的 子项目 中，parent 的声明，修改为我们自己项目的 parent 项目就可以了，比如，我的是：\n```xml\n  <parent>\n    <groupId>com.songsy</groupId>\n    <artifactId>spring-cloud-parent</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n```\n\n详见： http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-maven-without-a-parent\n参考： https://blog.csdn.net/rainbow702/article/details/55046298 ","tags":["java"],"categories":["server"]},{"title":"ThreadLocal","url":"/2018/10/29/backend/Java/highConcurrency/ThreadLocal/","content":"### ThreadLocal 作用\n在并发编程中时常有这样一种需求：每条线程都需要存取一个同名变量，但每条线程中该变量的值均不相同。\n\n如果是你，该如何实现上述功能？常规的思路如下：\n使用一个线程共享的Map<Thread,Object>，Map中的key为线程对象，value即为需要存储的值。那么，我们只需要通过map.get(Thread.currentThread())即可获取本线程中该变量的值。\n\n这种方式确实可以实现我们的需求，但它有何缺点呢？——答案就是：需要同步，效率低！\n\n由于这个map对象需要被所有线程共享，因此需要加锁来保证线程安全性。当然我们可以使用java.util.concurrent.*包下的ConcurrentHashMap提高并发效率，但这种方法只能降低锁的粒度，不能从根本上避免同步锁。而JDK提供的ThreadLocal就能很好地解决这一问题。下面来看看ThreadLocal是如何高效地实现这一需求的。\n\n\n\n### ThreadLocal 是什么\n> ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储，其实意思差不多。可能很多朋友都知道ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量，个线程之间的变量互不干扰，在高并发场景下，可以实现无状态的调用，特别适用于各个线程依赖不通的变量值完成操作的场景。\n\n### ThreadLocal 解析\n> ThreadLocal的内部结构图\n![threadLocal](/images/server/java/三高/threadLocal.jpg)\n\n\n从上面的结构图，我们已经窥见ThreadLocal的核心机制：\n\n每个Thread线程内部都有一个Map。\n\nMap里面存储线程本地对象（key）和线程的变量副本（value）\n\n但是，Thread内部的Map是由ThreadLocal维护的，由ThreadLocal负责向map获取和设置线程的变量值。\n\n所以对于不同的线程，每次获取副本值时，别的线程并不能获取到当前线程的副本值，形成了副本的隔离，互不干扰。\n\nThread线程内部的Map在类中描述如下:\n```java\n    /* ThreadLocal values pertaining to this thread. This map is maintained\n     * by the ThreadLocal class. */\n    ThreadLocal.ThreadLocalMap threadLocals = null;\n```\n\n#### ThreadLocal类提供如下几个核心方法：\n* get()方法用于获取当前线程的副本变量值。\n* set()方法用于保存当前线程的副本变量值。\n* initialValue()为当前线程初始副本变量值。\n* remove()方法移除当前前程的副本变量值。\n\n\n```java\n    /**\n     * 返回当前线程的副本变量\n     * Returns the value in the current thread's copy of this\n     * thread-local variable.  If the variable has no value for the\n     * current thread, it is first initialized to the value returned\n     * by an invocation of the {@link #initialValue} method.\n     *\n     * @return the current thread's value of this thread-local\n     */\n    public T get() {\n        Thread t = Thread.currentThread();\n        // 返回Thread 对象中的ThreadLocalMap\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null) {\n                @SuppressWarnings(\"unchecked\")\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        // 如果没有值的话调用默认setInitialValue()方法\n        return setInitialValue();\n    }\n    /**\n     * 存放在Thread的 threadLocals\n     * Get the map associated with a ThreadLocal. Overridden in\n     * InheritableThreadLocal.\n     *\n     * @param  t the current thread\n     * @return the map\n     */\n    ThreadLocalMap getMap(Thread t) {\n        return t.threadLocals;\n    }\n    /**\n     * 设置初始值\n     * Variant of set() to establish initialValue. Used instead\n     * of set() in case user has overridden the set() method.\n     *\n     * @return the initial value\n     */\n    private T setInitialValue() {\n        T value = initialValue();\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n        return value;\n    }\n    // map为空的话返回初始值null，即线程变量副本为null，在使用时需要注意判断NullPointerException。\n    protected T initialValue() {\n        return null;\n    }\n    /**\n     * 赋值\n     * Sets the current thread's copy of this thread-local variable\n     * to the specified value.  Most subclasses will have no need to\n     * override this method, relying solely on the {@link #initialValue}\n     * method to set the values of thread-locals.\n     *\n     * @param value the value to be stored in the current thread's copy of\n     *        this thread-local.\n     */\n    public void set(T value) {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            map.set(this, value);\n        else\n            createMap(t, value);\n    }\n\n    /**\n     * Removes the current thread's value for this thread-local\n     * variable.  If this thread-local variable is subsequently\n     * {@linkplain #get read} by the current thread, its value will be\n     * reinitialized by invoking its {@link #initialValue} method,\n     * unless its value is {@linkplain #set set} by the current thread\n     * in the interim.  This may result in multiple invocations of the\n     * {@code initialValue} method in the current thread.\n     *\n     * @since 1.5\n     */\n     public void remove() {\n         ThreadLocalMap m = getMap(Thread.currentThread());\n         if (m != null)\n             m.remove(this);\n     }\n    \n    \n```\n\n#### ThreadLocalMap\n* ThreadLocalMap是ThreadLocal的内部类，没有实现Map接口，用独立的方式实现了Map的功能，其内部的Entry也独立实现:\n```java\n    static class ThreadLocalMap {\n        /**\n         * 在ThreadLocalMap中，也是用Entry来保存K-V结构数据的。但是Entry中key只能是ThreadLocal对象   \n         * \n         * The entries in this hash map extend WeakReference, using\n         * its main ref field as the key (which is always a\n         * ThreadLocal object).  Note that null keys (i.e. entry.get()\n         * == null) mean that the key is no longer referenced, so the\n         * entry can be expunged from table.  Such entries are referred to\n         * as \"stale entries\" in the code that follows.\n         */\n        static class Entry extends WeakReference<ThreadLocal<?>> {\n            /** The value associated with this ThreadLocal. */\n            Object value;\n\n            Entry(ThreadLocal<?> k, Object v) {\n                // Entry继承自WeakReference（弱引用，生命周期只能存活到下次GC前），但只有Key是弱引用类型的，Value并非弱引用。\n                super(k);\n                value = v;\n            }\n        }\n    }\n```\n### ThreadLocalMap的问题\n\n由于ThreadLocalMap的key是弱引用，而Value是强引用。这就导致了一个问题，ThreadLocal在没有外部对象强引用时，发生GC时弱引用Key会被回收，而Value不会回收，如果创建ThreadLocal的线程一直持续运行，那么这个Entry对象中的value就有可能一直得不到回收，发生内存泄露。\n\n#### 为何要使用弱引用\n对弱引用不了解的同学可以参考 这篇文章：http://blog.csdn.net/u010425776/article/details/50760053。\n\nJava设计之初的一大宗旨就是——弱化指针。\nJava设计者希望通过合理的设计简化编程，让程序员无需处理复杂的指针操作。然而指针是客观存在的，在目前的Java开发中也不可避免涉及到“指针操作”。如：\n\n```java\nObject a = new Object();\n```\n上述代码创建了一个强引用a，只要强引用存在，垃圾收集器是不会回收该对象的。如果该对象非常庞大，那么为了节约内存空间，在该对象使用完成后，我们需要手动拆除该强引用，如下面代码所示：\n\n```\na = null;\n```\n\n此时，指向该对象的强引用消除了，垃圾收集器便可以回收该对象。但在这个过程中，仍然需要程序员处理指针。为了弱化指针这一概念，弱引用便出现了，如下代码创建了一个Person类型的弱引用：\n```java\nWeakReference<Person> wr = new WeakReference<Person>(new Person()); \n```\n\n此时程序员不用再关注指针，只要没有强引用指向Person对象，垃圾收集器每次运行都会自动将该对象释放。\n\n那么，ThreadLocalMap中的key使用弱引用的原因也是如此。当一条线程中的ThreadLocal对象使用完毕，没有强引用指向它的时候，垃圾收集器就会自动回收这个Key，从而达到节约内存的目的。\n\n那么，问题又来了——这会导致内存泄漏问题！\n\n\n\n#### 如何避免泄漏\n\n既然Key是弱引用，那么我们要做的事，就是在调用ThreadLocal的get()、set()方法时完成后再调用remove方法，将Entry节点和Map的引用关系移除，这样整个Entry对象在GC Roots分析后就变成不可达了，下次GC的时候就可以被回收。\n\n如果使用ThreadLocal的set方法之后，没有显示的调用remove方法，就有可能发生内存泄露，所以养成良好的编程习惯十分重要，使用完ThreadLocal之后，记得调用remove方法。\n\n### ThreadLocal 应用场景\n> Hibernate的session获取场景：每个线程访问数据库都应当是一个独立的Session会话，如果多个线程共享同一个Session会话，有可能其他线程关闭连接了，当前线程再执行提交时就会出现会话已关闭的异常，导致系统异常。此方式能避免线程争抢Session，提高并发下的安全性。\n                        \n```java\nprivate static final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();\n\n// 获取Session\npublic static Session getCurrentSession(){\n    Session session =  threadLocal.get();\n    // 判断Session是否为空，如果为空，将创建一个session，并设置到本地线程变量中\n    try {\n        if(session == null && !session.isOpen()){\n            if(sessionFactory == null){\n                // 创建Hibernate的SessionFactory\n                rbuildSessionFactory();\n            }else{\n                session = sessionFactory.openSession();\n            }\n        }\n        threadLocal.set(session);\n    } catch (Exception e) {\n        // TODO: handle exception\n    }\n\n    return session;\n}\n```\n\n### 总结：\n* 每个ThreadLocal只能保存一个变量副本，如果想要上线一个线程能够保存多个副本以上，就需要创建多个ThreadLocal。\n* ThreadLocal内部的ThreadLocalMap键为弱引用，会有内存泄漏的风险。\n* 适用于无状态，副本变量独立后不影响业务逻辑的高并发场景。如果如果业务逻辑强依赖于副本变量，则不适合用ThreadLocal解决，需要另寻解决方案。\n\n### 参考\n* https://www.jianshu.com/p/98b68c97df9b\n* https://www.jianshu.com/p/3f3620f9011d","tags":["Java"],"categories":["server"]},{"title":"网关服务Zuul","url":"/2018/10/23/backend/spring/spring-cloud/网关服务Zuul/","content":"### Zuul 简介\n\n#### Zuul是什么\n> Zuul是Netflix开源的微服务网关，他可以和Eureka,Ribbon,Hystrix等组件配合使用。Zuul组件的核心是一系列的过滤器\n\n#### 为什么要用Zuul\n在分布式架构中，对外提供的服务，在无网关的情况下，API接口直接暴露给服务调用方，当调用方增多，不同业务调用方各不相同，势必需要添加定制化访问权限、校验等逻辑。当添加API网关后，再第三方调用端和服务提供方之间就创建了一面墙，这面墙直接与调用方通信进行权限控制，后将请求均衡分发给后台服务端。Zuul就是提供负载均衡、反向代理、权限认证的这么一个API gateway。\n\n\n微服务网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过微服务网关\n\n![logo](/images/server/spring/spring-cloud/zuul1.png)\n\n\n#### Zuul 提供什么功能\nZuul组件的核心是一系列的过滤器，这些过滤器可以完成以下功能：\n\n* 身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求\n\n* 审查与监控：\n\n*  动态路由：动态将请求路由到不同后端集群\n\n* 压力测试：逐渐增加指向集群的流量，以了解性能\n\n* 负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求\n\n* 静态响应处理：边缘位置进行响应，避免转发到内部集群\n\n* 多区域弹性：跨域AWS Region进行请求路由，旨在实现ELB(ElasticLoad Balancing)使用多样化\n\nSpring Cloud对Zuul进行了整合和增强。目前，Zuul使用的默认是Apache的HTTP Client，也可以使用Rest Client，可以设置ribbon.restclient.enabled=true.\n### 简单示例\n> 路由配置 application.yml\n```xml\nserver:\n  port: 9001\nspring:\n  application:\n    name: zuul-gateway\neureka:\n  instance:\n    hostname: localhost\n  client:\n    service-url:\n      defaultZone: http://localhost:9010/eureka/,http://localhost:9011/eureka/\nzuul:\n  routes:\n    baidu-url: #传统路由方式\n      path: /baidu/**\n      url: http://www.baidu.com/\n    provider:  #面向服务的路由\n      path: /provider/**\n      serviceId: eureka-provider\n    consumer:  #面向服务的路由\n      path: /consumer/**\n      serviceId: eureka-consumer\n```\n\n> 请求过滤 AccessFilter.java\n```java\n/**\n * 请求过滤\n * @author songshuiyang\n * @date 2018/10/23 20:50\n */\npublic class AccessFilter extends ZuulFilter{\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    /**\n     * 定义过滤器的类型，决定过滤器在请求的那个生命周期中执行\n     * @return\n     */\n    @Override\n    public String filterType() {\n        // 代表会在请求被路由之前被执行\n        return \"pre\";\n    }\n\n    /**\n     * 定义过滤器的顺序\n     * @return\n     */\n    @Override\n    public int filterOrder() {\n        return 0;\n    }\n\n    /**\n     * 判断过滤器是否需要被执行\n     * @return\n     */\n    @Override\n    public boolean shouldFilter() {\n        return false;\n    }\n\n    /**\n     * 过滤器的具体实现\n     * @return\n     */\n    @Override\n    public Object run() {\n        RequestContext ctx = RequestContext.getCurrentContext();\n        HttpServletRequest request = ctx.getRequest();\n        logger.info(\"send {} request to {}\", request.getMethod(), request.getRequestURL().toString());\n        Object accessToken = request.getParameter(\"accessToken\");\n        if (accessToken == null) {\n            logger.error(\"access check failed\");\n            ctx.setSendZuulResponse(false);\n            ctx.setResponseStatusCode(401);\n            return null;\n        }\n        logger.error(\"access check passs\");\n        return null;\n    }\n}\nZuul的过滤器之间没有直接的相互通信，他们之间通过一个RequestContext的静态类来进行数据传递的。RequestContext类中有ThreadLocal变量来记录每个Request所需要传递的数据。\n\nZuul的过滤器是由Groovy写成，这些过滤器文件被放在Zuul Server上的特定目录下面，Zuul会定期轮询这些目录，修改过的过滤器会动态的加载到Zuul Server中以便过滤请求使用。\n\n下面有几种标准的过滤器类型：\n\nZuul大部分功能都是通过过滤器来实现的。Zuul中定义了四种标准过滤器类型，这些过滤器类型对应于请求的典型生命周期。\n\n(1) PRE：这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。\n\n(2) ROUTING：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。\n\n(3) POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。\n\n(4) ERROR：在其他阶段发生错误时执行该过滤器。\n```\n#### 其他\n* 当我们为Spring Cloud Zuul构建的API网关服务引入Spring Cloud Eureka之后，它会为Eureka中的每个服务都自动创建一个默认路由规则，这些默认规则的path会使用ServiceId配置的服务名作为请求前缀\n\n#### 动态加载\n\n##### 动态路由\ntodo\n\n##### 动态过滤器\ntodo","tags":["java"],"categories":["server"]},{"title":"注册中心Consul","url":"/2018/10/22/backend/spring/spring-cloud/注册中心Consul/","content":"### Consul 介绍\n> Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其它工具（比如 ZooKeeper 等）。使用起来也较 为简单。Consul 使用 Go 语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与 Docker 等轻量级容器可无缝配合。\n\n#### Consul 的优势\n* 使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft。\n* 支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等。 zookeeper 和 etcd 均不提供多数据中心功能的支持。\n* 支持健康检查。 etcd 不提供此功能。\n* 支持 http 和 dns 协议接口。 zookeeper 的集成较为复杂, etcd 只支持 http 协议。\n* 官方提供 web 管理界面, etcd 无此功能。\n* 综合比较, Consul 作为服务注册和配置管理的新星, 比较值得关注和研究。\n#### Consul 角色 \n\nclient: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。\n\nserver: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其它数据中心通讯。 每个数据中心的 server 数量推荐为 3 个或是 5 个。\n\n#### Consul 工作原理\n![logo](/images/server/spring/spring-cloud/consul1.png)\n\n* 1、当 Producer 启动的时候，会向 Consul 发送一个 post 请求，告诉 Consul 自己的 IP 和 Port\n* 2、Consul 接收到 Producer 的注册后，每隔10s（默认）会向 Producer 发送一个健康检查的请求，检验Producer是否健康\n* 3、当 Consumer 发送 GET 方式请求 /api/address 到 Producer 时，会先从 Consul 中拿到一个存储服务 IP 和 Port 的临时表，从表中拿到 Producer 的 IP 和 Port 后再发送 GET 方式请求 /api/address\n* 4、该临时表每隔10s会更新，只包含有通过了健康检查的 Producer\n\n#### Consul 模式\n\n* CLIENT：表示consul的client模式，就是客户端模式。是consul节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到SERVER，本身是不持久化这些信息。\n\n* SERVER：表示consul的server模式，表明这个consul是个server，这种模式下，功能和CLIENT都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的。\n\n* SERVER-LEADER：中间那个SERVER下面有LEADER的字眼，表明这个SERVER是它们的老大，它和其它SERVER不一样的一点是，它需要负责同步注册的信息给其它的SERVER，同时也要负责各个节点的健康监测。\n\n* 其它信息：其它信息包括它们之间的通信方式，还有一些协议信息，算法。它们是用于保证节点之间的数据同步，实时性要求等等一系列集群问题的解决。这些有兴趣的自己看看官方文档。\n\n> 参考：http://www.ityouknow.com/springcloud/2018/07/20/spring-cloud-consul.html","tags":["java"],"categories":["server"]},{"title":"服务容错保护Hystrix","url":"/2018/10/17/backend/spring/spring-cloud/服务容错保护Hystrix/","content":"### Hystrix 简介\n\n#### Hystrix是什么\nHystrix对应的中文名字是“豪猪”，豪猪周身长满了刺，能保护自己不受天敌的伤害，代表了一种防御机制，这与hystrix本身的功能不谋而合，因此Netflix团队将该框架命名为Hystrix，并使用了对应的卡通形象做作为logo。\n\n#### 为什么要使用\n在一个分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，如何能够保证在一个依赖出问题的情况下，不会导致整体服务失败，这个就是Hystrix需要做的事情。\n\n#### 提供哪些功能\n\nHystrix提供了熔断、隔离、Fallback、cache、监控等功能，能够在一个、或多个依赖同时出现问题时保证系统依然可用。\n\n\n\n","tags":["java"],"categories":["server"]},{"title":"声明式服务调用Feign","url":"/2018/10/17/backend/spring/spring-cloud/声明式服务调用Feign/","content":"### Feign 简介\n\n#### 是什么\nFeign是一个声明式的Web Service客户端，整合了`Spring Cloud Ribbon`与`Spring Cloud Hystrix`\n\n#### 为什么要使用\n* 只需创建一个接口并用注解的方式来配置它，即可完成服务提供方的接口绑定\n* 在使用过程中与Spring Mvc完美衔接\n* 整合了`Spring Cloud Ribbon`，可实现负载均衡，实现服务高可用\n* 整合了`Spring Cloud Hystrix`，可实现服务断路及服务降级\n\n#### 简单例子\n> pom.xml\n```xml\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-web</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-eureka</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-feign</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.7.0</version>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-annotations</artifactId>\n      <version>2.7.0</version>\n    </dependency>\n  </dependencies>\n```\n> PersonService.java\n\n```java\n/**\n * name 为服务提供者 application-name，fallback 指定服务接口的断路器实现方法，自带Ribbon负债均衡及重试机制\n * @author songshuiyang\n * @date 2018/10/22 21:53\n */\n@FeignClient(name = \"eureka-provider\", fallback = PersonHystrixFallback.class)\npublic interface PersonService {\n\n    @RequestMapping(\"getPersonName\")\n    String getPersonName();\n\n    @RequestMapping(\"getPerson\")\n    Person getPerson();\n\n}\n```\n> PersonHystrixFallback.java\n```java\n/**\n * Hystrix服务降级 每一个服务接口的断路器实现就是实现类中重写函数的实现\n * @author songshuiyang\n * @date 2018/10/22 22:26\n */\n@Component\npublic class PersonHystrixFallback implements PersonService {\n\n    @Override\n    public String getPersonName() {\n        return \"HystrixFallbackService ERROR\";\n    }\n\n    @Override\n    public Person getPerson() {\n        return new Person(0,\"HystrixFallbackService ERROR\",88);\n    }\n}\n```\n> FeignAppliacation.java\n\n```java\n/**\n * @author songshuiyang\n * @date 2018/10/22 21:50\n */\n@EnableFeignClients\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class FeignAppliacation {\n    public static void main(String[] args) {\n        SpringApplication.run(FeignAppliacation.class,args);\n    }\n}\n```\n>application.yml\n\n```xml\nserver:\n  port: 9031\nspring:\n  application:\n    name: feign-consumer\neureka:\n  instance:\n    hostname: localhost\n  client:\n    service-url:\n      defaultZone: http://localhost:9010/eureka/,http://localhost:9011/eureka/\nribbon:\n  ConnectTimeout: 500\n  ReadTimeout: 5000\nfeign:\n  hystrix:\n    enabled: true\n```","tags":["java"],"categories":["server"]},{"title":"负载均衡Ribbon","url":"/2018/10/16/backend/spring/spring-cloud/负载均衡Ribbon/","content":"### 什么是Spring Cloud Ribbon\n> 一个基于HTTP和TCP的客户端负载均衡工具\n\n### 简单示例\n\n#### 1、集成ribbon\n```xml\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-ribbon</artifactId>\n    </dependency>\n```\n#### 2、消费方\n> 消费方调用方法\n```java\n@Configuration\n@RestController\npublic class DemoController {\n    /**\n     * 主要用来调用REST服务，本身并不具备调用分布式服务的能力，但通过LoadBalanced注解开启客户端负债均衡\n     * @return\n     */\n    @Bean\n    @LoadBalanced\n    public RestTemplate getRestTemplate() {\n        return new RestTemplate();\n    }\n\n    @RequestMapping(value = \"/router\", method = RequestMethod.GET,\n            produces = MediaType.APPLICATION_JSON_VALUE)\n    public String router() {\n        RestTemplate restTpl = getRestTemplate();\n        // 根据应用名称调用服务\n        String json = restTpl.getForObject(\"http://eureka-provider/person/1\", String.class);\n        return json;\n    }\n}\n```\n> 消费方配置文件\n```java\nserver:\n  port: 9050\nspring:\n  application:\n    name: eureka-consumer\neureka:\n  instance:\n    hostname: localhost\n  client:\n    service-url:\n      defaultZone: http://localhost:9010/eureka/,http://localhost:9020/eureka/\n```\n\n#### 3、服务方\n> 服务提供方法, 这里就是简单模拟了一下根据personId获取人员信息，并返回对应服务的端口\n```java\n   @RequestMapping(value = \"/person/{personId}\", method = RequestMethod.GET,\n            produces = MediaType.APPLICATION_JSON_VALUE)\n    public Person findPerson(@PathVariable(\"personId\") Integer personId, HttpServletRequest request) {\n        Person person = new Person(personId, \"songsy\", 18);\n        person.setName(person.getName() + \"端口：\" + IpConfigurationUtils.getPort());\n        return person;\n    }\n```\n\n> 配置文件\n```xml\nspring:\n  application:\n    name: eureka-provider\neureka:\n  instance:\n    hostname: localhost\n  client:\n    service-url:\n      defaultZone: http://localhost:9010/eureka/,http://localhost:9020/eureka/\n```\n##### 3.1 服务方1 以9011端口启动\n```java\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(Slave1ProviderApplication.class).properties(\"server.port=9011\").run(args);\n    }\n```\n##### 3.2 服务方2 以9023端口启动\n```java\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(Slave1ProviderApplication.class).properties(\"server.port=9023\").run(args);\n    }\n```\n#### 4、测试结果\n连续访问 `http://localhost:9050/router` 会得到不同的结果， 可以看到已经实现了负载均衡\n```xml\n{\"id\":1,\"name\":\"songsy端口：9023\",\"age\":18}\n\n{\"id\":1,\"name\":\"songsy端口：9011\",\"age\":18}\n```\n### 二：RestTemplate 使用\n> GET 请求\n\n提供 getForObject()、 getForEntity() \n\n> POST 请求\n\n提供 postForObject()、 postForObject()、postForLocation()\n\n> PUT 请求\n\n提供 put(), put() 函数没有返回内容\n\n\n> DELETE 请求\n\n提供 delete()\n\n### 三：源码分析\n> Ribbon实现客户端负债均衡是通过@LoadBalanced注解来开启的\n\n- @LoadBalanced 注解\n```java\n/**\n* 使用 LoadBalancerClient 该类来配置\n * Annotation to mark a RestTemplate bean to be configured to use a LoadBalancerClient\n * @author Spencer Gibb\n */\n@Target({ ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD })\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Qualifier\npublic @interface LoadBalanced {\n}\n```\n- LoadBalancerClient.java\n\n```java\n/**\n * Represents a client side load balancer\n * @author Spencer Gibb\n */\npublic interface LoadBalancerClient extends ServiceInstanceChooser {\n\n\t/**\n\t * 根据挑选出来服务实例执行请求\n\t * execute request using a ServiceInstance from the LoadBalancer for the specified\n\t * service\n\t * @param serviceId the service id to look up the LoadBalancer\n\t * @param request allows implementations to execute pre and post actions such as\n\t * incrementing metrics\n\t * @return the result of the LoadBalancerRequest callback on the selected\n\t * ServiceInstance\n\t */\n\t<T> T execute(String serviceId, LoadBalancerRequest<T> request) throws IOException;\n\n\t/**\n\t * 根据服务实例执行请求\n\t * execute request using a ServiceInstance from the LoadBalancer for the specified\n\t * service\n\t * @param serviceId the service id to look up the LoadBalancer\n\t * @param serviceInstance the service to execute the request to\n\t * @param request allows implementations to execute pre and post actions such as\n\t * incrementing metrics\n\t * @return the result of the LoadBalancerRequest callback on the selected\n\t * ServiceInstance\n\t */\n\t<T> T execute(String serviceId, ServiceInstance serviceInstance, LoadBalancerRequest<T> request) throws IOException;\n\n\t/**\n\t * 将 http://myservice/path/to/service 构建一个真实的host:port形式的url\n\t * Create a proper URI with a real host and port for systems to utilize.\n\t * Some systems use a URI with the logical serivce name as the host,\n\t * such as http://myservice/path/to/service.  This will replace the\n\t * service name with the host:port from the ServiceInstance.\n\t * @param instance\n\t * @param original a URI with the host as a logical service name\n\t * @return a reconstructed URI\n\t */\n\tURI reconstructURI(ServiceInstance instance, URI original);\n}\n```\n- ServiceInstanceChooser.java\n```java\npublic interface ServiceInstanceChooser {\n\n    /**\n    *  根据传入的服务实例名serviceId，从负债均衡中挑选一个对应服务的实例\n     * Choose a ServiceInstance from the LoadBalancer for the specified service\n     * @param serviceId the service id to look up the LoadBalancer\n     * @return a ServiceInstance that matches the serviceId\n     */\n    ServiceInstance choose(String serviceId);\n}\n```\n\n\n### 主要负载均衡策略\n\n#### 1、简单轮询负载均衡（RoundRobin）\n\n以轮询的方式依次将请求调度不同的服务器，即每次调度执行i = (i + 1) mod n，并选出第i台服务器。\n\n#### 2、随机负载均衡 （Random）\n\n随机选择状态为UP的Server\n\n#### 3、加权响应时间负载均衡 （WeightedResponseTime）\n\n根据响应时间分配一个weight，响应时间越长，weight越小，被选中的可能性越低。\n\n#### 4、区域感知轮询负载均衡（ZoneAvoidanceRule）\n\n复合判断server所在区域的性能和server的可用性选择server\n\n","tags":["java"],"categories":["server"]},{"title":"服务治理Eureka","url":"/2018/10/15/backend/spring/spring-cloud/服务治理Eureka/","content":"### Spring Cloud Netflix简介\nSpringCloud是一个基于SpringBoot实现的云应用开发工具，它为基于JVM的云应用开发中的配置故那里、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了简单的开发方式。\n\nSpringCloud下包含了多个工程，其中的Spring Cloud Netflix提供了一系列搭建微服务基础架构的功能组件。\n\nNetflix的部分组件及功能特性如下：\n1. Eureka（服务注册与发现框架）：一个基于REST风格的服务组件，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移\n2. Hystrix（服务容错组件）：容错管理工具，旨在通过控制服务和第三方库的节点，从而对延迟和故障提供强大的容村能力\n3. Zuul（服务网关）：边缘服务工具，提供动态路由、监控、贪心、安全等边缘服务\n4. Ribbon（客户端负载均衡器）：提供客户端负载均衡算法，将Netflix的中间层服务连接起来\n5. Feign（声明式HTTP客户端）：可以创建声明式、模板化的HTTP客户端，进行微服务调用\n\n### 什么是 Eureka\nEureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。SpringCloud将它集成在其子项目spring-cloud-netflix中，以实现SpringCloud的服务发现功能。\n\n![image]( https://github.com/songshuiyang/eureka-parent/blob/master/doc/images/eureka1.png)\n\n### 服务发现\n服务发现就像聊天室一个,每个用户来的时候去服务器上注册,这样他的好友们就能看到你,你同时也将获取好友的上线列表.在微服务中,服务就相当于聊天室的用户,而服务注册中心就像聊天室服务器一样。\n\n目前服务发现的解决方案有Eureka,Consul,Etcd,Zookeeper,SmartStack,等等\n\nEureka Client通过HTTP(或者TCP,UDP)去Eureka Server册和获取服务列表,为了高可用一般会有多个\n\nEureka Server组成集群.Eureka会移除那些心跳检查未到达的服务.\n","tags":["java"],"categories":["server"]},{"title":"Springboot构建微服务","url":"/2018/10/15/backend/spring/spring-cloud/Springboot构建微服务/","content":"### 什么是Spring-boot\nSpring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程(习惯优于配置)。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。\n\n\n### 核心功能\n1. 独立运行的Spring项目,可以以jar包的形式独立运行, 运行一个Spring boot项目只要通过 `java -jar xx.jar`\n2. 内嵌Tomcat, Jetty, Undertow 无需以war包形式部署项目\n3. 提供starter简化Maven配置\n4. 自动配置Bean, 极大的减少了我们要使用的配置\n\n### 优点\n1. 快速构建项目\n2. 对主流开发框架的无配置集成\n3. 项目可独立运行\n4. 提供运行时的应用监控\n\n### Starter POMs\n> Spring Boot 通过starter依赖为项目的依赖管理提供帮助.starter依赖起始就是特殊的maven依赖,利用了传递依赖解析,把常用库聚合在一起,组成了几个为特定功能而定制的依赖.\n\n所有的starters遵循一个相似的命名模式：spring-boot-starter-*，在这里*是一种特殊类型的应用程序。\neg:\n\n名称 | 描述\n---|---\nspring-boot-starter | 对自动配置、日志记录和YAML支持，核心starter\nspring-boot-starter-thymeleaf | 对Thymeleaf模板引擎的支持，Spring mvc的集成\nspring-boot-starter-web | 对web支持，包括RESTful，使用tomcat作为默认容器\nspring-boot-starter-data-jpa | 对jpa支持\n\n### 不同环境不同配置文件\n1. 针对各环境新建不同的配置文件 `application-dev.properties、application-test.properties、application-prod.properties` , 在这三个文件均都设置不同的server.port属性，如：dev环境设置为8080，test环境设置为9090，prod环境设置为80\n \n2. application.properties中设置spring.profiles.active=dev，就是说默认以dev环境设置\n \n3. 采用命令行的形式 \n```sql\n    执行java -jar xxx.jar，可以观察到服务端口被设置为8080，也就是默认的开发环境（dev）\n    \n    执行java -jar xxx.jar --spring.profiles.active=test，可以观察到服务端口被设置为9090，也就是测试环境的配置（test）\n    \n    执行java -jar xxx.jar --spring.profiles.active=prod，可以观察到服务端口被设置为80，也就是生产环境的配置（prod）\n```\n### 数据文件的加载顺序\n1. 在命令行中传入的参数\n2. SPRING_APPLICATION_JSON: 以JSON格式配置在系统环境变量中的内容\n3. java:comp/env 的JNDI属性\n4. Java的系统属性，可以通过System.getProperties()\n5. 操作系统的环境变量\n6. 通过 random.* 配置的随机属性\n7. 位当前jar之外，针对不同{profile}环境的配置文件内容, application-{profile}.yml\n8. 位当前jar之内，针对不同{profile}环境的配置文件内容, application-{profile}.yml\n9. 位当前jar之外，application.yml\n10. 位当前jar之内，application.yml\n","tags":["java"],"categories":["server"]},{"title":"spring-data-jpa","url":"/2018/09/10/backend/spring/spring-data/spring-data-jpa/","content":"\n![logo](/images/server/spring/spring-jpa/jpa1.png) \n\n![logo](/images/server/spring/spring-jpa/jpa2.png) \n\n![logo](/images/server/spring/spring-jpa/jpa3.png) ","tags":["jpa"],"categories":["服务器"]},{"title":"BigDecimal","url":"/2018/09/05/backend/Java/常用类/BigDecimal/","content":"### 构造函数\n\n* 参数类型为double的构造方法的结果有一定的不可预知性。有人可能认为在Java中写入newBigDecimal(0.1)所创建的BigDecimal正好等于 0.1（非标度值 1，其标度为 1），但是它实际上等于0.1000000000000000055511151231257827021181583404541015625。这是因为0.1无法准确地表示为 double（或者说对于该情况，不能表示为任何有限长度的二进制小数）。这样，传入到构造方法的值不会正好等于 0.1（虽然表面上等于该值）。\n\n* 另一方面，String 构造方法是完全可预知的：写入 newBigDecimal(\"0.1\") 将创建一个 BigDecimal，它正好等于预期的 0.1。因此，比较而言，通常建议优先使用String构造方法。\n\n* 当double必须用作BigDecimal的源时，请注意，此构造方法提供了一个准确转换；它不提供与以下操作相同的结果：先使用Double.toString(double)方法，然后使用BigDecimal(String)构造方法，将double转换为String。要获取该结果，请使用static valueOf(double)方法。\n\n\n### 运算\n* 减乘除其实最终都返回的是一个新的BigDecimal对象，因为BigInteger与BigDecimal都是不可变的（immutable）的，在进行每一步运算时，都会产生一个新的对象，所以a.add(b);虽然做了加法操作，但是a并没有保存加操作后的值，正确的用法应该是a=a.add(b);\n\n\n### 精度\n```java\nBigDecimal.setScale() 方法用于格式化小数点\n\nsetScale(1) 表示保留一位小数，默认用四舍五入方式\n\nsetScale(1,BigDecimal.ROUND_DOWN) 直接删除多余的小数位，2.31变成2.3、2.35会变成2.3\n\nsetScale(1,BigDecimal.ROUND_UP) 进位处理，2.31变成2.4 2.35变成2.4 \n\nsetScale(1,BigDecimal.ROUND_CEILING) 如果为正数，则舍入行为与 ROUND_UP 相同，反之舍入行为与 ROUND_DOWN 相同\n\nsetScale(1,BigDecimal.ROUND_FLOOR) 如果为正数，则舍入行为与 ROUND_DOWN 相同，反之舍入行为与 ROUND_UP 相同\n\nsetScale(1,BigDecimal.ROUND_HALF_UP) 四舍五入，2.35变成2.4\n\nsetScale(1,BigDecimal.ROUND_HALF_DOWN) 四舍五入，2.35变成2.3(如果是5则向下舍)，2.36变成2.4\n\nsetScale(1,BigDecimal.ROUND_HALF_EVEN) 银行家舍入法 如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同 如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。如 1.15>1.2 1.25>1.2\n```\n\n\n### 异常处理\n####  `foo.divide(bar));` 报异常\n\n```java\njava.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result。\n```\n\n原因：\n\n```java\n原来JAVA中如果用BigDecimal做除法的时候一定要在divide方法中传递第二个参数，定义精确到小数点后几位，否则在不整除的情况下，结果是无限循环小数时，就会抛出以上异常。\n解决方法：\n\nfoo.divide(bar, 2, BigDecimal.ROUND_HALF_UP);\n注意这个divide方法有两个重载的方法，一个是传两个参数的，一个是传三个参数的：\n\n两个参数的方法：\n\n@param divisor value by which this {@code BigDecimal} is to be divided. 传入除数\n\n@param roundingMode rounding mode to apply. 传入round的模式\n\n三个参数的方法：\n\n@param divisor value by which this {@code BigDecimal} is to be divided. 传入除数\n@param scale scale of the {@code BigDecimal} quotient to be returned. 传入精度\n@param roundingMode rounding mode to apply. 传入round的模式\n```","tags":["Java"],"categories":["server"]},{"title":"在SELECT 的读取锁定主要分为两种方式","url":"/2018/08/01/backend/数据库/在SELECT 的读取锁定主要分为两种方式/","content":"在SELECT 的读取锁定主要分为两种方式：\n* SELECT ... LOCK IN SHARE MODE\n* SELECT ... FOR UPDATE\n\n这两种方式在事务(Transaction) 进行当中SELECT 到同一个数据表时，都必须等待其它事务数据被提交(Commit)后才会执行。\n\n而主要的不同在于LOCK IN SHARE MODE 在有一方事务要Update 同一个表单时很容易造成死锁。\n\n简单的说，如果SELECT 后面若要UPDATE 同一个表单，最好使用SELECT ... UPDATE。\n\n### 悲观锁介绍\n> 　悲观锁是对数据被的修改持悲观态度（认为数据在被修改的时候一定会存在并发问题），因此在整个数据处理过程中将数据锁定。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在应用层中实现了加锁机制，也无法保证外部系统不会修改数据）。\n  \n#### 使用场景举例\n商品goods表中有一个字段status，status为1代表商品未被下单，status为2代表商品已经被下单，那么我们对某个商品下单时必须确保该商品status为1。假设商品的id为1。如果不采用锁，那么操作方法如下：\n```java\n//1.查询出商品信息\nselect status from t_goods where id=1;\n//2.根据商品信息生成订单\ninsert into t_orders (id,goods_id) values (null,1);\n//3.修改商品status为2\nupdate t_goods set status=2;\n```\n\n上面这种场景在高并发访问的情况下很可能会出现问题。前面已经提到，只有当goods status为1时才能对该商品下单，上面第一步操作中，查询出来的商品status为1。但是当我们执行第三步Update操作的时候，有可能出现其他人先一步对商品下单把goods status修改为2了，但是我们并不知道数据已经被修改了，这样就可能造成同一个商品被下单2次，使得数据不一致。所以说这种方式是不安全的。\n\n#### 使用悲观锁来实现\n在上面的场景中，商品信息从查询出来到修改，中间有一个处理订单的过程，使用悲观锁的原理就是，当我们在查询出goods信息后就把当前的数据锁定，直到我们修改完毕后再解锁。那么在这个过程中，因为goods被锁定了，就不会出现有第三者来对其进行修改了。要使用悲观锁，我们必须关闭mysql数据库的自动提交属性。\n\n```java\nset autocommit=0;　　\n//设置完autocommit后，我们就可以执行我们的正常业务了。具体如下：\n//0.开始事务\nbegin;/begin work;/start transaction; (三者选一就可以)\n//1.查询出商品信息\nselect status from t_goods where id=1 for update;\n//2.根据商品信息生成订单\ninsert into t_orders (id,goods_id) values (null,1);\n//3.修改商品status为2\nupdate t_goods set status=2;\n//4.提交事务\ncommit;/commit work;\n```\n注：上面的begin/commit为事务的开始和结束，因为在前一步我们关闭了mysql的autocommit，所以需要手动控制事务的提交，在这里就不细表了。\n\n上面的第一步我们执行了一次查询操作：select status from t_goods where id=1 for update;与普通查询不一样的是，我们使用了select…for update的方式，这样就通过数据库实现了悲观锁。此时在t_goods表中，id为1的那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。\n\n注：需要注意的是，在事务中，只有SELECT ... FOR UPDATE 或LOCK IN SHARE MODE 相同数据时会等待其它事务结束后才执行，一般SELECT ... 则不受此影响。拿上面的实例来说，当我执行select status from t_goods where id=1 for update;后。我在另外的事务中如果再次执行select status from t_goods where id=1 for update;则第二个事务会一直等待第一个事务的提交，此时第二个查询处于阻塞的状态，但是如果我是在第二个事务中执行select status from t_goods where id=1;则能正常查询出数据，不会受第一个事务的影响。\n\n  　　","tags":["db"],"categories":["server"]},{"title":"null != a 与 a != null 区别","url":"/2018/08/01/backend/Java/null判断/","content":"> 在其他人的项目中经常会看到 `null ! = a` 这种写法, 但平常使用的是都是 `a != null` 这种写法\n \n#### 原因：\n功能上是没有区别的，企业里大多是时候是推荐第一种的，是因为能够防止程序员书写遗漏等号导致错误。比如：null != a 这样少了“！”也会报错。而a ！=null少了\"！\"就不会报错了。程序员有时候容易把 == 误写为 = ，如果把常量放前面 5 = i ，会编译错误，而写成i=5就不会报错了，所以这样写能发现这种笔误bug。\n\n#### 总结\n1. 所以在实际项目中，细节很重要，一个小小的问题有可能导致一系列的问题。\n2. 多阅读其他人的代码，借鉴其他人的思想及技巧。\n\n","tags":["Java"],"categories":["server"]},{"title":"高可用","url":"/2018/08/01/backend/Java/高可用/","content":"## 一、什么是高可用\n> 高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。\n\n假设系统一直能够提供服务，我们说系统的可用性是100%。\n\n如果系统每运行100个时间单位，会有1个时间单位无法提供服务，我们说系统的可用性是99%。\n\n很多公司的高可用目标是4个9，也就是99.99%，这就意味着，系统的年停机时间为8.76个小时。\n\n百度的搜索首页，是业内公认高可用保障非常出色的系统，甚至人们会通过www.baidu.com 能不能访问来判断“网络的连通性”，百度高可用的服务让人留下啦“网络通畅，百度就能访问”，“百度打不开，应该是网络连不上”的印象，这其实是对百度最高的褒奖。\n\n## 如何保障系统的高可用\n\n我们都知道，单点是系统高可用的大敌，单点往往是系统高可用最大的风险和敌人，应该尽量在系统设计的过程中避免单点。方法论上，高可用保证的原则是“集群化”，或者叫“冗余”：只有一个单点，挂了服务会受影响；如果有冗余备份，挂了还有其他backup能够顶上。\n\n保证系统高可用，架构设计的核心准则是：冗余。\n\n有了冗余之后，还不够，每次出现故障需要人工介入恢复势必会增加系统的不可服务实践。所以，又往往是通过“自动故障转移”来实现系统的高可用。\n\n接下来我们看下典型互联网架构中，如何通过冗余+自动故障转移来保证系统的高可用特性。\n\n## 分层高可用架构实践\n\n下面的图是常见的互联网分层架构\n![logo](/images/server/java/三高/20180607142425564.jpg)\n\n> 【客户端层】到【反向代理层】的高可用，\n\n是通过反向代理层的冗余来实现的。以nginx为例：有两台nginx，一台对线上提供服务，另一台冗余以保证高可用，常见的实践是keepalived存活探测，相同virtual IP提供服务。\n\n自动故障转移：当nginx挂了的时候，keepalived能够探测到，会自动的进行故障转移，将流量自动迁移到shadow-nginx，由于使用的是相同的virtual IP，这个切换过程对调用方是透明的。\n\n> 【反向代理层->站点层】的高可用\n\n【反向代理层】到【站点层】的高可用，是通过站点层的冗余来实现的。假设反向代理层是nginx，nginx.conf里能够配置多个web后端，并且nginx能够探测到多个后端的存活性。\n\n自动故障转移：当web-server挂了的时候，nginx能够探测到，会自动的进行故障转移，将流量自动迁移到其他的web-server，整个过程由nginx自动完成，对调用方是透明的。\n\n> 【站点层->服务层】的高可用\n\n【站点层】到【服务层】的高可用，是通过服务层的冗余来实现的。“服务连接池”会建立与下游服务多个连接，每次请求会“随机”选取连接来访问下游服务。\n\n自动故障转移：当service挂了的时候，service-connection-pool能够探测到，会自动的进行故障转移，将流量自动迁移到其他的service，整个过程由连接池自动完成，对调用方是透明的（所以说RPC-client中的服务连接池是很重要的基础组件）。 \n\n\n> 【服务层>数据库层】的高可用\n\n大部分互联网技术，数据库层都用了“主从同步，读写分离”架构，所以数据库层的高可用，又分为“读库高可用”与“写库高可用”两类。\n\n\n参考： https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=2651959728&idx=1&sn=933227840ec8cdc35d3a33ae3fe97ec5&chksm=bd2d046c8a5a8d7a13551124af36bedf68f7a6e31f6f32828678d2adb108b86b7e08c678f22f&scene=21#wechat_redirect\n\n","tags":["Java"],"categories":["server"]},{"title":"高并发","url":"/2018/07/31/backend/Java/highConcurrency/高并发/","content":"## 一、什么是高并发\n> 通常指通过设计保证系统能够同时并行处理很多请求。\n\n高并发相关常用的一些指标\n\n参数 | 定义\n---|---\n响应时间 | 系统对请求做出响应的时间。例如系统处理一个HTTP请求需要200ms，这个200ms就是系统的响应时间。\n吞吐量   | 单位时间内处理的请求数量。\nQPS | 每秒响应请求数。在互联网领域，这个指标和吞吐量区分的没有这么明显。\n并发用户数 | 同时承载正常使用系统功能的用户数量。例如一个即时通讯系统，同时在线量一定程度上代表了系统的并发用户数。\n\n## 二、如何提升系统的并发能力\n>互联网分布式架构设计，提高系统并发能力的方式，方法论上主要有两种：垂直扩展（Scale Up）与水平扩展（Scale Out）。\n\n\n### 垂直扩展\n提升单机处理能力。垂直扩展的方式又有两种：\n\n1. 增强单机硬件性能，例如：增加CPU核数如32核，升级更好的网卡如万兆，升级更好的硬盘如SSD，扩充硬盘容量如2T，扩充系统内存如128G，带宽；\n2. 提升单机架构性能，例如：使用Cache来减少IO次数，使用异步来增加单服务吞吐量，使用无锁数据结构来减少响应时间；\n\n\n### 水平扩展\n下面的图是常见的互联网分层架构\n![logo](/images/server/java/三高/20180607142425564.jpg) \n\n#### 常见互联网分布式架构\n\n（1）客户端层：典型调用方是浏览器browser或者手机应用APP\n\n（2）反向代理层：系统入口，反向代理\n\n（3）站点应用层：实现核心应用逻辑，返回html或者json\n\n（4）服务层：如果实现了服务化，就有这一层\n\n（5）数据-缓存层：缓存加速访问存储\n\n（6）数据-数据库层：数据库固化数据存储\n\n\n#### 各分层水平扩展架构实践\n\n> 反向代理层的水平扩展: 配置多个服务器数量\n\n反向代理层的水平扩展，是通过“DNS轮询”实现的：dns-server对于一个域名配置了多个解析ip，每次DNS解析请求来访问dns-server，会轮询返回这些ip。\n\n当nginx成为瓶颈的时候，只要增加服务器数量，新增nginx服务的部署，增加一个外网ip，就能扩展反向代理层的性能，做到理论上的无限高并发。\n\n> 站点层的水平扩展: 配置多个web服务\n\n站点层的水平扩展，是通过“nginx”实现的。通过修改nginx.conf，可以设置多个web后端。\n\n当web后端成为瓶颈的时候，新增web服务的部署，在nginx配置中配置上新的web后端，就能扩展站点层的性能，做到理论上的无限高并发。\n\n> 服务层的水平扩展\n\n1.服务层的水平扩展，是通过“服务连接池”实现的。\n\n站点层通过RPC-client调用下游的服务层RPC-server时，RPC-client中的连接池会建立与下游服务多个连接，当服务成为瓶颈的时候，只要增加服务器数量，新增服务部署，在RPC-client处建立新的下游服务连接，就能扩展服务层性能，做到理论上的无限高并发。如果需要优雅的进行服务层自动扩容，这里可能需要配置中心里服务自动发现功能的支持。\n\n2.动静分离，页面静态化，CDN加速\n\n3.不要频繁的new对象,对于在整个应用中只需要存在一个实例的类使用单例模式\n\n> 数据层的水平扩展：缓存，数据库\n\n在数据量很大的情况下，数据层（缓存，数据库）涉及数据的水平扩展，将原本存储在一台服务器上的数据（缓存，数据库）水平拆分到不同服务器上去，以达到扩充系统性能的目的。\n\n## 三、如何处理高并发线程安全问题\n### Java进程加锁\n\n### 乐观锁与悲观锁\n#### 乐观锁\n乐观锁是相对悲观锁来说的，它认为数据一般情况下不会造成冲突，所以在访问记录前不会加排他锁，而是在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，具体说根据update返回的行数让用户决定如何去做。乐观锁并不会使用数据库提供的锁机制，一般在表添加version字段或者使用业务状态来做。\n\n#### 悲观锁\n悲观锁，指数据被外界修改持保守态度(悲观),在整个数据处理过程中，将数据处于锁定状态。 悲观锁的实现，往往依靠数据库提供的锁机制 。数据库中实现是对数据记录进行操作前，先给记录加排它锁，如果获取锁失败，则说明数据正在被其他线程修改，则等待或者抛出异常。如果加锁成功，则获取记录，对其修改，然后事务提交后释放排它锁。\n\n一个例子：select * from 表 where .. for update;\n\n悲观锁是先加锁再访问策略，处理加锁会让数据库产生额外的开销，还有增加产生死锁的机会，另外在多个线程只读情况下不会产生数据不一致行问题，没必要使用锁，只会增加系统负载，降低并发性，因为当一个事务锁定了该条记录，其他读该记录的事务只能等待。\n\n乐观锁直到提交的时候才去锁定，所以不会产生任何锁和死锁。\n\n参考: https://blog.csdn.net/DreamWeaver_zhou/article/details/78587580","tags":["Java"],"categories":["server"]},{"title":"Integer 类型与 int 的==比较","url":"/2018/07/25/backend/Java/Integer 类型与 int 的==比较/","content":"### 先上题\n```java\npackage com.lizi.basic;\n\npublic class IntegerDemo {\n\n    public static void main(String[] args) {\n        Integer a = new Integer(3);\n        Integer b = 3;\n        int c = 3;\n\n        System.out.println(a == b);\n        System.out.println(a == c);\n\n        Integer f1 = 100, f2 = 100, f3 = 150, f4 = 150;\n        System.out.println(f1 == f2);\n        System.out.println(f3 == f4);\n    }\n\n}\n```\n#### 分析思路\n\n* 基本类型\n\n  基本数据类类型存的是数值本身\n* 引用类型 \n\n  引用类型变量在内存放的是数据的引用\n  \n基本类型通过 == 比较的是他们的值大小，而引用类型比较的是他们的引用地址\n\nInteger 用 == 比较的时候往往非常容易出错\n```java\n        Integer f1 = 100, f2 = 100, f3 = 150, f4 = 150;\n        System.out.println(f1 == f2);\n        System.out.println(f3 == f4);\n        \n        // 当我们给一个Integer赋予一个int类型的时候会调用Integer的静态方法valueOf。\n        Integer f1 = Integer.valueOf(100); \n        Integer f2 = Integer.valueOf(100); \n        Integer f3 = Integer.valueOf(150); \n        Integer f4 = Integer.valueOf(150);\n```\n\n思考：那么Integer.valueOf()返回的Integer是不是是重新new Integer(num);来创建的呢？如果是这样的话，那么== 比较返回都是false，因为他们引用的堆地址不一样\n\n具体来看看Integer.valueOf的源码\n\n```java\n    public static Integer valueOf(int i) {\n        if (i >= IntegerCache.low && i <= IntegerCache.high)\n            return IntegerCache.cache[i + (-IntegerCache.low)];\n        return new Integer(i);\n    }\n```\n在IntegerCache中cache数组初始化如下，存入了-128 - 127的值\n```java\n        cache = new Integer[(high - low) + 1];\n        int j = low;\n        for(int k = 0; k < cache.length; k++)\n            cache[k] = new Integer(j++);\n```\n从上面我们可以知道给Interger 赋予的int数值在-128 - 127的时候，直接从cache中获取，这些cache引用对Integer对象地址是不变的，但是不在这个范围内的数字，则new Integer(i) 这个地址是新的地址，不可能一样的\n\n#### Integer 与 int\n```java\nInteger a = new Integer(3);\nInteger b = 3;\nint c = 3;\n\nSystem.out.println(a == b);\nSystem.out.println(a == c);\n\na == b分析\nInteger b = 3; 自动调用Integer.valueOf(3) 返回一个Integer的对象。 这个对象存放到cache中的\n\n而 Integer a = new Integer(3);这里创建了一个新的对象Integer 所以 a == b 返回的是false\n\na == c 分析\n一个Integer 与 int比较，先将Integer转换成int类型，再做值比较，所以返回的是true\n```\n\n#### 最后答案\n```java\n  public static void main(String[] args) {\n        Integer a = new Integer(3);\n        Integer b = 3;\n        int c = 3;\n\n        System.out.println(a == b);\n        System.out.println(a == c);\n\n        Integer f1 = 100, f2 = 100, f3 = 150, f4 = 150;\n        System.out.println(f1 == f2);\n        System.out.println(f3 == f4);\n    }\n    \n    false\n    true\n    true\n    false\n```\n","tags":["Java"],"categories":["server"]},{"title":"基于 CentOS 搭建 Jenkins 自动化部署服务","url":"/2018/07/20/backend/centos/基于 CentOS 搭建 Jenkins服务/","content":"> 需求： 使用 Jenkins 完成 git + Maven项目 + Tomcat 自动化部署\n\n### 一： 环境准备\n\n#### 1. Jenkins环境准备\n\n##### 1.1 安装 jenkins-2.7.3\n```sql\n wget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm\n\n rpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n```\n##### 1.2 配置启动\n```sql\n 1. 修改配置文件，默认端口为8080，如果不冲突则不需要修改      \n vim /etc/sysconfig/jenkins\n        JENKINS_PORT=\"9080\"\n \n 2. 配置JDK,启动服务如果报Java路径错误, 需要到vim /etc/profile 查看java路径\n \n        修改Jenkins启动配置文件，指定java安装路径。\n        /usr/local/jdk1.8.0_181/bin/java\n        \n        vim /etc/init.d/jenkins\n        在candidates中第一行添加java路径，如下：\n        candidates=\"\n        /usr/local/jdk1.8.0_181/bin/java\n        /etc/alternatives/java\n        /usr/lib/jvm/java-1.6.0/bin/java\n        /usr/lib/jvm/jre-1.6.0/bin/java\n        /usr/lib/jvm/java-1.7.0/bin/java\n        /usr/lib/jvm/jre-1.7.0/bin/java\n        /usr/lib/jvm/java-1.8.0/bin/java\n        /usr/lib/jvm/jre-1.8.0/bin/java\n        /usr/bin/java\n        \"                    \n \n 3. 修改jenkins用户 为\"root\"用户\n \n 4. 启动jenkins服务\n service jenkins restart\n\n 5. 启动完成之后即可通过ip 端口进行访问\n```\n![logo](/images/server/java/jenkins/jenkins1.png) \n\n#### 2. Git 环境准备\n```sql\n安装git\n[root@iZwz9fjhnq78zfjphj8hi4Z bin]# yum –y install git\n\n\n查看是否安装成功\n[root@iZwz9fjhnq78zfjphj8hi4Z bin]# git --version\ngit version 1.8.3.1\n```\n\n#### 3. Maven 环境准备\n##### 3.1 安装\n```sql\ncd /usr/local\n\nwget http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz\n\ntar zxf apache-maven-3.5.4-bin.tar.gz\n\nmv apache-maven-3.5.4 /usr/local/maven-3.5.4\n```\n##### 3.2 配置环境变量\n```sql\nvi /etc/profile然后还需要 配置环境变量。\n\n#在适当的位置添加\nexport M2_HOME=/usr/local/maven-3.5.4\nexport PATH=$PATH:$JAVA_HOME/bin:$M2_HOME/bin\n\n保存退出后运行下面的命令使配置生效，或者重启服务器生效。\nsource /etc/profile\n\n验证版本\nmvn -v\n```\n##### 3.3 更换库源 阿里maven库\n```sql\n（1）找到 apache-maven-3.5.2\\conf 目录中的 settings.xml 文件\n（2）修改maven 本地仓库地址,\n       首先在D:\\Program Files创建文件夹MavenRepository ；\n       找到settings.xml 文件中  <localRepository> </localRepository>打开注释修改如下：\n    <localRepository>D:\\Program Files\\MavenRepository</localRepository>\n（3）添加阿里源 ，找到  <mirrors>  </ mirrors>标签，在标签内部 添加内容如下：\n    <mirror>\n      <id>AliMaven</id>\n      <name>aliyun maven</name>\n      <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n      <mirrorOf>central</mirrorOf>        \n    </mirror>\n\n```\n\n#### 4. 使用Jenkins\n##### 4.1 配置工具环境配置\n\n上面的环境都准备好了之后，先配置一下 参数(系统管理-> 全局工具配置) git不用配置使用默认\n\n![logo](/images/server/java/jenkins/jenkins-git.png) \n\n![logo](/images/server/java/jenkins/jenkins-jdk.png) \n\n![logo](/images/server/java/jenkins/jenkins-maven.png) \n\n##### 4.2 创建一个任务 \n\n1.点击创建任务，如果在创建项目时候，没有“创建一个Maven 项目”的选项。你需要安装Maven项目插件：Maven Integration plugin 。\n\n![logo](/images/server/java/jenkins/jenkins-mavenc.png) \n\n2.配置源码管理，jenkins会自动拉取代码放到`/var/lib/jenkins/workspace/任务名` 路径下\n\n![logo](/images/server/java/jenkins/jenkins-gitee.png) \n\n3.配置Maven构建，构建完后会自动打包\n\n![logo](/images/server/java/jenkins/jenkins-mavenbuild.png)\n\n4.编写shell脚本，maven构建完成之后就是把打好的包放在tomcat下了并启动\n\n```bash\n#!/bin/bash\n#引入了系统环境变量，这样系统环境变量里面没有export声明的也可以用\nsource /etc/profile\n\ntomcat_home=/usr/local/tomcat-8.0.48\nSHUTDOWN=$tomcat_home/bin/shutdown.sh\nSTARTTOMCAT=$tomcat_home/bin/startup.sh\n\necho \"停止tomcat服务 /usr/local/tomcat8.0.48/bin/shutdown.sh\"\n#/usr/local/tomcat8.0.48/bin/shutdown.sh\n\necho \"关闭$tomcat_home\"\n$SHUTDOWN\npidlist=`ps -ef |grep tomcat  |grep -v \"grep\"|awk '{print $2}'`\nkill -9 $pidlist\n\n\necho \"开始删除文件夹 usr/local/tomcat8.0.48/webapps/blogsys-parent\"\nrm -rf $tomcat_home/webapps/blogsys-parent\n\necho \"开始删除文件 /usr/local/tomcat8.0.48/webapps/blogsys-parent.war\"\nrm -rf $tomcat_home/webapps/blogsys-parent.war\n\necho \"开始拷贝文件 blogsys-parent.war 拷贝文件目录：/var/lib/jenkins/workspace/blogsys-parent/blogsys-admin/target >> /usr/local/tomcat8.0.48/webapps\"\n\ncp -ar /var/lib/jenkins/workspace/blogsys-parent/blogsys-admin/target/blogsys-parent.war $tomcat_home/webapps/blogsys-parent.war\n\necho \"查找文件\"\nfind $tomcat_home/webapps/ -name  blogsys-parent.war\n\n\necho \"启动$tomcat_home\"\n$STARTTOMCAT\n\necho \"延时5秒\"\nsleep 5\n\necho \"关闭$tomcat_home\"\n$SHUTDOWN\npidlist=`ps -ef |grep tomcat  |grep -v \"grep\"|awk '{print $2}'`\nkill -9 $pidlist\n\necho \"延时5秒重新启动\"\nsleep 5\n\n# 脚本中功能是复制替换某两个配置文件，然后关闭tomcat，重启Tomcat。但是，Tomcat只是启动了一下，就关闭了，并没有启动Tomcat的进程。在网上查了资料，需要在执行脚本之前加入：export BUILD_ID=XXXXXX\nexport BUILD_ID=dontKillMe\necho \"启动$tomcat_home\"\n$STARTTOMCAT\n\n\necho \"延时10秒\"\nsleep 10\n\necho \"打印日志开始-》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》\"\ntail -2000 ${tomcat_home}/logs/catalina.out\n``` \n##### 启动任务\n可以看到日志输出\n```bash\nStarted by user songshuiyang\nBuilding in workspace /var/lib/jenkins/workspace/blogsys-parent\n > git rev-parse --is-inside-work-tree # timeout=10\nFetching changes from the remote Git repository\n > git config remote.origin.url https://gitee.com/songshuiyang/blogsys-parent.git # timeout=10\nFetching upstream changes from https://gitee.com/songshuiyang/blogsys-parent.git\n > git --version # timeout=10\nusing GIT_ASKPASS to set credentials 码云账号\n > git fetch --tags --progress https://gitee.com/songshuiyang/blogsys-parent.git +refs/heads/*:refs/remotes/origin/*\n > git rev-parse refs/remotes/origin/master^{commit} # timeout=10\n > git rev-parse refs/remotes/origin/origin/master^{commit} # timeout=10\nChecking out Revision 926c54ff215417d928b32201b50e2c2cb40b6ba8 (refs/remotes/origin/master)\n > git config core.sparsecheckout # timeout=10\n > git checkout -f 926c54ff215417d928b32201b50e2c2cb40b6ba8\nCommit message: \"优化 修复pom问题\"\n > git rev-list --no-walk 926c54ff215417d928b32201b50e2c2cb40b6ba8 # timeout=10\nParsing POMs\nEstablished TCP socket on 40447\n[blogsys-parent] $ /usr/local/jdk1.8.0_181/bin/java -cp /var/lib/jenkins/plugins/maven-plugin/WEB-INF/lib/maven35-agent-1.12-alpha-1.jar:/usr/local/maven-3.5.4/boot/plexus-classworlds-2.5.2.jar:/usr/local/maven-3.5.4/conf/logging jenkins.maven3.agent.Maven35Main /usr/local/maven-3.5.4 /var/cache/jenkins/war/WEB-INF/lib/remoting-3.23.jar /var/lib/jenkins/plugins/maven-plugin/WEB-INF/lib/maven35-interceptor-1.12-alpha-1.jar /var/lib/jenkins/plugins/maven-plugin/WEB-INF/lib/maven3-interceptor-commons-1.12-alpha-1.jar 40447\n<===[JENKINS REMOTING CAPACITY]===>channel started\nExecuting Maven:  -B -f /var/lib/jenkins/workspace/blogsys-parent/pom.xml clean install -Dmaven.test.skip=true\n[INFO] Scanning for projects...\n[WARNING] \n[WARNING] Some problems were encountered while building the effective model for com.ecut:blogsys-admin:war:0.0.1-SNAPSHOT\n[WARNING] 'dependencies.dependency.systemPath' for json:json:jar should not point at files within the project directory, ${project.basedir}/src/main/webapp/WEB-INF/lib/json.jar will be unresolvable by dependent projects @ line 25, column 19\n[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: com.fasterxml.jackson.core:jackson-databind:jar -> version ${jackson-databind.version} vs 2.7.4 @ com.ecut:blogsys-parent:0.0.1-SNAPSHOT, /var/lib/jenkins/workspace/blogsys-parent/pom.xml, line 244, column 21\n[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-surefire-plugin is missing. @ com.ecut:blogsys-parent:0.0.1-SNAPSHOT, /var/lib/jenkins/workspace/blogsys-parent/pom.xml, line 383, column 21\n[WARNING] 'build.plugins.plugin.version' for org.springframework.boot:spring-boot-maven-plugin is missing. @ com.ecut:blogsys-parent:0.0.1-SNAPSHOT, /var/lib/jenkins/workspace/blogsys-parent/pom.xml, line 407, column 21\n[WARNING] \n[WARNING] Some problems were encountered while building the effective model for com.ecut:blogsys-core:jar:0.0.1-SNAPSHOT\n[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-surefire-plugin is missing. @ com.ecut:blogsys-parent:0.0.1-SNAPSHOT, /var/lib/jenkins/workspace/blogsys-parent/pom.xml, line 383, column 21\n[WARNING] 'build.plugins.plugin.version' for org.springframework.boot:spring-boot-maven-plugin is missing. @ com.ecut:blogsys-parent:0.0.1-SNAPSHOT, /var/lib/jenkins/workspace/blogsys-parent/pom.xml, line 407, column 21\n[WARNING] \n[WARNING] Some problems were encountered while building the effective model for com.ecut:blogsys-parent:pom:0.0.1-SNAPSHOT\n[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: com.fasterxml.jackson.core:jackson-databind:jar -> version ${jackson-databind.version} vs 2.7.4 @ line 244, column 21\n[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-surefire-plugin is missing. @ line 383, column 21\n[WARNING] 'build.plugins.plugin.version' for org.springframework.boot:spring-boot-maven-plugin is missing. @ line 407, column 21\n[WARNING] \n[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.\n[WARNING] \n[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.\n[WARNING] \n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO] \n[INFO] blogsys-parent                                                     [pom]\n[INFO] blogsys-admin                                                      [war]\n[INFO] blogsys-core                                                       [jar]\n[INFO] \n[INFO] ----------------------< com.ecut:blogsys-parent >-----------------------\n[INFO] Building blogsys-parent 0.0.1-SNAPSHOT                             [1/3]\n[INFO] --------------------------------[ pom ]---------------------------------\n[INFO] \n[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ blogsys-parent ---\n[INFO] \n[INFO] --- maven-install-plugin:2.4:install (default-install) @ blogsys-parent ---\n[INFO] Installing /var/lib/jenkins/workspace/blogsys-parent/pom.xml to /root/.m2/repository/com/ecut/blogsys-parent/0.0.1-SNAPSHOT/blogsys-parent-0.0.1-SNAPSHOT.pom\n[WARNING] Attempt to (de-)serialize anonymous class hudson.maven.reporters.MavenArtifactArchiver$2; see: https://jenkins.io/redirect/serialization-of-anonymous-classes/\n[WARNING] Attempt to (de-)serialize anonymous class hudson.maven.reporters.MavenFingerprinter$1; see: https://jenkins.io/redirect/serialization-of-anonymous-classes/\n[INFO] \n[INFO] -----------------------< com.ecut:blogsys-admin >-----------------------\n[INFO] Building blogsys-admin 0.0.1-SNAPSHOT                              [2/3]\n[INFO] --------------------------------[ war ]---------------------------------\n[INFO] \n[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ blogsys-admin ---\n[INFO] Deleting /var/lib/jenkins/workspace/blogsys-parent/blogsys-admin/target\n[INFO] \n[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ blogsys-admin ---\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] Copying 32 resources\n[INFO] \n[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ blogsys-admin ---\n[INFO] Compiling 164 source files to /var/lib/jenkins/workspace/blogsys-parent/blogsys-admin/target/classes\n[WARNING] /var/lib/jenkins/workspace/blogsys-parent/blogsys-admin/src/main/java/com/ecut/core/shiro/SecurityUtils.java:[8,15] BASE64Encoder is internal proprietary API and may be removed in a future release\n[WARNING] /var/lib/jenkins/workspace/blogsys-parent/blogsys-admin/src/main/java/com/ecut/core/utils/elven/encryption/DesEncryptUtils.java:[8,15] BASE64Decoder is internal proprietary API and may be removed in a future release\n\n.....\n\n```\n\n","tags":["jenkins"],"categories":["server"]},{"title":"HashSet","url":"/2018/07/08/backend/Java/集合容器/HashSet/","content":"#### HashSet源码：\n```java\n  public class HashSet<E>  \n      extends AbstractSet<E>  \n      implements Set<E>, Cloneable, java.io.Serializable  \n  {  \n      static final long serialVersionUID = -5024744406713321676L;  \n    \n      // 底层使用HashMap来保存HashSet中所有元素。  \n      private transient HashMap<E,Object> map;  \n        \n      // 定义一个虚拟的Object对象作为HashMap的value，将此对象定义为static final。  \n      private static final Object PRESENT = new Object();  \n    \n      /** \n       * 默认的无参构造器，构造一个空的HashSet。 \n       *  \n       * 实际底层会初始化一个空的HashMap，并使用默认初始容量为16和加载因子0.75。 \n       */  \n      public HashSet() {  \n        map = new HashMap<E,Object>();  \n      }  \n    \n      /** \n       * 构造一个包含指定collection中的元素的新set。 \n       * \n       * 实际底层使用默认的加载因子0.75和足以包含指定 \n       * collection中所有元素的初始容量来创建一个HashMap。 \n       * @param c 其中的元素将存放在此set中的collection。 \n       */  \n      public HashSet(Collection<? extends E> c) {  \n        map = new HashMap<E,Object>(Math.max((int) (c.size()/.75f) + 1, 16));  \n        addAll(c);  \n      }  \n    \n      /** \n       * 以指定的initialCapacity和loadFactor构造一个空的HashSet。 \n       * \n       * 实际底层以相应的参数构造一个空的HashMap。 \n       * @param initialCapacity 初始容量。 \n       * @param loadFactor 加载因子。 \n       */  \n      public HashSet(int initialCapacity, float loadFactor) {  \n        map = new HashMap<E,Object>(initialCapacity, loadFactor);  \n      }  \n    \n      /** \n       * 以指定的initialCapacity构造一个空的HashSet。 \n       * \n       * 实际底层以相应的参数及加载因子loadFactor为0.75构造一个空的HashMap。 \n       * @param initialCapacity 初始容量。 \n       */  \n      public HashSet(int initialCapacity) {  \n        map = new HashMap<E,Object>(initialCapacity);  \n      }  \n    \n      /** \n       * 以指定的initialCapacity和loadFactor构造一个新的空链接哈希集合。 \n       * 此构造函数为包访问权限，不对外公开，实际只是是对LinkedHashSet的支持。 \n       * \n       * 实际底层会以指定的参数构造一个空LinkedHashMap实例来实现。 \n       * @param initialCapacity 初始容量。 \n       * @param loadFactor 加载因子。 \n       * @param dummy 标记。 \n       */  \n      HashSet(int initialCapacity, float loadFactor, boolean dummy) {  \n        map = new LinkedHashMap<E,Object>(initialCapacity, loadFactor);  \n      }  \n    \n      /** \n       * 返回对此set中元素进行迭代的迭代器。返回元素的顺序并不是特定的。 \n       *  \n       * 底层实际调用底层HashMap的keySet来返回所有的key。 \n       * 可见HashSet中的元素，只是存放在了底层HashMap的key上， \n       * value使用一个static final的Object对象标识。 \n       * @return 对此set中元素进行迭代的Iterator。 \n       */  \n      public Iterator<E> iterator() {  \n        return map.keySet().iterator();  \n      }  \n    \n      /** \n       * 返回此set中的元素的数量（set的容量）。 \n       * \n       * 底层实际调用HashMap的size()方法返回Entry的数量，就得到该Set中元素的个数。 \n       * @return 此set中的元素的数量（set的容量）。 \n       */  \n      public int size() {  \n        return map.size();  \n      }  \n    \n      /** \n       * 如果此set不包含任何元素，则返回true。 \n       * \n       * 底层实际调用HashMap的isEmpty()判断该HashSet是否为空。 \n       * @return 如果此set不包含任何元素，则返回true。 \n       */  \n      public boolean isEmpty() {  \n        return map.isEmpty();  \n      }  \n    \n      /** \n       * 如果此set包含指定元素，则返回true。 \n       * 更确切地讲，当且仅当此set包含一个满足(o==null ? e==null : o.equals(e)) \n       * 的e元素时，返回true。 \n       * \n       * 底层实际调用HashMap的containsKey判断是否包含指定key。 \n       * @param o 在此set中的存在已得到测试的元素。 \n       * @return 如果此set包含指定元素，则返回true。 \n       */  \n      public boolean contains(Object o) {  \n        return map.containsKey(o);  \n      }  \n    \n      /** \n       * 如果此set中尚未包含指定元素，则添加指定元素。 \n       * 更确切地讲，如果此 set 没有包含满足(e==null ? e2==null : e.equals(e2)) \n       * 的元素e2，则向此set 添加指定的元素e。 \n       * 如果此set已包含该元素，则该调用不更改set并返回false。 \n       * \n       * 底层实际将将该元素作为key放入HashMap。 \n       * 由于HashMap的put()方法添加key-value对时，当新放入HashMap的Entry中key \n       * 与集合中原有Entry的key相同（hashCode()返回值相等，通过equals比较也返回true）， \n       * 新添加的Entry的value会将覆盖原来Entry的value，但key不会有任何改变， \n       * 因此如果向HashSet中添加一个已经存在的元素时，新添加的集合元素将不会被放入HashMap中， \n       * 原来的元素也不会有任何改变，这也就满足了Set中元素不重复的特性。 \n       * @param e 将添加到此set中的元素。 \n       * @return 如果此set尚未包含指定元素，则返回true。 \n       */  \n      public boolean add(E e) {  \n        return map.put(e, PRESENT)==null;  \n      }  \n    \n      /** \n       * 如果指定元素存在于此set中，则将其移除。 \n       * 更确切地讲，如果此set包含一个满足(o==null ? e==null : o.equals(e))的元素e， \n       * 则将其移除。如果此set已包含该元素，则返回true \n       * （或者：如果此set因调用而发生更改，则返回true）。（一旦调用返回，则此set不再包含该元素）。 \n       * \n       * 底层实际调用HashMap的remove方法删除指定Entry。 \n       * @param o 如果存在于此set中则需要将其移除的对象。 \n       * @return 如果set包含指定元素，则返回true。 \n       */  \n      public boolean remove(Object o) {  \n        return map.remove(o)==PRESENT;  \n      }  \n    \n      /** \n       * 从此set中移除所有元素。此调用返回后，该set将为空。 \n       * \n       * 底层实际调用HashMap的clear方法清空Entry中所有元素。 \n       */  \n      public void clear() {  \n        map.clear();  \n      }  \n    \n      /** \n       * 返回此HashSet实例的浅表副本：并没有复制这些元素本身。 \n       * \n\n```\n#### HashSet保证元素不重复\nHashSet使用HashMap进行存放数据\n```java\n    public V put(K key, V value) {\n        return putVal(hash(key), key, value, false, true);\n    }\n```\n\nputVal方法\n```java\n    /**\n     * Implements Map.put and related methods\n     *\n     * @param hash hash for key\n     * @param key the key\n     * @param value the value to put\n     * @param onlyIfAbsent if true, don't change existing value\n     * @param evict if false, the table is in creation mode.\n     * @return previous value, or null if none\n     */\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length; // 重新计算一下大小\n        // 获取要插入元素在 哈希桶中的位置\n        if ((p = tab[i = (n - 1) & hash]) == null) // 如果这个位置没有Node\n            tab[i] = newNode(hash, key, value, null); // 直接创建一个新的Node\n        else { // 说明此时在对应的索引位置已经有对象了\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p; // 判断原对象与插入的对象的key是否一样\n            else if (p instanceof TreeNode) // 如果 你定位到的元素是一个TreeNode(Node的一个子类，也是HashMap的一个内部类)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value); // 那么就插入一TreeNode节点 定位到这个hash桶了 但是这里面是链表（没有进行过树化）\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { //说明原对象与插入的对象的key相同\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value; //将新插入的entry的value覆盖掉原来的entry的value\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount; // 修改次数+1 和fastRemove()有关也和并发修改有关\n        if (++size > threshold) // 如果大于了阙值 需要扩容的大小\n            resize(); // 重新设置hash桶的大小，也有可能进行树化，见后面代码\n        afterNodeInsertion(evict);\n        return null;\n    }\n```\n\n\n\n","tags":["Java"],"categories":["server"]},{"title":"HashMap理解笔记","url":"/2018/06/07/backend/Java/集合容器/HashMap/","content":"### 什么是HashMap\nHashMap分为俩个词理解，一个是Hash，另一个是Map\n\nHash: 散列将一个任意长度通过某种hash函数算法转化成一个固定的值\n\nMap：可以理解为地图点的位置\n\n我们如果想要找到地图上的某个点，就需要通过经纬度来定位，Hash就是这个值，我们可以通过这个值，找到我们所要的位置\n\n### HashMap 简介\nHashMap 是一个散列表，它存储的内容是键值对(key-value)映射。\n\nHashMap 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。\n\nHashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。\n\nHashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。容量 是哈希表中桶的数量，初始容量 只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。\n通常，默认加载因子是 0.75, 这是在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。\n\n### HashMap源码笔记\n\n#### HashMap 常量定义\n```sql\n    /**\n     * The default initial capacity - MUST be a power of two.\n     * 默认初始容量，为16个\n     */\n    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n    /**\n     * The maximum capacity, used if a higher value is implicitly specified\n     * by either of the constructors with arguments.\n     * MUST be a power of two <= 1<<30.\n     * 最大容量： 1073741824\n     */\n    static final int MAXIMUM_CAPACITY = 1 << 30;\n    /**\n     * The load factor used when none specified in constructor.\n     * 加载因子，当容量达到3/4的时候进行容量扩容, 不是满的时候再扩容\n     */\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    /**\n     * The bin count threshold for using a tree rather than list for a\n     * bin.  Bins are converted to trees when adding an element to a\n     * bin with at least this many nodes. The value must be greater\n     * than 2 and should be at least 8 to mesh with assumptions in\n     * tree removal about conversion back to plain bins upon\n     * shrinkage.\n     * .由链表转换成树的阈值TREEIFY_THRESHOLD 一个桶中bin（箱子）的存储方式由链表转换成树的阈值。即当桶中bin的数量超过TREEIFY_THRESHOLD时使用树来代替链表。默认值是8\n     */\n     static final int TREEIFY_THRESHOLD = 8;\n     /**\n     * The bin count threshold for untreeifying a (split) bin during a\n     * resize operation. Should be less than TREEIFY_THRESHOLD, and at\n     * most 6 to mesh with shrinkage detection under removal.\n     * 当执行resize操作时，当桶中bin的数量少于UNTREEIFY_THRESHOLD时使用链表来代替树。默认值是6 \n     */\n     static final int UNTREEIFY_THRESHOLD = 6;\n    \n    /**\n     * The smallest table capacity for which bins may be treeified.\n     * (Otherwise the table is resized if too many nodes in a bin.)\n     * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts\n     * between resizing and treeification thresholds.\n     * 当桶中的bin被树化时最小的hash表容量。（如果没有达到这个阈值，即hash表容量小于MIN_TREEIFY_CAPACITY，当桶中bin的数量太多时会执行resize扩容操作）这个MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4倍。\n     */\n    static final int MIN_TREEIFY_CAPACITY = 64;\n\n```\n\n#### putVal方法\n```java\n    /**\n     * Implements Map.put and related methods\n     *\n     * @param hash hash for key\n     * @param key the key\n     * @param value the value to put\n     * @param onlyIfAbsent if true, don't change existing value\n     * @param evict if false, the table is in creation mode.\n     * @return previous value, or null if none\n     */\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length; // 重新计算一下大小\n        // 获取要插入元素在 哈希桶中的位置\n        if ((p = tab[i = (n - 1) & hash]) == null) // 如果这个位置没有Node\n            tab[i] = newNode(hash, key, value, null); // 直接创建一个新的Node\n        else { // 说明此时在对应的索引位置已经有对象了\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p; // 判断原对象与插入的对象的key是否一样\n            else if (p instanceof TreeNode) // 如果 你定位到的元素是一个TreeNode(Node的一个子类，也是HashMap的一个内部类)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value); // 那么就插入一TreeNode节点 定位到这个hash桶了 但是这里面是链表（没有进行过树化）\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { //说明原对象与插入的对象的key相同\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value; //将新插入的entry的value覆盖掉原来的entry的value\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount; // 修改次数+1 和fastRemove()有关也和并发修改有关\n        if (++size > threshold) // 如果大于了阙值 需要扩容的大小\n            resize(); // 重新设置hash桶的大小，也有可能进行树化，见后面代码\n        afterNodeInsertion(evict);\n        return null;\n    }\n```\n\n### Java中的hashCode和equals\n\n#### 关于hashCode\n1. hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的\n2. 如果两个对象相同，就是适用于equals(java.lang.Object) 方法，那么这两个对象的hashCode一定要相同\n3. 如果对象的equals方法被重写，那么对象的hashCode也尽量重写，并且产生hashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点\n4. 两个对象的hashCode相同，并不一定表示两个对象就相同，也就是不一定适用于equals(java.lang.Object) 方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在同一个篮子里“\n\n再归纳一下就是hashCode是用于查找使用的，而equals是用于比较两个对象的是否相等的。\n\n以下对hashCode的解读摘自其他博客：\n```sql\n1.hashcode是用来查找的，如果你学过数据结构就应该知道，在查找和排序这一章有\n例如内存中有这样的位置\n0  1  2  3  4  5  6  7 \n而我有个类，这个类有个字段叫ID,我要把这个类存放在以上8个位置之一，如果不用hashcode而任意存放，那么当查找时就需要到这八个位置里挨个去找，或者用二分法一类的算法。\n但如果用hashcode那就会使效率提高很多。\n我们这个类中有个字段叫ID,那么我们就定义我们的hashcode为ID％8，然后把我们的类存放在取得得余数那个位置。比如我们的ID为9，9除8的余数为1，那么我们就把该类存在1这个位置，如果ID是13，求得的余数是5，那么我们就把该类放在5这个位置。这样，以后在查找该类时就可以通过ID除 8求余数直接找到存放的位置了。\n2.但是如果两个类有相同的hashcode怎么办那（我们假设上面的类的ID不是唯一的），例如9除以8和17除以8的余数都是1，那么这是不是合法的，回答是：可以这样。那么如何判断呢？在这个时候就需要定义 equals了。\n也就是说，我们先通过 hashcode来判断两个类是否存放某个桶里，但这个桶里可能有很多类，那么我们就需要再通过 equals 来在这个桶里找到我们要的类。\n那么。重写了equals()，为什么还要重写hashCode()呢？\n想想，你要在一个桶里找东西，你必须先要找到这个桶啊，你不通过重写hashcode()来找到桶，光重写equals()有什么用啊\n```\n#### 关于equals\nequals和==\n\n==用于比较引用和比较基本数据类型时具有不同的功能：\n比较基本数据类型，如果两个值相同，则结果为true\n而在比较引用时，如果引用指向内存中的同一对象，结果为true;\n\nequals()作为方法，实现对象的比较。由于==运算符不允许我们进行覆盖，也就是说它限制了我们的表达。因此我们复写equals()方法，达到比较对象内容是否相同的目的。而这些通过==运算符是做不到的。\n### HashMap的实现原理\n#### HashMap概述\nHashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。\n在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。\n![logo](/images/server/java/集合/hashmap.jpg) \n\n从上图中可以看出，HashMap底层就是一个数组结构，数组中的每一项又是一个链表。当新建一个HashMap的时候，就会初始化一个数组。\n\n![logo](/images/server/java/集合/hashmap2.png) \n\n其中Java源码如下：\n```java\n\n/**\n * The table, resized as necessary. Length MUST Always be a power of two.\n */\ntransient Entry[] table;\n\nstatic class Entry<K,V> implements Map.Entry<K,V> {\n    final K key;\n    V value;\n    Entry<K,V> next;\n    final int hash;\n    ……\n}\n```\n\n可以看出，Entry就是数组中的元素，每个 Map.Entry 其实就是一个key-value对，它持有一个指向下一个元素的引用，这就构成了链表。\n\n#### HashMap实现存储和读取\n\n##### 存储\n```java\npublic V put(K key, V value) {\n    // HashMap允许存放null键和null值。\n    // 当key为null时，调用putForNullKey方法，将value放置在数组第一个位置。\n    if (key == null)\n        return putForNullKey(value);\n    // 根据key的keyCode重新计算hash值。\n    int hash = hash(key.hashCode());\n    // 搜索指定hash值在对应table中的索引。\n    int i = indexFor(hash, table.length);\n    // 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素。\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            // 如果发现已有该键值，则存储新的值，并返回原始值\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n    // 如果i索引处的Entry为null，表明此处还没有Entry。\n    modCount++;\n    // 将key、value添加到i索引处。\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n\n根据hash值得到这个元素在数组中的位置（即下标），如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。如果数组该位置上没有元素，就直接将该元素放到此数组中的该位置上。\n\nhash(int h)方法根据key的hashCode重新计算一次散列。此算法加入了高位计算，防止低位不变，高位变化时，造成的hash冲突，解决hash冲突的方法有很多，HashMap底层是通过链表来解决hash冲突的。\n```sql\nstatic int hash(int h) {\n    h ^= (h >>> 20) ^ (h >>> 12);\n    return h ^ (h >>> 7) ^ (h >>> 4);\n}\n```\n\n我们可以看到在HashMap中要找到某个元素，需要根据key的hash值来求得对应数组中的位置。如何计算这个位置就是hash算法。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量的分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，而不用再去遍历链表，这样就大大优化了查询的效率。\n\n根据上面 put 方法的源代码可以看出，当程序试图将一个key-value对放入HashMap中时，程序首先根据该 key的 hashCode() 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 hashCode() 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry的 value，但key不会覆盖。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部——具体说明继续看 addEntry() 方法的说明。\n\n通过这种方式就可以高效的解决HashMap的冲突问题。\n\n##### 读取\n```java\npublic V get(Object key) {\n    if (key == null)\n        return getForNullKey();\n    int hash = hash(key.hashCode());\n    for (Entry<K,V> e = table[indexFor(hash, table.length)];\n        e != null;\n        e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k)))\n            return e.value;\n    }\n    return null;\n}\n```\n从HashMap中get元素时，首先计算key的hashCode，找到数组中对应位置的某一元素，然后通过key的equals方法在对应位置的链表中找到需要的元素。\n\n归纳起来简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据hash算法来决定其在数组中的存储位置，在根据equals方法决定其在该数组位置上的链表中的存储位置；当需要取出一个Entry时，也会根据hash算法找到其在数组中的存储位置，再根据equals方法从该位置上的链表中取出该Entry。\n\n#### HashMap的resize\n\n当hashmap中的元素越来越多的时候，碰撞的几率也就越来越高（因为数组的长度是固定的），所以为了提高查询的效率，就要对hashmap的数组进行扩容，数组扩容这个操作也会出现在ArrayList中，所以这是一个通用的操作，很多人对它的性能表示过怀疑，不过想想我们的“均摊”原理，就释然了，而在hashmap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。\n\n那么hashmap什么时候进行扩容呢？当hashmap中的元素个数超过数组大小*loadFactor时，就会进行数组扩容，loadFactor的默认值为0.75，也就是说，默认情况下，数组大小为16，那么当hashmap中元素个数超过16*0.75=12的时候，就把数组的大小扩展为2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知hashmap中元素的个数，那么预设元素的个数能够有效的提高hashmap的性能。比如说，我们有1000个元素new HashMap(1000), 但是理论上来讲new HashMap(1024)更合适，不过上面annegu已经说过，即使是1000，hashmap也自动会将其设置为1024。 但是new HashMap(1024)还不是更合适的，因为0.75*1000 < 1000, 也就是说为了让0.75 * size > 1000, 我们必须这样new HashMap(2048)才最合适，既考虑了&的问题，也避免了resize的问题。\n\n#### 总结\n1. 利用key的hashCode重新hash计算出当前对象的元素在数组中的下标\n2. 存储时，如果出现hash值相同的key，此时有两种情况。(1)如果key相同，则覆盖原始值；(2)如果key不同（出现冲突），则将当前的key-value放入链表中\n3. 获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。\n4. 理解了以上过程就不难明白HashMap是如何解决hash冲突的问题，核心就是使用了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。\n\n\n转载参考：http://www.cnblogs.com/yuanblog/p/4441017.html","tags":["Java"],"categories":["server"]},{"title":"基于 CentOS 搭建 Nginx 服务","url":"/2018/06/05/backend/centos/基于 CentOS 搭建 Nginx服务/","content":"### 1.安装使用Nginx\n#### 1.1 yum安装\n```sql\nyum install nginx\n```\n\n#### 1.2 提供目录权限\n```sql\n提供目录权限:\n　　我需要访问的目录是 /var/ftp, 用户是root, 所以修改如下配置:\n[root@S205 conf.d]# cat /etc/nginx/nginx.conf |grep user\nuser root;\n\n否则会出现这样的错误:\n[root@S205 conf.d]# tail /var/log/nginx/error.log \n2017/10/13 16:51:09 [error] 13383#0: *1 open() \"/home/data\" failed (13: Permission denied), client: 192.168.50.20, server: _, request: \"GET /data HTTP/1.1\", host: \"192.168.10.205:8080\"\n```\n<!-- more -->\n### 2.Nginx 命令\n#### 2.1 启动重启\n```sql\n\n[root@S205 conf.d]# systemctl enable nginx\n\n[root@S205 conf.d]# systemctl restart nginx\n\n[root@S205 conf.d]# vi /etc/nginx/nginx.conf\n```\n#### 2.2 \n\n### 3.Nginx 启用对文件目录的http访问\n解决以ftp路径形式的图片，在谷歌浏览器上不能正常访问的问题，所以使用http的形式访问文件\n\n#### 3.1 配置如下：\n采用： http://ip/uploadfile/文件路径的形式访问 或者 直接 http://ip/文件路径的形式访问\n```sql\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root        /var/ftp/pub;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n          autoindex on;\n          autoindex_localtime on;\n        }\n\n        location /uploadfile {\n           alias /var/ftp/pub;\n           autoindex on;\n           autoindex_localtime on;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n```\n#### 3.2 autoindex 和 autoindex_localtime 生成目录索引\n```sql\n  autoindex  on;                        #自动显示目录\n  autoindex_exact_size  off;            #改为off后，显示出文件的大概大小，单位是kB或者MB或者GB；即人性化方式显示文件大小否则以byte显示\n  autoindex_localtime on;               #显示的文件时间为文件的服务器时间；即按服务器时间显示\n  limit_rate_after 10m;                 #10m之后下载速度为10k\n```\n\n参考:http://blog.licess.com/nginx-autoindex/\n\n#### 3.2 解决目录列表文件名乱码问题\n\n```sql\nvi  /etc/nginx/nginx.conf \n\n加上 charset utf-8,gbk即可解决;\n\nuser  nginx;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n    include /etc/nginx/conf.d/*.conf;\n    autoindex on;\n    autoindex_exact_size off;\n    autoindex_localtime on;\n    charset utf-8,gbk;\n}\n```\n### 4.Nginx 配置反向代理\n```sql\n#user  nobody;\nworker_processes  1;\n#error_log  logs/error.log;\nerror_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#error_log /usr/local/etcinx/logs/error.log  warn;\n#pid        logsinx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    #access_log  logs/access.log  main;\n    #tcp_nopush     on;\n    #keepalive_timeout  0;\n    \n    sendfile        on;\n    keepalive_timeout  65;\n\n    gzip  on;\n    gzip_min_length     1k;\n    gzip_comp_level     3;\n    gzip_buffers     4 16k;\n    gzip_vary on;\n\t\n    server {\n        listen       80;\n        server_name  localhost 192.168.0.252 songshuiyang.com;\n        \n        location / {\n            proxy_pass   http://127.0.0.1:4080;\n            proxy_set_header  Host $http_host;\n            proxy_set_header  X-Real-IP $remote_addr;\n            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\t    client_max_body_size 100m;\n        }\n\n        location /uploadfile {\n           alias /var/ftp/pub ;\n        }\n\n        location /webapp {\n\t\t\tproxy_pass   http://127.0.0.1:8068;\n\t\t\tproxy_set_header  Host $http_host;\n            proxy_set_header  X-Real-IP $remote_addr;\n            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n\n        location /admin-webapp {\n            alias html/test-admin-webapp;\n        }\n\t\t\n\t\tlocation = /favicon.ico {\n\t\t\talias /var/ftp/pub/favicon.ico;\n\t\t}\n\n    }\n}\n#  include servers/*;\n```\n### 5.Nginx 简单的负载均衡的示例\n```sql\nhttp {\n  upstream myproject {\n  server 127.0.0.1:8000 weight=3;\n  server 127.0.0.1:8001;\n  server 127.0.0.1:8002;\n  server 127.0.0.1:8003;\n}\n\nserver {\n  listen 80;\n  server_name www.domain.com;\n  location / {\n   proxy_pass http://myproject;\n  }\n  }\n}\n```\n\n本文参考： http://www.bubuko.com/infodetail-2349571.html","tags":["nginx"],"categories":["server"]},{"title":"Nginx 笔记","url":"/2018/06/05/backend/centos/Nginx 笔记/","content":"### 一. 为什么使用Nginx\nNginx 是一个高性能的 Web 和反向代理服务器, 它具有有很多非常优越的特性:\n\n1. 作为 Web 服务器：相比 Apache，Nginx 使用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应，感谢 Nginx 为我们选择了 epoll and kqueue 作为开发模型.\n\n2. 作为负载均衡服务器：Nginx 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP代理服务器 对外进行服务。Nginx 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。\n\n3. 作为邮件代理服务器: Nginx 同时也是一个非常优秀的邮件代理服务器（最早开发这个产品的目的之一也是作为邮件代理服务器），Last.fm 描述了成功并且美妙的使用经验。\n\n4. Nginx 安装非常的简单，配置文件 非常简洁（还能够支持perl语法），Bugs非常少的服务器: Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在 不间断服务的情况下进行软件版本的升级。\n基础功能\n\n### 二. 基础功能\n1. 处理静态文件，索引文件以及自动索引；\n\n2. 反向代理加速(无缓存)，简单的负载均衡和容错；\n\n3. FastCGI，简单的负载均衡和容错；\n\n4. 模块化的结构。过滤器包括gzipping, byte ranges, chunked responses, 以及 SSI-filter 。在SSI过滤器中，到同一个 proxy 或者 FastCGI 的多个子请求并发处理；\nSSL 和 TLS SNI 支持；\n","tags":["nginx"],"categories":["server"]},{"title":"基于 CentOS 搭建 FTP 文件服务","url":"/2018/06/05/backend/centos/基于 CentOS 搭建 FTP 文件服务/","content":"### 1.安装并启动 FTP 服务\n#### 1.1 使用 yum 安装 vsftpd\n```sql\n# yum默认都是安装最新版的软件\nyum install -y vsftpd\n```\n#### 1.2 启动 vsftpd\n```sql\n安装完成后，启动 FTP 服务：\nservice vsftpd start\n\n启动后，可以看到系统已经监听了 21 端口：\nnetstat -nltp | grep 21\n\n此时，访问 ftp://主机ip 可浏览机器上的 /var/ftp目录了。\n```\n<!-- more -->\n### 2.配置 FTP 权限\n#### 2.1 了解 VSFTP 配置\n```sql\nvsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件：\n\nvsftpd.conf 为主要配置文件\nftpusers 配置禁止访问 FTP 服务器的用户列表\nuser_list 配置用户访问控制\n```\n#### 2.1 创建 FTP 用户\n```sql\n创建一个用户 ftpuser\nuseradd ftpuser\n为用户 ftpuser 设置密码\necho \"password\" | passwd ftpuser --stdin\n```\n#### 2.2 限制该用户仅能通过 FTP 访问\n```sql\n限制用户 ftpuser只能通过 FTP 访问服务器，而不能直接登录服务器：\nusermod -s /sbin/nologin ftpuser\n```\n 命令笔记: \n```sql\n用于修改用户的基本信息。usermod命令不允许你改变正在线上的使用者帐号名称。当usermod命令用来改变user id，必须确认这名user没在电脑上执行任何程序。你需手动更改使用者的crontab档。也需手动更改使用者的at工作档。采用NIS server须在server上更动相关的NIS设定。\n-c<备注>：修改用户帐号的备注文字；\n-d<登入目录>：修改用户登入时的目录；\n-e<有效期限>：修改帐号的有效期限；\n-f<缓冲天数>：修改在密码过期后多少天即关闭该帐号；\n-g<群组>：修改用户所属的群组；\n-G<群组>；修改用户所属的附加群组；\n-l<帐号名称>：修改用户帐号名称；\n-L：锁定用户密码，使密码无效；\n-s<shell>：修改用户登入后所使用的shell；\n-u<uid>：修改用户ID；\n-U:解除密码锁定。\n```\n#### 2.3 创建登录欢迎文件\n```sql\necho \"Welcome to use FTP service.\" > /var/ftp/welcome.txt\n```\n\n#### 2.4 配置权限\n```sql\n设置访问权限\nchmod a-w /var/ftp && chmod 777 -R /var/ftp/pub\n\n设置为用户的主目录：\nusermod -d /var/ftp ftpuser\n```\n命令笔记:\n```sql\n权限范围的表示法如下：\nu User，即文件或目录的拥有者；\ng Group，即文件或目录的所属群组；\no Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；\na All，即全部的用户，包含拥有者，所属群组以及其他用户；\nr 读取权限，数字代号为“4”;\nw 写入权限，数字代号为“2”；\nx 执行或切换权限，数字代号为“1”；\n- 不具任何权限，数字代号为“0”；\ns 特殊功能说明：变更文件或目录的权限。\n\n-c或——changes：效果类似“-v”参数，但仅回报更改的部分；\n-f或--quiet或——silent：不显示错误信息；\n-R或——recursive：递归处理，将指令目录下的所有文件及子目录一并处理；\n-v或——verbose：显示指令执行过程；\n--reference=<参考文件或目录>：把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同；\n<权限范围>+<权限设置>：开启权限范围的文件或目录的该选项权限设置；\n<权限范围>-<权限设置>：关闭权限范围的文件或目录的该选项权限设置；\n<权限范围>=<权限设置>：指定权限范围的文件或目录的该选项权限设置；\n\nLinux用 户分为：拥有者、组群(Group)、其他（other），Linux系统中，预设的情況下，系统中所有的帐号与一般身份使用者，以及root的相关信 息， 都是记录在/etc/passwd文件中。每个人的密码则是记录在/etc/shadow文件下。 此外，所有的组群名称记录在/etc/group內！\n\n例：rwx　rw-　r--\n\nr=读取属性　　//值＝4\nw=写入属性　　//值＝2\nx=执行属性　　//值＝1\n\nchmod u+x,g+w f01　　//为文件f01设置自己可以执行，组员可以写入的权限\nchmod u=rwx,g=rw,o=r f01\nchmod 764 f01\nchmod a+x f01　　//对文件f01的u,g,o都设置可执行属性\n文件的属主和属组属性设置\n\nchown user:market f01　　//把文件f01给uesr，添加到market组\nll -d f1  查看目录f1的属性\n```\n#### 2.5 备注\n一： 以上配置是匿名用户可以通过ftp://主机ip 即可访问文件，但不能上传文件，所以需要添加一个`ftpuser`用户ftp上传操作，这样做有俩个好处\n1. 访问文件可以通过一个ftp绝对路径访问(也可以通过nginx代理通过http的形式访问)，不需要输入用户名及密码\n2. 上传修改文件只能通过该(ftpuser)用户才能进行操作，保证了其安全性\n\n二： 阻止匿名访问和切换根目录\n```sql\n匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。\n编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改：\nvi /etc/vsftpd/vsftpd.conf\n \n# 禁用匿名用户  12 YES 改为NO\nanonymous_enable=NO\n\n# 禁止切换根目录 101 行 删除#\nchroot_local_user=YES\n编辑完成后保存配置，重新启动 FTP 服务\nservice vsftpd restart\n```\n\n\n本文参考： https://www.baidu.com/link?url=3FcSvP44zFbo33EoJBucNlE1ZKKkncTuckfxuvNFJhCPvQuZmlebtZRzRAW3-W0SH8Ep8dShtJ8NSjWlozkrPa&wd=&eqid=edc2684700001d70000000065b17479b","tags":["ftp"],"categories":["server"]},{"title":"Shiro记事","url":"/2018/06/05/backend/Shiro/Shiro记事/","content":"### Shiro内置了默认的拦截器\n\n\n### 配置Shiro使得多个角色可以访问同一URL\n在Shiro配置中，如果对某一URL作如下配置：\n\n`/a.jsp = roles[\"role1, role2\"]`\n\n其效果等效于hasAllRoles，即要求所有角色都满足才可访问。\n\n但在实际中，可能只需满足任一角色即可访问。在这种情况下，需要自己重载RolesAuthorizationFilter的isAccessAllowed，实现或的关系。具体实现如下：\n```\nimport org.apache.shiro.subject.Subject;\nimport org.apache.shiro.web.filter.authz.RolesAuthorizationFilter;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\npublic class AnyOfRolesAuthorizationFilter extends RolesAuthorizationFilter {\n    @Override\n    public boolean isAccessAllowed(ServletRequest request, ServletResponse response,\n                                   Object mappedValue) throws IOException {\n        final Subject subject = getSubject(request, response);\n        final String[] rolesArray = (String[]) mappedValue;\n        if (rolesArray == null || rolesArray.length == 0) {\n\n            //no roles specified, so nothing to check - allow access.\n\n            return true;\n        }\n        for (String roleName : rolesArray) {\n\n            if (subject.hasRole(roleName)) {\n\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n相应地，在INI文件中作如下配置：\n```sql\n[main]\n...\nanyofroles = com.your.package.AnyOfRolesAuthorizationFilter\n[urls]\n...\n/path/to/some/url = anyofroles[\"role1,role2\"]\n```\n","tags":["shiro"],"categories":["server"]},{"title":"使用微软提供的Office Online实现Office文档的在线查看,编辑等功能","url":"/2018/05/08/backend/相关技术/使用微软提供的Office Online实现Office文档的在线查看,编辑等功能/","content":"### 使用微软提供的Office Online实现Office文档的在线查看,编辑\n\n使用微软提供的Office Online平台只需要一个网址即可在线查看Xls,doc,PPT等文档\n#### 在线预览\nhttp://view.officeapps.live.com/op/view.aspx?src=要查看的文档地址\n\n#### 在线编辑\n在线编辑需要登录https://www.office.com并从onedrive中打开或新建文档也可以来自在线模板(下面的Excel来自Excel Online模板，编辑后的文件会保存到你的onedrive中)\n在线编辑Xls文档(部分功能不支持,但已经够用)","tags":["Java"],"categories":["server"]},{"title":"freemaker模板框架","url":"/2018/04/14/backend/模板框架/freemaker模板框架/","content":"### freemaker 语法笔记\n* if 条件\n```xml\n      <#if entity.columnName == 'id' >\n       \n      <#elseif entity.columnName == 'id' >\n        \n      <#else>\n        \n      </#if>\n```\n\n* list 遍历元素\n````xml\n1. 遍历\n要想在Freemarker中遍历list,必须通过使用list指令,即<#list sequence as item>…</#list>\nsequence是集合(collection)的表达式，item是循环变量的名字，不能是表达式。\n\n<#list userList as user>\n  …\n</#list>\n\nList指令还隐含了两个循环变量：\n    item_index:当前迭代项在所有迭代项中的位置，是数字值。\n    item_has_next:用于判断当前迭代项是否是所有迭代项中的最后一项。\n    注意：在使用上述两个循环变量时，一定要将item换成你自己定义的循环变量名,item其实就是前缀罢了。\n\n    <#--Freemarker遍历list并应用list隐含变量item_index-->\n        item_index使用：\n        <#list userList as user>\n        第${user_index+1}个用户\n          用户名：${user.userName}\n          密  码：${user.userPassword}\n          年  龄: ${user.age}\n        </#list>\n    <#--Freemarker遍历list并应用list隐含变量item_has_next-->\n        item_has_next,size使用：\n        <#list userList as user>\n          用户名：${user.userName}\n          密  码：${user.userPassword}\n          年  龄: ${user.age}\n          <#if !user_has_next>\n          共有${userList?size}最后一个用户是:${user.userName}\n        </#if>\n        </#list>\n\n2. 排序\n\nsort升序排序函数\n    sort对序列(sequence)进行排序，要求序列中的变量必须是：字符串（按首字母排序）,数字，日期值。\n    <#list list?sort as l>…</#list>\nsort_by函数\n    sort_by有一个参数,该参数用于指定想要排序的子变量，排序是按照变量对应的值进行排序,如：\n    <#list userList?sort_by(“age”) as user>…</#list>\n    age是User对象的属性，排序是按age的值进行的。\nreverse降序排序函数\n    <#list list? reverse as l>…</#list>。reverse使用同sort相同。reverse还可以同sort_by一起使用\n    如：想让用户按年龄降序排序，那么可以这个样写<#list userList?sort_by(“age”)?reverse as user>…</#list>\n    \n    \n````","tags":["Java"],"categories":["server"]},{"title":"Java获取数据表元数据","url":"/2018/04/14/backend/Java/Java获取数据表元数据/","tags":["Java"],"categories":["server"]},{"title":"Spring 集成Redis","url":"/2018/04/08/backend/缓存技术/Redis/","content":"## 一：Redis\n\n### 1. 什么是Redis\nRedis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。\n\n官网: https://redis.io/\n\n中文教程网: http://www.redis.net.cn/tutorial/3501.html\n\n### 2. 基本介绍\n#### Redis 简介\n* Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。\n* Redis 与其他 key - value 缓存产品有以下三个特点：\n* Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。\n* Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\n* Redis支持数据的备份，即master-slave模式的数据备份。\n\n#### Redis 优势\n* 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。\n* 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\n* 原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。\n* 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。\n\n#### Redis与其他key-value存储有什么不同？\n* Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。\n* Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。\n\n<!--more-->\n### 3. 安装\n\n#### 3.1 windows环境\n下载地址: https://github.com/MicrosoftArchive/redis/releases\n\n#### 3.1.1 修改配置文件\n```sql\nredis.windows.conf 文件 配置密码 \n\n\n# requirepass foobared\nrequirepass shuiyang\n```\n#### 3.1.2 常用命令\n``` java\nredis服务安装成windows服务: redis-server --service-install redis.windows.conf\n\n开启服务：redis-server --service-start\n\n停止服务：redis-server --service-stop\n\n卸载服务：redis-server --service-uninstall\n```\n\n#### 3.1.3 Redis可视化管理工具\n* RedisStudio，百度云连接：http://pan.baidu.com/s/1gfIbLar  密码：mpne\n* Redis Desktop Manager https://redisdesktop.com/download\n\n                \n#### 3.2 Linux环境\n下载地址：http://www.redis.net.cn/download/，下载最新文档版本。\n#### 3.2.1 安装\n```sql\n$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n$ tar xzf redis-2.8.17.tar.gz\n$ cd redis-2.8.17\n$ make\n```\nmake完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli\n\n#### 3.2.1 启动服务\n下面启动redis服务.\n\n```sql\n$ ./redis-server\n```\n\n注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。\n\n```sql\n./redis-server redis.conf\n```\n\nredis.conf是一个默认的配置文件。我们可以根据需要使用自己的配置文件。\n\n#### 3.2.1 测试客户端程序\n启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如：\n\n```sql\n$ ./redis-cli\nredis> set foo bar\nOK\nredis> get foo\n\"bar\"\n```\n\n### 4. 与Spring 集成\n\n#### 4.1 导入maven\n```xml\n        <!--redis-->\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>2.9.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.data</groupId>\n            <artifactId>spring-data-redis</artifactId>\n            <version>1.6.2.RELEASE</version>\n        </dependency>\n```\n\n#### 4.2 新建 `redis-config.properties`\n```xml\n# Redis settings\nredis.host=127.0.0.1\nredis.port=6379\nredis.pass=shuiyang\nredis.dbIndex=0\nredis.expiration=3000\n#最大空闲数\nredis.maxIdle=300\n#连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal\nredis.maxActive=600\n#最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。\nredis.maxWait=1000\n#是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个\nredis.testOnBorrow=true\n```\n\n\n#### 4.3 新建 `applicationContext-redis.xml`\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:cache=\"http://www.springframework.org/schema/cache\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n            http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context-4.0.xsd\n            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\n            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n            http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd\">\n\n\n    <!-- 启用缓存注解开关 -->\n    <cache:annotation-driven cache-manager=\"cacheManager\"/>\n\n    <!-- 配置JedisPoolConfig实例 -->\n    <bean id=\"poolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n        <property name=\"maxIdle\" value=\"${redis.maxIdle}\" />\n        <property name=\"maxTotal\" value=\"${redis.maxActive}\" />\n        <property name=\"maxWaitMillis\" value=\"${redis.maxWait}\" />\n        <property name=\"testOnBorrow\" value=\"${redis.testOnBorrow}\" />\n    </bean>\n\n    <!-- 配置JedisConnectionFactory -->\n    <bean id=\"jedisConnectionFactory\"\n          class=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\">\n        <property name=\"hostName\" value=\"${redis.host}\" />\n        <property name=\"port\" value=\"${redis.port}\" />\n         <property name=\"password\" value=\"${redis.pass}\" />\n        <property name=\"database\" value=\"${redis.dbIndex}\" />\n        <property name=\"poolConfig\" ref=\"poolConfig\" />\n    </bean>\n\n    <!-- 配置RedisTemplate -->\n    <bean id=\"redisTemplate\" class=\"org.springframework.data.redis.core.RedisTemplate\">\n        <property name=\"connectionFactory\" ref=\"jedisConnectionFactory\" />\n    </bean>\n\n    <!-- 配置RedisCacheManager -->\n    <bean id=\"cacheManager\" class=\"org.springframework.data.redis.cache.RedisCacheManager\">\n        <constructor-arg name=\"redisOperations\" ref=\"redisTemplate\" />\n        <property name=\"defaultExpiration\" value=\"${redis.expiration}\" />\n    </bean>\n\n    <!-- 配置RedisCacheManager -->\n    <bean id=\"cacheManager\" class=\"org.springframework.cache.support.SimpleCacheManager\">\n        <property name=\"caches\">\n            <set>\n                <!-- 这里可以配置多个redis -->\n                <bean class=\"com.ecut.core.config.RedisCache\">\n                    <property name=\"redisTemplate\" ref=\"redisTemplate\" />\n                    <property name=\"name\" value=\"articlesDetail\"/>\n                </bean>\n                <bean class=\"com.ecut.core.config.RedisCache\">\n                    <property name=\"redisTemplate\" ref=\"redisTemplate\" />\n                    <property name=\"name\" value=\"getHotArticlesInCache\"/>\n                </bean>\n                <bean class=\"com.ecut.core.config.RedisCache\">\n                    <property name=\"redisTemplate\" ref=\"redisTemplate\" />\n                    <property name=\"name\" value=\"articlesList\"/>\n                </bean>\n            </set>\n        </property>\n    </bean>\n</beans>\n```\n#### 4.4 引入 `applicationContext-redis.xml redis-config.properties`\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <beans xmlns=\"http://www.springframework.org/schema/beans\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xmlns:context=\"http://www.springframework.org/schema/context\"\n           xmlns:p=\"http://www.springframework.org/schema/p\"\n           xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n           xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\thttp://www.springframework.org/schema/context\n\thttp://www.springframework.org/schema/context/spring-context.xsd\n\thttp://www.springframework.org/schema/mvc\n\thttp://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\">\n\n    <!--使标注Spring注解的类生效-->\n    <context:component-scan base-package=\"com.ecut\"/>\n\n    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->\n    <bean id=\"propertyConfigurer\" class=\"com.ecut.core.spring.PropertyPlaceholderConfigurerFilter\">\n        <property name=\"locations\">\n            <list>\n                <!-- 这里支持多种寻址方式：classpath和file -->\n                <value>classpath:project.properties</value>\n                <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->\n                <value>classpath:jdbc.properties</value>\n                <value>classpath:redis-config.properties</value>\n            </list>\n        </property>\n    </bean>\n\n    <import resource=\"applicationContext-dao.xml\"/>\n    <import resource=\"applicationContext-shiro.xml\"/>\n    <!--encache redis选择一种缓存-->\n    <!--<import resource=\"applicationContext-encache.xml\"/>-->\n    <import resource=\"applicationContext-redis.xml\"/>\n</beans>\n```\n#### 4.5 新建 `RedisCache.java` Cache接口实现类 Spring对于缓存只是提供了抽象的接口，并且通过接口来调用功能，没有具体的实现类，所以需要我们自己实现具体的操作。\n```java\npackage com.ecut.core.config;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.cache.Cache;\nimport org.springframework.cache.support.SimpleValueWrapper;\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.data.redis.connection.RedisConnection;\nimport org.springframework.data.redis.core.RedisCallback;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport java.io.Serializable;\n\n/**\n * Cache接口实现类\n *\n * 　Spring对于缓存只是提供了抽象的接口，并且通过接口来调用功能，没有具体的实现类，所以需要我们自己实现具体的操作。\n 　　在上面配置中可知，每个实现类都会注入一个redisTemplate实例，我们就可以通过redisTemplate来操作redis\n * @author songshuiyang\n * @date 2018/4/9 20:38\n */\npublic class RedisCache implements Cache {\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    private RedisTemplate<String, Object> redisTemplate;\n\n    private String name;\n\n    @Override\n    public void clear() {\n        logger.info(\"----------------------------RedisCache  緩存清理-------------------------\");\n        redisTemplate.execute(new RedisCallback<String>() {\n            @Override\n            public String doInRedis(RedisConnection connection) throws DataAccessException {\n                connection.flushDb();\n                return \"ok\";\n            }\n        });\n    }\n\n    @Override\n    public void evict(Object key) {\n        logger.info(\"----------------------------RedisCache  緩存刪除-------------------------\");\n        final String keyf=key.toString();\n        redisTemplate.execute(new RedisCallback<Long>() {\n            @Override\n            public Long doInRedis(RedisConnection connection) throws DataAccessException {\n                return connection.del(keyf.getBytes());\n            }\n\n        });\n\n    }\n\n    @Override\n    public ValueWrapper get(Object key) {\n        logger.info(\"----------------------------RedisCache  缓存获取-------------------------\");\n        final String keyf = key.toString();\n        Object object = null;\n        object = redisTemplate.execute(new RedisCallback<Object>() {\n            @Override\n            public Object doInRedis(RedisConnection connection) throws DataAccessException {\n                byte[] key = keyf.getBytes();\n                byte[] value = connection.get(key);\n                if (value == null) {\n                    logger.info(\"----------------------------RedisCache 缓存不存在-------------------------\");\n                    return null;\n                }\n                return SerializationUtils.deserialize(value);\n            }\n        });\n        ValueWrapper obj=(object != null ? new SimpleValueWrapper(object) : null);\n        logger.info(\"----------------------------RedisCache 获取到内容-------------------------\");\n        return  obj;\n    }\n\n    @Override\n    public void put(Object key, Object value) {\n        System.out.println(\"-------加入缓存------\");\n        System.out.println(\"key----:\"+key);\n        System.out.println(\"key----:\"+value);\n        final String keyString = key.toString();\n        final Object valuef = value;\n        final long liveTime = 86400;\n        redisTemplate.execute(new RedisCallback<Long>() {\n            @Override\n            public Long doInRedis(RedisConnection connection) throws DataAccessException {\n                byte[] keyb = keyString.getBytes();\n                byte[] valueb = SerializationUtils.serialize((Serializable) valuef);\n                connection.set(keyb, valueb);\n                if (liveTime > 0) {\n                    connection.expire(keyb, liveTime);\n                }\n                return 1L;\n            }\n        });\n\n    }\n\n    @Override\n    public <T> T get(Object arg0, Class<T> arg1) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    @Override\n    public String getName() {\n        return this.name;\n    }\n\n    @Override\n    public Object getNativeCache() {\n        return this.redisTemplate;\n    }\n\n    @Override\n    public ValueWrapper putIfAbsent(Object arg0, Object arg1) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public RedisTemplate<String, Object> getRedisTemplate() {\n        return redisTemplate;\n    }\n\n    public void setRedisTemplate(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n```\n#### 4.6 完成以上的配置之后就可以使用 Spring Cache注解来使用缓存了\n首先使用注解标记方法，相当于定义了切点，然后使用Aop技术在这个方法的调用前、调用后获取方法的入参和返回值，进而实现了缓存的逻辑。\n* @Cacheable\n\n```sql\n表明所修饰的方法是可以缓存的：当第一次调用这个方法时，它的结果会被缓存下来，在缓存的有效时间内，以后访问这个方法都直接返回缓存结果，不再执行方法中的代码段。 \n这个注解可以用condition属性来设置条件，如果不满足条件，就不使用缓存能力，直接执行方法。 \n可以使用key属性来指定key的生成规则。\n\n@Cacheable 支持如下几个参数：\n\n  value：缓存位置名称，不能为空，如果使用EHCache，就是ehcache.xml中声明的cache的name, 指明将值缓存到哪个Cache中\n  key：缓存的key，默认为空，既表示使用方法的参数类型及参数值作为key，支持SpEL，如果要引用参数值使用井号加参数名，如：#userId，\n\n  一般来说，我们的更新操作只需要刷新缓存中某一个值，所以定义缓存的key值的方式就很重要，最好是能够唯一，因为这样可以准确的清除掉特定的缓存，而不会影响到其它缓存值 ， \n  本例子中使用实体加冒号再加ID组合成键的名称，如”user:1”、”order:223123”等\n\n  condition：触发条件，只有满足条件的情况才会加入缓存，默认为空，既表示全部都加入缓存，支持SpEL\n  \n  \n  // 将缓存保存到名称为UserCache中，键为\"user:\"字符串加上userId值，如 'user:1'\n  @Cacheable(value=\"UserCache\", key=\"'user:' + #userId\")    \n  public User findById(String userId) {    \n      return (User) new User(\"1\", \"mengdee\");           \n  }    \n  \n  // 将缓存保存进UserCache中，并当参数userId的长度小于12时才保存进缓存，默认使用参数值及类型作为缓存的key\n  // 保存缓存需要指定key，value， value的数据类型，不指定key默认和参数名一样如：\"1\"\n  @Cacheable(value=\"UserCache\", condition=\"#userId.length() < 12\")    \n  public boolean isReserved(String userId) {    \n      System.out.println(\"UserCache:\"+userId);    \n      return false;    \n  }\n```\n* @CachePut\n\n```sql\n与@Cacheable不同，@CachePut不仅会缓存方法的结果，还会执行方法的代码段。它支持的属性和用法都与@Cacheable一致。\n```\n\n* @CacheEvict\n```sql\n与@Cacheable功能相反，@CacheEvict表明所修饰的方法是用来删除失效或无用的缓存数据。\n\n@CacheEvict 支持如下几个参数：\n\n  value：缓存位置名称，不能为空，同上\n  key：缓存的key，默认为空，同上\n  condition：触发条件，只有满足条件的情况才会清除缓存，默认为空，支持SpEL\n  allEntries：true表示清除value中的全部缓存，默认为false\n\n  //清除掉UserCache中某个指定key的缓存    \n  @CacheEvict(value=\"UserCache\",key=\"'user:' + #userId\")    \n  public void removeUser(User user) {    \n      System.out.println(\"UserCache\"+user.getUserId());    \n  }    \n  \n  //清除掉UserCache中全部的缓存    \n  @CacheEvict(value=\"UserCache\", allEntries=true)    \n  public final void setReservedUsers(String[] reservedUsers) {    \n     System.out.println(\"UserCache deleteall\");    \n  }\n  \n  \n```\n* @Caching\n```sql\n如果需要使用同一个缓存注解（@Cacheable、@CacheEvict或@CachePut）多次修饰一个方法，就需要用到@Caching。\n\n@Caching(evict = { @CacheEvict(\"primary\"), @CacheEvict(cacheNames=\"secondary\", key=\"#p0\") })\npublic Book importBooks(String deposit, Date date)\n\n```\n* @CacheConfig\n```sql\n与前面的缓存注解不同，这是一个类级别的注解。\n 如果类的所有操作都是缓存操作，你可以使用@CacheConfig来指定类，省去一些配置。\n\n@CacheConfig(\"books\")\npublic class BookRepositoryImpl implements BookRepository {\n    @Cacheable\n    public Book findBook(ISBN isbn) {...}\n}\n```\n## 遇到的问题：\n* spring+redis报错org.springframework.core.serializer.support.DeserializingConverter.<init>(Ljava/lang/ClassLoader;)V\n```java\n这个问题的原因大概就是spring-data-redis.jar包版本不对 ，下面版本可以正常启动\n\n        <dependency>\n            <groupId>org.springframework.data</groupId>\n            <artifactId>spring-data-redis</artifactId>\n            <version>1.6.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>2.9.0</version>\n        </dependency>\n```\n* Spring Cache 注解问题，使用redis缓存会出现类型转化的问题 ,还未解决\n\n\n\n## 参考： \nhttps://www.cnblogs.com/panter/p/6801210.html\nhttp://www.redis.net.cn/tutorial/3503.html\nhttps://www.cnblogs.com/hello-daocaoren/p/7891907.html\n\n\n","tags":["java"],"categories":["server"]},{"title":"微信公众号实现输入兑换码自动发红包功能","url":"/2018/04/03/backend/支付/微信公众号开通发红包功能/","content":"### 前言\n 公司积分抽奖活动有红包奖项(虽然基本上都是这个奖)，但是用户兑奖的过程十分麻烦: 需要先联系公司客服，然后加客服微信，加完之后客服发一个微信红包作为兑换。所以决定简化这个兑奖过程，能不能将这个兑奖的过程改为由用户自己兑换，不用联系公司客服也能兑奖。\n \n### 初步想法\n 公司有微信公众号，可以通过微信公众号进行发红包操作，一方面可以实现发送红包的功能，另一方面也可以推广公司的微信公众号。初步想法是用户在微信公众号里输入一个兑换码，然后微信自动发送一个红包给用户，用户只要点一下红包，红包就进用户自己口袋了\n \n### 业务流程\n如果用户抽奖中了红包奖励，系统弹出一个提示框，里面有公司的微信公众号二维码图片（微信公众平台可以获取），及兑奖的兑换码，提示用户关注微信公众号，在公众号里面输入兑换码就可以获取红包\n\n<!--more-->\n### 准备\n1、先介绍几个平台\n\nI.微信公众平台:是微信公众账号申请入口和管理后台。商户可以在公众平台提交基本资料、业务资料、财务资料申请开通微信支付功能。\n\n平台入口：http://mp.weixin.qq.com。\n\nII.微信商户平台:微信商户平台是微信支付相关的商户功能集合，包括参数配置、支付数据查询与统计、在线退款、代金券或立减优惠运营等功能。\n\n平台入口：http://pay.weixin.qq.com\n\nIII. 红包接口地址： https://pay.weixin.qq.com/wiki/doc/api/tools/cash_coupon.php?chapter=13_4&index=3\n\n2、 在微信公众平台获取公众号二维码图片（提供了多种尺寸大小），该二维码是提供给用户扫描， 及公众账号appid\n\n3、 在微信商户平台上下载证书（账户中心 - 账户设置 - API安全 - API证书（下载zip压缩包格式即可，无须解压），获取 商户号（账户中心 - 账户设置 - 商户信息 - 基本账户信息 - 微信支付商户号），API密钥（账户中心 - 账户设置 - API安全 - API密钥 - 设置密钥（密钥为32位，需要自行重新设置，记录并保存好，实在没记住也可以更改） 这些参数\n\n4、 开通红包功能，以及充值红包金额，红包金额与充值交易金额是区分开来的，所以需要单独充值，发放现金红包将扣除商户的可用余额，请注意，可用余额并不是微信支付交易额，需要预先充值，确保可用余额充足。查看可用余额、充值、提现请登录微信支付商户平台，进入“资金管理”菜单，进行操作\n\n5、 介绍\n```java\n现金红包简介\n微信红包，2014年春节一经推出即受到广大用户好评，引发全民抢红包热潮。现将微信红包打造成“现金红包”，成为一款定向资金发放的营销工具，供商户使用。\n\n申请红包条件\n1、T+0 结算商户需满足两个条件：1、入驻满90天，2、截止今日往回推30天内连续正常交易。\n2、其余结算周期的商户无限制，可立即前往【商户平台】->【产品中心】申请开通。\n\n发放方式介绍\n商户发放现金红包有3种发放方式：\n1）接口发放\n商户根据文档”【商户平台】现金红包API文档V2“进行开发，一次调用可以给一个指定用户发送一个指定金额的红包，满足多元化的运营需求；\n2）通过上传openid文件发放\n收集要发送红包对象的openid，将openid编辑成txt文件，登录微信支付商户平台，使用上传文件功能发放。一份文件对应一个红包模板，便于管理；\n为了防止商户手误重复操作发送红包，创建的同一个文件只能上传一次。若需要重复发放则需要修改文件名称或重新创建。\n3）配置营销规则“满额送”发放\n配置的规则不可使用红包模版进行发放，商户须在【产品中心】-【现金红包】-【前往功能】中创建红包后配置自助规则：用户使用微信支付发生交易满足一定条件，立送现金红包。\n\n税务和发票问题\n商户给用户发红包，微信支付按照商户指定红包金额扣除完全对等的充值资金，资金最终进入用户零钱。微信支付并未从中收取资金作为营收，所以不予开具发票。\n发放现金红包请商户遵照国家法律依法纳税，在商户充值之前，我们默认商户已经合法上税，商户使用本功能的行为若涉及纳税或代扣代缴税款的义务，由商户自行承担该义务，我们不会替商户缴纳税款 。\n```\n\n### 程序实现\n1、用户抽奖中了红包奖励, 生成一笔抽奖记录，同时生成一笔红包记录，所以需要新建一个红包记录表(表结构如下图)，一开始生成的记录中红包状态是 0-未发放的状态，同时生成兑换码。\n\n兑换码规则：\n\n10位大写字母：3位固定字母开头 + 7位随机字母（大写字母是为了防止【数字0 与字母o O】【 1与字母l】混淆导致用户兑换不了奖， 3位固定字母是为了防止恶意用户无限次输入兑换码导致老是触发红包处理程序，如果不是以这个三个字母开头的文字，统一回复欢迎关注本微信公众号）\n\n```sql\nDROP TABLE IF EXISTS `ge_lottery_redpack_record`;\nCREATE TABLE `ge_lottery_redpack_record` (\n  `id` varchar(32) NOT NULL,\n  `created_by` varchar(32) NOT NULL,\n  `created_date` datetime NOT NULL,\n  `last_modified_by` varchar(32) NOT NULL,\n  `last_modified_date` datetime NOT NULL,\n  `remarks` varchar(255) DEFAULT NULL,\n  `version` int(11) DEFAULT NULL,\n  `locked` bit(1) DEFAULT b'0',\n  `enable` bit(1) DEFAULT b'0',\n  `fd_lottery_record_id` varchar(32) DEFAULT NULL COMMENT '中奖纪录id 作为外键',\n  `fd_status` int(11) DEFAULT NULL COMMENT '红包状态 0:未发放 1：已发放待领取 2：发放失败 3：已领取 4：未领取已退款',\n  `fd_redpack_send_date` datetime DEFAULT NULL COMMENT '红包发送时间(非微信)',\n  `fd_redpack_order_id` varchar(32) DEFAULT NULL COMMENT '微信红包订单单号',\n  `fd_redpack_openid` varchar(32) DEFAULT NULL COMMENT '微信红包订单用户在wxappid下的openid',\n  `fd_redeem_code` varchar(32) DEFAULT NULL COMMENT '兑换码',\n  `fd_redpack_price` decimal(19,4) DEFAULT NULL COMMENT '红包金额',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='抽奖红包纪录表';\n\n```\n2、用户得到兑换码之后，就是在微信公众号里输入兑换码，当用户输入兑换码之后，用户信息会发到我们自己服务器后台中, 这里用户触发的是文本事件，我们需要的是三个参数\n\n(1) 用户微信OpenID（用户在本微信公众号的唯一标识）\n\n(2) 用户发的兑换码\n\n(3) HttpServletRequest（用于获取用户ip，发红包接口入参需要）\n\n```java\n            // 文本事件\n            if (WechatBindUtil.MESSAGE_TEXT.equals(msgType)) {\n                String content = map.get(\"Content\").trim();\n                // 如果输入的文本是是以RED开头的, 执行发红包操作\n                if (content.startsWith(\"RED\")) {\n                    String resultContent = lotteryRedpackRecordService.sendRedpackByRedeemCode(fromUserName,content,req);\n                    message = WechatBindUtil.initText(toUserName, fromUserName, resultContent);\n                } else {\n                    message = WechatBindUtil.initText(toUserName, fromUserName, \"欢迎关注本微信公众号\");\n                }\n            }\n```\n3、如果输入的文本是是以RED开头的, 执行发红包操作, 首先是查询红包记录表有没有该兑换码且红包状态为未发放，如果有的话调用微信发红包接口，同时更改红包状态，记录\n红包发送时间，微信红包订单单号，微信红包订单用户在wxappid下的openid，没有的话给出提示，实现如下\n```java\n    /**\n     * 根据兑换码发送微信红包\n     * @param openid\n     * @param redeemCode\n     * @return\n     */\n    public String sendRedpackByRedeemCode (String openid, String redeemCode, HttpServletRequest request) {\n        Page<LotteryRedpackRecord> page = new Page<>(0);\n        page.setParams(\"fdRedeemCode\",redeemCode);\n        List<LotteryRedpackRecord> redpackRecords = findAutoByPage(page);\n        if (redpackRecords.size() != 0) {\n            LotteryRedpackRecord oldRecord = redpackRecords.get(0);\n            // 调用微信红包查询接口, 先更新红包纪录状态\n            updateRedpackState(oldRecord.getId());\n\n            // 更新完成之后获取新的红包纪录\n            LotteryRedpackRecord record = findById(oldRecord.getId());\n            Integer fdStatus = record.getFdStatus();\n            if (fdStatus.equals(R.LotteryRedpackRecord.FdStatus.未发放.getIndex())) {\n                RedpackDTO redpackDTO = new RedpackDTO();\n                // 以红包纪录id作为 微信红包接口请求的商品订单号 截取28位\n                String mchBillNo = record.getId();\n                mchBillNo= mchBillNo.substring(0,28);\n                redpackDTO.setMchBillNo(mchBillNo);\n                // 指定哪一个微信用户\n                redpackDTO.setReOpenid(openid);\n                // 红包价格\n                redpackDTO.setTotalAmount(record.getFdRedpackPrice());\n                // 调用接口的机器Ip地址\n                String clientIp = WxUtils.getRemoteIp(request);\n                redpackDTO.setClientIp(clientIp);\n                Map<String,String> sendredpackResult = weixinPayService.sendredpack(redpackDTO);\n\n                // 更新红包纪录表\n                LotteryRedpackRecord lotteryRedpackRecord = findById(record.getId());\n                lotteryRedpackRecord.setFdRedpackOpenid(openid);\n                if (sendredpackResult.get(\"status\").equals(\"success\")) {\n                    lotteryRedpackRecord.setFdStatus(R.LotteryRedpackRecord.FdStatus.已发放待领取.getIndex());\n                    // 红包订单的微信单号-微信服务器上红包纪录的唯一标识\n                    String redpackOrderId = sendredpackResult.get(\"sendListid\");\n                    lotteryRedpackRecord.setFdRedpackOrderId(redpackOrderId);\n                    lotteryRedpackRecord.setFdRedpackSendDate(new Date());\n\n                    // 更新抽奖纪录表, 变为已兑换\n                    LotteryRecord lotteryRecord = lotteryRecordService.findById(record.getFdLotteryRecordId());\n                    lotteryRecord.setFdStatus(R.LotteryRecordItem.FdStatus.已兑换.getIndex());\n                    lotteryRecordService.saveSelective(lotteryRecord);\n                    saveSelective(lotteryRedpackRecord);\n                } else {\n                    lotteryRedpackRecord.setFdStatus(R.LotteryRedpackRecord.FdStatus.发放失败.getIndex());\n                    lotteryRedpackRecord.setRemarks(sendredpackResult.get(\"message\"));\n                    saveSelective(lotteryRedpackRecord);\n                    return \"红包发送失败, 请及时联系对应的客服!\";\n                }\n            } else if (fdStatus.equals(R.LotteryRedpackRecord.FdStatus.已发放待领取.getIndex())) {\n                return \"该兑换码对应的红包已发送! 请注意查收\";\n            } else if (fdStatus.equals(R.LotteryRedpackRecord.FdStatus.发放失败.getIndex())) {\n                return \"红包发送失败, 请及时联系对应的客服!\";\n            } else if (fdStatus.equals(R.LotteryRedpackRecord.FdStatus.已领取.getIndex())) {\n                return \"该兑换码对应的红包已领取\";\n            } else {\n                return \"该兑换码对应的红包已过时, 请及时联系对应的客服\";\n            }\n        } else {\n            return \"该兑换码无效, 请输入正确的兑换码!\";\n        }\n        return \"红包已发送请注意查收! 注: 24小时后未领取该红包失效\";\n    }\n```\n4、调用微信红包接口\n\n```java\n    /**\n     * 微信公众号发红包接口\n     * @param redpackDTO\n     * @return\n     */\n    public Map<String,String> sendredpack(RedpackDTO redpackDTO) {\n        Map<String,String> resultMap = Maps.newHashMap();\n        Map<String,String> wxResultMap = Maps.newHashMap();\n        // 请求参数\n        Map<String, String> reqData = Maps.newHashMap();\n        logger.info(\"--------------------->>> 开始发送红包start\", redpackDTO);\n        try {\n            // 随机字符串\n            reqData.put(\"nonce_str\", WXPayUtil.generateNonceStr());\n            // 商户订单号\n            reqData.put(\"mch_billno\",redpackDTO.getMchBillNo());\n            // 商户号\n            reqData.put(\"mch_id\", WxPcPayConfigImpl.MCH_ID);\n            // 公众账号appid\n            reqData.put(\"wxappid\", WxPcPayConfigImpl.SENDREDPACK_WX_APPID);\n            // 商户名称\n            reqData.put(\"send_name\", WxPcPayConfigImpl.SENDREDPACK_SEND_NAME);\n            // 用户openid\n            reqData.put(\"re_openid\",redpackDTO.getReOpenid());\n            // 付款金额\n            reqData.put(\"total_amount\", AmountUtils.transAmountToCent(redpackDTO.getTotalAmount()));\n            // 红包发放总人数\n            reqData.put(\"total_num\", WxPcPayConfigImpl.SENDREDPACK_TOTAL_NUM);\n            // 红包祝福语\n            reqData.put(\"wishing\", WxPcPayConfigImpl.SENDREDPACK_WISHING);\n            // Ip地址\n            reqData.put(\"client_ip\", redpackDTO.getClientIp());\n            // 活动名称\n            reqData.put(\"act_name\", WxPcPayConfigImpl.SENDREDPACK_ACT_NAME);\n            //备注\n            reqData.put(\"remark\", WxPcPayConfigImpl.SENDREDPACK_REMARK);\n            // 生成签名\n            reqData.put(\"sign\", WXPayUtil.generateSignature(reqData, WxPcPayConfigImpl.API_KEY, WXPayConstants.SignType.MD5 ));\n            String respXml = wxpay.requestWithCert(WxPcPayConfigImpl.SENDREDPACK_URL,reqData , 10000, 10000);\n            wxResultMap = WXPayUtil.xmlToMap(respXml);\n        } catch (Exception e) {\n            e.printStackTrace();\n            logger.info(\"--------------------->>> 微信公众号发送红包异常\");\n            resultMap.put(\"message\", e.getMessage());\n            resultMap.put(\"status\", \"failed\");\n        }\n        // 通信标识结果\n        String returnCode = wxResultMap.get(\"return_code\");\n        if (\"SUCCESS\".equals(returnCode)) {\n            String resultCode = wxResultMap.get(\"result_code\");\n            // 业务处理结果\n            if (\"SUCCESS\".equals(resultCode)) {\n                logger.info(\"--------------------->>> 微信公众号发送红包成功\");\n                // 红包订单的微信单号\n                String sendListid = wxResultMap.get(\"send_listid\");\n                resultMap.put(\"sendListid\",sendListid);\n                resultMap.put(\"message\",\"操作成功\");\n                resultMap.put(\"status\", \"success\");\n            } else {\n                logger.info(\"--------------------->>> 微信公众号发送红包失败, 原因: \" + wxResultMap.get(\"err_code_des\"));\n                String errCodeDes = wxResultMap.get(\"err_code_des\");\n                resultMap.put(\"message\",errCodeDes);\n                resultMap.put(\"status\", \"failed\");\n                return resultMap;\n            }\n        } else {\n            String returnMsg = wxResultMap.get(\"return_msg\");\n            logger.info(\"--------------------->>> 微信公众号发送红包失败, 原因: \" + returnMsg);\n            resultMap.put(\"message\", returnMsg);\n            resultMap.put(\"status\", \"failed\");\n            return resultMap;\n        }\n        return resultMap;\n    }\n```\n\n### 总结及注意事项\n1.红包是以分为单位，必须大于100分，小于20000分之间，这个很重要,不要一不小心把公司的钱都转出去了\n\n2.需要对请求参数进行加签操作，wxpay里面封装了方法\n\n3.现金红包接口请求是需要证书的，因为是出账，不像充值是属于进账不用证书， 需要调用`requestWithCert` 这个请求接口\n\n```java\n    /**\n     * 需要证书的请求\n     * @param strUrl String\n     * @param reqData 向wxpay post的请求数据  Map\n     * @param connectTimeoutMs 超时时间，单位是毫秒\n     * @param readTimeoutMs 超时时间，单位是毫秒\n     * @return API返回数据\n     * @throws Exception\n     */\n    public String requestWithCert(String strUrl, Map<String, String> reqData,\n                                  int connectTimeoutMs, int readTimeoutMs) throws Exception {\n```\n4.由于红包发出去了不知道用户有没有领取，所以可以用一个定时任务或者一个按钮调用微信红包状态查询接口，以更新红包的最新状态\n\n5.可以借助第三方平台，如摇摇啦应用平台，借助这些平台可以不用开发接口，只要配置好参数就可以使用了，但唯一的缺点是要钱\n","tags":["支付"],"categories":["server"]},{"title":"Docelver接口管理平台","url":"/2018/04/03/backend/测试/Docelver接口管理平台/","content":"#### 前言 \n在项目开发过程中，开发一个功能模块，需要前后端开发进行接口定义并形成文档，如果使用doc这些文档去维护接口，多会出现纰漏，特别是在多人开发的项目中，缺点尤为明显，所以需要一个像代码版本控制（git svn）类型的平台去维护这些文档，方便开发人员进行接口维护，前后端开发人员联调接口，测试人员编写测试用例\n\n#### 市场上常用的接口管理平台\n\n##### 1. Rap 阿里出品\n官网地址：  http://rapapi.org/org/index.do\n\n官网介绍：\n\nRAP是一个可视化接口管理工具 通过分析接口结构，动态生成模拟数据，校验真实接口正确性， 围绕接口定义，通过一系列自动化工具提升我们的协作效率。我们的口号：提高效率，回家吃晚饭！\n\n使用体验：\n1. RAP的应用范围非常明确，是一个面向开发人员自测和联调的工具性平台，它更适合以开发为核心对接口进行维护\n\n##### 2. DOClever\n官网地址： http://www.doclever.cn/controller/index/index.html\n\n可以对接口信息进行编辑管理，支持get,post,put,delete,patch 五种方法，支持 https 和 https 协议，并且支持 query，body，json，raw，rest，formdata 的参数可视化编辑。同时对 json 可以进行无限层次可视化编辑。并且，状态码，代码注入，markdown 文档等附加功能应有尽有。\n\n\n \n\n接口调试运行，可以对参数进行加密，从md5 到 aes 一应俱全，返回参数与模型实时分析对比，给出不一致的地方，找出接口可能出现的问题。如果你不想手写文档，那么试试接口的数据生成功能，可以对接口运行的数据一键生成文档信息。\n\n \n\nmock 的无缝整合，DOClever 自己就是一个 mock 服务器，当你把接口的开发状态设置成已完成，本地 mock 便会自动请求真实接口数据，否则返回事先定义好的 mock 数据。\n\n \n\n支持 postman，rap，swagger 的导入，方便你做无缝迁移，同时也支持 html 文件的导出，方便你离线浏览！\n\n \n\n项目版本和接口快照功能并行，你可以为一个项目定义 1.0，1.1，1.2 版本，并且可以自由的在不同版本间切换回滚，再也不怕接口信息的遗失，同时接口也有快照功能，当你接口开发到一半或者接口需求变更的时候，可以随时查看之前编辑的接口信息。\n\n \n\n自动化测试功能，目前市面上类似平台的接口自动化测试大部分都是伪自动化，对于一个复杂的场景，比如获取验证码，登陆，获取订单列表，获取某个特定订单详情这样一个上下文关联的一系列操作无能为力。而 DOClever 独创的自动化测试功能，只需要你编写极少量的 javascript 代码便可以在网页里完成这样一系列操作，同时，DOClever 还提供了后台定时批量执行测试用例并把结果发送到团队成员邮箱的功能，你可以及时获取接口的运行状态。\n\n \n\n团队协作功能，很多类似的平台这样的功能是收费的，但是 DOClever 觉得好东西需要共享出来，你可以新建一个团队，并且把团队内的成员都拉进来，给他们分组，给他们分配相关的项目以及权限，发布团队公告等等。\n\n \n\nDOClever 开源免费，支持内网部署，很多公司考虑到数据的安全性，不愿意把接口放到公网上，没有关系，DOClever 给出一个方便快捷的解决方案，你可以把平台放到自己的内网上，完全不需要连接外网，同时功能一样也不少，即便是对于产品的升级，DOClever 也提供了很便捷的升级方案！\n","tags":["测试"],"categories":["server"]},{"title":"Java经典算法","url":"/2018/04/01/backend/Java/Java经典算法/Java经典算法/","content":"## 排序算法\n\n### 冒泡排序\n```java\n       public void bubbleSort(int []a){\n           int len=a.length;\n           for(int i=0;i<len;i++){\n               for(int j=0;j<len-i-1;j++){//注意第二重循环的条件\n                   if(a[j]>a[j+1]){\n                       int temp=a[j];\n                       a[j]=a[j+1];\n                       a[j+1]=temp;\n                   }\n               }\n           }\n       }\n```\n### 选择排序\n```java\n    public void selectSort(int[]a){\n        int len=a.length;\n        for(int i=0;i<len;i++){//循环次数\n            int value=a[i];\n            int position=i;\n            for(int j=i+1;j<len;j++){//找到最小的值和位置\n                if(a[j]<value){\n                    value=a[j];\n                    position=j;\n                }\n            }\n            a[position]=a[i];//进行交换\n            a[i]=value;\n        }\n    }\n```\n## 查找算法\n### 二分查找\n```java\nimport java.util.Scanner;\n/*\n * 二分查找\n */\npublic class BinarySearch {\n    public static void main(String[] args) {\n        int[] arr={5,3,6,1,9,8,2,4,7};\n        //先打印输出原始数组数据\n        System.out.println(\"原始数组数据如下：\");\n        for (int n : arr) {\n            System.out.print(n+\" \");\n        }\n        System.out.println();\n        //首先对数组进行排序，这里用冒泡排序\n        for(int i=0;i<arr.length-1;i++){\n            for(int j=0;j<arr.length-1-i;j++){\n                if(arr[j]>arr[j+1]){\n                    int temp=arr[j];\n                    arr[j]=arr[j+1];\n                    arr[j+1]=temp;\n                }\n            }\n        }\n        //遍历输出排序好的数组\n        System.out.println(\"经过冒泡排序后的数组：\");\n        for(int n:arr){\n            System.out.print(n+\" \");\n        }\n        System.out.println();//换行\n        Scanner input=new Scanner(System.in);\n        System.out.println(\"请输入你要查找的数：\");\n        int num=input.nextInt();\n        int result=binarySearch(arr, num);\n        if(result==-1){\n            System.out.println(\"你要查找的数不存在……\");\n        }\n        else{\n            System.out.println(\"你要查找的数存在，在数组中的位置是：\"+result);\n        }\n    }\n    //二分查找算法\n    public static int binarySearch(int[] arr,int num){\n    \n        int low=0;\n        int upper=arr.length-1;\n        while(low<=upper){\n            int mid=(upper+low)/2;\n            if(arr[mid]<num){\n                low=mid+1;\n            }\n            else if(arr[mid]>num){\n                upper=mid-1;\n            }\n            else\n                return mid;\n        }\n        return -1;\n    }\n}\n```","tags":["Java"],"categories":["server"]},{"title":"Windows批处理(cmd/bat)常用命令","url":"/2018/03/24/backend/windows bat/","content":"#### 需求\n在使用hexo写博客的时候, hexo d 老是不能把代码push上去，网上找了好多方法都不能解决, 只能自己手动把`public`文件下生成的文件自己敲git命令push上传, 每次写博客的时候都要执行这种操作, 次数多了会感觉厌烦, 所有想windows不是有批处理脚本吗, 所以自己查阅了一些资料, 写了一个草鸡简单的脚本\n\n* auto.bat\n```sql\n# 文件上传commit\ngit add -A\n\ngit commit -m \"auto commit\"\n\ngit push\n\necho copy file\nxcopy D:\\workspace\\hexo-log-bak\\hexo-log-bak\\public\\*.* D:\\workspace\\hexo-log-upload\\songshuiyang.github.io /s /y\n\necho 提交songshuiyang.github.io 文件\ncd ../../hexo-log-upload\\songshuiyang.github.io\n\ngit add -A\n\ngit commit -m \"auto commit\"\n\ngit push\n\ncd ../../hexo-log-bak/hexo-log-bak\n\n```\n<!--more-->\n#### 批处理文件\n批处理文件（batch file）包含一系列 DOS命令，通常用于自动执行重复性任务。用户只需双击批处理文件便可执行任务，而无需重复输入相同指令。编写批处理文件非常简单，但难点在于确保一切按顺序执行。编写严谨的批处理文件可以极大程度地节省时间，在应对重复性工作时尤其有效。\n\n在Windows中善用批处理可以简化很多重复工作\n\n##### 常用DOS命令\n```sql\n文件夹管理\n\n    cd 显示当前目录名或改变当前目录。\n    md 创建目录。\n    rd 删除一个目录。\n    dir 显示目录中的文件和子目录列表。\n    tree 以图形显示驱动器或路径的文件夹结构。\n    path 为可执行文件显示或设置一个搜索路径。\n    xcopy 复制文件和目录树。\n\n\n文件管理\n\n    type 显示文本文件的内容。\n    copy 将一份或多份文件复制到另一个位置。\n    del 删除一个或数个文件。\n    move 移动文件并重命名文件和目录。(Windows XP Home Edition中没有)\n    ren 重命名文件。\n    replace 替换文件。\n    attrib 显示或更改文件属性。\n    find 搜索字符串。\n    fc 比较两个文件或两个文件集并显示它们之间的不同\n网络命令\n\n    ping 进行网络连接测试、名称解析\n    ftp 文件传输\n    net 网络命令集及用户管理\n    telnet 远程登陆\n    ipconfig显示、修改TCP/IP设置\n    msg 给用户发送消息\n    arp 显示、修改局域网的IP地址-物理地址映射列表\n    \n系统管理\n\n    at 安排在特定日期和时间运行命令和程序\n    shutdown立即或定时关机或重启\n    tskill 结束进程\n    taskkill结束进程(比tskill高级，但WinXPHome版中无该命令)\n    tasklist显示进程列表(Windows XP Home Edition中没有)\n    sc 系统服务设置与控制\n    reg 注册表控制台工具\n    powercfg控制系统上的电源设置\n```\n\n##### 例子\n","tags":["java"],"categories":["server"]},{"title":"Spring 集成Encache","url":"/2018/03/24/backend/缓存技术/Encache/","content":"### 一：Encache\n\n#### 1. 什么是Encache\nEhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider。\n\n官网: http://www.ehcache.org/\n\n#### 2. 基本介绍\nEhcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,Java EE和轻量级容器。它具有内存和磁盘存储，缓存加载器,缓存扩展,缓存异常处理程序,一个gzip缓存servlet过滤器,支持REST和SOAP api等特点。\n\nEhcache最初是由Greg Luck于2003年开始开发。2009年,该项目被Terracotta购买。软件仍然是开源,但一些新的主要功能(例如，快速可重启性之间的一致性的)只能在商业产品中使用，例如Enterprise EHCache and BigMemory。维基媒体Foundationannounced目前使用的就是Ehcache技术。\n\n<!--more-->\n#### 3. 特点\n主要的特性有：\n1. 快速\n2. 简单\n3. 多种缓存策略\n4. 缓存数据有两级：内存和磁盘，因此无需担心容量问题\n5. 缓存数据会在虚拟机重启的过程中写入磁盘\n6. 可以通过RMI、可插入API等方式进行分布式缓存\n7. 具有缓存和缓存管理器的侦听接口\n8. 支持多缓存管理器实例，以及一个实例的多个缓存区域\n9. 提供Hibernate的缓存实现\n\n\n#### ehcache与redis的区别\n1.redis的数据结构比较丰富，有key-value、hash、set等；ehcache比较简单，只有key-value\n\n2.ehcache直接在jvm虚拟机中缓存，速度快，效率高；但是缓存共享麻烦，集群分布式应用不方便。redis是通过socket访问到缓存服务，效率ecache低，比数据库要快很多，处理集群和分布式缓存方便，有成熟的方案。如果是单个应用或者对缓存访问要求很高的应用，用ehcache。如果是大型系统，存在缓存共享、分布式部署、缓存内容很大的，建议用redis。\n\n### 二: Encache与Spring 集成\n#### 1. 前言\nSpring自身并没有实现缓存解决方案，但是对缓存管理功能提供了声明式的支持，能够与多种流行的缓存实现进行集成。\n\nSpring Cache是作用在方法上的（不能理解为只注解在方法上），其核心思想是：当我们在调用一个缓存方法时会把该方法参数和返回结果作为一个键值存放在缓存中，等到下次利用同样的参数调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。所以在使用Spring Cache的时候我们要保证我们的缓存的方法对于相同的方法参数要有相同的返回结果。\n\n#### 2. 开始集成\n* 导入依赖\n```xml\n        <dependency>\n            <groupId>net.sf.ehcache</groupId>\n            <artifactId>ehcache</artifactId>\n            <version>2.10.3</version>\n        </dependency>\n```\n* 编写ehcache.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://ehcache.org/ehcache.xsd\">\n\n    <!-- 磁盘缓存位置 在Windows的缓存目录为：C:\\Users\\登录用户~1\\AppData\\Local\\Temp\\    Linux：/tmp -->\n    <diskStore path=\"java.io.tmpdir/ehcache\"/>\n\n    <!--name：缓存名称。-->\n    <!--maxElementsInMemory：缓存最大个数。-->\n    <!--eternal：缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期。-->\n    <!--timeToIdleSeconds：置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。-->\n    <!--timeToLiveSeconds：缓存数据的生存时间（TTL），也就是一个元素从构建到消亡的最大时间间隔值，这只能在元素不是永久驻留时有效，如果该值是0就意味着元素可以停顿无穷长的时间。-->\n    <!--maxEntriesLocalDisk：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。-->\n    <!--overflowToDisk：内存不足时，是否启用磁盘缓存。-->\n    <!--diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。-->\n    <!--maxElementsOnDisk：硬盘最大缓存个数。-->\n    <!--diskPersistent：是否在VM重启时存储硬盘的缓存数据。默认值是false。-->\n    <!--diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。-->\n    <!--memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。-->\n    <!--clearOnFlush：内存数量最大时是否清除。-->\n\n    <!--@Cacheable(value = \"users\", condition = \"#user.getId() <= 2\")-->\n    <!--@CachePut(value = \"users\", key = \"#user.getId()\")-->\n    <!--@CacheEvict(value = \"users\", allEntries = true)-->\n\n\n    <!-- 默认缓存 -->\n    <defaultCache\n            maxEntriesLocalHeap=\"10000\"\n            eternal=\"false\"\n            timeToIdleSeconds=\"120\"\n            timeToLiveSeconds=\"120\"\n            maxEntriesLocalDisk=\"10000000\"\n            diskExpiryThreadIntervalSeconds=\"120\"\n            memoryStoreEvictionPolicy=\"LRU\">\n        <persistence strategy=\"localTempSwap\"/>\n    </defaultCache>\n\n    <!-- 博客文章详情缓存 -->\n    <cache name=\"articlesDetail\"\n           maxElementsInMemory=\"1000\"\n           eternal=\"false\"\n           timeToIdleSeconds=\"120\"\n           timeToLiveSeconds=\"120\"\n           overflowToDisk=\"false\"\n           memoryStoreEvictionPolicy=\"LRU\"/>\n\n    <!-- hotArticles缓存 -->\n    <cache name=\"articlesDetail\"\n           maxElementsInMemory=\"1000\"\n           eternal=\"true\"\n           overflowToDisk=\"false\"\n           memoryStoreEvictionPolicy=\"LRU\"/>\n\n</ehcache>\n```\n* 在需要缓存的地方加上缓存注解\n```java\n    /**\n     * 第一次执行会缓存文章,以id作为key, 第二次会直接取缓存的数据(需要在缓存有效期,过期会重新查询数据库)\n     * @param id\n     * @return\n     */\n    @Override\n    @Cacheable(value = \"articlesDetail\", key = \"#id\")\n    public BlogArticles selectByPrimaryKey(Integer id) {\n        return getMappser().selectByPrimaryKey(id);\n    }\n\n    /**\n     * 保存文章，同时删除record.getId()该已存的缓存数据\n     * @param record\n     * @return\n     */\n    @Override\n    @CacheEvict(value = \"articlesDetail\", key = \"#record.getId()\")\n    public int updateByPrimaryKeySelective(BlogArticles record) {\n        setCurrentOperator(record);\n        return getMappser().updateByPrimaryKeySelective(record);\n    }\n```\n#### 3. 注解讲解\n首先使用注解标记方法，相当于定义了切点，然后使用Aop技术在这个方法的调用前、调用后获取方法的入参和返回值，进而实现了缓存的逻辑。\n* @Cacheable\n\n```sql\n表明所修饰的方法是可以缓存的：当第一次调用这个方法时，它的结果会被缓存下来，在缓存的有效时间内，以后访问这个方法都直接返回缓存结果，不再执行方法中的代码段。 \n这个注解可以用condition属性来设置条件，如果不满足条件，就不使用缓存能力，直接执行方法。 \n可以使用key属性来指定key的生成规则。\n\n@Cacheable 支持如下几个参数：\n\n  value：缓存位置名称，不能为空，如果使用EHCache，就是ehcache.xml中声明的cache的name, 指明将值缓存到哪个Cache中\n  key：缓存的key，默认为空，既表示使用方法的参数类型及参数值作为key，支持SpEL，如果要引用参数值使用井号加参数名，如：#userId，\n\n  一般来说，我们的更新操作只需要刷新缓存中某一个值，所以定义缓存的key值的方式就很重要，最好是能够唯一，因为这样可以准确的清除掉特定的缓存，而不会影响到其它缓存值 ， \n  本例子中使用实体加冒号再加ID组合成键的名称，如”user:1”、”order:223123”等\n\n  condition：触发条件，只有满足条件的情况才会加入缓存，默认为空，既表示全部都加入缓存，支持SpEL\n  \n  \n  // 将缓存保存到名称为UserCache中，键为\"user:\"字符串加上userId值，如 'user:1'\n  @Cacheable(value=\"UserCache\", key=\"'user:' + #userId\")    \n  public User findById(String userId) {    \n      return (User) new User(\"1\", \"mengdee\");           \n  }    \n  \n  // 将缓存保存进UserCache中，并当参数userId的长度小于12时才保存进缓存，默认使用参数值及类型作为缓存的key\n  // 保存缓存需要指定key，value， value的数据类型，不指定key默认和参数名一样如：\"1\"\n  @Cacheable(value=\"UserCache\", condition=\"#userId.length() < 12\")    \n  public boolean isReserved(String userId) {    \n      System.out.println(\"UserCache:\"+userId);    \n      return false;    \n  }\n```\n* @CachePut\n\n```sql\n与@Cacheable不同，@CachePut不仅会缓存方法的结果，还会执行方法的代码段。它支持的属性和用法都与@Cacheable一致。\n```\n\n* @CacheEvict\n```sql\n与@Cacheable功能相反，@CacheEvict表明所修饰的方法是用来删除失效或无用的缓存数据。\n\n@CacheEvict 支持如下几个参数：\n\n  value：缓存位置名称，不能为空，同上\n  key：缓存的key，默认为空，同上\n  condition：触发条件，只有满足条件的情况才会清除缓存，默认为空，支持SpEL\n  allEntries：true表示清除value中的全部缓存，默认为false\n\n  //清除掉UserCache中某个指定key的缓存    \n  @CacheEvict(value=\"UserCache\",key=\"'user:' + #userId\")    \n  public void removeUser(User user) {    \n      System.out.println(\"UserCache\"+user.getUserId());    \n  }    \n  \n  //清除掉UserCache中全部的缓存    \n  @CacheEvict(value=\"UserCache\", allEntries=true)    \n  public final void setReservedUsers(String[] reservedUsers) {    \n     System.out.println(\"UserCache deleteall\");    \n  }\n  \n  \n```\n* @Caching\n```sql\n如果需要使用同一个缓存注解（@Cacheable、@CacheEvict或@CachePut）多次修饰一个方法，就需要用到@Caching。\n\n@Caching(evict = { @CacheEvict(\"primary\"), @CacheEvict(cacheNames=\"secondary\", key=\"#p0\") })\npublic Book importBooks(String deposit, Date date)\n\n```\n* @CacheConfig\n```sql\n与前面的缓存注解不同，这是一个类级别的注解。\n 如果类的所有操作都是缓存操作，你可以使用@CacheConfig来指定类，省去一些配置。\n\n@CacheConfig(\"books\")\npublic class BookRepositoryImpl implements BookRepository {\n    @Cacheable\n    public Book findBook(ISBN isbn) {...}\n}\n\n```\n\n#### 4. 创建Cache工具类, 方便对cache进行管理\n``` java\npackage com.ecut.core.utils;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.cache.Cache;\nimport org.springframework.cache.CacheManager;\n\n/**\n * 缓存工具类\n * @author songshuiyang\n * @date 2018/3/24 12:16\n */\npublic class CacheUtils {\n\n    private final static Logger logger = LoggerFactory.getLogger(CacheUtils.class);\n\n    private static CacheManager cacheManager = (CacheManager) SpringContextUtils.getBean(\"cacheManager\");\n\n    /**\n     * 获取缓存\n     * @param cacheName 缓存名\n     * @param key 键\n     * @return Object\n     */\n    public static Object get(String cacheName, Object key) {\n        Cache cache = cacheManager.getCache(cacheName);\n        if (cache != null) {\n            //这里需要判断是否null\n            if(cache.get(key) != null){\n                return cache.get(key).get();\n            }\n        }\n        return null;\n    }\n    /**\n     * 添加缓存\n     * 存在则更新\n     * @param cacheName 缓存名\n     * @param key 键\n     * @param value 值\n     */\n    public static void put(String cacheName, Object key, Object value) {\n        Cache cache = cacheManager.getCache(cacheName);\n        if(cache != null){\n            cache.put(key, value);\n        }\n    }\n    /**\n     * 清除缓存\n     * @param cacheName 缓存名\n     * @param key 键\n     */\n    public static void remove(String cacheName, Object key) {\n        Cache cache = cacheManager.getCache(cacheName);\n        if (cache != null) {\n            cache.evict(key);\n        }else{\n            logger.warn(\"this key is not in Cache\");\n        }\n    }\n}\n\n}\n\n```\n\n参考： \nhttps://blog.csdn.net/vbirdbest/article/details/72763048\nhttp://www.cnblogs.com/jingmoxukong/p/5975994.html","tags":["java"],"categories":["server"]},{"title":"hover.css","url":"/2018/03/20/frontend/hover/","content":"### Hover.css\nA collection of CSS3 powered hover effects to be applied to links, buttons, logos, SVG, featured images and so on. Easily apply to your own elements, modify or just use for inspiration. Available in CSS, Sass, and LESS.\n\n官网地址: http://ianlunn.github.io/Hover/\n\n演示地址: http://wow.techbrood.com/fiddle/852\n\n\n\n\n\n","tags":["css"],"categories":["client"]},{"title":"Linux 命令笔记","url":"/2018/03/08/backend/Linux/linux笔记/","content":"1. 出现问题 `bash: service: command not found`, \n\n解决方法：\n```sql\nyum install initscripts\n```\n2. 查看端口\n```sql\n# 查看80端口占用情况\nlsof -i tcp:80\n\n# 列出所有端口\nnetstat -ntlp\n\n# 查看端口状态\nnetstat -lnp|grep 88   #88请换为你的apache需要的端口，如：80\n\n# SSH执行以上命令，可以查看到88端口正在被哪个进程使用。如下图，进程号为 1777 。\n\n# 查看进程的详细信息\nps 1777\n\n# 杀掉进程\nkill -9 1777        #杀掉编号为1777的进程（请根据实际情况输入）\n```","tags":["server"],"categories":["服务器"]},{"title":"Docker笔记","url":"/2018/03/08/backend/Linux/Docker笔记/","content":"#### 什么是Docker\nDocker 是一种“轻量级”容器技术，它几乎动摇了传统虚拟化技术的地位，现在国内外已经有越来越多的公司开始逐步使用 Docker 来替换现有的虚拟化平台了。作为一名 Java 程序员，我们是时候一起把 Docker 学起来了！\n\n1.传统虚拟化技术的体系架构：\n\n![logo](/images/server/docker/virtual mechine.png) \n\n可见，我们在宿主机的操作系统上，可安装了多个虚拟机，而在每个虚拟机中，通过虚拟化技术，实现了一个虚拟操作系统，随后，就可以在该虚拟操作系统上，安装自己所需的应用程序了。这一切看似非常简单，但其中的技术细节是相当高深莫测的，大神级人物都不一定说得清楚。\n<!--more-->\n\n凡是使用过虚拟机的同学，应该都知道，启动虚拟机就像启动一台计算机，初始化过程是相当慢的，我们需要等很久，才能看到登录界面。一旦虚拟机启动以后，就可以与宿主机建立网络连接，确保虚拟机与宿主机之间是互联互通的。不同的虚拟机之间却是相互隔离的，也就是说，彼此并不知道对方的存在，但每个虚拟机占用的都是宿主机的硬件与网络资源。\n\n2.Docker 技术的体系架构\n\n![logo](/images/server/docker/virtual mechine.png) \n\n可见，在宿主机的操作系统上，有一个 Docker 服务在运行（或者称为“Docker 引擎”），在此服务上，我们可开启多个 Docker 容器，而每个 Docker 容器中可运行自己所需的应用程序，Docker 容器之间也是相互隔离的，同样地，都是占用的宿主机的硬件与网络资源。、\n\nDocker 容器相对于虚拟机而言，除了在技术实现上完全不一样以外，启动速度较虚拟机而言有本质的飞跃，启动一个容器只在眨眼瞬间。不管是虚拟机还是 Docker 容器，它们都是为了隔离应用程序的运行环境，节省我们的硬件资源，为我们开发人员提供福利。\n\n\n3.Docker 的 Logo:\n\n![logo](/images/server/docker/docker logo.png) \n\n很明显，这是一只鲸鱼，它托着许多集装箱。我们可以把宿主机可当做这只鲸鱼，把相互隔离的容器可看成集装箱，每个集装箱中都包含自己的应用程序。这 Logo 简直的太形象了！\n\n4.Docker的应用场景\n```sql\n1. Web 应用的自动化打包和发布。\n\n2. 自动化测试和持续集成、发布。\n\n3. 在服务型环境中部署和调整数据库或其他的后台应用。\n```\n5.Docker 的优点\n```sql\n1、简化程序：\nDocker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，便可以实现虚拟化。Docker改变了虚拟化的方式，使开发者可以直接将自己的成果放入Docker中进行管理。方便快捷已经是 Docker的最大优势，过去需要用数天乃至数周的\t任务，在Docker容器的处理下，只需要数秒就能完成。\n\n2、避免选择恐惧症：\n如果你有选择恐惧症，还是资深患者。Docker 帮你\t打包你的纠结！比如 Docker 镜像；Docker 镜像中包含了运行环境和配置，所以 Docker 可以简化部署多种应用实例工作。比如 Web 应用、后台应用、数据库应用、大数据应用比如 Hadoop 集群、消息队列等等都可以打包成一个镜像部署。\n\n3、节省开支：\n一方面，云计算时代到来，使开发者不必为了追求效果而配置高额的硬件，Docker 改变了高性能必然高价格的思维定势。Docker 与云的结合，让云空间得到更充分的利用。不仅解决了硬件管理的问题，也改变了虚拟化的方式。\n```\n#### Docker 术语\n\n   |     术语 | 说明    | \n    | --------   | --------------------:   | \n    |  Docker 镜像(Images)       | Docker 镜像是用于创建 Docker 容器的模板。 |\n    |  Docker 容器(Container)        | 容器是独立运行的一个或一组应用。     |\n    |  Docker 客户端(Client)     | Docker 客户端通过命令行或者其他工具使用 Docker API (https://docs.docker.com/reference/api/docker_remote_api) 与 Docker 的守护进程通信。 |\n    |  Docker 主机(Host)      |一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。     |\n    |  Docker 仓库(Registry) |      Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(https://hub.docker.com) 提供了庞大的镜像集合供使用。|\n    |  Docker Machine       | Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。      |\n\n\n#### 使用Docker前先配置 Docker国内镜像或者使用registry-mirrors配置加速\n\n由于国内访问直接访问Docker hub网速比较慢，拉取镜像的时间就会比较长。一般我们会使用镜像加速或者直接从国内的一些平台镜像仓库上拉取。 \n\n```sql\n方法一： 网易镜像中心：https://c.163.com/hub#/m/home/ \n\n拉取镜像的命令是： docker pull 镜像名字 所以我们可以按照给出的镜像名字或者命令直接拉取。\n\neg: docker pull hub.c.163.com/library/tomcat:latest\n\n\n方法二： daocloud镜像市场：https://hub.daocloud.io/\n\n如果说还是想从dockerhub上拉取，那么使用加速器修改docker的registry-mirrors。这里使用的是DaoCloud的加速器。 \n\n首先在http://www.daocloud.io/进行注册登录。然后点击加速器，得到如下脚本\n\n    curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://24524c4f.m.daocloud.io Copy\n    该脚本可以将 --registry-mirror 加入到你的 Docker 配置文件 /etc/docker/daemon.json 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，其他版本可能有细微不同。更多详情请访问文档。\n \n也可以自己手动修改 /etc/docker/daemon.json\n\n{\n \"registry-mirrors\": [\"http://ef017c13.m.daocloud.io\"],\n \"live-restore\": true\n}\n\n最后重启docker service docker restart\n```\n#### 安装 Docker\n1.前提条件\n```sql\n使用 yum 安装（CentOS 7下）\n\nDocker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。\n通过 uname -r 命令查看你当前的内核版本\n\n```\n2.安装\n```sql\nyum -y install docker\n```\n3.启动服务\n```sql\nservice docker start\n```\n4.测试运行 hello-world\n```sql\ndocker run hello-world\n```\n\n#### Docker中使用CentOS7镜像\n1.启动容器服务\n```genericsql\nsystemctl start docker.service \n```\n2.下载CentOS7 镜像\n```genericsql\n[root@JD docker]# docker pull centos:7.3.1611\nTrying to pull repository docker.io/library/centos ... \n7.3.1611: Pulling from docker.io/library/centos\n\n版本: https://hub.docker.com/_/centos/ 可以在这个网站上选择自己想要的版本\n  latest, centos7, 7 (docker/Dockerfile)\n  centos6, 6 (docker/Dockerfile)\n  centos7.4.1708, 7.4.1708 (docker/Dockerfile)\n  centos7.3.1611, 7.3.1611 (docker/Dockerfile)\n  centos7.2.1511, 7.2.1511 (docker/Dockerfile)\n  centos7.1.1503, 7.1.1503 (docker/Dockerfile)\n  centos7.0.1406, 7.0.1406 (docker/Dockerfile)\n  centos6.9, 6.9 (docker/Dockerfile)\n  centos6.8, 6.8 (docker/Dockerfile)\n  centos6.7, 6.7 (docker/Dockerfile)\n  centos6.6, 6.6 (docker/Dockerfile)\n```\n3.下载成功之后查看本地所有的镜像，得到centos的 IMAGE ID: 66ee80d59a68\n```sql\n[root@JD ~]# docker images\nREPOSITORY              TAG                 IMAGE ID            CREATED             SIZE\ndocker.io/tomcat        latest              108db0e7c85e        2 weeks ago         557.4 MB\ndocker.io/hello-world   latest              f2a91732366c        3 months ago        1.848 kB\ndocker.io/centos        7.3.1611            66ee80d59a68        4 months ago        191.8 MB\n```\n\n4.启动docker中的CentOS7\n```sql\ndocker run -ti 66ee /bin/bash\n#6866 是 IMAGE ID 前四位数字-能区分出是哪个image即可\n\nroot@b4ad1d1c87da /]# \n#登录成功，接下来就可以为所欲为啦。\n\n命令笔记\n  容器是在镜像的基础上来运行的，一旦容器启动了，我们就可以登录到容器中，安装自己所需的软件或应用程序。既然镜像已经下载到本地，那么如何才能启动容器呢\n  \n  docker run -i -t -v /root/software/:/mnt/software/ 25c5298b1a36 /bin/bash\n\n  docker run <相关参数> <镜像 ID> <初始命令>\n\n    -i：表示以“交互模式”运行容器\n    -t：表示容器启动后会进入其命令行\n    -v：表示需要将本地哪个目录挂载到容器中，格式：-v <宿主机目录>:<容器目录>\n    假设我们的所有安装程序都放在了宿主机的/root/software/目录下，现在需要将其挂载到容器的/mnt/software/目录下。\n    \n  初始命令表示一旦容器启动，需要运行的命令，此时使用“/bin/bash”，表示什么也不做，只需进入命令行即可。\n\n\n\n```\n5.检查CentOS7系统\n```sql\nroot@b4ad1d1c87da  /]# uname -a\nLinux b4ad1d1c87da 3.10.0-327.el7.x86_64 #1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n[root@b4ad1d1c87da /]# cat /etc/redhat-release \nCentOS Linux release 7.2.1511 (Core)\n```\n6.退出\n```sql\n  ctrl+d 退出容器且关闭, \n  docker ps 查看无,\n  ctrl+p+q 退出容器但不关闭, \n  docker ps\n```\n \n7.再进入CentOS7\n```sql\n[root@wxtest1607 ~]# docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\nb4ad1d1c87da        6866                \"/bin/bash\"         12 seconds ago      Up 9 seconds                            mad_swanson\n                  drunk_hypatia\n得到 CONTAINER ID         \n[root@wxtest1607 ~]# docker exec -ti b4ad /bin/bash  \n[root@b4ad1d1c87da /]#\n\n```\n8.安装tomcat \n```sql\n 1. yum -y install tomcat\n \n 注：\n        在docker中通过systemctl 启动服务的时候总是报Failed to get D-Bus connection: Operation not permitted 这样的错误提示。\n     解决方法：\n        解决办法就是在docker run 的时候运行/usr/sbin/init 。比如：\n        docker run -ti 66ee /usr/sbin/init\n 2. 在Centos使用yum安装后，Tomcat相关的目录都已采用符号链接到/usr/share/tomcat6目录，包含webapps等，这很方便我们配置管理\n```\n\n转载：http://www.runoob.com/docker/docker-tutorial.html\n\n转载：http://developer.51cto.com/art/201702/529956.htm\n\n转载：http://www.jb51.net/article/112921.htm\n\n转载：https://www.jianshu.com/p/0aa535e681f5","tags":["server"],"categories":["服务器"]},{"title":"Mysql 字符集和排序规则说明","url":"/2018/03/07/backend/数据库/Mysql 字符集和排序规则说明/","content":"### 字符集\n\n#### utf8mb4 和 utf8 比较\nUTF-8是使用1~4个字节，一种变长的编码格式。（字符编码 ）\n\nmb4即 most bytes 4，使用4个字节来表示完整的UTF-8。而MySQL中的utf8是utfmb3，只有三个字节，节省空间但不能表达全部的UTF-8，只能支持“基本多文种平面”（Basic Multilingual Plane，BMP）。\n\n推荐使用utf8mb4。\n\n### 排序规则\nci 是 case insensitive, 即 “大小写不敏感”, a 和 A 会在字符判断中会被当做一样的。 \n\nbin 是二进制, a 和 A 会别区别对待。 \n\n例如你运行如下sql, 那么在utf8_bin中你就找不到 txt = ‘A’ 的那一行, 而 utf8_general_ci 则可以。\n```sql\nSELECT * FROM table WHERE txt = 'a';\n```\n#### 常用排序规则\n1. utf8_general_ci：不区分大小写，这个你在注册用户名和邮箱的时候就要使用。 \n2. utf8_general_cs：区分大小写，如果用户名和邮箱用这个 就会照成不良后果。 \n3. utf8_bin：字符串每个字符串用二进制数据编译存储。 区分大小写，而且可以存二进制的内容。\n\n#### 总结\n1. utf8_unicode_ci和utf8_general_ci对中、英文来说没有实质的差别。 \n2. utf8_general_ci：校对速度快，但准确度稍差。 \n3. utf8_unicode_ci：准确度高，但校对速度稍慢。 \n4. 如果你的应用有德语、法语或者俄语，请一定使用utf8_unicode_ci。一般用utf8_general_ci就够了，到现在也没发现问题。\n\n\n参考:\nhttps://www.cnblogs.com/zwakeup/p/8267204.html","tags":["mysql"],"categories":["server"]},{"title":"Mysql 用户及权限管理","url":"/2018/03/07/backend/数据库/Mysql 用户及权限管理d/","content":"### 权限控制\n授权语法：\n```sql\n    GRANT privileges (columns) ON what TO user IDENTIFIED BY \"password\" WITH GRANT OPTION\n    \n    权限列表:\n    ALTER: 修改表和索引。\n    CREATE: 创建数据库和表。\n    DELETE: 删除表中已有的记录。\n    DROP: 抛弃(删除)数据库和表。\n    INDEX: 创建或抛弃索引。\n    INSERT: 向表中插入新行。\n    REFERENCE: 未用。\n    SELECT: 检索表中的记录。\n    UPDATE: 修改现存表记录。\n    FILE: 读或写服务器上的文件。\n    PROCESS: 查看服务器中执行的线程信息或杀死线程。\n    RELOAD: 重载授权表或清空日志、主机缓存或表缓存。\n    SHUTDOWN: 关闭服务器。\n    ALL: 所有权限，ALL PRIVILEGES同义词。\n    USAGE: 特殊的 \"无权限\" 权限。\n    用 户账户包括 \"username\" 和 \"host\" 两部分，后者表示该用户被允许从何地接入。tom@'%' 表示任何地址，默认可以省略。还可以是 \"tom@192.168.1.%\"、\"tom@%.abc.com\" 等。数据库格式为 db@table，可以是 \"test.*\" 或 \"*.*\"，前者表示 test 数据库的所有表，后者表示所有数据库的所有表。\n    子句 \"WITH GRANT OPTION\" 表示该用户可以为其他用户分配权限。 \n```\n<!--more-->\n实例：\n\n```sql\n  use mysql\n\n  1. 新建用户, 并赋予所有数据库权限\n    GRANT ALL PRIVILEGES ON *.* TO 'username'@'host' IDENTIFIED BY 'password' WITH GRANT OPTION;\n  \n    说明:\n      1. username - 你将创建的用户名, host - 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%. password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器.\n      2. 指定helloworld数据库: GRANT ALL PRIVILEGES ON helloword.* TO 'username'@'host' IDENTIFIED BY 'password' WITH GRANT OPTION;\n  \n  2. 指定该用户只能执行 select 和 update 命令\n    GRANT SELECT, UPDATE ON *.* TO 'username'@'%' IDENTIFIED BY 'password';\n  \n  3. 另外每当调整权限后，通常需要执行以下语句刷新权限：\n    FLUSH PRIVILEGES;\n\n  4. grant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利。\n    grant select on testdb.* to common_user@’%’\n    grant insert on testdb.* to common_user@’%’\n    grant update on testdb.* to common_user@’%’\n    grant delete on testdb.* to common_user@’%’\n    或者，用一条 MySQL 命令来替代：\n    grant select, insert, update, delete on testdb.* to common_user@’%’\n```\n\n### 用户\n```sql\n  1. 删除刚才创建的用户：\n    DROP USER username@localhost;\n  \n  2. 查看用户创建是否成功\n    select user,host from user ;\n    \n    +-----------+-----------+\n    | user      | host      |\n    +-----------+-----------+\n    | root      | %         |\n    | select    | %         |\n    | server    | %         |\n    | shuiyang  | %         |\n    | user      | %         |\n    | mysql.sys | localhost |\n    +-----------+-----------+\n    \n  3. 查看select用户的授权\n   show grants for select;\n   \n   MySQL [mysql]>  show grants for `select`;\n   +---------------------------------------------+\n   | Grants for select@%                         |\n   +---------------------------------------------+\n   | GRANT SELECT, UPDATE ON *.* TO 'select'@'%' |\n   +---------------------------------------------+\n   1 row in set (0.00 sec)\n   \n  4. 设置与更改用户密码\n  \n  SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword')\n  \n  如果是当前登陆用户用\n  \n  SET PASSWORD = PASSWORD(\"newpassword\");\n  \n```\n  \n  ","tags":["mysql"],"categories":["server"]},{"title":"Centos7安装Mysql5.7.md","url":"/2018/03/07/backend/Linux/Centos7安装Mysql5.7/","content":"#### 一：配置YUM源\n>官网地址 在MySQL官网中下载YUM源rpm安装包：http://dev.mysql.com/downloads/repo/yum/\n\n1.下载mysql源安装包\n```sql\nwget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n```\n 命令笔记:\n```sql\nwget:\n用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用\n\n-a<日志文件>：在指定的日志文件中记录资料的执行过程；\n-A<后缀名>：指定要下载文件的后缀名，多个后缀名之间使用逗号进行分隔；\n-b：进行后台的方式运行wget；\n-B<连接地址>：设置参考的连接地址的基地地址；\n-c：继续执行上次终端的任务；\n-C<标志>：设置服务器数据块功能标志on为激活，off为关闭，默认值为on；\n-d：调试模式运行指令；\n-D<域名列表>：设置顺着的域名列表，域名之间用“，”分隔；\n-e<指令>：作为文件“.wgetrc”中的一部分执行指定的指令；\n-h：显示指令帮助信息；\n-i<文件>：从指定文件获取要下载的URL地址；\n-l<目录列表>：设置顺着的目录列表，多个目录用“，”分隔；\n-L：仅顺着关联的连接；\n-r：递归下载方式；\n-nc：文件存在时，下载文件不覆盖原有文件；\n-nv：下载时只显示更新和出错信息，不显示指令的详细执行过程；\n-q：不显示指令执行过程；\n-nh：不查询主机名称；\n-v：显示详细执行过程；\n-V：显示版本信息；\n--passive-ftp：使用被动模式PASV连接FTP服务器；\n--follow-ftp：从HTML文件中下载FTP连接文件\n\n下载并以不同的文件名保存:\nwget -O wordpress.zip http://www.linuxde.net/download.aspx?id=1080\n\n```\n<!--more-->\n\n2.安装mysql源\n```sql\nyum localinstall mysql57-community-release-el7-8.noarch.rpm\n```\n\n 命令笔记:\n```sql\nyum命令\n\n是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更细与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。\n\n选项:\n-h：显示帮助信息；\n-y：对所有的提问都回答“yes”；\n-c：指定配置文件；\n-q：安静模式；\n-v：详细模式；\n-d：设置调试等级（0-10）；\n-e：设置错误等级（0-10）；\n-R：设置yum处理一个命令的最大等待时间；\n-C：完全从缓存中运行，而不去下载或者更新任何头文件。\n\n参数：\ninstall：安装rpm软件包；\nupdate：更新rpm软件包；\ncheck-update：检查是否有可用的更新rpm软件包；\nremove：删除指定的rpm软件包；\nlist：显示软件包的信息；\nsearch：检查软件包的信息；\ninfo：显示指定的rpm软件包的描述信息和概要信息；\nclean：清理yum过期的缓存；\nshell：进入yum的shell提示符；\nresolvedep：显示rpm软件包的依赖关系；\nlocalinstall：安装本地的rpm软件包；\nlocalupdate：显示本地rpm软件包进行更新；\ndeplist：显示rpm软件包的所有依赖关系。\n\n\n实例\n部分常用的命令包括：\n\n自动搜索最快镜像插件：yum install yum-fastestmirror\n安装yum图形窗口插件：yum install yumex\n查看可能批量安装的列表：yum grouplist\n```\n3.检查mysql源是否安装成功\n```sql\nyum repolist enabled | grep \"mysql.*-community.*\"\n```\n![logo](/images/server/linux/mysql_install_success.png) \n\n看到上图所示表示mysql源安装成功。\n\n可以修改vim /etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。比如要安装5.6版本，将5.7源的enabled=1改成enabled=0。然后再将5.6源的enabled=0改成enabled=1即可 \n\n#### 二 安装MySQL\n```sql\n yum install mysql-community-server\n```\n命令笔记:\n```sql\n安装\n\nyum install              #全部安装\nyum install package1     #安装指定的安装包package1\nyum groupinsall group1   #安装程序组group1\n\n更新和升级\n\nyum update               #全部更新\nyum update package1      #更新指定程序包package1\nyum check-update         #检查可更新的程序\nyum upgrade package1     #升级指定程序包package1\nyum groupupdate group1   #升级程序组group1\n\n\n查找和显示\n\nyum info package1      #显示安装包信息package1\nyum list               #显示所有已经安装和可以安装的程序包\nyum list package1      #显示指定程序包安装情况package1\nyum groupinfo group1   #显示程序组group1信息yum search string 根据关键字string查找安装包\n\n删除程序\n\nyum remove &#124; erase package1   #删除程序包package1\nyum groupremove group1             #删除程序组group1\nyum deplist package1               #查看程序package1依赖情况\n```\n\n#### 三：启动MySQL服务\n1.启动\n```sql\n systemctl start mysqld\n```\n命令笔记：\n```sql\nsystemctl\n\n是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起。\n\n任务\t                旧指令\t                        新指令\n使某服务自动启动\t    chkconfig --level 3 httpd on\tsystemctl enable httpd.service\n使某服务不自动启动\tchkconfig --level 3 httpd off\tsystemctl disable httpd.service\n检查服务状态\t        service httpd status\t        systemctl status httpd.service （服务详细信息） systemctl is-active httpd.service （仅显示是否 Active)\n显示所有已启动的服务\tchkconfig --list\t            systemctl list-units --type=service\n启动某服务\t        service httpd start\t            systemctl start httpd.service\n停止某服务\t        service httpd stop\t            systemctl stop httpd.service\n重启某服务\t        service httpd restart\t        systemctl restart httpd.service\n\n```\n2.查看状态\n```sql\n查看MySQL的启动状态\nsystemctl status mysqld\n\n输出：\n● mysqld.service - MySQL Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Wed 2018-03-07 21:14:55 CST; 18min ago\n     Docs: man:mysqld(8)\n           http://dev.mysql.com/doc/refman/en/using-systemd.html\n  Process: 17338 ExecStart=/usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid $MYSQLD_OPTS (code=exited, status=0/SUCCESS)\n  Process: 17320 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)\n Main PID: 17343 (mysqld)\n   CGroup: /system.slice/mysqld.service\n           └─17343 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid\n\nMar 07 21:14:54 VM_0_8_centos systemd[1]: Starting MySQL Server...\nMar 07 21:14:55 VM_0_8_centos systemd[1]: Started MySQL Server.\n\n```\n3.开机启动\n```sql\nsystemctl enable mysqld\nsystemctl daemon-reload\n```\n4.修改root本地登录密码\n```sql\nmysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：\n1. 修改密码策略\n      mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误\n\n   步骤1：不需要密码策略，添加/etc/my.cnf件中添加如下配置禁用即可：\n   validate_password = off\n   步骤2：重新启动mysql服务使配置生效：\n   systemctl restart mysqld   \n\n2. 查看初始密码： \n      grep 'temporary password' /var/log/mysqld.log\n   输出： \n      2018-03-07T13:01:08.963552Z 1 [Note] A temporary password is generated for root@localhost: zktt1wKFD.HN\n\n   得到临时密码: zktt1wKFD.HN\n\n3. 登录mysql: \n      mysql -uroot -p\n   输入临时密码进入mysql命令行\n\n4. 修改密码\n    set password for 'root'@'localhost'=password('MyNewPass4!');\n    \n5. 重启服务\n   systemctl restart mysqld   \n```\n#### 四：开启远程连接\n```sql\n登入mysql\n  mysql -uroot -p\n  \n使用mysql数据库\n  use mysql;\n  \n开启远程连接（root 用户名，% 所有人都可以访问 ，password 密码）\n  GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;\n  \n  也可以添加一个新用户: \n  GRANT ALL PRIVILEGES ON *.* TO 'shuiyang'@'%' IDENTIFIED BY 'password!' WITH GRANT OPTION;\n  \n  FLUSH PRIVILEGES; \n  \n重起mysql服务\n  service mysqld restart\n如果执行完以上步骤，还是不能远程连接，那么我们需要查看服务器的防火墙是否开启\n  service iptables status\n如果防火墙开启，请关闭\n  service iptables stop\n```\n#### 五：配置默认编码为utf8\n```sql\n修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：\n\n[mysqld]\ncharacter_set_server=utf8\ninit_connect='SET NAMES utf8'\n\n重新启动mysql服务，查看数据库默认编码如下所示：\n\nmysql> show variables like '%character%';\n+--------------------------+----------------------------+\n| Variable_name            | Value                      |\n+--------------------------+----------------------------+\n| character_set_client     | utf8                       |\n| character_set_connection | utf8                       |\n| character_set_database   | utf8                       |\n| character_set_filesystem | binary                     |\n| character_set_results    | utf8                       |\n| character_set_server     | utf8                       |\n| character_set_system     | utf8                       |\n| character_sets_dir       | /usr/share/mysql/charsets/ |\n+--------------------------+----------------------------+\n8 rows in set (0.00 sec)\n```\n\n备注：\n```sql\n默认配置文件路径： \n配置文件：/etc/my.cnf \n日志文件：/var/log//var/log/mysqld.log \n服务启动脚本：/usr/lib/systemd/system/mysqld.service \nsocket文件：/var/run/mysqld/mysqld.pid\n```\n\n转载：https://www.linuxidc.com/Linux/2016-09/135288.htm\n转载:http://blog.csdn.net/sun614345456/article/details/53672150","tags":["server"],"categories":["服务器"]},{"title":"百度富文本框编辑器Ueditor的使用","url":"/2018/03/05/backend/相关技术/百度富文本框编辑器Ueditor的使用/","content":"### 百度富文本框编辑器：\n官网： http://ueditor.baidu.com/website/ \n\n官网演示地址：http://ueditor.baidu.com/website/onlinedemo.html\n\nUEditor是由百度web前端研发部开发所见即所得富文本web编辑器，具有轻量，可定制，注重用户体验等特点，开源基于MIT协议，允许自由使用和修改代码...\n<!--more-->\n#### 开始使用：\n参考:\nhttp://fex.baidu.com/ueditor/\n##### 1. 入门部署和体验\n\n##### 1.1下载编辑器\n\n到官网下载 UEditor 最新版：[官网地址]\n\n##### 1.2创建demo文件\n\n解压下载的包，在解压后的目录创建 demo.html 文件，填入下面的html代码\n\n```html\n<!DOCTYPE HTML>\n<html lang=\"en-US\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>ueditor demo</title>\n</head>\n\n<body>\n    <!-- 加载编辑器的容器 -->\n    <script id=\"container\" name=\"content\" type=\"text/plain\">\n        这里写你的初始化内容\n    </script>\n    <!-- 配置文件 -->\n    <script type=\"text/javascript\" src=\"ueditor.config.js\"></script>\n    <!-- 编辑器源码文件 -->\n    <script type=\"text/javascript\" src=\"ueditor.all.js\"></script>\n    <!-- 实例化编辑器 -->\n    <script type=\"text/javascript\">\n        var ue = UE.getEditor('container');\n    </script>\n</body>\n\n</html>\n```\n##### 1.3 在浏览器打开demo.html\n\n如果看到了编辑器，恭喜你，初次部署成功！\n\n##### 2. 整合jsp后端配置\n\n##### 2.1 下载 jsp 版本完整包\n\n下载地址: http://ueditor.baidu.com/website/download.html \n\n选择 [1.4.3.3 Jsp 版本]\n\n##### 2.2 下载之后会得到如下文件\n\n按照官网上的做法是把文件copy到webapp跟目录下 , 但我们是集成ueditor, 肯定不是放在根目录下, 所以我们把文件都复制到 webapp/static/plugins/ueditor 下, 方便管理\n\n![logo](/images/server/相关技术/ueditor目录结构图.png) \n\n##### 2.3 前台代码集成\n2.3.1 在需要集成ueditor的页面添加如下代码, 如果能看到编辑器则说明配置成功\n```html\n<!DOCTYPE HTML>\n<html lang=\"en-US\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>ueditor demo</title>\n    <link rel=\"stylesheet\" href=\"${ctx}static/plugins/ueditor/lang/zh-cn/zh-cn.js\" media=\"all\" />\n</head>\n\n<body>\n    <!-- 加载编辑器的容器 -->\n    <script id=\"container\" name=\"content\" type=\"text/plain\">\n        这里写你的初始化内容\n    </script>\n    <!-- 配置文件 -->\n    <script type=\"text/javascript\" src=\"${ctx}static/plugins/ueditor/ueditor.config.js\"></script>\n    <!-- 编辑器源码文件 -->\n    <script type=\"text/javascript\" src=\"${ctx}static/plugins/ueditor/ueditor.all.js\"></script>\n    <!-- 实例化编辑器 -->\n    <script type=\"text/javascript\">\n        var ueditor = UE.getEditor('container');\n    </script>\n</body>\n\n</html>\n```\n获取编辑器内容\n```html\nvar ueditor = UE.getEditor('container');\n\nvar content = ueditor.getContent(content);\n\n```\n\n设置编辑器内容\n```html\n // 等UEditor创建完成就使用UEditor的setContent函数\n var ueditor = UE.getEditor('container');\n ueditor.ready(function() {\n      ueditor.setContent(content);\n });\n```\n\n有了这些你可以处理一些普通文字, 但如果是要文件上传,图片上传,视频上传这些功能你就要进行一些后台代码的配置\n\n##### 2.4 后台代码集成\n\n后台环境： Spring + Spring Mvc + Mybatis + Maven\n\n##### 2.4.1 配置 ueditor.config.js\n\n原配置:\n```javascript\n    var URL = window.UEDITOR_HOME_URL || getUEBasePath();\n\n    /**\n     * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。\n     */\n    window.UEDITOR_CONFIG = {\n\n        //为编辑器实例添加一个路径，这个不能被注释\n        UEDITOR_HOME_URL: URL\n\n        // 服务器统一请求接口路径\n        , serverUrl: URL + \"jsp/controller.jsp\"\n\n        //工具栏上的所有的功能按钮和下拉框，可以在new编辑器的实例时选择自己需要的重新定义\n```\n修改后的配置：\n```javascript\n    window.UEDITOR_HOME_URL = \"/static/plugins/ueditor/\";\n\n    var URL = window.UEDITOR_HOME_URL || getUEBasePath();\n\n    /**\n     * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。\n     */\n    window.UEDITOR_CONFIG = {\n\n        //为编辑器实例添加一个路径，这个不能被注释\n        UEDITOR_HOME_URL: URL\n\n        // 服务器统一请求接口路径\n        , serverUrl: \"/ueditor/ueditorAction\"\n\n```\n\n1. 主要是 `window.UEDITOR_HOME_URL` 这个参数赋值成自己的ueditor的文件路径\n2. 修改 服务器统一请求接口路径 `/ueditor/ueditorAction` , 这样Ueditor后台服务接口就会请求到这个接口中来\n\n##### 2.4.2 新增后台服务接口\n\n第一步： 导入jar包, 我是只添加了最后俩个包，其他的包可以通过maven的形式导入，copy 这俩个包放到WEBINF/lib目录下, 然后配置Maven依赖\n![logo](/images/server/相关技术/jar.png) \n\n注：使用maven构建项目的时候需要进行如下配置, 这样maven构建的时候才不会报找不到lib目录下jar包的错误\n```sql\n    <dependency>\n      <groupId>json</groupId>\n      <artifactId>json</artifactId>\n      <version>1.0</version>\n      <scope>system</scope>\n      <systemPath>${project.basedir}/src/main/webapp/WEB-INF/lib/json.jar</systemPath>\n    </dependency>\n```\n\n第二步：新建 后台统一服务接口\n\n```java\n/**\n * Ueditor 后台统一服务接口\n * @author songshuiyang\n * @date 2018/3/4 18:11\n */\n@Controller\n@RequestMapping(\"/ueditor\")\npublic class UEditorController extends BaseController {\n    \n    private HttpServletRequest request = null;\n    \n    private String actionType = null;\n\n    private ConfigManager configManager = null;\n\n\n    @RequestMapping(value = \"ueditorAction\", method = {RequestMethod.GET,RequestMethod.POST})\n    @ResponseBody\n    public JSONObject exec (@RequestParam String action, HttpServletRequest request) {\n        String result;\n        this.actionType = action;\n        this.request = request;\n        String rootPath =  request.getSession().getServletContext().getRealPath(\"/\");\n        String contextPath = request.getContextPath();\n        this.configManager = ConfigManager.getInstance( rootPath, contextPath,\"/static/plugins/ueditor/jsp/controller.jsp\");\n\n        String callbackName = this.request.getParameter(\"callback\");\n\n        if ( callbackName != null ) {\n            result =  !validCallbackName( callbackName ) ? new BaseState( false, AppInfo.ILLEGAL ).toJSONString() : callbackName+\"(\"+this.invoke()+\");\";\n        } else {\n            result = this.invoke();\n        }\n        return JSONObject.fromObject(result);\n\n    }\n\n    public String invoke() {\n\n        if ( actionType == null || !ActionMap.mapping.containsKey( actionType ) ) {\n            return new BaseState( false, AppInfo.INVALID_ACTION ).toJSONString();\n        }\n\n        if ( this.configManager == null || !this.configManager.valid() ) {\n            return new BaseState( false, AppInfo.CONFIG_ERROR ).toJSONString();\n        }\n\n        State state = null;\n\n        int actionCode = ActionMap.getType( this.actionType );\n\n        Map<String, Object> conf;\n\n        switch ( actionCode ) {\n\n            case ActionMap.CONFIG:\n                return this.configManager.getAllConfig().toString();\n\n            case ActionMap.UPLOAD_IMAGE:\n            case ActionMap.UPLOAD_SCRAWL:\n            case ActionMap.UPLOAD_VIDEO:\n            case ActionMap.UPLOAD_FILE:\n                conf = this.configManager.getConfig( actionCode );\n                state = new Uploader( request, conf ).doExec();\n                break;\n\n            case ActionMap.CATCH_IMAGE:\n                conf = configManager.getConfig( actionCode );\n                String[] list = this.request.getParameterValues( (String)conf.get( \"fieldName\" ) );\n                state = new ImageHunter( conf ).capture( list );\n                break;\n\n            case ActionMap.LIST_IMAGE:\n            case ActionMap.LIST_FILE:\n                conf = configManager.getConfig( actionCode );\n                int start = this.getStartIndex();\n                state = new FileManager( conf ).listFile( start );\n                break;\n\n        }\n\n        assert state != null;\n        return state.toJSONString();\n\n    }\n\n    private int getStartIndex () {\n\n        String start = this.request.getParameter( \"start\" );\n\n        try {\n            return Integer.parseInt( start );\n        } catch ( Exception e ) {\n            return 0;\n        }\n\n    }\n\n    /**\n     * callback参数验证\n     * @param name 名字\n     * @return boolean\n     */\n    private boolean validCallbackName ( String name ) {\n        return name.matches( \"^[a-zA-Z_]+[\\\\w0-9_]*$\" );\n    }\n}\n```\n\n一： 初始化ueditor的时候, ueditor会访问该接口, 此时`action` 参数是 `config` , 该接口会返回其`/static/plugins/ueditor/jsp/config.json` 配置的json参数，这些参数配置了上传功能的一些参数, 通过这些配置你可以DIY上传功能, ueditor获取到这些参数之后就可以使用上传功能了,否则你上传文件会提示： 后端配置项没有正常加载，上传插件不能正常使用！\n\n配置主要包括： 上传图片配置项 涂鸦图片上传配置项 截图工具上传 抓取远程图片配置 上传视频配置 上传文件配置\n\n二： 如要上传图片, ueditor会访问该接口, 此时`action` 参数是 `uploadimage` ，则会执行上传图片操作, 上传成功后会返回\n```sql\n{\n    \"state\": \"SUCCESS\",\n    \"url\": \"upload/demo.jpg\",\n    \"title\": \"demo.jpg\",\n    \"original\": \"demo.jpg\"\n}\n```\n三：由于系统文件上传使用的是阿里云的OSS所以需要将文件上传转到OSS处理上\n\n前台配置：\n```html\n<script type=\"text/javascript\">\n    // 当action是如下时，访问自己定义的服务接口\n    UE.Editor.prototype._bkGetActionUrl=UE.Editor.prototype.getActionUrl;\n    UE.Editor.prototype.getActionUrl=function(action){\n        // 上传图片, 文件, 视频\n        if (action == 'uploadimage' || action == 'uploadfile'  || action == 'uploadvideo') {\n            return '/file/uploadLocal';\n        }  else if( action== 'uploadscrawl'){ // 上传涂鸦，涂鸦请求是Base64字符需要请求另外的接口\n            return '/file/uploadScrawl';\n        }   else if(action == 'listimage'){\n            return this._bkGetActionUrl.call(this, action);\n        } else{\n            return this._bkGetActionUrl.call(this, action);\n        }\n    }\n    var ueditor = UE.getEditor('ueditorContainer');\n</script>\n```\n\n后台接口：\n```java\npackage com.ecut.admin.controller;\n\nimport com.aliyun.oss.ClientException;\nimport com.aliyun.oss.OSSException;\nimport com.ecut.admin.entity.OssFile;\nimport com.ecut.admin.entity.UeditorState;\nimport com.ecut.admin.service.impl.FileServiceImpl;\nimport com.ecut.core.base.BaseController;\nimport com.ecut.core.utils.Base64Utils;\nimport com.ecut.core.utils.MessageUtils;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.multipart.MultipartHttpServletRequest;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.ecut.core.utils.MessageUtils.success;\n\n/**\n * 阿里云OSS文件上传控制器\n * @author songshuiyang\n * @date 2018/2/11 20:22\n */\n@Controller\n@RequestMapping(\"/file\")\npublic class FileController extends BaseController {\n\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n\n    @Autowired\n    private FileServiceImpl fileServiceImpl;\n\n    /**\n     * 文件上传\n     * produces=\"application/json;charset=UTF-8 解决服务器返回406问题\n     * @param file\n     * @return\n     * @throws OSSException\n     * @throws ClientException\n     * @throws IOException\n     */\n    @RequestMapping(value = \"/uploadLocal\", method = RequestMethod.POST, produces=\"application/json;charset=UTF-8\")\n    @ResponseBody\n    public UeditorState uploadLocalFile(@RequestParam(value = \"upfile\",required = false) MultipartFile file) throws OSSException, ClientException, IOException {\n        Map<String, Object> resultMap = new HashMap<>();\n        OssFile file1 = fileServiceImpl.uploadFileByMultipartFile(file);\n        UeditorState ueditorState = new UeditorState(\"SUCCESS\",file1.getFileSrc(),file1.getFileName(),file1.getFileName());\n        return ueditorState;\n    }\n    /**\n     * 上传涂鸦照片\n     * @param upfile\n     * @return\n     * @throws Exception\n     */\n    @RequestMapping(value = \"/uploadScrawl\", method = RequestMethod.POST, produces=\"application/json;charset=UTF-8\")\n    @ResponseBody\n    public UeditorState uploadscrawl(String upfile) throws Exception {\n        byte [] bytes= Base64Utils.decode(upfile);\n        InputStream inputStream = new ByteArrayInputStream(bytes);\n        String fileType = \"image/png\";\n        Long fileSize = new Long((long)bytes.length);\n        String fileName = \"scrawl\" + System.currentTimeMillis() + \".png\";\n        String extensionName = \"png\";\n        OssFile file1 = fileServiceImpl.uploadFileByInputStream(inputStream, fileType,fileSize,fileName,extensionName);\n        UeditorState ueditorState = new UeditorState(\"SUCCESS\",file1.getFileSrc(),file1.getFileName(),file1.getFileName());\n        return ueditorState;\n    }\n}\n```\n##### 2.4.3 问题集合\n\n###### 解决百度ueditor富文本编辑器不能插入视频的问题/src掉链/src清空，不能显示视频\n转载：http://blog.csdn.net/qq_34787830/article/details/75092347\n\n> 直接下载到的百度富文本编辑器当插入视频的时候会自动清掉src，不显示视频造成这样的原因是:百度富文本编辑器的过滤器xssFilter导致插入视频异常，编辑器在切换源码的过程中过滤掉img的_url属性（用来存储视频url）\n\n解决办法:\n\n1.在配置文件ueditor.config.js中，定位 //xss过滤白名单，即,whitList:{ }，对 img: 增加 “_url” 属性： \n2. 在下面的 video 标签后面新增3给标签，使Ueditor分别能支持embed标签和iframe标签：\n```java\n source: ['src', 'type'],\n\n embed: ['type', 'class', 'pluginspage', 'src', 'width', 'height', 'align', 'style', 'wmode', 'play',  \n\n      +  'autoplay','loop', 'menu', 'allowscriptaccess', 'allowfullscreen', 'controls', 'preload'],\n\n iframe: ['src', 'class', 'height', 'width', 'max-width', 'max-height', 'align', 'frameborder', 'allowfullscreen']\n```","tags":["Java"],"categories":["server"]},{"title":"基于wordspress搭建个人博客系统","url":"/2018/03/04/backend/相关技术/基于wordspress搭建个人博客系统/","content":"### 什么是Wordspress：\n官网： https://cn.wordpress.org/ 提供了中英版\n\nWordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。也可以把 WordPress当作一个内容管理系统（CMS）来使用。\n\nWordPress是一款个人博客系统，并逐步演化成一款内容管理系统软件，它是使用PHP语言和MySQL数据库开发的。用户可以在支持 PHP 和 MySQL数据库的服务器上使用自己的博客。\n\nWordPress有许多第三方开发的免费模板，安装方式简单易用。不过要做一个自己的模板，则需要你有一定的专业知识。比如你至少要懂的标准通用标记语言下的一个应用HTML代码、CSS、PHP等相关知识。\n\nWordPress官方支持中文版，同时有爱好者开发的第三方中文语言包，如wopus中文语言包。WordPress拥有成千上万个各式插件和不计其数的主题模板样式。\n<!--more-->\n### 搭建教程：\n参考下面的帖子写的十分详细\n\nhttps://www.jianshu.com/p/56750622cac9\n\n\n### LNMP一键安装包\nLNMP一键安装包是一个用Linux Shell编写的可以为CentOS/RHEL/Fedora/Aliyun/Amazon、Debian/Ubuntu/Raspbian/Deepin/Mint Linux VPS或独立主机安装LNMP(Nginx/MySQL/PHP)、LNMPA(Nginx/MySQL/PHP/Apache)、LAMP(Apache/MySQL/PHP)生产环境的Shell程序。\nhttps://lnmp.org/","tags":["Java"],"categories":["server"]},{"title":"Mysql 数据类型","url":"/2018/03/03/backend/数据库/Mysql 数据类型/","content":"MySQL中定义数据字段的类型对你数据库的优化是非常重要的。\n\nMySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。\n\n<!--more-->\n### 数值类型\nMySQL支持所有标准SQL数值数据类型。\n\n这些类型包括严格数值数据类型`(INTEGER、SMALLINT、DECIMAL和NUMERIC)`，以及近似数值数据类型`(FLOAT、REAL和DOUBLE PRECISION)`。\n\n关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。\n\nBIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。\n\n作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。\n\n![logo](/images/server/数据库/mysqlint.png) \n\n备注: \n1.BIT[M]\n\n位字段类型，M表示每个值的位数，范围从1到64，如果M被忽略，默认为1\n\n2.TINYINT[(M)] [UNSIGNED] [ZEROFILL]  M默认为4,占1个字节\n\n很小的整数。带符号的范围是-128到127。无符号的范围是0到255。\n\n3. BOOL，BOOLEAN\n\n是TINYINT(1)的同义词。zero值被视为假。非zero值视为真。\n\n4.SMALLINT[(M)] [UNSIGNED] [ZEROFILL] M默认为6,占2个字节\n\n小的整数。带符号的范围是-32768到32767。无符号的范围是0到65535。\n\n5.MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL] M默认为9,占3个字节\n\n中等大小的整数。带符号的范围是-8388608到8388607。无符号的范围是0到16777215。\n\n6. INT[(M)] [UNSIGNED] [ZEROFILL]   M默认为11,占4个字节\n\n普通大小的整数。带符号的范围是-2147483648到2147483647。无符号的范围是0到4294967295。\n\n7.BIGINT[(M)] [UNSIGNED] [ZEROFILL] M默认为20,占8个字节\n\n大整数。带符号的范围是-9223372036854775808到9223372036854775807。无符号的范围是0到18446744073709551615。\n\n注意：这里的M代表的并不是存储在数据库中的具体的长度，以前总是会误以为int(3)只能存储3个长度的数字，int(11)就会存储11个长度的数字，这是大错特错的。\n\ntinyint(1) 和 tinyint(4) 中的1和4并不表示存储长度，只有字段指定zerofill是有用，\n如tinyint(4)，如果实际值是2，如果列指定了zerofill，查询结果就是0002，左边用0来填充。\n\n### 日期和时间类型\n\n表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。\n\n每个时间类型有一个有效值范围和一个\"零\"值，当指定不合法的MySQL不能表示的值时使用\"零\"值。\n\nTIMESTAMP类型有专有的自动更新特性\n\n![logo](/images/server/数据库/mysqldate.png) \n\n### 字符串类型\n\n字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型\n\n![logo](/images/server/数据库/mysqlchar.png) \n\n","tags":["db"],"categories":["server"]},{"title":"animate.css","url":"/2018/03/03/frontend/animate/","content":"### 一 前言:\n#### 背景： \n在看其他人的项目的时候发现其动画效果做的不错，通过看人家的代码发现用了这个`animate.css`这个css组件，使用起来也是特别的方便，所以就把他copy到项目中来了，顿时档次就上升了\n\n#### 简介:\n`animate.css` 是一个来自国外的 CSS3 动画库，它预设了抖动（shake）、闪烁（flash）、弹跳（bounce）、翻转（flip）、旋转（rotateIn/rotateOut）、淡入淡出（fadeIn/fadeOut）等多达 60 多种动画效果，几乎包含了所有常见的动画效果。而且使用起来也是特别方便\n\n官网传送门: https://daneden.github.io/animate.css/\n\n在官网上有示例动画，主页也十分简洁，同时也提供了代码下载, 也可以看看这篇博客写的例子 `https://www.cnblogs.com/xiaohuochai/p/7372665.html`\n\n### 二 如何使用：\n\n#### 步骤：\n1. 在官网上下载 `animate.css` , 把他导入到项目中来, 也可以使用cdn `https://unpkg.com/animate.css@3.5.2/animate.min.css`\n2. 代码示例\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Document</title>\n        <link rel=\"stylesheet\" href=\"https://unpkg.com/animate.css@3.5.2/animate.min.css\">\n        <style>\n            .box{height: 100px;width: 100px;background-color: lightblue}\n        </style>\n    </head>\n    <body>\n        <div class=\"box animated flash\"></div>\n    </body>\n</html>\n```\n3. 只要在元素中class 添加 `animated` 和相应的动画class名就可以实现动画效果, 当然也可以通过js动态设置class\n\n\n\n\n\n","tags":["css"],"categories":["client"]},{"title":"Spring mvc 前后台传值中文乱码问题","url":"/2018/02/28/backend/spring/spring-mvc/Spring mvc 中文乱码问题/","content":"一： 解决GET请求参数到了后台中文乱码问题\n\n方式一: 修改tomcat配置, 暂时做法，没有找到更好的解决办法，换了tomcat了又要重新配置\n```java\n把tomcat下，server.xml下，添加如下配置，就解决了．\n\n  <Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\" URIEncoding=\"UTF-8\"/>\n```\n方式二: 自定义filter, 解决了get请求中文参数问题，但post请求参数到了后台就gg了\n\n<!--more-->\n\n1. 新建 `CustomEncodingFilter.java`\n```java\npackage com.ecut.core.web.filter;\n\nimport org.springframework.cglib.proxy.InvocationHandler;\nimport org.springframework.cglib.proxy.Proxy;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.reflect.Method;\n\npublic class CustomEncodingFilter extends OncePerRequestFilter {\n    private String encoding;\n\n    public void setEncoding(String encoding) {\n        this.encoding = encoding;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n            throws ServletException, IOException {\n        // 设置请求响应字符编码\n        request.setCharacterEncoding(encoding);\n        response.setCharacterEncoding(encoding);\n\n        // 传递给目标servlet或jsp的实际上是动态代理的对象，而不是原始的HttpServletRequest对象\n        request = (HttpServletRequest) Proxy.newProxyInstance(request.getClass().getClassLoader(), request.getClass().getInterfaces(), new MyInvacationHandler(request));\n        chain.doFilter(request, response);\n    }\n\n    class MyInvacationHandler implements InvocationHandler {\n        private HttpServletRequest request;\n        MyInvacationHandler(HttpServletRequest request){\n            this.request=request;\n        }\n\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            switch (method.getName()) {\n                case \"getParameter\":\n                    String value = request.getParameter((String)args[0]);\n                    try {\n                        if(value != null){\n                            value=new String(value.getBytes(\"ISO-8859-1\"),encoding);\n                        }\n                    } catch (UnsupportedEncodingException e) {\n                        e.printStackTrace();\n                    }\n                    return value;\n                case \"getParameterValues\":\n                    String[] values = request.getParameterValues((String)args[0]);\n                    if (values != null) {\n                        for (int i = 0; i < values.length; i++) {\n                            try {\n                                values[i] = new String(values[i].getBytes(\"ISO-8859-1\"),encoding);\n                            } catch (UnsupportedEncodingException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n                    return values;\n                default:\n                    return method.invoke(request, args);\n            }\n        }\n\n    }\n}\n```\n2. 配置`web.xml`\n```java\n  <filter>\n    <filter-name>encodingFilter</filter-name>\n    <filter-class>com.ecut.core.web.filter.CharacterEncodingFilter</filter-class>\n    <async-supported>true</async-supported>\n    <init-param>\n      <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n      <param-name>forceEncoding</param-name>\n      <param-value>true</param-value>\n    </init-param>\n  </filter>\n  <filter-mapping>\n    <filter-name>encodingFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n\n```\n二： 解决POST请求参数到了后台中文乱码问题\n```java\n  <filter>\n    <filter-name>encodingFilter</filter-name>\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n    <async-supported>true</async-supported>\n    <init-param>\n      <param-name>encoding</param-name>\n      <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n      <param-name>forceEncoding</param-name>\n      <param-value>true</param-value>\n    </init-param>\n  </filter>\n  <filter-mapping>\n    <filter-name>encodingFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n```","tags":["Spring"],"categories":["服务器"]},{"title":"阿里巴巴Java编程规范","url":"/2018/02/13/backend/编程规范/阿里巴巴Java编程规范/","content":"### 前言：\n<center>关于《阿里巴巴Java开发手册》</center>\n\n\n\n你是否曾因Java代码规范版本纷杂而无所适从？\n\n你是否想过代码规范能将系统故障率降低20%？\n\n你是否曾因团队代码风格迥异而协同困难？\n\n你是否正在review一些原本可以避免的故障？\n\n你是否无法确定自己的代码足够健壮？ \n\n<!--more-->\n\n#### 码出高效，码出质量！\n相比C++代码规范业界已经达成共识，Java代码规范业界比较混乱，我们期待这次发布的Java代码规范能够给业界带来一个标准，促使整体行业代码规范水平得到提高，最终能够帮助企业和开发者提升代码质量和降低代码故障率。\n\n#### 阿里出品，质量保证！\n\n阿里Java技术团队一手打造出Dubbo、JStorm、Fastjson等诸多流行开源框架，部分已成为Apache基金会孵化项目；\n\n阿里在Java后端领域支撑起全球访问量最大的服务器集群；\n\nJava代码构建的阿里双11业务系统订单处理能力达到17.5万笔/秒；\n\n到目前已累计数亿行高并发、高稳定性的最佳Java代码实践；\n\n……\n\n此次公开的Java开发手册正是出自这样的团队，近万名阿里Java技术精英的经验总结，并经历了多次大规模一线实战检验及完善，铸就了这本高含金量的阿里Java开发手册。该手册以Java开发者为中心视角，划分为编程规约、异常日志规约、MYSQL规约、工程规约、安全规约五大块，再根据内容特征，细分成若干二级子目录。根据约束力强弱和故障敏感性，规约依次分为强制、推荐、参考三大类。此套规范不仅能让代码一目了然， 更有助于加强团队分工与合作、真正提升效率。 \n\n\n#### 无规矩不成方圆 无规范不能协作\n\n众所周知，制订交通法规表面上是要限制行车权，实际上是保障公众的人身安全。试想如果没有限速，没有红绿灯，没有规定靠右行驶，谁还敢上路行驶。 \n\n同理，对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的方式一起做事，降低故障率，提升协作效率。开发手册详细列举如何开发更加高效，更加容错，更加有协作性，力求知其然，更知其不然，结合正反例，提高代码质量。比如，异常日志处理时的各种不规范行为；集合转换的各种坑；创建线程池出现的等待队列OOM等。 \n\n#### 阿里技术资深大咖联袂推荐\n\n阿里高级研究员多隆：工程师对于代码，一定要“精益求精”，不论从性能，还是简洁优雅，都要具备“精益求精”的工匠精神，认真打磨自己的作品。 \n\n阿里研究员毕玄：一个优秀的工程师和一个普通工程师的区别，不是现在满天飞的架构图，他的功底就是体现在他写的每一行代码上。 \n\n阿里研究员玄难：代码是软件工程里面的产品设计、系统架构设计等工作的最后承载体，代码的质量决定了一切工作的成败。 \n\n阿里巴巴B2B事业群CTO李纯：好的软件产品离不开工程师高质量的代码及相互间顺畅的沟通与合作。简单，适用的代码规约背后所传递的是技术上的追求卓越、协同合作的精神，是每个技术团队不可缺失的重要利器。 \n\n阿里研究员、HipHop作者：赵海平（花名：福贝）：程序员是创造个性化作品的艺术家，但同时也是需要团队合作的工种。个性化应尽量表现在代码效率和算法方面，牺牲小我，成就大我。\n\n#### 拥抱规范，远离伤害！\n     \n开发的同学们赶紧行动起来，遵守代码规范，你好，我好，大家好！\n\n\n##### 传送门\n1. 原文: https://yq.aliyun.com/articles/69327?spm=5176.100239.blogcont69327.158.xUUgiz&p=2#comments\n2. 「阿里巴巴编码规范」考试认证 : https://edu.aliyun.com/certification/cldt02 \n3. 点击下载《阿里巴巴Java开发手册》(纪念版): https://yq.aliyun.com/attachment/download/?id=4942\n4. IDE插件下载 : https://github.com/alibaba/p3c\n\n\n### 以下记录以下自己需要注意的一些规范, `遵守代码规范，你好，我好，大家好！`\n\n#### 编程规约\n\n#### 命名风格\n1. 【强制】\n\n     抽象类命名使用 Abstract 或 Base 开头； \n\n     异常类命名使用 Exception 结尾； \n    \n     测试类命名以它要测试的类的名称开始，以 Test 结尾。\n2. 【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。\n   \n   正例： `MAX_STOCK_COUNT`\n   \n   反例： `MAX_COUNT`\n3. 【强制】 POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。\n   \n   反例： 定义为基本数据类型 Boolean isDeleted； 的属性，它的方法也是 isDeleted()， RPC 框架在反向解析的时候， “以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异\n                                                                常。\n4. 【强制】杜绝完全不规范的缩写， 避免望文不知义。\n\n   反例： AbstractClass“缩写” 命名成 AbsClass； condition“缩写” 命名成 condi，此类随\n   意缩写严重降低了代码的可阅读性。\n   \n5. 【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词\n   组合来表达其意。\n   \n   正例： 从远程仓库拉取代码的类命名为 PullCodeFromRemoteRepository。\n   \n   反例： 变量 int a; 的随意命名方式。\n   \n6. 【推荐】接口类中的方法和属性不要加任何修饰符号（public 也不要加） ，保持代码的简洁\n   性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是\n   与接口方法相关，并且是整个应用的基础常量。\n   \n   正例： 接口方法签名： void f();\n   \n   接口基础常量表示： String COMPANY = \"alibaba\";\n   \n   反例： 接口方法定义： public abstract void f();\n   \n   说明： JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默\n   认实现。\n   \n7. 【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。\n   说明： 枚举其实就是特殊的常量类，且构造方法被默认强制是私有。\n   \n   正例： 枚举名字为 ProcessStatusEnum 的成员名称： SUCCESS / UNKOWN_REASON。\n   \n8. 【参考】各层命名规约：\n\n   > A) Service/DAO 层方法命名规约\n   \n   1） 获取单个对象的方法用 get 做前缀。\n   \n   2） 获取多个对象的方法用 list 做前缀。\n   \n   3） 获取统计值的方法用 count 做前缀。\n   \n   4） 插入的方法用 save/insert 做前缀。\n   \n   5） 删除的方法用 remove/delete 做前缀。\n   \n   6） 修改的方法用 update 做前缀。\n   \n   > B) 领域模型命名规约\n   \n   1） 数据对象： xxxDO， xxx 即为数据表名。\n   \n   2） 数据传输对象： xxxDTO， xxx 为业务领域相关的名称。\n   \n   3） 展示对象： xxxVO， xxx 一般为网页名称。\n   \n   4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。\n   \n#### 常量定义\n1. 【强制】不允许任何魔法值（即未经定义的常量） 直接出现在代码中。\n\n   反例： String key = \"Id#taobao_\" + tradeId;\n   \n   cache.put(key, value);\n2. 【推荐】不要使用一个常量类维护所有常量， 按常量功能进行归类，分开维护。\n\n   说明： 大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。\n   \n   正例： 缓存相关常量放在类 CacheConsts 下； 系统配置相关常量放在类 ConfigConsts 下。\n#### 代码格式\n1.示例\n```java\npublic static void main(String[] args) {\n    // 缩进 4 个空格\n    String say = \"hello\";\n    // 运算符的左右必须有一个空格\n    int flag = 0;阿里巴巴 Java 开发手册\n    // 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号， 0 与右括号不需要空格\n    if (flag == 0) {\n        System.out.println(say);\n    }\n    // 左大括号前加空格且不换行；左大括号后换行\n    if (flag == 1) {\n        System.out.println(\"world\");\n        // 右大括号前换行，右大括号后有 else，不用换行\n    } else {\n        System.out.println(\"ok\");\n        // 在右大括号后直接结束，则必须换行\n    }\n}\n```\n2.【强制】 注释的双斜线与注释内容之间有且仅有一个空格。\n\n   正例： // 注释内容， 注意在//和注释内容之间有一个空格。\n   \n3.【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：\n\n   1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。\n   \n   2） 运算符与下文一起换行。\n   \n   3） 方法调用的点符号与下文一起换行。\n   \n   4） 方法调用时，多个参数， 需要换行时， 在逗号后进行。\n   \n   5） 在括号前不要换行，见反例。\n   \n   正例：\n```java\n   StringBuffer sb = new StringBuffer();\n   // 超过 120 个字符的情况下，换行缩进 4 个空格， 点号和方法名称一起换行\n   sb.append(\"zi\").append(\"xin\")...\n       .append(\"huang\")...\n       .append(\"huang\")...\n       .append(\"huang\");\n```\n   反例：\n   ```java\n   StringBuffer sb = new StringBuffer();\n   // 超过 120 个字符的情况下，不要在括号前换行\n   sb.append(\"zi\").append(\"xin\")...append\n       (\"huang\");\n   // 参数很多的方法调用可能超过 120 个字符， 不要在逗号前换行\n   method(args1, args2, args3, ...\n      , argsX);\n   ```\n4.【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。\n\n   正例： 下例中实参的\"a\",后边必须要有一个空格。\n   \n   method(\"a\", \"b\", \"c\");\n5.【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义\n   之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。\n   说明： 没有必要插入多个空行进行隔开\n#### 注释规范\n1. 【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用\n   // xxx 方式。\n   \n   说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注\n   释； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高\n   阅读效率\n2. 【强制】所有的抽象方法（包括接口中的方法） 必须要用 Javadoc 注释、除了返回值、参数、\n   异常说明外，还必须指出该方法做什么事情，实现什么功能。\n   \n   说明： 对子类的实现要求，或者调用注意事项，请一并说明\n3. 【强制】所有的类都必须添加创建者和创建日期。\n\n4. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持\n   英文原文即可\n5. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑\n   等的修改\n   \n   【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑\n   等的修改\n   \n6. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑\n   等的修改\n   \n7.  【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，\n   经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。\n   1） 待办事宜（TODO） :（标记人，标记时间， [预计处理时间]）\n   表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc\n   还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签） 。\n   2） 错误，不能工作（FIXME） :（标记人，标记时间， [预计处理时间]）\n   在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。\n#### 异常处理\n1. 【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回\n   滚事务。\n2. 【强制】有 try 块放到了事务代码中， catch 异常后，如果需要回滚事务，一定要注意手动回\n   滚事务。\n   \n#### MySQL 数据库 建表规约\n1.【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint\n（1 表示是， 0 表示否） 。\n\n说明： 任何字段如果为非负数，必须是 unsigned。\n\n正例： 表达逻辑删除的字段名 is_deleted， 1 表示删除， 0 表示未删除\n\n2.【强制】 varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长\n    度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索\n    引效率。\n3.【强制】表必备三字段： id, gmt_create, gmt_modified。\n\n说明： 其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1。 gmt_create,\ngmt_modified 的类型均为 date_time 类型，前者现在时表示主动创建，后者过去分词表示被\n   动更新\n4.【推荐】表的命名最好是加上“业务名称_表的作用”。\n  正例： alipay_task / force_project / trade_config\n5.【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。\n   说明： 不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明\n   显的； 另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必\n   然有脏数据产生\n6.【强制】超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致； 多表关联查询时，\n  保证被关联的字段需要有索引。\n  说明： 即使双表 join 也要注意表索引、 SQL 性能\n#### MySQL 数据库 SQL语句\n1. 【强制】不要使用 count(列名)或 count(常量)来替代 count(*)， count(*)是 SQL92 定义的\n标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。\n说明： count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行","tags":["java"],"categories":["server"]},{"title":"解决CSS和JS文件的客户端缓存问题","url":"/2018/02/10/frontend/CSS和JS文件的客户端缓存问题/","content":"## 场景\n做项目的时候，发现自己修改了一个css文件但样式并没有应用，查看http请求(如下图)，注意这个参数`Status Code:200 OK (from disk cache)` , 说明文件是是之前浏览器缓存的文件，浏览器并没有请求我们新改的文件\n```java\nRequest URL:http://localhost:8080/static/layui/build/css/app.cssRequest Method:GET\nStatus Code:200 OK (from disk cache)\nRemote Address:127.0.0.1:8080\nReferrer Policy:no-referrer-when-downgrade\n```\n## 解决方法\n> 发现问题了，现在就是要解决如果是服务器js css等文件修改了，怎样让浏览器能够请求我们最新的文件, 通过查看其他人的解决方法，还有看了一下大厂`百度, 淘宝 , 新浪` 对这个问题的处理，总结了一下下面几种方法:\n\n#### 方法一: 在css文件上, js文件后面加上版本号`?v=1245365`\n```html\n<link rel=\"stylesheet\" href=\"${ctx}static/admin/css/main.css?v=1245365\" media=\"all\" />\n```\n1. 如果是经常更新的css文件版本号可以取当前时间的时间戳 `v=1518237859338` ,这样就可以每次都获取到最新的文件，但缺点就是每次刷新页面都会请求该文件，在项目开发过程中可以使用这种方式\n2. 如果是更新频率不高的的文件，可以取: `v=20180210` , 这样的话刷新页面就不会每次请求这个文件了，可以减轻服务器的压力 \n3. 如果是项目稳定了基本没有改动了，可以取一个固定值:`v=0.0.1`\n\n### 方法二：一个版本一个文件夹\n> 淘宝的做法: 用一个文件 `6.2.3`\n```html\nhttps://g.alicdn.com/kg/??component/6.2.3/extension/content-box/xtpl/view.xtpl-min.js\n```\n\n\n\n\n","tags":["css"],"categories":["client"]},{"title":"生成二维码图片(base64格式)","url":"/2018/01/29/backend/相关技术/生成二维码图片(base64格式)/","content":"### 生成二维码图片(base64格式)\n\n\n<!--more-->\n```java\npackage com.guangeryi.mall.payment.weixin;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.EncodeHintType;\nimport com.google.zxing.MultiFormatWriter;\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\nimport com.google.zxing.common.BitMatrix;\nimport org.apache.commons.codec.binary.Base64;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.Hashtable;\nimport java.util.Map;\n\npublic class QRCodeUtils {\n\n    /**\n     * 生成二维码 Base64编码后字符串\n     *\n     * @param contents 内容\n     */\n    public static String encodeQRCodeBase64(String contents) {\n        return encodeQRCodeToBase64Str(contents);\n    }\n\n    /**\n     * 生成二维码 Base64编码后字符串 <img src=''> src填入该字符串显示图片\n     * （高度:300 , 宽度:300）\n     * @param contents 内容\n     */\n    private static String encodeQRCodeToBase64Str(String contents) {\n        int width = WxPcPayConfigImpl.QR_IMG_WIDTH;\n        int height = WxPcPayConfigImpl.QR_IMG_HEIGHT;\n        Map<EncodeHintType, Object> hints = new Hashtable<>();\n        String base64Img = \"data:image/png;base64,\";\n        // 指定编码格式\n        hints.put(EncodeHintType.CHARACTER_SET, \"UTF-8\");\n        try {\n            // 生成输出流\n            BitMatrix bitMatrix1 = new MultiFormatWriter().encode(contents,\n                    BarcodeFormat.QR_CODE, width, height, hints);\n            BufferedImage image = MatrixToImageWriter.toBufferedImage(bitMatrix1);\n            base64Img = base64Img + encodeToString(\"png\", image);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return base64Img;\n    }\n    /**\n     * 将图片转换成base64格式进行存储\n     *\n     * @param formatName 文件格式\n     * @param image      图片流\n     * @return base64字符串\n     */\n    private static String encodeToString(String formatName, BufferedImage image) {\n        String imageString = null;\n        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {\n            ImageIO.write(image, formatName, bos);\n            byte[] imageBytes = bos.toByteArray();\n            imageString = new String(Base64.encodeBase64(imageBytes));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return imageString;\n    }\n\n    public static void main(String[] args) {\n        // 输出在img标签中img属性中\n        System.out.println(encodeQRCodeBase64(\"你好\"));\n    }\n}\n```","tags":["Java"],"categories":["server"]},{"title":"根据手机区号获取城市地理位置","url":"/2018/01/29/backend/相关技术/根据手机区号获取城市地理位置/","content":"### 根据手机区号获取城市地理位置\n\nhttpAPI:  http://www.ip138.com:8080/search.asp?action=mobile&mobile=%s\n\n<!--more-->\n```java\npackage com.guangeryi.mall.third.common;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.select.Elements;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n\npublic class MobileLocationUtils {\n\n    private final static Logger logger = LoggerFactory.getLogger(MobileLocationUtils.class);\n\n    /**\n     * 根据手机号获取所在地信息\n     * @param mobile 手机号码\n     * @return 返回map\n     */\n    public static Map<String,Object> getMobileAddress (String mobile) {\n        Map<String,Object> map = new HashMap<>();\n        String returnStr= getMobileAddressUtils(mobile);\n        // 将160号的空格转化成32号的空格\n        returnStr = returnStr.replaceAll(\"[\\\\u00A0]+\", \" \");\n        // 去空格\n        returnStr = returnStr.trim();\n        String [] address = returnStr.split(\"\\\\s+\");\n        String province = \"\";// 省\n        String city = \"\";    // 市\n        // 直辖市\n        if (address.length == 1) {\n            province = address[0];\n            city = address[0];\n        }\n        if (address.length == 2) {\n            province = address[0];\n            city = address[1];\n        }\n        map.put(\"province\", province);\n        map.put(\"city\", city);\n        logger.info(mobile + \" 手机号所在信息:\" + map);\n        return map;\n    }\n\n    public static String getMobileAddressUtils(String mobile){\n        try {\n            String url = \"http://www.ip138.com:8080/search.asp?action=mobile&mobile=%s\";\n            url = String.format(url, mobile);\n            Document doc = Jsoup.connect(url).get();\n            Elements els = doc.getElementsByClass(\"tdc2\");\n            if(els.get(1).text().equals(\"mobile 不是数字! 验证手机号有误\") || els.get(1).text().equals(\"验证手机号有误\")) {\n                return \"未知\";\n            }\n            return els.get(1).text();\n        } catch (Exception e) {\n            return \"未知\";\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getMobileAddress(\"13117975845\"));\n    }\n}\n\n\n```","tags":["Java"],"categories":["server"]},{"title":"根据IP获取城市地理位置","url":"/2018/01/29/backend/相关技术/根据IP获取城市地理位置/","content":"### 根据IP获取城市地理位置\n使用的是百度查询的api，试过到淘宝的API, 但是淘宝做了访问次数限制，如果批量查询的话直接timeout\n\n\n<!--more-->\n```java\npackage com.guangeryi.mall.third.common;\n\nimport net.sf.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 根据IP获取城市地理位置\n * 调用百度api：http://api.map.baidu.com/location/ip\n */\npublic class IpUtils {\n\n    private final static Logger logger = LoggerFactory.getLogger(AddressUtils.class);\n\n    /**\n     * 根据ip获取城市信息\n     * @param ip\n     * @return\n     */\n    public static Map<String, Object> getCityInfoByIp(String ip){\n        Map<String, Object> result = new HashMap<>();\n        result.put(\"status\",\"success\");\n        String jsonInfo = null;\n        try {\n            jsonInfo = getCityInfoByUrlAPI(ip);\n            logger.info(\"jsonInfo:\" + jsonInfo);\n        } catch (IOException e) {\n            logger.error(\"调用 api.map.baidu.com/location/ip 获取城市信息异常, ip:\" + ip, e);\n            result.put(\"status\",\"failed\");\n            return  result;\n        }\n        String province = \"\";\n        String city = \"\";\n        String district =\"\";\n        String street = \"\";\n        try {\n            JSONObject jsonObject = JSONObject.fromObject(jsonInfo);\n            if (jsonObject != null) {\n                if (jsonObject.getJSONObject(\"content\") != null) {\n                    JSONObject addressDetail = jsonObject.getJSONObject(\"content\").getJSONObject(\"address_detail\");\n                    province = (String)addressDetail.get(\"province\"); // 省\n                    city = (String)addressDetail.get(\"city\");         // 市\n                    district = (String)addressDetail.get(\"district\"); // 区\n                    street = (String)addressDetail.get(\"street\");     // 街道\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"调用 api.map.baidu.com/location/ip 获取城市信息异常,解析JSON异常 ip:\" + ip, e);\n            result.put(\"status\",\"failed\");\n            return  result;\n        }\n        result.put(\"province\",province);\n        result.put(\"city\",city);\n        result.put(\"district\",district);\n        result.put(\"street\",street);\n        return result;\n    }\n\n    /**\n     * 调用 api.map.baidu.com/location/ip 获取城市信息\n     * @param ip\n     * @return\n     * @throws IOException\n     */\n    private static String getCityInfoByUrlAPI(String ip) throws IOException {\n        String url = \"http://api.map.baidu.com/location/ip?ak=F454f8a5efe5e577997931cc01de3974&ip=\" + ip;\n        try (InputStream is = new URL(url).openStream()) {\n            BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName(\"UTF-8\")));\n            String jsonText = getStrByReader(rd);\n            jsonText = decodeUnicode(jsonText);\n            return jsonText;\n        }\n    }\n    /**\n     * 获取流数据\n     * @param rd\n     * @return\n     * @throws IOException\n     */\n    private static String getStrByReader(Reader rd) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int cp;\n        while ((cp = rd.read()) != -1) {\n            sb.append((char) cp);\n        }\n        return sb.toString();\n    }\n    /**\n     * unicode 转换成 中文\n     *\n     * @author fanhui 2007-3-15\n     * @param theString 字符串\n     * @return String\n     */\n    private static String decodeUnicode(String theString) {\n        char aChar;\n        int len = theString.length();\n        StringBuilder outBuilder = new StringBuilder(len);\n        for (int x = 0; x < len;) {\n            aChar = theString.charAt(x++);\n            if (aChar == '\\\\') {\n                aChar = theString.charAt(x++);\n                if (aChar == 'u') {\n                    int value = 0;\n                    for (int i = 0; i < 4; i++) {\n                        aChar = theString.charAt(x++);\n                        switch (aChar) {\n                            case '0':\n                            case '1':\n                            case '2':\n                            case '3':\n                            case '4':\n                            case '5':\n                            case '6':\n                            case '7':\n                            case '8':\n                            case '9':\n                                value = (value << 4) + aChar - '0';\n                                break;\n                            case 'a':\n                            case 'b':\n                            case 'c':\n                            case 'd':\n                            case 'e':\n                            case 'f':\n                                value = (value << 4) + 10 + aChar - 'a';\n                                break;\n                            case 'A':\n                            case 'B':\n                            case 'C':\n                            case 'D':\n                            case 'E':\n                            case 'F':\n                                value = (value << 4) + 10 + aChar - 'A';\n                                break;\n                            default:\n                                throw new IllegalArgumentException(\"Malformed      encoding.\");\n                        }\n                    }\n                    outBuilder.append((char) value);\n                } else {\n                    if (aChar == 't') {\n                        aChar = '\\t';\n                    } else if (aChar == 'r') {\n                        aChar = '\\r';\n                    } else if (aChar == 'n') {\n                        aChar = '\\n';\n                    } else if (aChar == 'f') {\n                        aChar = '\\f';\n                    }\n                    outBuilder.append(aChar);\n                }\n            } else {\n                outBuilder.append(aChar);\n            }\n        }\n        return outBuilder.toString();\n    }\n    public static void main(String[] args) {\n        System.out.println(getCityInfoByIp(\"118.212.211.23\"));\n    }\n}\n\n```\n\n#### 获取用户真实IP地址\n\n```java\n    /**\n     * 获取用户真实IP地址，不使用request.getRemoteAddr()的原因是有可能用户使用了代理软件方式避免真实IP地址,\n     * 可是，如果通过了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP值\n     */\n    public static String getRemoteIp(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip != null && ip.length() != 0 && !\"unknown\".equalsIgnoreCase(ip)) {\n            // 多次反向代理后会有多个ip值，第一个ip才是真实ip\n            if(ip.contains(\",\")){\n                ip = ip.split(\",\")[0];\n            }\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"HTTP_CLIENT_IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"HTTP_X_FORWARDED_FOR\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"X-Real-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        // TODO 本地测试使用\n        if (!isIpv4(ip)) {\n            ip= \"120.27.129.177\"; // 服务器ip\n        }\n        return ip;\n    }\n```\n#### 校验IP地址\n\n```java\n    /**\n     * 校验IP地址\n     * @param ipAddress IP 地址\n     * @return true or false\n     */\n    public static boolean isIpv4(String ipAddress) {\n\n        String ip = \"^(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|[1-9])\\\\.\"\n                +\"(00?\\\\d|1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)\\\\.\"\n                +\"(00?\\\\d|1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)\\\\.\"\n                +\"(00?\\\\d|1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)$\";\n\n        Pattern pattern = Pattern.compile(ip);\n        Matcher matcher = pattern.matcher(ipAddress);\n        return matcher.matches();\n    }\n```","tags":["Java"],"categories":["server"]},{"title":"阿里云服务器搭建Javaweb运行环境","url":"/2018/01/20/backend/JavaEE服务器/阿里云服务器搭建Javaweb运行环境/","content":"### 一：前言\n借助阿里云的云翼计划的梯子买了个 阿里的ESC云服务器，学生专享优惠10块钱/月，原价一百多一个月，超级划算，当然服务器配置对于我们这些学生捣鼓捣鼓还是满足的。\n\n配置：\n\n|  配置 | 参数    | \n| -----   | -----:   | \n| CPU     | Intel Xeon E5-2682 v4 1核   |\n| 内存     | 2G 最新一代DDR4 内存        |\n| 带宽    | 1M带宽 VPC专有网络, I/O 优化 |\n| 系统盘   | 40G系统盘高效云盘           |\n\n系统：CentOS 7.3 64位(可选ubuntu, windows service)\n\n\nESC: 云服务器 ECS（Elastic Compute Service）是一种弹性可伸缩的计算服务，助您降低 IT 成本，提升运维效率，使您更专注于核心业务创新\n\n### 二：搭建步骤\n#### 2.1 购买 ESC云服务器\n购买链接:https://www.aliyun.com/product/ecs?spm=5176.8499797.765261.239.9Uf4pK, 当然如果是学生的话可以使用上面的云翼计划(https://promotion.aliyun.com/ntms/campus2017.html?spm=5176.8789780.765430.4.246c0fa5bHX2oK)优惠的方式购买，当时购买还送了(CDN流量包)和(OSS资源包) , 良心企业!!! \n\n#### 2.2 查看系统参数，及配置参数\n下单完成之后在 控制台-> 云服务器 ECS -> 实例 可看到系统自动为我们创建的 服务器实例, 里面提供了一些系统参数，还展示了系统的一些运行状态参数。\n\n我们需要的参数\n\n1.公网ip\n\n>访问实例需要用\n\n2.远程连接密码  \n\n> 这个在第一次使用浏览器远程连接主机的时候，阿里云会提供，记住只出现一次，可以用笔记本记录下来，以后每次用浏览器远程控制访问主机的时候需要提供\n\n3.登入系统的密码 \n\n在实例信息面板中有一个重置密码的功能，第一次需要自己设置，这个是主机系统的登入密码。 一开始用浏览器远程连接主机的时候，进入到了命令行界面, 要求输入密码的时候一直输入的是远程连接密码，导致一直登不进，查了一下资料发现系统登入密码需要自己创建, 登入用户 `root`\n\n4.安全组配置\n\n安全组配置是阿里云在系统做了一次网关过滤，外网访问主机，主机访问外网都需要配置这个参数，否则访问不到, 安全组配置分为入口和出口\n\n入口配置:\n\n- 把一些常用端口打开:`80 22(ssh, sftp) 23(telnet)` , 使用xshell和ftp都是使用的是22端口\n- 添加 `全部 ICMP` 协议类型, 端口范围为`-1/-1`, 没有这条规则则ping 不通主机\n\n\n#### 2.3 连接主机进行配置\n有了上面的配置就可以通过远程连接主机了, 我是使用`xshell` 进行远程连接, 使用`fileZilla`进行传输文件\n##### 2.3.1 配置 Java环境\n方式一：使用yum安装JDK 参考：https://www.cnblogs.com/sxdcgaq8080/p/7492426.html\n```sql\n1.查看yum库中都有哪些jdk版本(暂时只发现了openjdk): \n[root@localhost ~]# yum search java|grep jdk\n\n2.选择版本,进行安装\n[root@localhost ~]# yum install java-1.8.0-openjdk\n\n//安装完之后，默认的安装目录是在: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64\n\n3.设置环境变量\n[root@localhost ~]# vi /etc/profile\n在profile文件中添加如下内容\n#set java environment\nJAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.171-8.b10.el7_5.x86_64\nJRE_HOME=$JAVA_HOME/jre\nCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\nPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\nexport JAVA_HOME JRE_HOME CLASS_PATH PATH\n\n4.让修改生效\n[root@localhost java]# source /etc/profile\n```\n\n\n注: 如果出现`export =' not a valid identifier`\n```sql\n原因就是你修改的 /etc/profile 文件里\n你加过空格\n\n我的代码如下：\nexport JAVA_HOME = /usr/java/jdk1.7.0_75\nexport PATH = $JAVA_HOME/bin:$PATH\nexport CLASSPATH = .:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\n修改为如下：\nexport JAVA_HOME=/usr/java/jdk1.7.0_75\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n将等号两边的空格去掉就可以了 ，大家要注意\n```\n\n##### 2.3.2 配置 Tomcat环境\n参考： http://www.linuxidc.com/Linux/2015-09/123118.htm\n```sql\n# tar -zxvf apache-tomcat-8.0.26.tar.gz // 解压压缩包        \n# mv apache-tomcat-8.0.26 tomcat // 改名\n\n```\n\n注: \n1.在ECS上启动tomcat后，第一次访问时间特别长\n```sql\n2017-04-25 10:16:04 INFO com.world.socket.ServerSocketListener  \n25-Apr-2017 10:18:48.171 INFO [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom CreaecureRandom instance for session ID generation using [SHA1PRNG] took [163,521] milliseconds. \n \n \n这个session ID引起的 \n\n解决办法：在JVM环境中解决 \n打开$JAVA_PATH/jre/lib/security/java.security这个文件，找到下面的内容：securerandom.source=file:/dev/urandom \n替换成securerandom.source=file:/dev/./urandom\n```\n2.Centos打开、关闭、结束tomcat，及查看tomcat运行日志\n```sql\n启动：一般是执行sh tomcat/bin/startup.sh \n停止：一般是执行sh tomcat/bin/shutdown.sh脚本命令 \n查看：执行ps -ef |grep tomcat 输出如下 *** 5144 。。。等等.Bootstrap start 说明tomcat已经正常启动， 5144 就为进程号 pid = 5144 \n杀死：kill -9 5144\n\n\n------------------------linux下实时查看tomcat运行日志-------------------------\n1、先切换到：cd tomcat/logs\n2、tail -f catalina.out\n3、这样运行时就可以实时查看运行日志了\nCtrl+c 是退出tail命令。\n```\n\n##### 2.3.3 配置 Mysql环境\n参考： http://www.linuxidc.com/Linux/2016-09/134992.htm\n\n#### 2.4 投放项目文件\n使用`fileZilla`进行传输文件\n```sql\nTomcat中部署web项目的三种方式：\n1.部署解包的webapp目录\n2.打包的war文件\n3.Manager Web应用程序\n```","tags":["java"],"categories":["server"]},{"title":"组合注解","url":"/2018/01/14/backend/spring/组合注解/","content":"### 组合注解\n> 用一个注解表示其他注解\n\nCombinationAnnocation.java\n\n```java\npackage com.smart.boot.groupAnno;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.lang.annotation.*;\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Configuration\n@ComponentScan\npublic @interface CombinationAnnocation {\n    String [] value() default {};\n}\n```\nConfig.java\n\n```java\npackage com.smart.boot.groupAnno;\n\n@CombinationAnnocation\npublic class Config {\n}\n\n```\n\nApplication.java\n```java\npackage com.smart.boot.groupAnno;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class Application {\n\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);\n        context.close();\n    }\n}\n```","tags":["Spring"],"categories":["服务器"]},{"title":"异步方法","url":"/2018/01/14/backend/spring/异步方法/","content":"### 异步方法\n> 加入@Async注解可以让普通方法变为异步方法\n\nAsyncTaskService.java\n\n```java\npackage com.smart.boot.asyn;\n\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class AsyncTaskService {\n    /**\n     * 异步方法\n     *\n     * @param i\n     */\n    @Async\n    public void task1(Integer i) {\n        System.out.println(\"执行异步任务\" + i);\n    }\n\n    @Async\n    public void task2(Integer i) {\n        System.out.println(\"执行异步任务+1 \" + (i + 1));\n    }\n}\n```\nConfig.java\n\n```java\npackage com.smart.boot.asyn;\n\nimport org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.AsyncConfigurer;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.Executor;\n\n@Configuration\n@ComponentScan(\"com.smart.boot.asyn\")\n@EnableAsync // 开启异步任务支持\npublic class Config implements AsyncConfigurer {\n    /**\n     * 获得一个基于线程池的 taskExecutor\n     *\n     * @return\n     */\n    @Override\n    public Executor getAsyncExecutor() {\n        ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();\n        taskExecutor.setCorePoolSize(5);\n        taskExecutor.setMaxPoolSize(10);\n        taskExecutor.setQueueCapacity(25);\n        taskExecutor.initialize();\n        return taskExecutor;\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return null;\n    }\n}\n```\n\nApplication.java\n```java\npackage com.smart.boot.asyn;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class Application {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);\n        AsyncTaskService asyncTaskService = context.getBean(AsyncTaskService.class);\n        for (int i = 0; i < 10; i++) {\n            asyncTaskService.task1(i);\n            asyncTaskService.task2(i);\n        }\n        context.close();\n    }\n}\n```","tags":["Spring"],"categories":["服务器"]},{"title":"Spring 事件监听","url":"/2018/01/14/backend/spring/spring 事件监听/","content":"### Spring 事件监听\n\n#### spring的事件(Application Event)\n**为Bean与Bean之间的消息通信提供了支持, 当第一个Bean处理完一件事之后, 需要另外一个Bean知道并能做出相应的处理, 这时可以通过事件监听来讲一个Bean监听另一个Bean**\n\n#### 观察者模式\n>Spring 事件监听是观察者模式的一种实现 \n\n意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。\n\n主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。\n\n何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。\n\n如何解决：使用面向对象技术，可以将这种依赖关系弱化。\n\n>事件驱动模型简介\n\n事件驱动模型也就是我们常说的观察者，或者发布-订阅模型；理解它的几个关键点：\n\n1. 首先是一种对象间的一对多的关系；最简单的如交通信号灯，信号灯是目标（一方），行人注视着信号灯（多方）；\n2. 当目标发送改变（发布），观察者（订阅者）就可以接收到改变；\n3. 观察者如何处理（如行人如何走，是快走/慢走/不走，目标不会管的），目标无需干涉；所以就松散耦合了它们之间的关系。\n<!--more-->\n#### 实现流程\n1.自定义事件\n```java\npackage com.smart.boot.event;\n\nimport org.springframework.context.ApplicationEvent;\n\npublic class DemoEvent extends ApplicationEvent {\n\n    private String msg;\n\n    public DemoEvent(Object source, String msg) {\n        super(source);\n        this.msg = msg;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n\n    /**\n     * 去做一些事\n     */\n    public void todoSomethings() {\n        System.out.println(\"正在做第一件事 , 做完需要做第二件事\");\n    }\n}\n```\n\n2.定义事件监听器\n```java\npackage com.smart.boot.event;\n\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class DemoListener implements ApplicationListener<DemoEvent> {\n    /**\n     * 对消息进行接受处理\n     * @param event\n     */\n    @Override\n    public void onApplicationEvent(DemoEvent event) {\n        String msg = event.getMsg();\n        System.out.println(\"DemoListener 接受到了消息\" + msg );\n        event.todoSomethings();\n        System.out.println(\"正在做第二件事\");\n    }\n}\n```\n3.发布事件\n```java\npackage com.smart.boot.event;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class DemoPublisher {\n    /**\n     * 注入ApplicationContext来发布事件\n     */\n    @Autowired\n    ApplicationContext context;\n\n    /**\n     * 发布事件\n     * @param msg\n     */\n    public void publish(String msg) {\n        context.publishEvent(new DemoEvent(this,msg));\n    }\n}\n\n```\n\n4.定义配置类\n```java\npackage com.smart.boot.event;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ComponentScan(\"com.smart.boot.event\")\npublic class Config {\n}\n\n```\n\n5.运行\n```java\npackage com.smart.boot.event;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class Application {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);\n        DemoPublisher demoPublisher = context.getBean(DemoPublisher.class);\n        demoPublisher.publish(\"hello songshuiyang\");\n        context.close();\n    }\n}\n\n```\n\n6.实现结果\n```java\nDemoListener 接受到了消息hello songshuiyang\n正在做第一件事 , 做完需要做第二件事\n正在做第二件事\n```\n#### 总结\n1. 实现事件监听可以使业务解耦, 每个模块做好自己的事情即可, \n2. 可用在用户注册功能, eg: http://jinnianshilongnian.iteye.com/blog/1902886\n","tags":["Spring"],"categories":["服务器"]},{"title":"注解Value, Spring EL","url":"/2018/01/14/backend/spring/注解Value/","content":"### @Value用法及配合Spring EL使用\n\n#### spring支持@Value注解获取一些配置信息及加载资源\n\n\n> ELConfig.java\n```java\npackage com.smart.boot.el;\n\nimport org.apache.commons.io.IOUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.Resource;\n\n@Configuration\n@ComponentScan(\"com.smart.boot.el\")\n@PropertySource(\"classpath:el.properties\")\npublic class ELConfig {\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n    /**\n     * 注入普通字符串\n     */\n    @Value(\"songsy\")\n    private String str;\n    /**\n     * 通过el注入操作系统属性\n     */\n    @Value(\"# {systemProperties['os.name']}\")\n    private String osName;\n    /**\n     * 表达式结果\n     */\n    @Value(\"#{ T(java.lang.Math).random() * 100.0 }\")\n    private double randomNumber;\n    /**\n     * 注入其他Bean属性\n     */\n    @Value(\"#{eLService.another}\")\n    public String fromAnothor;\n    /**\n     * 注入文件资源\n     */\n    @Value(\"classpath:el.properties\")\n    private Resource testFile;\n    /**\n     * 注入网站资源\n     */\n    @Value(\"http://www.baidu.com\")\n    private Resource testUrl;\n    /**\n     * 注入配置文件\n     */\n    @Value(\"${book.name}\")\n    private String bookName;\n\n    /**\n     * 环境配置\n     * 环境在容器中是一个抽象的集合，是指应用环境的2个方面: profiles和 properties.\n     * profile:\n     * 配置是一个被命名的，bean定义的逻辑组，这些bean只有在给定的profile配置激活时才会注册到容器。不管是XML还是注解，\n     * Beans都有可能指派给profile配置。Environment环境对象的作用，对于profiles配置来说，它能决定当前激活的是哪个profile配置，和哪个profile是默认。\n     * Properties:\n     * 扮演一个非常重要的角色,可能来源于一下源码变量:properties文件，JVM properties,system环境变量，JNDI, servlet context parameters上下文参数,\n     * 专门的Properties对象，Maps等等。Environment对象的作用，对于properties来说，是提供给用户方便的服务接口，方便撰写配置、方便解析配置。\n     * 作者：不迷失\n     * 链接：https://www.jianshu.com/p/49e950b0b008\n     * 來源：简书\n     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n     */\n    @Autowired\n    private Environment environment;\n\n    /**\n     * 若使用@Value注入, 则要配置一个PropertySourcesPlaceholderConfigurer\n     *\n     * @return\n     */\n    @Bean\n    public static PropertySourcesPlaceholderConfigurer placeholderConfigurer() {\n        return new PropertySourcesPlaceholderConfigurer();\n    }\n\n    public void print() throws Exception {\n        logger.info(\"str: \" + str);\n        logger.info(\"osName: \" + osName);\n        logger.info(\"randomNumber: \" + String.valueOf(randomNumber));\n        logger.info(\"fromAnothor: \" + fromAnothor);\n        logger.info(\"testFile: \" + IOUtils.toString(testFile.getInputStream()));\n        logger.info(\"testUrl: \" + IOUtils.toString(testUrl.getInputStream()));\n        logger.info(\"bookName: \" + bookName);\n        logger.info(\"environment: \" + environment.getProperty(\"book.author\"));\n    }\n}\n\n```\n\n<!--more-->\n> ELService.java\n```java\npackage com.smart.boot.el;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service(\"eLService\")\npublic class ELService {\n\n    public String another;\n\n    public String getAnother() {\n        return another;\n    }\n\n    @Autowired\n    public void setAnother() {\n        this.another = \"ELService 自动注入\";\n    }\n}\n\n```\n> ELMain.java\n```java\npackage com.smart.boot.el;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class ELMain {\n    public static void main(String[] args) throws Exception {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ELConfig.class);\n        ELConfig elConfig = context.getBean(ELConfig.class);\n        elConfig.print();\n        context.close();\n    }\n}\n```","tags":["Spring"],"categories":["服务器"]},{"title":"npm scripts","url":"/2018/01/14/frontend/npm/npm scripts/","content":"### 一、什么是 npm 脚本\nnpm 允许在package.json文件里面，使用scripts字段定义脚本命令。\n```sql\n{\n  // ...\n  \"scripts\": {\n    \"build\": \"node build.js\"\n  }\n}\n```\n上面代码是package.json文件的一个片段，里面的scripts字段是一个对象。它的每一个属性，对应一段脚本。比如，build命令对应的脚本是node build.js。\n命令行下使用npm run命令，就可以执行这段脚本。\n```sql\n$ npm run build\n# 等同于执行\n$ node build.js\n```\n这些定义在package.json里面的脚本，就称为 npm 脚本。它的优点很多\n1. 项目的相关脚本，可以集中在一个地方。\n2. 不同项目的脚本命令，只要功能相同，就可以有同样的对外接口。用户不需要知道怎么测试你的项目，只要运行npm run test即可。\n3. 可以利用 npm 提供的很多辅助功能。\n\n查看当前项目的所有 npm 脚本命令，可以使用不带任何参数的npm run命令。\n```sql\n$ npm run\n```\n### 二：执行顺序\n如果 npm 脚本里面需要执行多个任务，那么需要明确它们的执行顺序。\n如果是并行执行（即同时的平行执行），可以使用&符号。\n```sql\n$ npm run script1.js & npm run script2.js\n```\n\n如果是继发执行（即只有前一个任务成功，才执行下一个任务），可以使用&&符号\n```sql\n$ npm run script1.js && npm run script2.js\n```\n\n### 应用\n在 `package.json` 添加以下代码执行`npm run gg` 可以连续执行（hexo g）（hexo d）俩个命令，这样就不用每次执行俩个命令\n```sql\n \"scripts\": {\n    \"gg\": \"hexo g && hexo d\"\n  }\n```\n详见:http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html","tags":["npm"],"categories":["client"]},{"title":"接入银联支付接口","url":"/2018/01/11/backend/支付/接入银联支付接口/","content":"吐槽一下：\n\n> 1.银联支付SDK是没有提供独立的jar包的，高大上的银联把示例demo和sdk整合在一起了，支付流程和支付宝支付相似，支付需要到银联的支付页面\n\n> 2.证书说明：其实我们只需要一个邮件上的签名证书文件，官网上文档说的开发者调用接口前需要的其他证书在开发包中目录assets下都有，每个人都一样，没错，每个人都一样\n\n> 3.银联开发平台常常在下午6点发版本，遇到过俩次，第一次感到惊讶:银联网站挂了？不可能呀，过了十多分钟又恢复正常，晕\n\n> 4.代码不够规范，用代码检测工具一片黄色\n```java\n/**\n * @ClassName AcpService\n * @Description acpsdk接口服务类，接入商户集成请可以直接参考使用本类中的方法\n * @date 2016-7-22 下午2:44:37\n * 声明：以下代码只是为了方便接入方测试而提供的样例代码，商户可以根据自己需要，按照技术文档编写。该代码仅供参考，不提供编码，性能，规范性等方面的保障\n */\n```\n<!--more-->\n#### 大致步骤\n\n##### 一：下载demo及sdk\nhttps://open.unionpay.com/ajweb/product/newProDetail?proId=1&cataId=14\n\n##### 二：配置参数：\n\n接入银联支付审核 听头说好像是挺繁琐的，费时费力，接入银联支付设及到下面几个参数，其他的参数银联都帮我们配置好了\n\n1.商户号: 在银联商家技术服务中心可以看到 https://open.unionpay.com/ajweb/index，注意：在测试环境的商户号一致，刚开始我还不相信，通过客服才知道俩个是一样的，在测试账号信息里面可以看到\n\n2.后台通知地址：填写接收银联后台通知的地址，必须外网能访问\n\n3.前台通知地址：填写处理银联前台通知的地址，必须外网能访问\n\n4.签名证书: 在审核成功发送的邮件里面\n\n5.签名证书密码： 在审核成功发送的邮件里面有\n\n##### 三：调用支付接口\n\n```java\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp)\n\nthrows ServletException, IOException {\n\nresp.setContentType(\"text/html; charset=\"+ DemoBase.encoding);\n\n\n//前台页面传过来的\n\nString merId = req.getParameter(\"merId\");\n\nString txnAmt = req.getParameter(\"txnAmt\");\n\n\nMap<String, String> requestData = new HashMap<String, String>();\n\n\n/***银联全渠道系统，产品参数，除了encoding自行选择外其他不需修改***/\n\nrequestData.put(\"version\", DemoBase.version);     //版本号，全渠道默认值\n\nrequestData.put(\"encoding\", DemoBase.encoding);   //字符集编码，可以使用UTF-8,GBK两种方式\n\nrequestData.put(\"signMethod\", SDKConfig.getConfig().getSignMethod()); //签名方法\n\nrequestData.put(\"txnType\", \"01\");                 //交易类型 ，01：消费\n\nrequestData.put(\"txnSubType\", \"01\");              //交易子类型， 01：自助消费\n\nrequestData.put(\"bizType\", \"000201\");             //业务类型，B2C网关支付，手机wap支付\n\nrequestData.put(\"channelType\", \"07\");             //渠道类型，这个字段区分B2C网关支付和手机wap支付；07：PC,平板  08：手机\n\n\n/***商户接入参数***/\n\nrequestData.put(\"merId\", merId);                //商户号码，请改成自己申请的正式商户号或者open上注册得来的777测试商户号\n\nrequestData.put(\"accessType\", \"0\");               //接入类型，0：直连商户 \n\nrequestData.put(\"orderId\",DemoBase.getOrderId());             //商户订单号，8-40位数字字母，不能含“-”或“_”，可以自行定制规则\n\nrequestData.put(\"txnTime\", DemoBase.getCurrentTime());        //订单发送时间，取系统时间，格式为YYYYMMDDhhmmss，必须取当前时间，否则会报txnTime无效\n\nrequestData.put(\"currencyCode\", \"156\");           //交易币种（境内商户一般是156 人民币）\n\nrequestData.put(\"txnAmt\", txnAmt);                   //交易金额，单位分，不要带小数点\n\n//requestData.put(\"reqReserved\", \"透传字段\");              //请求方保留域，如需使用请启用即可；透传字段（可以实现商户自定义参数的追踪）本交易的后台通知,对本交易的交易状态查询交易、对账文件中均会原样返回，商户可以按需上传，长度为1-1024个字节。出现&={}[]符号时可能导致查询接口应答报文解析失败，建议尽量只传字母数字并使用|分割，或者可以最外层做一次base64编码(base64编码之后出现的等号不会导致解析失败可以不用管)。\n\n\n//前台通知地址 （需设置为外网能访问 http https均可），支付成功后的页面 点击“返回商户”按钮的时候将异步通知报文post到该地址\n\n//如果想要实现过几秒中自动跳转回商户页面权限，需联系银联业务申请开通自动返回商户权限\n\n//异步通知参数详见open.unionpay.com帮助中心 下载  产品接口规范  网关支付产品接口规范 消费交易 商户通知\n\nrequestData.put(\"frontUrl\", DemoBase.frontUrl);\n\n\n//后台通知地址（需设置为【外网】能访问 http https均可），支付成功后银联会自动将异步通知报文post到商户上送的该地址，失败的交易银联不会发送后台通知\n\n//后台通知参数详见open.unionpay.com帮助中心 下载  产品接口规范  网关支付产品接口规范 消费交易 商户通知\n\n//注意:1.需设置为外网能访问，否则收不到通知    2.http https均可  3.收单后台通知后需要10秒内返回http200或302状态码 \n\n//    4.如果银联通知服务器发送通知后10秒内未收到返回状态码或者应答码非http200，那么银联会间隔一段时间再次发送。总共发送5次，每次的间隔时间为0,1,2,4分钟。\n\n//    5.后台通知地址如果上送了带有？的参数，例如：http://abc/web?a=b&c=d 在后台通知处理程序验证签名之前需要编写逻辑将这些字段去掉再验签，否则将会验签失败\n\nrequestData.put(\"backUrl\", DemoBase.backUrl);\n\n// 订单超时时间。\n\n// 超过此时间后，除网银交易外，其他交易银联系统会拒绝受理，提示超时。 跳转银行网银交易如果超时后交易成功，会自动退款，大约5个工作日金额返还到持卡人账户。\n\n// 此时间建议取支付时的北京时间加15分钟。\n\n// 超过超时时间调查询接口应答origRespCode不是A6或者00的就可以判断为失败。\n\nrequestData.put(\"payTimeout\", new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date().getTime() + 15 * 60 * 1000));\n\n\n//////////////////////////////////////////////////\n\n//\n\n//       报文中特殊用法请查看 PCwap网关跳转支付特殊用法.txt\n\n//\n\n//////////////////////////////////////////////////\n\n\n/**请求参数设置完毕，以下对请求参数进行签名并生成html表单，将表单写入浏览器跳转打开银联页面**/\n\nMap<String, String> submitFromData = AcpService.sign(requestData,DemoBase.encoding);  //报文中certId,signature的值是在signData方法中获取并自动赋值的，只要证书配置正确即可。\n\n\nString requestFrontUrl = SDKConfig.getConfig().getFrontRequestUrl();  //获取请求银联的前台地址：对应属性文件acp_sdk.properties文件中的acpsdk.frontTransUrl\n\nString html = AcpService.createAutoFormHtml(requestFrontUrl, submitFromData,DemoBase.encoding);   //生成自动跳转的Html表单\n\n\nLogUtil.writeLog(\"打印请求HTML，此为请求报文，为联调排查问题的依据：\"+html);\n\n//将生成的html写到浏览器中完成自动跳转打开银联支付页面；这里调用signData之后，将html写到浏览器跳转到银联页面之前均不能对html中的表单项的名称和值进行修改，如果修改会导致验签不通过\n\nresp.getWriter().write(html);\n\n}\n``` \n##### 异步通知：与支付宝微信异步通知处理相同\n参考于：\nhttps://open.unionpay.com/ajweb/product/newProDetail?proId=1&cataId=14\n","tags":["支付"],"categories":["server"]},{"title":"接入微信扫码支付接口","url":"/2018/01/11/backend/支付/接入微信支付接口/","content":"#### 准备条件\n##### 开始之前先看一下微信的几个平台:\n1. 微信公众平台:\n是微信公众账号申请入口和管理后台。商户可以在公众平台提交基本资料、业务资料、财务资料申请开通微信支付功能。\n平台入口：http://mp.weixin.qq.com。\n2. 微信开放平台:\n微信开放平台是商户APP接入微信支付开放接口的申请入口，通过此平台可申请微信APP支付。\n平台入口：http://open.weixin.qq.com。\n3. 微信商户平台:\n微信商户平台是微信支付相关的商户功能集合，包括参数配置、支付数据查询与统计、在线退款、代金券或立减优惠运营等功能。\n平台入口：http://pay.weixin.qq.com\n\n刚开始接入的时候有点昏，各种参数需要到不同的平台找, 不像支付宝一样只有一个开发平台，如果是接入微信扫码支付设及到微信公众平台和微信商户平台，如果是手机app微信支付，设及到微信开放平台和微信商户平台\n\n##### 开通支付功能:\n有了平台账号之后，然后就是开通支付功能，等待审核通过，当然审核过程有可能被退回，大多是描述信息或者经营类别与营业执照描述不一致\n<!--more-->\n#### 微信支付开发:\n> 下面是微信支付的业务流程时序图, 可以看到与支付宝的支付流程主要流程是差不多的，只不过微信扫码可以在本系统完成支付，没有发生页面跳转，可以自己DIY支付页面，只要将支付链接生成二维码图片即可完成支付\n![logo](/images/server/支付/weixin.png)    \n\n##### 接入微信支付步骤\n\n###### 1. 获取支付SDK\n\n gradle:地址    `compile(\"com.github.wxpay:wxpay-sdk:0.0.3\")`\n\n###### 2. 配置参数\n\n主要是如下参数, 可以配置在一个属性文件中方面配置\n\n1、APP ID ，应用ID（在公众平台--基本配置模块中）\n\n2、APP Sercret ，应用秘钥（在公众平台--基本配置模块中）32位数字大小写字母\n\n3、API Key，API的秘钥（在商户平台--API安全中设置）\n\n4、mchID , 商户号（在公众平台---微信支付---商户信息）\n\n5、order_api ， 统一下单API的接口\n\n6、notify_url    交易成功回调的接口的URL\n\n###### 3. 新建一个参数配置类\n\n> WxPcPayConfigImpl.java 继承 WXPayConfig.java\n\n```java\n/**\n * 微信支付PC端 基础属性配置\n */\npublic class WxPcPayConfigImpl implements WXPayConfig {\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    // 配置文件地址\n    private static final String FILE_NAME = \"weixin_pc_pay.properties\";\n\n    // 服务号的应用ID\n    public static String APP_ID;\n    // 服务号的应用密钥\n    public static String APP_SECRET;\n    // 服务号的配置token\n    public static String TOKEN;\n    // 商户号\n    public static String MCH_ID;\n    // API密钥\n    public static String API_KEY;\n    // 签名加密方式\n    public static String SIGN_TYPE;\n    // 微信支付证书\n    public static String CERT_PATH;\n    // 异步回调地址\n    public static String NOTIFY_URL;\n    // 是否使用沙箱环境\n    public static boolean IS_USE_SANDBOX;\n    // 证书\n    private static byte[] certData;\n    // INSTANCE\n    private static WxPcPayConfigImpl INSTANCE;\n    // 配置对象\n    private static Configuration configs;\n    // 文件分隔符\n    public final static String SF_FILE_SEPARATOR = System.getProperty(\"file.separator\");//文件分隔符\n    // 二维码图片宽度\n    public final static int QR_IMG_WIDTH = 300;\n    // 二维码图片高度\n    public final static int QR_IMG_HEIGHT = 300;\n\n    /**\n     * 返回配置文件实例\n     *\n     * @return\n     * @throws Exception\n     */\n    public static WxPcPayConfigImpl getInstance() throws Exception {\n        if (INSTANCE == null) {\n            synchronized (WxPcPayConfigImpl.class) {\n                if (INSTANCE == null) {\n                    INSTANCE = new WxPcPayConfigImpl();\n                }\n            }\n        }\n        return INSTANCE;\n    }\n\n    /**\n     * 加载微信配置文件\n     */\n    public static synchronized void init() {\n        if (configs != null) {\n            return;\n        }\n        try {\n            configs = new PropertiesConfiguration(FILE_NAME);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n\n        if (configs == null) {\n            throw new IllegalStateException(\"读取配置文件错误\" + FILE_NAME);\n        }\n        APP_ID = configs.getString(\"appId\");\n        APP_SECRET = configs.getString(\"appSecret\");\n        TOKEN = configs.getString(\"token\");\n        MCH_ID = configs.getString(\"mchId\");\n        API_KEY = configs.getString(\"apiKey\");\n        SIGN_TYPE = configs.getString(\"signType\");\n        CERT_PATH = configs.getString(\"certPath\");\n        IS_USE_SANDBOX = configs.getBoolean(\"isUseSandbox\");\n        NOTIFY_URL = configs.getString(\"notifyUrl\");\n\n        // 加载证书\n        File file;\n        try {\n            // file = new File(CERT_PATH);\n            Resource resource = new ClassPathResource(CERT_PATH);\n            file = resource.getFile();\n            InputStream certStream = new FileInputStream(file);\n            certData = new byte[(int) file.length()];\n            certStream.read(certData);\n            certStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    /**\n     * 获取 App ID\n     *\n     * @return App ID\n     */\n    @Override\n    public String getAppID() {\n        return APP_ID;\n    }\n    /**\n     * 获取 Mch ID\n     *\n     * @return Mch ID\n     */\n    @Override\n    public String getMchID() {\n        return MCH_ID;\n    }\n    /**\n     * 获取 API 密钥\n     *\n     * @return API密钥\n     */\n    @Override\n    public String getKey() {\n        return API_KEY;\n    }\n    /**\n     * 获取商户证书内容\n     *\n     * @return 商户证书内容\n     */\n    @Override\n    public InputStream getCertStream() {\n        ByteArrayInputStream certBis;\n        certBis = new ByteArrayInputStream(this.certData);\n        return certBis;\n    }\n    /**\n     * HTTP(S) 连接超时时间，单位毫秒\n     *\n     * @return\n     */\n    @Override\n    public int getHttpConnectTimeoutMs() {\n        return 8000;\n    }\n    /**\n     * HTTP(S) 读数据超时时间，单位毫秒\n     *\n     * @return\n     */\n    @Override\n    public int getHttpReadTimeoutMs() {\n        return 10000;\n    }\n\n    public byte[] getCertData() {\n        return certData;\n    }\n\n    public void setCertData(byte[] certData) {\n        this.certData = certData;\n    }\n}\n```\n###### 4. new 一个`WXPay`对象\n```java\nWXPay wxAppPay;\nWxPcPayConfigImpl pcConfig = WxPcPayConfigImpl.getInstance();\nwxpay = new WXPay(pcConfig, WXPayConstants.SignType.MD5, WxPcPayConfigImpl.IS_USE_SANDBOX);\n```\n\n\n###### 5. 有了\"对象\"之后就可以发送支付请求了\n```java\n    /**\n     * PC端微信支付请求\n     *\n     * @param domainId 商户订单号取实体类id\n     * @param amount   充值金额\n     * @return 处理结果数据\n     */\n    public Map<String, Object> weixinPay(String domainId, BigDecimal amount, HttpServletRequest request) {\n        Map<String, Object> resultMaps = new HashMap<>();\n        resultMaps.put(\"status\", \"success\");\n\n        HashMap<String, String> data = new HashMap<>();\n        String currentUserName = \"\";\n        if (AccountUtils.getCurrentUser() != null) {\n            if (StringUtils.isNotBlank(AccountUtils.getCurrentUser().getFdNickName())) {\n                currentUserName = AccountUtils.getCurrentUser().getFdNickName();\n            }\n        }\n        String description = currentUserName + \" 账户充值\";\n\n        data.put(\"body\", description);                                  // 商品描述\n        data.put(\"out_trade_no\", domainId);                             // 商户订单号\n        data.put(\"total_fee\", AmountUtils.transAmountToCent(amount));   // 总金额,单位为分\n        data.put(\"spbill_create_ip\", WxUtils.getRemoteIp(request));     // 发起人IP地址\n        data.put(\"notify_url\", WxPcPayConfigImpl.NOTIFY_URL);           // 异步通知地址\n        data.put(\"trade_type\", \"NATIVE\");                               // 此处指定为扫码支付\n        data.put(\"product_id\", domainId);                               // 商品ID,trade_type=NATIVE时（即扫码支付），此参数必传\n\n        Map<String, String> resultMap;\n        try {\n            resultMap = wxpay.unifiedOrder(data);\n            logger.info(\"微信生成二维码返回xml 转成Json\" + JsonFormatUtil.formatJson(resultMap.toString()));\n            System.out.println(resultMap);\n        } catch (Exception e) {\n            e.printStackTrace();\n            logger.error(\"微信支付处理异常\");\n            resultMaps.put(\"status\", \"failed\");\n            return resultMaps;\n        }\n        String returnCode = resultMap.get(\"return_code\");\n        // 返回结果\n        if (\"SUCCESS\".equals(returnCode)) {\n            String resultCode = resultMap.get(\"result_code\");\n            // 处理结果\n            if (\"SUCCESS\".equals(resultCode)) {\n                logger.info(\"订单号：{}生成微信支付码成功\", domainId);\n                String urlCode = resultMap.get(\"code_url\");\n                // 生成二维码\n                logger.info(\"\");\n                // WxUtils.encodeQRCode(urlCode,imgPath);\n                String imgBase64Str = WxUtils.encodeQRCodeBase64(urlCode);\n                // 是否是微信支付\n                resultMaps.put(\"id\", domainId);\n                resultMaps.put(\"isWxPay\", true);\n                resultMaps.put(\"img\", imgBase64Str);\n            } else {\n                String errCodeDes = resultMap.get(\"err_code_des\");\n                logger.info(\"订单号：{}生成微信支付码(系统)失败:{}\", domainId, errCodeDes);\n                resultMaps.put(\"status\", \"failed\");\n                return resultMaps;\n            }\n        } else {\n            String returnMsg = resultMap.get(\"return_msg\");\n            logger.info(\"(订单号：{}生成微信支付码(通信)失败:{}\", domainId, returnMsg);\n            resultMaps.put(\"status\", \"failed\");\n            return resultMaps;\n        }\n        return resultMaps;\n    }\n\n```\n\n微信支付统一下单接口:\n```java\n    /**\n     * 作用：统一下单<br>\n     * 场景：公共号支付、扫码支付、APP支付\n     * @param reqData 向wxpay post的请求数据\n     * @return API返回数据\n     * @throws Exception\n     */\n    public Map<String, String> unifiedOrder(Map<String, String> reqData) throws Exception {\n        return this.unifiedOrder(reqData, config.getHttpConnectTimeoutMs(), this.config.getHttpReadTimeoutMs());\n    }\n```\n###### 6. 生成支付二维码\n这里我是将二维码链接字符串转成字符流 然后生成Base64位的图片字符, 只要在<img src=\"\"> 设置src属性值，就可以完成图片展示，不用考虑生成的图片放在那里\n\n###### 7. 支付完成, 处理异步回调\n\n\n###### 备注： 微信支付是使用的xml进行传输数据，需要将xml转成map，当然微信SDK中也提供了工具类，提供了一些十分用的方法\n```java\npackage com.github.wxpay.sdk;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.StringWriter;\nimport java.util.*;\nimport java.security.MessageDigest;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport com.github.wxpay.sdk.WXPayConstants.SignType;\n\n\npublic class WXPayUtil {\n\n    /**\n     * XML格式字符串转换为Map\n     *\n     * @param strXML XML字符串\n     * @return XML数据转换后的Map\n     * @throws Exception\n     */\n    public static Map<String, String> xmlToMap(String strXML) throws Exception {\n        Map<String, String> data = new HashMap<String, String>();\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder documentBuilder= documentBuilderFactory.newDocumentBuilder();\n        InputStream stream = new ByteArrayInputStream(strXML.getBytes(\"UTF-8\"));\n        org.w3c.dom.Document doc = documentBuilder.parse(stream);\n        doc.getDocumentElement().normalize();\n        NodeList nodeList = doc.getDocumentElement().getChildNodes();\n        for (int idx=0; idx<nodeList.getLength(); ++idx) {\n            Node node = nodeList.item(idx);\n            if (node.getNodeType() == Node.ELEMENT_NODE) {\n                org.w3c.dom.Element element = (org.w3c.dom.Element) node;\n                data.put(element.getNodeName(), element.getTextContent());\n            }\n        }\n        try {\n            stream.close();\n        }\n        catch (Exception ex) {\n\n        }\n        return data;\n    }\n\n    /**\n     * 将Map转换为XML格式的字符串\n     *\n     * @param data Map类型数据\n     * @return XML格式的字符串\n     * @throws Exception\n     */\n    public static String mapToXml(Map<String, String> data) throws Exception {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder documentBuilder= documentBuilderFactory.newDocumentBuilder();\n        org.w3c.dom.Document document = documentBuilder.newDocument();\n        org.w3c.dom.Element root = document.createElement(\"xml\");\n        document.appendChild(root);\n        for (String key: data.keySet()) {\n            String value = data.get(key);\n            if (value == null) {\n                value = \"\";\n            }\n            value = value.trim();\n            org.w3c.dom.Element filed = document.createElement(key);\n            filed.appendChild(document.createTextNode(value));\n            root.appendChild(filed);\n        }\n        TransformerFactory tf = TransformerFactory.newInstance();\n        Transformer transformer = tf.newTransformer();\n        DOMSource source = new DOMSource(document);\n        transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n        transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n        StringWriter writer = new StringWriter();\n        StreamResult result = new StreamResult(writer);\n        transformer.transform(source, result);\n        String output = writer.getBuffer().toString(); //.replaceAll(\"\\n|\\r\", \"\");\n        try {\n            writer.close();\n        }\n        catch (Exception ex) {\n        }\n        return output;\n    }\n\n\n    /**\n     * 生成带有 sign 的 XML 格式字符串\n     *\n     * @param data Map类型数据\n     * @param key API密钥\n     * @return 含有sign字段的XML\n     */\n    public static String generateSignedXml(final Map<String, String> data, String key) throws Exception {\n        return generateSignedXml(data, key, SignType.MD5);\n    }\n\n    /**\n     * 生成带有 sign 的 XML 格式字符串\n     *\n     * @param data Map类型数据\n     * @param key API密钥\n     * @param signType 签名类型\n     * @return 含有sign字段的XML\n     */\n    public static String generateSignedXml(final Map<String, String> data, String key, SignType signType) throws Exception {\n        String sign = generateSignature(data, key, signType);\n        data.put(WXPayConstants.FIELD_SIGN, sign);\n        return mapToXml(data);\n    }\n\n\n    /**\n     * 判断签名是否正确\n     *\n     * @param xmlStr XML格式数据\n     * @param key API密钥\n     * @return 签名是否正确\n     * @throws Exception\n     */\n    public static boolean isSignatureValid(String xmlStr, String key) throws Exception {\n        Map<String, String> data = xmlToMap(xmlStr);\n        if (!data.containsKey(WXPayConstants.FIELD_SIGN) ) {\n            return false;\n        }\n        String sign = data.get(WXPayConstants.FIELD_SIGN);\n        return generateSignature(data, key).equals(sign);\n    }\n\n    /**\n     * 判断签名是否正确，必须包含sign字段，否则返回false。使用MD5签名。\n     *\n     * @param data Map类型数据\n     * @param key API密钥\n     * @return 签名是否正确\n     * @throws Exception\n     */\n    public static boolean isSignatureValid(Map<String, String> data, String key) throws Exception {\n        return isSignatureValid(data, key, SignType.MD5);\n    }\n\n    /**\n     * 判断签名是否正确，必须包含sign字段，否则返回false。\n     *\n     * @param data Map类型数据\n     * @param key API密钥\n     * @param signType 签名方式\n     * @return 签名是否正确\n     * @throws Exception\n     */\n    public static boolean isSignatureValid(Map<String, String> data, String key, SignType signType) throws Exception {\n        if (!data.containsKey(WXPayConstants.FIELD_SIGN) ) {\n            return false;\n        }\n        String sign = data.get(WXPayConstants.FIELD_SIGN);\n        return generateSignature(data, key, signType).equals(sign);\n    }\n\n    /**\n     * 生成签名\n     *\n     * @param data 待签名数据\n     * @param key API密钥\n     * @return 签名\n     */\n    public static String generateSignature(final Map<String, String> data, String key) throws Exception {\n        return generateSignature(data, key, SignType.MD5);\n    }\n\n    /**\n     * 生成签名. 注意，若含有sign_type字段，必须和signType参数保持一致。\n     *\n     * @param data 待签名数据\n     * @param key API密钥\n     * @param signType 签名方式\n     * @return 签名\n     */\n    public static String generateSignature(final Map<String, String> data, String key, SignType signType) throws Exception {\n        Set<String> keySet = data.keySet();\n        String[] keyArray = keySet.toArray(new String[keySet.size()]);\n        Arrays.sort(keyArray);\n        StringBuilder sb = new StringBuilder();\n        for (String k : keyArray) {\n            if (k.equals(WXPayConstants.FIELD_SIGN)) {\n                continue;\n            }\n            if (data.get(k).trim().length() > 0) // 参数值为空，则不参与签名\n                sb.append(k).append(\"=\").append(data.get(k).trim()).append(\"&\");\n        }\n        sb.append(\"key=\").append(key);\n        if (SignType.MD5.equals(signType)) {\n            return MD5(sb.toString()).toUpperCase();\n        }\n        else if (SignType.HMACSHA256.equals(signType)) {\n            return HMACSHA256(sb.toString(), key);\n        }\n        else {\n            throw new Exception(String.format(\"Invalid sign_type: %s\", signType));\n        }\n    }\n\n\n    /**\n     * 获取随机字符串 Nonce Str\n     *\n     * @return String 随机字符串\n     */\n    public static String generateNonceStr() {\n        return UUID.randomUUID().toString().replaceAll(\"-\", \"\").substring(0, 32);\n    }\n\n\n    /**\n     * 生成 MD5\n     *\n     * @param data 待处理数据\n     * @return MD5结果\n     */\n    public static String MD5(String data) throws Exception {\n        java.security.MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] array = md.digest(data.getBytes(\"UTF-8\"));\n        StringBuilder sb = new StringBuilder();\n        for (byte item : array) {\n            sb.append(Integer.toHexString((item & 0xFF) | 0x100).substring(1, 3));\n        }\n        return sb.toString().toUpperCase();\n    }\n\n    /**\n     * 生成 HMACSHA256\n     * @param data 待处理数据\n     * @param key 密钥\n     * @return 加密结果\n     * @throws Exception\n     */\n    public static String HMACSHA256(String data, String key) throws Exception {\n        Mac sha256_HMAC = Mac.getInstance(\"HmacSHA256\");\n        SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(\"UTF-8\"), \"HmacSHA256\");\n        sha256_HMAC.init(secret_key);\n        byte[] array = sha256_HMAC.doFinal(data.getBytes(\"UTF-8\"));\n        StringBuilder sb = new StringBuilder();\n        for (byte item : array) {\n            sb.append(Integer.toHexString((item & 0xFF) | 0x100).substring(1, 3));\n        }\n        return sb.toString().toUpperCase();\n    }\n}\n```\n\n\n参考于: \nhttp://mp.weixin.qq.com\n\nhttp://open.weixin.qq.com\n\nhttp://pay.weixin.qq.com\n\n\n","tags":["支付"],"categories":["server"]},{"title":"接入支付宝支付接口","url":"/2018/01/10/backend/支付/接入支付宝支付接口/","content":"### 一: 应用场景\n1. 主要应用于一些交易平台商品订单支付，账户充值，线上收费这些有支付需求的交易\n\n2. 用户通过支付宝PC收银台完成支付，交易款项即时给到商户支付宝账户\n\n![logo](/images/server/支付/taobao.png)\n\n![logo](/images/server/支付/12306.png) \n\n<!--more-->\n\n### 二: 准备条件\n1. 一个公司, 不是公司的话是不能接入商户支付宝网关支付的, 当然支付宝是分个人用户和商户用户的, 如果是个人网站的话可以贴个自己收款二维码上去进行收款, 如果是正在运营的商户企业收取费用的话是要接入支付宝网关支付功能进行收费, 这样的话可以看起来bigger更高\n\n2. 企业或个体工商户，具有真实有效的营业执照，且支付宝账户名称需与营业执照主体一致\n\n3. 网站通过ICP备案，能正常访问，页面显示完整，有明确的运营内容与完整的商品信息。\n\n### 三：接入支付宝支付功能步骤\n\n#### 第一步：创建应用\n要在应用中使用支付宝开放产品的接口能力：\n\n1. 需要先去蚂蚁金服开放平台，在开发者中心创建登记您的应用，此时将获得应用唯一标识（APPID）\n2. 请在【功能信息】中点击【添加功能】，选择【电脑网站支付】\n3. 提交审核（需要上传公司营业执照,填写法人身份信息等等），等待审核通过，该应用正式可以使用\n\n> TIPS：电脑网站支付接口需签约后才能调用\n\n#### 第二步：配置密钥\n\n开发者调用接口前需要先生成RSA密钥，RSA密钥包含应用私钥(APP_PRIVATE_KEY)、应用公钥(APP_PUBLIC_KEY）。生成密钥后在开放平台管理中心进行密钥配置，配置完成后可以获取支付宝公钥(ALIPAY_PUBLIC_KEY)。\n\n\n**用途：**\n支付宝发送信息给商户系统时，使用支付宝私钥对数据进行加签，商户获取到支付宝加签的信息后使用支付宝公钥对数据进行验签，得到正确的数据。\n商户系统给支付宝发送信息时，使用商户自己的私钥对数据加签，支付宝获取到数据后使用商家上传的公钥进行验签。\n\n\n**加签步骤:**\n\n1.筛选\n\n获取所有请求参数，不包括字节类型参数，如文件、字节流，剔除sign与sign_type参数。\n\n2.排序\n\n将筛选的参数按照第一个字符的键值ASCII码递增排序（字母升序排序），如果遇到相同字符则按照第二个字符的键值ASCII码递增排序，以此类推。\n拼接\u000b将排序后的参数与其对应值，组合成“参数=参数值”的格式，并且把这些参数用&字符连接起来，此时生成的字符串为待签名字符串。商户将待签名字符串和商户私钥带入加签算法中得出sign。然后将sign值加入到请求参数中，发送给支付宝\n\n3.拼接\n\n将排序后的参数与其对应值，组合成“参数=参数值”的格式，并且把这些参数用&字符连接起来，此时生成的字符串为待签名字符串。\n\n4.加签\n\n商户将待签名字符串和商户私钥带入加签算法中得出sign。然后将sign值加入到请求参数中，发送给支付宝\n\n\n**验签步骤：**\n\n与加签步骤一致，只不过是延签是使用公钥算出sign值，两方算出的sign值都一致的话则延签成功\n\n#### 第三步：搭建和配置开发环境\n1. 需要到支付宝开发平台下载服务端SDK,打包即用, 十分方便\n\n2. 配置参数\n```java\nAlipayClient alipayClient = new DefaultAlipayClient(URL,APP_ID,APP_PRIVATE_KEY,FORMAT,CHARSET,ALIPAY_PUBLIC_KEY,SIGN_TYPE);\n\n// URL:支付宝网关（固定） https://openapi.alipay.com/gateway.do, 如果是沙箱环境的话: https://openapi.alipaydev.com/gateway.do\n// APP_ID:创建应用时获取, 支付宝提供\n// APP_PRIVATE_KEY: 应用私钥, 运用支付宝提供的工具进行生成\n// FORMAT: json（固定）\n// CHARSET: 编码格式\n// ALIPAY_PUBLIC_KEY: 支付宝公钥, 由支付宝提供\n// SIGN_TYPE： 加签类型，商户生成签名字符串所使用的签名算法类型，目前支持RSA2和RSA，推荐使用RSA2\n```\n> 配置完参数之后就可以调用支付宝的支付接口了, 十分方便, 阿里阿里 !!!\n3. 配置完参数之后先来看一下支付的调用流程：\n![logo](/images/server/支付/step.png) \n\n4. 接下来就是发起支付请求了\n```java\nimport com.alipay.api.*;\nimport com.alipay.api.request.*; \npublic void doPost(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws ServletException,IOException { \n//获得初始化的AlipayClient \nAlipayClient alipayClient = new DefaultAlipayClient(\"https://openapi.alipay.com/gateway.do\", APP_ID, APP_PRIVATE_KEY, FORMAT, CHARSET, ALIPAY_PUBLIC_KEY, SIGN_TYPE);\n//创建支付请求的对应request\nAlipayTradePagePayRequest alipayRequest = new AlipayTradePagePayRequest();\n//设置请求参数及回跳地址和通知地址\n alipayRequest.setBizContent(\n\"{\" + \" \\\"out_trade_no\\\":\\\"20150320010101001\\\",\n\" + \" \\\"total_amount\":88.88,\n\" + \" \\\"subject\\\":title\\\",\n\" + \" \\\"body\\\":\\\"Iphone6 16G\\\",\n\" + }\");\n//跳转地址就是支付完成之后，支付宝自动执行页面重定向,就是跳转到我们设置的页面\nalipayRequest.setReturnUrl(\"http://www.songshuiyang.site/return_url\"); \n//通知地址就是支付宝会根据API中商户传入的notify_url，通过POST请求的形式将支付结果作为参数通知到商户系统。\nalipayRequest.setNotifyUrl(\"http://www.songshuiyang.site/notify_url\");\nString form=\"\";\ntry { \n //调用SDK生成html表单\n  form = alipayClient.pageExecute(alipayRequest).getBody(); \n} catch (AlipayApiException e) { \n  e.printStackTrace(); \n} \n//直接将完整的表单html输出到页面\nhttpResponse.setContentType(\"text/html;charset=\" + CHARSET); httpResponse.getWriter().write(form); httpResponse.getWriter().flush(); httpResponse.getWriter().close(); \n} \n```\n\n**支付接口生成的html代码**\n```html\n<form name=\"punchout_form\" method=\"post\" action=\"https://openapi.alipay.com/gateway.do?charset=utf-8&method=alipay.trade.page.pay&sign=jsgXRru7b%2FHLO76SMPoj6lIuCnKJ9lkLo%2BTPIKfetqMOd8kyp2zYBZ456Dvf0eb4SyYgUrOjAgTkNW2AkgJh%2BbLJDu3eAtQVAUEEzFGy2Ix3uE3j3lPLHZDs1cF7g8vw7hwfmEqe8CE8OCJ%2B79J0Hp6YFOH8vnJEDUPvjla2AsCO0mhAsnYxm30rmqgDqJPfZLytOvRD5FF%2BoBd4UPH%2Budk7vCn9lEX%2BkEe7YBa3E7l6vWxXz%2BJDKGL9ZMHNtUzYUaid%2F%2BIugVLqtECybldd8YDZUFnz92Iq%2BOwIL09MzNtb6iC9AypfQxlTseFezDihBn%2Fey5itIovqntbLLdxt2g%3D%3D&return_url=http%3A%2F%2Fwww.songshuiyang.com%2Fbuyer2%2Fpayment%2Findex&notify_url=http%3A%2F%2Fwww.songshuiyang.com%2Fbuyer2%2Fpayment2%2Falipay_notify&version=1.0&app_id=123456789101554&sign_type=RSA2&timestamp=2018-01-01+14%3A27%3A50&alipay_sdk=alipay-sdk-java-dynamicVersionNo&format=json\">\n   <input type=\"hidden\" name=\"biz_content\" value=\"{&quot;out_trade_no&quot;:&quot;160b06765224a9aee66a6654541b947f&quot;,&quot;total_amount&quot;:&quot;0.01&quot;,&quot;subject&quot;:&quot;江西广而易科技有限公司  账户充值&quot;,&quot;body&quot;:&quot;充值金额: 0.01&quot;,&quot;product_code&quot;:&quot;FAST_INSTANT_TRADE_PAY&quot;}\">\n     <input type=\"submit\" value=\"立即支付\" style=\"display:none\" >\n</form>\n<script>document.forms[0].submit();</script>\n```\n\n**注意**\n1. action 链接后面的sign值就是签名字符串, 用于校验数据的来源还有数据有没有被修改\n2. biz_content 是业务参数\n3. html输出到页面后会跳转到支付的支付页面\n\n#### 第四步：扫码支付进行的步骤\n1.支付\n ![logo](/images/server/支付/pagePay.jpg) \n\n2.支付成功会自动跳转到商户页面(同步通知) \n\n> 就是前面设置的 alipayRequest.setReturnUrl(\"http://www.songshuiyang.site/return_url\");,这部是支付完成之后支付宝的处理程序进行了页面重定向, 不是支付宝主动触发的。\n ![logo](/images/server/支付/paysuccess.png) \n\n3.系统后台收到异步通知\n\n> 对于PC网站支付的交易，在用户支付完成之后，支付宝会根据API中商户传入的alipayRequest.setNotifyUrl(\"http://www.songshuiyang.site/notify_url\");，通过POST请求的形式将支付结果作为参数通知到商户系统，该方式的作用是页面跳转同步通知没有处理订单更新，需要通过异步通知的方式去通知系统后台更新流水\n\n4.进行异步通知处理\n\n> 程序执行完后必须打印输出“success”。如果商户反馈给支付宝的字符不是success这7个字符，支付宝服务器会不断重发通知，直到超过24小时22分钟。一般情况下，25小时以内完成8次通知（通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h）；\n\n处理代码:\n```java\n//将异步通知中收到的所有参数都存放到map中\nMap<String, String> paramsMap = ...;\n//调用SDK验证签名\nboolean signVerified = AlipaySignature.rsaCheckV1(paramsMap, ALIPAY_PUBLIC_KEY, CHARSET, SIGN_TYPE) \nif(signVerfied){ \n// TODO 验签成功后，按照支付结果异步通知中的描述，对支付结果中的业务内容进行二次校验\n1、商户需要验证该通知数据中的out_trade_no是否为商户系统中创建的订单号，\n2、判断total_amount是否确实为该订单的实际金额（即商户订单创建时的金额），\n3、校验通知中的seller_id（或者seller_email) 是否为out_trade_no这笔单据的对应的操作方\n4、验证app_id是否为该商户本身。\n// 二次校验成功，继续商户自身业务处理，处理完成之后返回success\n\n} else {\n // TODO 验签失败则记录异常日志，并在response中返回failure. \n} \n```\n\n**注意：** \n1.  这里延签公钥是支付宝公钥, 不是应用公钥, 如果是按照支付宝的示例代码的话很容易填成应用公钥, 导致延签失败\n\n5. 如果是异步通知处理失败\n> 当商户后台、网络、服务器等出现异常，商户系统最终未接收到支付异步通知；需要自己手动向支付宝发送查询请求，根据查询出来的结果确定该交易是否成功\n\n```java\nAlipayClient alipayClient = new DefaultAlipayClient(\"https://openapi.alipay.com/gateway.do\",\"app_id\",\"your private_key\",\"json\",\"GBK\",\"alipay_public_key\",\"RSA2\"); \n//创建查询请求的对应request\nAlipayTradeQueryRequest request = new AlipayTradeQueryRequest();\nrequest.setBizContent(\"{\" + \n\"\\\"out_trade_no\\\":\\\"20150320010101001\\\",\n\" + \"\\\"trade_no\\\":\\\"2014112611001004680073956707\\\"\" + \n\"}\"); \nAlipayTradeQueryResponse response = alipayClient.execute(request); \nif(response.isSuccess()){ \n//交易状态：WAIT_BUYER_PAY（交易创建，等待买家付款）、TRADE_CLOSED（未付款交易超时关闭，或支付完成后全额退款）、TRADE_SUCCESS（交易支付成功）、TRADE_FINISHED（交易结束，不可退款）\n    System.out.println(\"调用成功\"); \n} else {\n    System.out.println(\"调用失败\"); \n\n```\n\n**注意：** \n1.  这里延签公钥是支付宝公钥, 不是应用公钥, 如果是按照支付宝的示例代码的话很容易填成应用公钥, 导致签名失败\n\n#### 五：支付宝网关支付API\n|     接口英文名 | 接口中文    | \n    | --------   | -----:   | \n    | alipay.trade.page.pay       | 统一收单下单并支付页面接口 |\n    |  alipay.trade.refund        | 统一收单交易退款接口      |\n    | alipay.trade.fastpay.refund.query      | 统一收单交易退款查询接口 |\n    |  alipay.trade.query       | 统一收单线下交易查询接口     |\n    | alipay.trade.close       | 统一收单交易关闭接口 |\n    |  alipay.data.dataservice.bill.downloadurl.query       | 查询对账单下载地址      |\n\n#### 六： 使用沙箱环境进行测试\n\n> 蚂蚁沙箱环境(Beta)是协助开发者进行接口功能开发及主要功能联调的辅助环境。沙箱环境模拟了开放平台部分产品的主要功能和主要逻辑（当前沙箱支持产品请参考“沙箱支持产品列表”）。\u000b在开发者应用上线审核前，开发者可以根据自身需求，先在沙箱环境中了解、组合和调试各种开放接口，进行开发调通工作，从而帮助开发者在应用上线审核完成后，能更快速、更顺利的进行线上调试和验收工作。\n \n ![logo](/images/server/支付/sandbox.png)\n \n> 可以体验一把土豪的感觉, 不用在真实环境下使用一分钱测试联调大法了\n\n#### 七：总结\n\n1. 支付宝的支付接口进行了高度封装，可以拿过来直接使用，不必关心怎样签名&验签、HTTP接口请求这些处理\n\n2. 在进行数据传输通信的同时，需要校验传输数据的来源，数据有没有进行修改，防止恶意数据攻击\n\n \n#### 注:\n本文内容参考支付宝开放平台文档内容, 一切以官方文档为准, 链接地址: https://open.alipay.com/platform/home.htm","tags":["支付"],"categories":["server"]},{"title":"Ascii 160空格问题","url":"/2018/01/09/backend/Java/ASCII 160 空格/","content":"### 场景\n>获取从http传输过来的字符串的时候，碰到解析字符串不能分割字符串的情况\n```java\nString str = doc.get(0); // str = \"江西省 赣州市\"\nString [] area = str.spilt(\"\\\\s+\");\n```\n运行上面的代码的时候发现不能截取字符串, 初步怀疑是编码问题，然而经过验证发现并不是,然后就通过字符串截取成 char 字符发现，该char字符ASCII是160,\n马上查找资料发现是空格分两种编码格式: 1: 普通的空格,ASCII码为32  2:第二种是 网页上的 &nbsp 空格,ASCII为160, 才发现空格也是有多种情况\n\n解决方法:\n```java\n// 需要将ASCII为160的空格转成普通的空格\nstr = str.replaceAll(\"[\\\\s\\\\u00A0]+\", \" \");\n\n```\n\n","tags":["Java"],"categories":["server"]},{"title":"编程思想笔记","url":"/2018/01/09/backend/Java/Java编程思想/第二章-一切皆是对象/","content":"##### # 用引用操纵对象\n> 在Java的世界里，一切都被视为对象，尽管一切都看成是对象，但操纵的标识符实际上是对象的一个引用,可将这一\n                                                   情形想象成用遥控板（句柄）操纵电视机（对象）。只要握住这个遥控板，就相当于掌握了与电视机连接的通道。但一旦需要“换频道”或者“关小声音”，我们实际操纵的是遥控板（句柄），再由遥控板自己操纵电视机（对象）。如果要在房间里四处走走，并想保持对电视机的控制，那么手上拿着的是遥控板，而非电视机。\n```sql\n遥控器  -->   电视\n引用    -->   对象\n```\n\n##### # 高精度数字\n```sql\nBigInteger 支持任意精度的整数。也就是说，我们可精确表示任意大小的整数值，同时在运算过程中不会丢失任何信息。\nBigDecimal 支持任意精度的定点数字。例如，可用它进行精确的币值计算。\n\n对应于我们针对主类型执行的操作。也就是说，能对 int 或 float 做的事情，对 BigInteger 和 BigDecimal 一样可以做。只是必须使用方法调用，不能使用运算符。此外，由于牵涉更多，所以运算速度会慢一些。我们牺牲了速度，但换来了精度。\n```\n\n##### # 基本数据类型默认值\n\n##### 类文件的限制\n1. 每个文件只能有一个public类, 也可以没有public，如果有的话必须与文件名相同\n\n","tags":["Java"],"categories":["server"]},{"title":"Mysql 如何设置字段自动获取当前时间","url":"/2017/12/17/backend/数据库/Mysql 如何设置字段自动获取当前时间/","content":"应用场景：\n```sql\n1、在数据表中，要记录每条数据是什么时候创建的，不需要应用程序去特意记录，而由数据数据库获取当前时间自动记录创建时间；\n\n2、在数据库中，要记录每条数据是什么时候修改的，不需要应用程序去特意记录，而由数据数据库获取当前时间自动记录修改时间；\n```\n\n实现方式:\n```sql\n--修改CreateTime 设置默认时间 CURRENT_TIMESTAMP \nALTER TABLE `table_name`\nMODIFY COLUMN  `created_date` datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间' ;\n\n\n--修改 UpdateTime 设置 默认时间 CURRENT_TIMESTAMP   设置更新时间为 ON UPDATE CURRENT_TIMESTAMP \n\nALTER TABLE `table_name`\nMODIFY COLUMN `last_modified_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间' ;\n```\n\n转自：https://www.cnblogs.com/lhj588/p/4245719.html","tags":["db"],"categories":["server"]},{"title":"Druid Monitor","url":"/2017/12/11/backend/数据库/Druid Monitor/","content":"## Druid Monitor监控JavaSE和JavaWeb\n\n效果图:\n![logo](/images/server/数据库/druidMonitor.png) \n\nhttp://blog.csdn.net/binglovezi/article/details/50610269","tags":["druid"],"categories":["server"]},{"title":"Maven 41种骨架","url":"/2017/11/18/backend/Maven/maven 骨架/","content":"Maven 的41种骨架功能介绍\n ...>mvn archetype:generate\n```sql\n1: internal -> appfuse-basic-jsf (创建一个基于Hibernate，Spring和JSF的Web应用程序的原型) \n2: internal -> appfuse-basic-spring (创建一个基于Hibernate，Spring和Spring MVC的Web应用程序的原型) \n3: internal -> appfuse-basic-struts (创建一个基于Hibernate，Spring和Struts 2的Web应用程序的原型) \n4: internal -> appfuse-basic-tapestry (创建一个基于Hibernate, Spring 和 Tapestry 4的Web应用程序的原型) \n5: internal -> appfuse-core (创建一个基于 Hibernate and Spring 和 XFire的jar应用程序的原型) \n6: internal -> appfuse-modular-jsf (创建一个基于 Hibernate，Spring和JSF的模块化应用原型) \n7: internal -> appfuse-modular-spring (创建一个基于 Hibernate, Spring 和 Spring MVC 的模块化应用原型) \n8: internal -> appfuse-modular-struts (创建一个基于 Hibernate, Spring 和 Struts 2 的模块化应用原型) \n9: internal -> appfuse-modular-tapestry (创建一个基于 Hibernate, Spring 和 Tapestry 4 的模块化应用原型) \n10: internal -> maven-archetype-j2ee-simple (一个简单的J2EE的Java应用程序) \n11: internal -> maven-archetype-marmalade-mojo (一个Maven的 插件开发项目 using marmalade) \n12: internal -> maven-archetype-mojo (一个Maven的Java插件开发项目) \n13: internal -> maven-archetype-portlet (一个简单的portlet应用程序) \n14: internal -> maven-archetype-profiles () \n15: internal -> maven-archetype-quickstart () \n16: internal -> maven-archetype-site-simple (简单的网站生成项目) \n17: internal -> maven-archetype-site (更复杂的网站项目) \n18: internal -> maven-archetype-webapp (一个简单的Java Web应用程序) \n19: internal -> jini-service-archetype (Archetype for Jini service project creation) \n20: internal -> softeu-archetype-seam (JSF+Facelets+Seam Archetype) \n21: internal -> softeu-archetype-seam-simple (JSF+Facelets+Seam (无残留) 原型) \n22: internal -> softeu-archetype-jsf (JSF+Facelets 原型) \n23: internal -> jpa-maven-archetype (JPA 应用程序) \n24: internal -> spring-osgi-bundle-archetype (Spring-OSGi 原型) \n25: internal -> confluence-plugin-archetype (Atlassian 聚合插件原型) \n26: internal -> jira-plugin-archetype (Atlassian JIRA 插件原型) \n27: internal -> maven-archetype-har (Hibernate 存档) \n28: internal -> maven-archetype-sar (JBoss 服务存档) \n29: internal -> wicket-archetype-quickstart (一个简单的Apache Wicket的项目) \n30: internal -> scala-archetype-simple (一个简单的scala的项目) \n31: internal -> lift-archetype-blank (一个 blank/empty liftweb 项目) \n32: internal -> lift-archetype-basic (基本（liftweb）项目) \n33: internal -> cocoon-22-archetype-block-plain ([http://cocoapacorg2/maven-plugins/]) \n34: internal -> cocoon-22-archetype-block ([http://cocoapacorg2/maven-plugins/]) \n35: internal -> cocoon-22-archetype-webapp ([http://cocoapacorg2/maven-plugins/]) \n36: internal -> myfaces-archetype-helloworld (使用MyFaces的一个简单的原型) \n37: internal -> myfaces-archetype-helloworld-facelets (一个使用MyFaces和Facelets的简单原型) \n38: internal -> myfaces-archetype-trinidad (一个使用MyFaces和Trinidad的简单原型) \n39: internal -> myfaces-archetype-jsfcomponents (一种使用MyFaces创建定制JSF组件的简单的原型) \n40: internal -> gmaven-archetype-basic (Groovy的基本原型) \n41: internal -> gmaven-archetype-mojo (Groovy mojo 原型)\n```\n原文: https://www.cnblogs.com/iusmile/archive/2012/11/14/2770118.html\n","tags":["maven"],"categories":["服务器"]},{"title":"Spring Aop","url":"/2017/11/18/backend/spring/Spring Aop/","content":"## Spring Aop\n\n### 一: 概念 \n\n#### 1. 什么是AOP\n \n在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。\n\n####  2. 为什么要用Aop\n利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。在不改变原有方法的基础添加一些功能 , 比如:日志记录，性能统计，安全控制，事务处理，异常处理等等。\n\n<!--more-->\n\n####  3. Aop 术语\n> 连接点(JoinPoint)\n\n 程序执行到某个特定位置 , Spring 仅支持方法级的连接点(方法执行前，方法完成后，抛出异常后)\n\n> 切点(Pointcut)\n\n 从连接点的基础上引出的概念，是指特定的连接点，一个类有好多方法,每个方法又有多个连接点，则需要切点来限定一个小范围的连接点\n \n> 通知、增强处理(Advice)\n\n   就是指你所需要添加的功能及这个功能什么时候(通知)实现 , 比如一个业务方法需要实现日志功能 , 那么就需要专门在一个地方定义好需要做什么，然后定义什么时候执行(方法执行前？，方法完成后？，抛出异常？。。。)\n  \n   Spring 切面可应用的 5 种通知类型：\n   1. Before——在方法调用之前调用通知\n   2. After——在方法完成之后调用通知，无论方法执行成功与否\n   3. After-returning——在方法执行成功之后调用通知\n   4. After-throwing——在方法抛出异常后进行通知\n   5. Around——通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为\n\n> 引入(introduction)\n \n  特殊的增强，为类添加一些属性和方法\n\n> 切面(Aspect)\n\n 切面由切点和增强组成 , 及包括横切逻辑的定义，也包括切点的定义, \n\n> 目标对象(Target)\n\n 增强逻辑的织入目标类 , 如果没有Aop,那么目标对象就要自己实现(日志记录，性能统计，安全控制，事务处理，异常处理)这些功能，那么一个方法就会变成很杂乱\n \n> 织入(Weaing)\n\n 将增强添加到目标对象的具体连接点上, Spring使用动态代理织入\n \n \n Aop有三种织入方式\n 1. 编译期织入\n 2. 类装载期织入\n 3. 动态代理织入: 在运行期间为目标类添加增强生成子类的方式\n### 二: Spring Aop 的应用\n\n> Spring Aop的使用一般通过俩种方式:第一种是通过注解的，第二种是通过xml配置\n\n#### 通过注解的方式实现Aop\n\n1. 第一步 Maven 导包\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <parent>\n        <groupId>ecut</groupId>\n        <artifactId>spring-parent</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>ecut</groupId>\n    <artifactId>spring-aop</artifactId>\n    <packaging>jar</packaging>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-aop</name>\n\n    <dependencies>\n        <!-- spring 核心 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context-support</artifactId>\n        </dependency>\n\n        <!-- spring aop -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aop</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aspects</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <!--test-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <!-- 日志 -->\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-log4j12</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n        </dependency>\n\n\n    </dependencies>\n    <build>\n        <finalName>spring-aop</finalName>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <configuration>\n                    <skip>true</skip>\n                </configuration>\n            </plugin>\n\n            <!--@Override is not allowed when implementing interface method-->\n            <!-- 编码和编译和JDK版本 -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>2.3.2</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>utf8</encoding>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n2. 第二步 编写一个基于 @AspectJ 的切面\n```java\npackage com.aop.learn.aspectj;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author songshuiyang\n * @title: @Aspect\n * @description:\n * @date 2017/11/15\n */\n@Component\n@Aspect // 通过该注解将该类标识为一个切面\npublic class PreGreetingAspect {\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    /**\n     * 前置增强, greetTo方法执行前触发此方法\n     *\n     */\n    @Before(\"execution(* greetTo(..))\") // 定义切点和增强类型（前置增强,可以带任何参数，和任意的返回值）\n    public void beforeGreeting() { // 增强的横切逻辑\n        logger.info(\"How are you Aspect 使用了前置增强\");\n    } \n}\n\n```\n3: 编写目标对象\n\n> Writer.java 接口\n\n```java\npackage com.aop.learn.service;\n\n/**\n * @author songshuiyang\n * @title:\n * @description:\n * @date 2017/11/15\n */\npublic interface Writer {\n\n    public void greetTo();\n\n}\n\n\n```\n> NativeWaiter.java 实现方法\n```java\npackage com.aop.learn.service.impl;\n\nimport com.aop.learn.annotation.NeedTest;\nimport com.aop.learn.service.Writer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author songshuiyang\n * @title:\n * @description:\n * @date 2017/11/15\n */\n@Service\npublic class NativeWaiter implements Writer {\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @Override\n    public void greetTo() {\n        logger.info(\"执行方法体: \");\n    }\n    \n}\n```\n\n4：Spring配置文件\n> applicationContext.xml\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"\n    http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n\thttp://www.springframework.org/schema/context/spring-context.xsd\n\thttp://www.springframework.org/schema/aop\n\thttp://www.springframework.org/schema/aop/spring-aop.xsd\n\">\n    <context:component-scan base-package=\"com.aop.learn\"/>\n\n    <!--基于@AspectJ切面的驱动器,自动为Spring容器中匹配@AspectJ切面的Bean创建代理，完成切面织入-->\n    <aop:aspectj-autoproxy/>\n    <!--<aop:aspectj-autoproxy proxy-target-class=\"true\"/> 表示使用CGLib动态代理技术织入增强-->\n\n\n</beans>\n```\n\n5: 测试类\n\n测试基类\n> BaseTest.java\n```java\npackage com.aop.test;\n\nimport org.junit.runner.RunWith;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n/**\n * @author songshuiyang\n * @title:\n * @description:\n * @date 2017/11/15 \n */\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath:/spring/applicationContext.xml\")\npublic class BaseTest extends AbstractJUnit4SpringContextTests {\n\n    public Logger logger = LoggerFactory.getLogger(this.getClass());\n}\n\n```\n\n测试类\n> AspectTest.java\n\n````java\npackage com.aop.test.service;\n\nimport com.aop.learn.service.AgentWriter;\nimport com.aop.learn.service.Seller;\nimport com.aop.learn.service.Writer;\nimport com.aop.test.BaseTest;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n/**\n * @author songshuiyang\n * @title: 基于spring配置使用@AspectJ切面\n * @description:\n * @date 2017/11/15 \n */\npublic class AspectTest extends BaseTest {\n\n \n    @Autowired\n    private Writer writer;\n    \n    /**\n     * 基于spring配置使用@AspectJ切面\n     */\n    @Test\n    public void test1() {\n        writer.greetTo();\n    }\n}\n\n````\n6: 效果图,完成 aop增强\n![logo](/images/server/springaop/aop.png)\n \n\n#### \n\n#### \n#### \n#### \n\n\n#### 通过xml schema的方式实现Aop\n\n> applicationContext-schema.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n\n\n\thttp://www.springframework.org/schema/aop\n\thttp://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n\n    <!-- aop:config 配置一个基于Schema的切面，aop:config 可以定义多个切面-->\n    <aop:config proxy-target-class=\"true\">\n        <!--aop:pointcut 配置命名切点,可以被其他增强引用-->\n        <aop:pointcut id=\"greetToPointcut\"\n                      expression=\"target(com.aop.learn.service.impl.NativeWaiter) and execution (* greetTo(..))\"/>\n        <aop:pointcut id=\"bindParmPointcut\"\n                      expression=\"target(com.aop.learn.service.impl.NativeWaiter) and execution (* greetTo(..)) and args(clientName)\"/>\n\n        <!-- aop:advisor 是切点和增强的复合体,仅包含一个切点和增强-->\n        <aop:advisor advice-ref=\"advisorMethods\"\n                     pointcut=\"target(com.aop.learn.service.impl.NativeWaiter) and execution (* serveTo(..))\"/>\n\n        <!--aop:aspect 元素标签定义切面,其内部可以定义多个增强-->\n        <aop:aspect ref=\"adviceMethods\">\n            <!-- aop:before前置增强 method 增强方法， pointcut 切点表达式-->\n            <aop:before method=\"preGreeting\"\n                        pointcut-ref=\"greetToPointcut\"/>\n            <!-- aop:before后置增强-->\n            <aop:after-returning method=\"afterGreeting\"\n                                 pointcut=\"target(com.aop.learn.service.impl.NativeWaiter) and execution (* name(..))\"\n                                 returning=\"retVal\"/>\n            <!-- 测试绑定连接点信息-->\n            <aop:after method=\"bindParmGreet\"\n                       pointcut-ref=\"bindParmPointcut\"/>\n        </aop:aspect>\n\n\n    </aop:config>\n\n    <!--增强方法所在的Bean-->\n    <bean id=\"adviceMethods\" class=\"com.aop.learn.schema.AdviceMethods\"/>\n    <bean id=\"nativeWaiter\" class=\"com.aop.learn.service.impl.NativeWaiter\"/>\n    <bean id=\"advisorMethods\" class=\"com.aop.learn.schema.AdvisorMethods\"/>\n\n</beans>\n```\n\n>AdviceMethods.java\n```java\npackage com.aop.learn.schema;\n\n/**\n * @author songshuiyang\n * @title: Schema 用作增强的方法\n * @description:\n * @date 2017/11/18 \n */\npublic class AdviceMethods {\n    /**\n     * 前置增强\n     */\n    public void preGreeting() {\n        System.out.println(\"-------------前置增强\");\n    }\n\n    /**\n     * 后置增强\n     *\n     * @param retVal\n     */\n    public void afterGreeting(String retVal) {\n        System.out.println(\"-------------后置增强,返回的参数\" + retVal);\n    }\n\n    /**\n     * 绑定连接点信息\n     *\n     * @param clientName\n     */\n    public void bindParmGreet(String clientName) {\n        System.out.println(\"-------------绑定连接点信息 的参数\" + clientName);\n\n    }\n\n}\n\n```\n\n>NativeWaiter.java\n```java\npackage com.aop.learn.service.impl;\n\nimport com.aop.learn.annotation.NeedTest;\nimport com.aop.learn.service.Writer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author songshuiyang\n * @title:\n * @description:\n * @date 2017/11/15\n */\n@Service\npublic class NativeWaiter implements Writer {\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @Override\n    public void greetTo(String clientName) {\n        logger.info(\"-------------greetTo \" + clientName);\n    }\n\n    @Override\n    public void greetTo(String clientName, Integer age) {\n        logger.info(\"-------------greetTo \" + clientName + \"  \" + age + \"岁\");\n    }\n\n    @Override\n    public void serveTo(String clientName) {\n        logger.info(\"-------------serveTo \" + clientName);\n    }\n\n    @Override\n    @NeedTest()\n    public void nestTo() {\n        logger.info(\"开始执行 nestTo() 函数\");\n    }\n\n    @Override\n    public String name() {\n        return \"宋水阳\";\n    }\n\n    @Override\n    public void throwExcetion() {\n        throw new IllegalArgumentException(\"抛出异常了\");\n    }\n}\n\n```\n\n>AdvisorMethods.java\n```java\npackage com.aop.learn.schema;\n\nimport org.springframework.aop.MethodBeforeAdvice;\n\nimport java.lang.reflect.Method;\n\n/**\n * @author songshuiyang\n * @title: aop:advisor 是切点和增强的复合体,仅包含一个切点和增强\n * @description:\n * @date 2017/11/18\n */\npublic class AdvisorMethods implements MethodBeforeAdvice {\n\n    @Override\n    public void before(Method method, Object[] args, Object taget) throws Throwable {\n        System.out.println(\"--------------执行aop:advisor增强----------------\");\n        System.out.println(\"获取的参数\" + args[0]);\n    }\n}\n\n```\n\n","tags":["Spring"],"categories":["服务器"]},{"title":"myBatis笔记","url":"/2017/11/14/backend/mybatis/mybatis笔记/","content":"### mybatis foreach标签\n> foreach 标签中 item属性名如果和其他参数中同名(如以下代码:item=\"id\" 和 if test=\"id != null\" 同名),即使没有传入id参数,SQL也会执行 AND id = #{id}\n#### mapper文件:\n```xml\n    <select id=\"findPageList\" parameterType=\"map\" resultType=\"user\">\n        SELECT *\n        FROM user\n        <where>\n            <if test=\"IN_id != null\">\n                id IN\n                <foreach collection=\"IN_id\" index=\"index\" item=\"id\" open=\"(\" separator=\",\" close=\")\">\n                    #{id}\n                </foreach>\n            </if>\n            <if test=\"id != null\">\n              AND id = #{id}\n            </if>\n        </where>\n    </select>\n```\n#### dao层\n```java\n    List<User> findPageList(Map<String, Object> map);\n```\n#### 测试方法\n```xml\n    @Test\n    public void test2() {\n        Map<String, Object> map = new HashMap<String, Object>();\n        List<Integer> idList = new ArrayList<Integer>();\n        idList.add(1);\n        idList.add(4);\n        idList.add(5);\n        map.put(\"IN_id\", idList);\n        userMapper.findPageList(map);\n    }\n```\n#### 结果\n````java\n==>  Preparing: SELECT * FROM user WHERE id IN ( ? , ? , ? ) AND id = ? \n==> Parameters: 1(Integer), 4(Integer), 5(Integer), 5(Integer)\n<==      Total: 1\n````","tags":["Spring"],"categories":["服务器"]},{"title":"Spring Aop execution","url":"/2017/11/07/backend/spring/Spring Aop execution/","content":"> execution() 是最常见的切点函数,语法形式为\n```java\nexcution(<修饰符模式> ? <返回类型模式> <方法名模式>(<参数模式>) <异常模式>?) \n```\n<!--more-->\n> 有代码有真相:\n```java\npackage com.aop.learn.aspectj;\n\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author songshuiyang\n * @title: execution() 实例\n * @description:\n * @date 2017/11/15 23:05\n */\n@Aspect\n@Component\npublic class ExecutionAspect {\n\n    /**\n     * 匹配所有目标类的public方法\n     */\n    @Before(\"execution(public * *(..))\")\n\n    /**\n     * 匹配所有以To为后缀的方法\n     */\n    @Before(\"execution(* *To(..))\")\n\n    /**\n     * 匹配Waiter接口中的所有方法\n     */\n    @Before(\"execution(* com.aop.learn.service.Writer.*(..))\")\n \n    /**\n     * 匹配Waiter接口中及其实现类的方法\n     */\n    @Before(\"execution(* com.aop.learn.service.Writer+.*(..))\")\n  \n    /**\n     * 匹配 com.aop.learn.service 包下所有类的所有方法\n     */\n    @Before(\"execution(* com.aop.learn.service.*(..))\")\n \n    /**\n     * 匹配 com.aop.learn.service 包,子孙包下所有类的所有方法\n     */\n    @Before(\"execution(* com.aop.learn.service..*(..))\")\n  \n    /**\n     * 匹配 包名前缀为com的任何包下类名后缀为ive的方法,方法必须以Smart为前缀\n     */\n    @Before(\"execution(* com..*.*ive.Smart*(..))\")\n\n    /**\n     * 匹配 save(String name,int age) 函数\n     */\n    @Before(\"execution(* save(String,int))\")\n \n    /**\n     * 匹配 save(String name,*) 函数 第二个参数为任意类型\n     */\n    @Before(\"execution(* save(String,*))\")\n   \n    /**\n     * 匹配 save(String name,..) 函数 除第一个参数固定外,接受后面有任意个入参且入参类型不限\n     */\n    @Before(\"execution(* save(String,..))\")\n   \n    /**\n     * 匹配 save(String+) 函数  String+ 表示入参类型是String的子类\n     */\n    @Before(\"execution(* save(String+))\")\n   \n    /**\n     * 最详细的切入点表达式  具体到包、类名、方法名、方法返回值、参数个数及类型类型\n     */\n    @Before(\"execution(public void com.bwlu.aop.MathCalculator.add(int, int))\")\n      \n    /**\n     * 最模糊的切入点表达式\n     */\n    @Before(\"execution (* *.*(..))\")\n    \n    /**\n     * MathCalculator中的任意方法,任意参数列表\n     */\n    @Before(\"execution(public void com.bwlu.aop.MathCalculator.*(..))\")\n    \n    /**\n     * MathCalculator中的任意方法,任意参数列表，任意返回值\n     */\n    @Before(\"execution(public * com.bwlu.aop.MathCalculator.*(..))\")\n    \n    /** \n     * MathCalculator中的任意方法,任意参数列表，任意返回值，任意访问修饰符\n     */\n    @Before(\"execution( * com.bwlu.aop.MathCalculator.*(..))\")\n```","tags":["Spring"],"categories":["服务器"]},{"title":"Spring Task","url":"/2017/11/07/backend/spring/Spring Task/","content":"## Spring Task\n>spring task作为定时任务的处理,是Spring自带的一个设定时间自动任务调度,提供了两种方式进行配置，一种是注解的方式，而另外一种就是XML配置方式了。\n\n<!--more-->\n### 基于XML配置文件的方式\n>applicationContext.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:task=\"http://www.springframework.org/schema/task\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\thttp://www.springframework.org/schema/context\n\thttp://www.springframework.org/schema/context/spring-context.xsd\n    http://www.springframework.org/schema/task\n    http://www.springframework.org/schema/task/spring-task.xsd\">\n\n    <!--使用配置文件的方式,注册 xmlTaskJob bean中的job1方法,每隔一秒执行 -->\n    <task:scheduled-tasks>\n         <task:scheduled ref=\"xmlTaskJob\" method=\"job1\" cron=\"*/1 * * * * ?\"/>\n    </task:scheduled-tasks>\n\n    <context:component-scan base-package=\"com.learn.schedule.service\"/>\n</beans>\n\n```\n>XmlTaskJob.Java\n```java\npackage com.learn.schedule.service;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\n\n/**\n * @author songshuiyang\n * @title: 基于xml文件配置的定时任务\n * @description:\n * @date 2017/11/7 22:20\n */\n@Service\npublic class XmlTaskJob {\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    public void job1() {\n        logger.info(\"基于xml文件配置的定时任务，每隔一秒执行\");\n    }\n\n}\n```\n>Test.java\n````java\n/**\n * @author songshuiyang\n * @title:\n * @description:\n * @date 2017/11/7 22:45\n */\npublic class Test {\n    public static void main(String[] args) {\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:/spring/applicationContext.xml\");\n    }\n}\n````\n### 基于注解配置文件的方式更简单\n>applicationContext.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:task=\"http://www.springframework.org/schema/task\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\thttp://www.springframework.org/schema/context\n\thttp://www.springframework.org/schema/context/spring-context.xsd\n    http://www.springframework.org/schema/task\n    http://www.springframework.org/schema/task/spring-task.xsd\">\n\n    <!-- 启动定时器 基于注解-->\n    <task:annotation-driven/>\n\n    <context:component-scan base-package=\"com.learn.schedule.service\"/>\n</beans>\n```\n>AnnotationTaskJob.Java\n```java\npackage com.learn.schedule.service;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author songshuiyang\n * @title: 基于注解配置的定时任务\n * @description:\n * @date 2017/11/7 22:42\n */\n@Component\npublic class AnnotationTaskJob {\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @Scheduled(cron = \"*/2 * * * * ?\") //每2秒执行一次\n    public void job() {\n        logger.info(\"基于注解配置的定时任务，每隔俩秒执行\");\n    }\n}\n```\n>效果:\n![logo](/images/server/spring-schedule.gif) ","tags":["Spring"],"categories":["服务器"]},{"title":"Spring","url":"/2017/10/24/backend/spring/学习笔记/","content":"### 轻量级(重量级)的框架 \n> 轻量级框架和重量级框架的区别是什么？很多人以为是以框架之间的耦合性强弱作为判断标准。其实不然，实际上是以启动程序需要的资源来决定。比如，EJB启动的时候，需要消耗大量的资源，内存，CPU等，所以是重量级。而Spring则不，所以是轻量级框架。就是看加载的资源 spring也不能说是轻量级的 EJB默认在应用启动的时候把所有资源和服务都加载进来而spring则是你定制服务 需要什么开什么 如果把spring的所有服务都用上的话 可以认为你是用了一个重量级的框架 实质还是看框架所需要的系统资源大小.\n\n### IOC 底层原理使用到的技术\n\n1. xml配置文件\n    `<bean id=\"user\" class=\"java.com.ecut.User\">`\n   \n2. dom4j解析xml配置文件\n\n3. 工厂设计模式\n\n4. 反射","tags":["Spring"],"categories":["服务器"]},{"title":"Git初始配置","url":"/2017/10/22/backend/编译构建部署版本工具/git/git初始配置/","content":"## 使用Git的前的初始配置\n\n### 1. 配置提交时的用户名与邮件名称(注:只是标识本次commit是谁提交的)\n1.1 通过命令的方式\n```sql\n$ git config --global user.name \"songshuiyang\"\n$ git config --global user.email songshiuyang@foxmail.com\n\n注: global 全局配置,在此电脑上的所有项目的git提交都会用这个用户名和邮件\n```\n1.2 通过修改配置文件的方式\n\n```sql\n文件路径: 用户目录/.gitconfig  文件\n把name email改成(新增)自己的配置即可\n[user]\n\tname = songshuiyang\n\temail = songshiuyang@foxmail.com\n```\n### 2. 配置 短命令\n2.1 通过命令的方式\n```sql\n$ git config --global alias.st status\n$ git config --global alias.ci commit\n$ git congig --global alias.co checkout\n$ git congig --global alias.br branch\n```\n2.2 通过修改配置文件的方式\n```sql\n[alias]\n    co = checkout\n    ci = commit\n    st = status\n    cm = commit -m\n    br = branch\n    bm = branch -m\n    bd = branch -D\n    cb = checkout -b\n    df = diff\n    ls = log --stat\n    lp = log -p\n    plo = pull origin\n    plode = pull origin develop\n    pho = push origin\n```\n### 3. 配置文件\n>Git的三个配置文件\n1. 版本库级别的配置文件,文件路径: `项目路径/.git/config`\n2. 全局配置文件, 文件路径: `用户目录/.gitconfig` \n3. 系统级配置文件,文件路径: `安装目录/etc目录下`\n\n优先级: 版本库级别的配置文件 >  全局配置文件  > 系统级配置文件\n\n### 4. 文件 `.git/index `\n\n实际上就是一个包括文件索引的目录树,像是一个虚拟的工作区,记录了文件名和文件的状态信息(时间戳和文件长度),文件的内容保存在`.git/objects目录下`,文件索引建立了文件和对象库中对象实体之间的对应\n\n工作区,版本区,暂存区原理图\n\n![git](/images/server/git/git-image.jpg)\n\n\n\n","tags":["git"],"categories":["server"]},{"title":"编译构建部署版本工具","url":"/2017/10/14/backend/编译构建部署版本工具/git/如何修改Git commit的信息/","content":"转自：\nhttp://www.cnblogs.com/shenh062326/p/git.html","tags":["git"],"categories":["server"]},{"title":"Hibernate Validator","url":"/2017/10/14/backend/Hibernate/Hibernate Validator/","content":"### Hibernate Validator\nHibernate Validator 是 Bean Validation 的参考实现 。Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有一些附加的 constraint。\n在日常开发中，Hibernate Validator经常用来验证bean的字段，基于注解，方便快捷高效。\n\n#### 1. Bean Validation 中内置的 constraint\n|注解            |          作用|\n| --------       | :----: |\n| @Valid         |   被注释的元素是一个对象，需要检查此对象的所有字段值  |\n|@Valid\t        |    被注释的元素是一个对象，需要检查此对象的所有字段值\n|@Null\t |   被注释的元素必须为 null\n|@NotNull\t |   被注释的元素必须不为 null\n|@AssertTrue\t |   被注释的元素必须为 true\n|@AssertFalse\t |   被注释的元素必须为 false\n|@Min(value)\t |   被注释的元素必须是一个数字，其值必须大于等于指定的最小值\n|@Max(value)\t |   被注释的元素必须是一个数字，其值必须小于等于指定的最大值\n|@DecimalMin(value) |   \t被注释的元素必须是一个数字，其值必须大于等于指定的最小值\n|@DecimalMax(value) |   \t被注释的元素必须是一个数字，其值必须小于等于指定的最大值\n|@Size(max, min)\t |   被注释的元素的大小必须在指定的范围内\n|@Digits (integer, fraction) |   \t被注释的元素必须是一个数字，其值必须在可接受的范围内\n|@Past\t |   被注释的元素必须是一个过去的日期\n|@Future\t |   被注释的元素必须是一个将来的日期\n|@Pattern(value)\t |   被注释的元素必须符合指定的正则表达式\n\n#### 2. Hibernate Validator 附加的 constraint\n| 注解            |           作用|\n|------------     |:-------:|\n|@Email\t被注释的元素必须是电子邮箱地址\n|@Length(min=, max=)\t| 被注释的字符串的大小必须在指定的范围内\n|@NotEmpty\t| 被注释的字符串的必须非空\n|@Range(min=, max=)\t| 被注释的元素必须在合适的范围内\n|@NotBlank\t| 被注释的字符串的必须非空\n|@URL(protocol=,host=,    port=, regexp=, flags=)\t|被注释的字符串必须是一个有效的url\n|@CreditCardNumber | 被注释的字符串必须通过Luhn校验算法， 银行卡，信用卡等号码一般都用Luhn 计算合法性\n|@ScriptAssert (lang=, script=, alias=)\t|要有Java Scripting API 即JSR 223 (\"Scripting for the JavaTM Platform\")的实现\n|@SafeHtml(whitelistType=, additionalTags=)|classpath中要有jsoup包\n#### 举个栗子\n```java\npublic class User {  \n      \n    @NotBlank  \n    private String name;  \n      \n    //年龄要大于18岁  \n    @Min(18)  \n    private int age;  \n  \n    @Email  \n    private String email;  \n      \n    //嵌套验证  \n    @Valid  \n    private Product products;  \n      \n    ... //省略getter，setter  \n}  \n  \npublic class Product {  \n      \n    @NotBlank  \n    private String name;  \n      \n    //价格在10元-50元之间  \n    @Range(min=10,max=50)  \n    private int price;  \n      \n    ... //省略getter，setter  \n} \n```\n转自:http://blog.csdn.net/u011851478/article/details/51842157\n","tags":["Hibernate"],"categories":["server"]},{"title":"编译构建部署版本工具","url":"/2017/10/14/backend/编译构建部署版本工具/grandle/","content":"### Grandle\n![gradle](/images/server/gradle.gif)\n\n#### 易百教程\nhttp://www.yiibai.com/gradle/\n\n#### Gradle学习系列之一——Gradle快速入门\n\nhttp://www.cnblogs.com/CloudTeng/p/3417762.html\n\n#### android grandle\n\nhttp://www.jianshu.com/p/9df3c3b6067a","tags":["java"],"categories":["server"]},{"title":"github","url":"/2017/10/08/technology/github/","content":"### watch、star、fork 的使用\n\n#### watch\n>对于别人的项目，默认自己都处于 Not watching 的状态，当你选择 Watching，表示你以后会关注这个项目的所有动态，这个项目以后只要发生变动，如被别人提交了 pull request、被别人发起了issue等等情况，你都会在自己的个人通知中心，收到一条通知消息，如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。\n\n#### star\n\n>当你点击 star，表示你喜欢这个项目或者通俗点，可以把他理解成朋友圈的点赞吧，表示对这个项目的支持\n\n#### fork\n>当选择 fork，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件，如果后续原项目文件发生改变，你必须通过其他的方式去同步（注意）。","tags":["web"],"categories":["技术"]},{"title":"计算属性","url":"/2017/10/05/frontend/计算属性/","content":"计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n\n这也同样意味着下面的计算属性将不再更新，因为 Date.now() 不是响应式依赖：\n```html\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\n```javascript\ncomputed: {\n  now: function () {\n    return Date.now()\n  }\n}\n```\n\n\n","tags":["vue"],"categories":["client"]},{"title":"v-model v-bind","url":"/2017/10/05/frontend/v-model和v-bind的区别/","content":"Mustache (双大括号写法)不能在 HTML 属性中使用，应使用 v-bind 指令：\n```aidl\n<div v-bind:id=\"dynamicId\"></div>\n```\n\n这对布尔值的属性也有效 —— 如果条件被求值为 false 的话该属性会被移除：\n```aidl\n<button v-bind:disabled=\"someDynamicCondition\">Button</button>\n```\n1. v-bind动态绑定指令，默认情况下标签自带属性的值是固定的，在为了能够动态的给这些属性添加值，可以使用v-bind:你要动态变化的值=\"表达式\"\n\n2. v-bind用于绑定属性和数据 ，其缩写为“ : ” 也就是v-bind:id  === :id  \n\n3. v-model用在表单控件上的，用于实现双向数据绑定，所以如果你用在除了表单控件以外的标签是没有任何效果的。\n\n> v-bind\n```aidl\n<!-- 绑定一个属性 -->\n<img v-bind:src=\"imageSrc\">\n<!-- 缩写 -->\n<img :src=\"imageSrc\">\n<!-- 内联字符串拼接 -->\n<img :src=\"'/path/to/images/' + fileName\">\n<!-- class 绑定 -->\n<div :class=\"{ red: isRed }\"></div>\n<div :class=\"[classA, classB]\"></div>\n<div :class=\"[classA, { classB: isB, classC: isC }]\">\n<!-- style 绑定 -->\n<div :style=\"{ fontSize: size + 'px' }\"></div>\n<div :style=\"[styleObjectA, styleObjectB]\"></div>\n<!-- 绑定一个有属性的对象 -->\n<div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n<!-- 通过 prop 修饰符绑定 DOM 属性 -->\n<div v-bind:text-content.prop=\"text\"></div>\n<!-- prop 绑定。“prop”必须在 my-component 中声明。-->\n<my-component :prop=\"someThing\"></my-component>\n<!-- 通过 $props 将父组件的 props 一起传给子组件 -->\n<child-component v-bind=\"$props\"></child-component>\n<!-- XLink -->\n<svg><a :xlink:special=\"foo\"></a></svg>\n```","tags":["vue"],"categories":["client"]},{"title":"Vue.js","url":"/2017/10/03/frontend/Vue/","content":"### 前缀 $，实例属性与方法\n这些只是Vue的命名规则，为了缺分普通变量属性，避免我们自己声明或者添加自定义属性导致覆\n### 生命周期\nbeforecreated：el 和 data 并未初始化 \n\ncreated:完成了 data 数据的初始化，el没有\n\nbeforeMount：完成了 el 和 data 初始化 \n\nmounted ：完成挂载\n\n<!--more-->\n\n生命周期\n\n![lifecyc](/images/client/lifecycle.jpg)\n\n生命周期钩子\n\n![life](/images/client/vue Lifecycle hooks.png)\n\n钩子函数\n\n钩子函数就是指再所有函数执行前，我先执行了的函数，即 钩住 我感兴趣的函数，只要它执行，我就先执行,这个解释666\n\n### 双向绑定\n\nv-model 指令，它能轻松实现表单输入和应用状态之间的双向绑定。\n\n在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时，Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。\n\n### 数据\n \n如果你知道你会在晚些时候需要一个属性，但是一开始它为空或不存在，那么你仅需要设置一些初始值。比如：\n\n```json\ndata: {\n  newTodoText: '',\n  visitCount: 0,\n  hideCompletedTodos: false,\n  todos: [],\n  error: null\n}\n```\n### 一个对象的 v-for\n\n```html\n<div v-for=\"(value, key, index) in object\">\n  {{ index }}. {{ key }}: {{ value }}\n</div>\n```\n```angularjs\nnew Vue({\n  el: '#v-for-object',\n  data: {\n    object: {\n      firstName: 'John',\n      lastName: 'Doe',\n      age: 30\n    }\n  }\n})\n```\n索引 key value\n\n````html\n<div v-for=\"(value, key, index) in object\">\n  {{ index }}. {{ key }}: {{ value }}\n</div>\n````\n\n```html\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联 -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身 (比如不是子元素) 触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n```\n\n### vue模板只能有一个根对象\n```sql\n<template>\n  <h2>底部</h2>\n  <span v-text=\"msgFromFather\"></span>\n</template>\n```\n报错\n```sql\nComponent template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.\n```\n原来vue模板只能有一个根对象\n所以你想要出现正常的效果，你的用一个div来或是别的标签来包裹全部的元素\n```html\n<template>\n   <div>\n\t <h2>底部</h2>\n\t <span v-text=\"msgFromFather\"></span>\n   </div>\n</template>\n```\n\n\n\n\n\n","tags":["vue"],"categories":["client"]},{"title":"其他插件","url":"/2017/10/01/technology/其他插件/","tags":["web"],"categories":["技术"]},{"title":"嵌入网易云插件","url":"/2017/10/01/essay/网易云/","content":"\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=355 height=86 src=\"//music.163.com/outchain/player?type=2&id=28411368&auto=1&height=66\"></iframe>\n\n\n\n\n","tags":["web"],"categories":["随笔"]},{"title":"增加畅言功能","url":"/2017/10/01/technology/增加畅言功能/","content":"## 畅言- 专业的社会化评论系统\n>网址:https://changyan.kuaizhan.com/\n\n添加功能:\n1. 根据上面的网址注册\n2. 复制 畅言秘钥(SourceID)\n3. 复制以下代码，并粘贴到您网页源代码的```<body>与</body>```之间想要出现畅言评论框的位置。如果您的网站使用了模板，请将代码粘贴到模板代码中。\n```aidl\n<div id=\"SOHUCS\" sid=\"请将此处替换为配置SourceID的语句\"></div>\n<script charset=\"utf-8\" type=\"text/javascript\" src=\"https://changyan.sohu.com/upload/changyan.js\" ></script>\n<script type=\"text/javascript\">\nwindow.changyan.api.config({\nappid: 'cytf5fPKF',\nconf: 'prod_ee3a22e2c13174e193691fbc93e3cbc8'\n});\n</script>\n```\n效果:\n![view](/images/畅言.png)\n\n网站需要备案,不然只有15天的试用期:\n\nICP备案： 只要网站在国内不管网站大小都需要在工信部网站在线申请备案号，但提供的审核资料可能就是不真实的，因为工信部不会去实际的核实。\n工信部要求的仅仅是有备案号即视为合法网站","tags":["web"],"categories":["技术"]},{"title":"nodeJs","url":"/2017/10/01/frontend/nodeJs/","content":"# Node.js\nNode.js 让 JavaScript 编写服务器端应用程序成为可能。它建立在 JavaScript V8（C++ 编写的） 运行时之上，所以它很快。最初，它旨在为应用程序提供服务器环境，但是开发人员开始利用它来创建工具，帮助他们本地的任务自动化。此后，一个全新基于 Node 工具（如 Grunt 和 Gulp）的生态系统，使得前端开发改头换面。\n\n要使用 Node.js 中的这些工具（或包），我们需要一种有效的方式来安装和管理它们。这就要用到node 包管理器： npm 了。它能够安装你想要的包，而且提供一个强大接口来使用它们。在使用 npm 之前，首先得在系统上安装 Node.js。\n\n## NPM（node package manager）node包管理器\n\n>将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。\n\n### package.json包描述信息\n\n如果我们的项目依赖了很多package，一个一个地安装那将是个体力活。我们可以将项目依赖的包都在package.json这个文件里声明，然后一行命令搞定\n\n```\nnpm install\n```\n\n### 安装方式\n\n本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。\n\n全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。'\n\n### devDependencies和dependencies的区别\n使用npm install 安装模块或插件的时候，有两种命令把他们写入到 package.json 文件里面去，比如：\n\n--save-dev\n\n--save\n\n但是当安装新包的时候如何让它保持最新呢？我们可以使用 –save 标识。\n\n在 package.json 文件里面提现出来的区别就是，使用 --save-dev 安装的 插件，被写入到 devDependencies 对象里面去，而使用 --save 安装的插件，责被写入到 dependencies 对象里面去。\n\n那 package.json 文件里面的 devDependencies  和 dependencies 对象有什么区别呢？\n\ndevDependencies  里面的插件只用于开发环境，不用于生产环境，而 dependencies  是需要发布到生产环境的。","tags":["npm"],"categories":["client"]},{"title":"枚举类","url":"/2017/09/29/backend/Java/枚举类/","content":">枚举是用来构建常量数据结构的模板，这个模板可扩展。枚举的使用增强了程序的健壮性\n## 1. 常量\n```aidl\npublic enum Color {\n     \n     RED, GREEN, BLANK, YELLOW \n \n}\n```\n\n## 2. switch \n```\npublic class B {\n \n    public static void main(String[] args) {\n \n        showColor( Color.RED );\n \n    }\n \n    static void showColor(Color color){\n        switch ( color ) {\n        case BLANK:\n            System.out.println( color );\n            break;\n        case RED :\n            System.out.println( color );\n            break;\n        default:\n            System.out.println( color );\n            break;\n        }\n         \n    }\n}\n```\n\n## 3. 自定义函数\n```aidl\npublic enum Color {\n     \n     RED(\"红色\", 1), GREEN(\"绿色\", 2), BLANK(\"白色\", 3), YELLO(\"黄色\", 4);\n     \n     \n    private String name ;\n    private int index ;\n     \n    private Color( String name , int index ){\n        this.name = name ;\n        this.index = index ;\n    }\n     \n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getIndex() {\n        return index;\n    }\n    public void setIndex(int index) {\n        this.index = index;\n    }\n     \n``` \n\n","tags":["Java"],"categories":["server"]},{"title":"Spring Assert","url":"/2017/09/29/backend/spring/Assert 的学习/","content":"## Assert（当要判断一个方法传入的参数时，我们就可以使用断言。）\n>package org.springframework.util\n\n### 1. notNull(Object object) \n\n当 object 不为 null 时抛出异常，notNull(Object object, String message) 方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null；\n\n### 2. isTrue(boolean expression) / isTrue(boolean expression, String message) \n\n当 expression 不为 true 抛出异常；\n\n### 3. notEmpty(Collection collection) / notEmpty(Collection collection, String message) \n\n当集合未包含元素时抛出异常。\n\nnotEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断；\n\n### 4. hasLength(String text) / hasLength(String text, String message)  \n\n当 text 为 null 或长度为 0 时抛出异常；\n\n### 5. hasText(String text) / hasText(String text, String message)  \n\ntext 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常；\n\n### 6. isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message)  \n\n如果 obj 不能被正确造型为 clazz 指定的类将抛出异常；\n\n### 7. isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message)  \n\nsubType 必须可以按类型匹配于 superType，否则将抛出异常；","tags":["Spring"],"categories":["服务器"]},{"title":"Hibernate 问题记录","url":"/2017/09/24/backend/Hibernate/hibernate问题集合/","content":"### org.hibernate.MappingException: Unknown entity常见问题\n\n1. 可能原因一\n\n 检查实体类是否导入的是 javax.persistence 下的包\n \n2. 可能原因二\n\n 没有在cfg文件中加入 *.hbm.xml造成的\n \n3. hibernate版本问题,一代版本一代神\n\n  4.5 版本\n  ```\n  ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(conf.getProperties()).build();\n  ```\n  5.2 版本\n  ```\n  ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(conf.getProperties()).configure().build();\n  ```\n  \n  ","tags":["Hibernate"],"categories":["server"]},{"title":"Hibernate 例子","url":"/2017/09/23/backend/Hibernate/Hibernate/","content":"## 概述:\n>面向Java环境的对象/关系数据库映射工具,用于将面向对象模型表示的对象映射到基于SQL的关系模型的数据结构中,消除那些针对特定数据库厂商的SQL代码,并把结果集从表格式的形式转换成值对象的形式\n\n<!--more-->\n## Hibernate的数据库操作\n### 直接采用了POJO(普通的传统的Java对象)作为持久化类\n```$xslt\npackage com.hibernate.entity;\n\nimport javax.persistence.*;\n\n/**\n * @author songshuiyang\n * @title:\n * @description:\n * @date 2017/9/23 23:41\n */\n@Entity /*标明持久化类*/\n@Table(name = \"user\")\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY) // 主键生成策略\n    private String id;\n\n    private String name;\n\n    private int sex;\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getSex() {\n        return sex;\n    }\n\n    public void setSex(int sex) {\n        this.sex = sex;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id='\" + id + '\\'' +\n                \", name='\" + name + '\\'' +\n                \", sex=\" + sex +\n                '}';\n    }\n}\n\n```\nHibernate基本上是使用了JPA的标准注解(javax.persistence)\n>JPA\n 1. JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。\nSun引入新的JPA ORM规范出于两个原因：其一，简化现有Java EE和Java SE应用开发工作；其二，Sun希望整合ORM技术，实现天下归一。\n\n2. JPA是一种规范，而Hibernate是它的一种实现。除了Hibernate，还有EclipseLink(曾经的toplink)，OpenJPA等可供选择，所以使用Jpa的一个好处是，可以更换实现而不必改动太多代码。\n\n###  配置文件 (#.properties , XML配置文件的形式)\n```aidl\n<?xml version=\"1.0\" encoding=\"GBK\"?>\n<!DOCTYPE hibernate-configuration PUBLIC\n        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\n<hibernate-configuration>\n  <session-factory>\n    <!-- 指定连接数据库所用的驱动 -->\n    <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\n    <!-- 指定连接数据库的url，其中hibernate是本应用连接的数据库名 -->\n    <property name=\"connection.url\">jdbc:mysql://localhost/ecut</property>\n    <!-- 指定连接数据库的用户名 -->\n    <property name=\"connection.username\">root</property>\n    <!-- 指定连接数据库的密码 -->\n    <property name=\"connection.password\">root</property>\n    <!-- 指定连接池里最大连接数 -->\n    <property name=\"hibernate.c3p0.max_size\">20</property>\n    <!-- 指定连接池里最小连接数 -->\n    <property name=\"hibernate.c3p0.min_size\">1</property>\n    <!-- 指定连接池里连接的超时时长 -->\n    <property name=\"hibernate.c3p0.timeout\">5000</property>\n    <!-- 指定连接池里最大缓存多少个Statement对象 -->\n    <property name=\"hibernate.c3p0.max_statements\">100</property>\n    <property name=\"hibernate.c3p0.idle_test_period\">3000</property>\n    <property name=\"hibernate.c3p0.acquire_increment\">2</property>\n    <property name=\"hibernate.c3p0.validate\">true</property>\n    <!-- 指定数据库方言 -->\n    <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\n    <!-- 根据需要自动创建数据表 -->\n    <property name=\"hbm2ddl.auto\">update</property><!--①-->\n    <!-- 显示Hibernate持久化操作所生成的SQL -->\n    <property name=\"show_sql\">true</property>\n    <!-- 将SQL脚本进行格式化后再输出 -->\n    <property name=\"hibernate.format_sql\">true</property>\n\n    <mapping class=\"com.hibernate.entity.User\"/>\n\n  </session-factory>\n</hibernate-configuration>\n```\n\n###  测试方法\n```aidl\npublic class UserManagerTest {\n    @Test\n    public void test1(){\n        // 实例化Configuration，\n        Configuration conf = new Configuration().configure();\n        ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(conf.getProperties()).configure().build();\n        // 以Configuration实例创建SessionFactory实例\n        SessionFactory sf = conf.buildSessionFactory(serviceRegistry);\n        // 创建Session\n        Session sess = sf.openSession();\n        // 开始事务\n        Transaction tx = sess.beginTransaction();\n        // 创建消息对象\n        User user = new User();\n        // 设置消息标题和消息内容\n       user.setName(\"hibernate\");\n       user.setSex(12);\n       sess.save(user);\n        // 提交事务\n        tx.commit();\n        // 关闭Session\n        sess.close();\n        sf.close();\n\n    }\n}\n```\n\n","tags":["Hibernate"],"categories":["server"]},{"title":"Hibernate笔记","url":"/2017/09/23/backend/Hibernate/Hibernate笔记/","content":"## hibernate.properties \n\n> 使用 hibernate.properties 文件配置Hibernate 需要在代码里面手动添加持久化类,所以在实际开发中不使用hibernate.property 文件作为配置文件的原因\n","tags":["Hibernate"],"categories":["server"]},{"title":"Java位运算","url":"/2017/09/22/backend/Java/Java位运算/","content":"### 与运算符 &\nint a=129;\n\nint b=128;\n\na & b = 128\n\n解析:\n\n“a”的值是129，转换成二进制就是10000001，而“b”的值是128，转换成二进制就是10000000。根据与运算符的运算规律，只有两个位都是1，结果才是1，可以知道结果就是10000000，即128。\n\n### 或运算 |\nint a=129;\n\nint b=128;\n\na & b = 129\n\n解析:\n\na 的值是129，转换成二进制就是10000001，而b 的值是128，转换成二进制就是10000000，根据或运算符的运算规律，只有两个位有一个是1，结果才是1，可以知道结果就是10000001，即129。\n\n### 非运算符 ~\n\n如果位为0，结果是1，如果位为1，结果是0\n\n\n### 异或运算符 ^\n\n异或运算符是用符号“^”表示的，其运算规律是：\n\n两个操作数的位中，相同则结果为0，不同则结果为1。下面看一个简单的例子。\n\nint a=15;\n\nint b=2;\n\n\na^b a 与 b 异或的结果是：13\n\n分析上面的程序段：a 的值是15，转换成二进制为1111，而b 的值是2，转换成二进制为0010，根据异或的运算规律，可以得出其结果为1101 即13。\n\n","tags":["Java"],"categories":["server"]},{"title":"Java移位运算","url":"/2017/09/22/backend/Java/Java移位运算/","content":"\n ``` >>      :     右移运算符 ```\n \n res = 20 >> 2; \n\n20的二进制为 0001 0100，右移2位后为 0000 0101，则结果就为 res = 5;\n\nres = -20 >> 2;\n\n-20的二进制为其正数的补码加1，即 1110 1011，右移2位后为 1111 1100，结果为 res = -6;\n\n\n ``` <<      :     左移运算符 ```\n\n << 是与>>对应的左移运算符，表示将exp1向左移动exp2位，在低位补0。其实，向左移动n位，就相当于乘以2^n。\n \n``` >>>    :     无符号右移 ```\n \nres = 20 >>> 2; 的结果与 >> 相同；\n\nres = -20 >> 2;\n\n-20的二进制为 1110 1011，右移2位，此时高位补0，即 0011 1010，结果为 res = 58;\n\n也叫逻辑右移，即若该数为正，则高位补0，而若该数为负数，则右移后高位同样补0。","tags":["Java"],"categories":["server"]},{"title":"Java 遍历Map","url":"/2017/09/22/backend/Java/Java遍历Map/","content":"## Java中如何遍历Map对象的4种方法\n\n>既然java中的所有map都实现了Map接口，以下方法适用于任何map实现（HashMap, TreeMap, LinkedHashMap, Hashtable, 等等）\n\n### 方法一: 在for-each循环中使用entries来遍历\n>这是最常见的并且在大多数情况下也是最可取的遍历方式。在键值都需要时使用\n````java\nMap<Integer, Integer> map = new HashMap<Integer, Integer>();  \n  \nfor (Map.Entry<Integer, Integer> entry : map.entrySet()) {  \n  \n    System.out.println(\"Key = \" + entry.getKey() + \", Value = \" + entry.getValue());  \n  \n} \n````\n注意：for-each循环在java 5中被引入所以该方法只能应用于java 5或更高的版本中。如果你遍历的是一个空的map对象，for-each循环将抛出NullPointerException，因此在遍历前你总是应该检查空引用。\n\n### 方法二: 在for-each循环中遍历keys或values。\n>如果只需要map中的键或者值，你可以通过keySet或values来实现遍历，而不是用entrySet。\n```java\nMap<Integer, Integer> map = new HashMap<Integer, Integer>();  \n  \n//遍历map中的键  \n  \nfor (Integer key : map.keySet()) {  \n  \n    System.out.println(\"Key = \" + key);  \n  \n}  \n  \n//遍历map中的值  \n  \nfor (Integer value : map.values()) {  \n  \n    System.out.println(\"Value = \" + value);  \n  \n}  \n```\n该方法比entrySet遍历在性能上稍好（快了10%），而且代码更加干净。\n\n### 方法三: 使用Iterator遍历\n>使用泛型：\n```java\nMap<Integer, Integer> map = new HashMap<Integer, Integer>();  \n  \nIterator<Map.Entry<Integer, Integer>> entries = map.entrySet().iterator();  \n  \nwhile (entries.hasNext()) {  \n  \n    Map.Entry<Integer, Integer> entry = entries.next();  \n  \n    System.out.println(\"Key = \" + entry.getKey() + \", Value = \" + entry.getValue());  \n  \n}  \n```\n>不使用泛型:\n```java\nMap map = new HashMap();  \n  \nIterator entries = map.entrySet().iterator();  \n  \nwhile (entries.hasNext()) {  \n  \n    Map.Entry entry = (Map.Entry) entries.next();  \n  \n    Integer key = (Integer)entry.getKey();  \n  \n    Integer value = (Integer)entry.getValue();  \n  \n    System.out.println(\"Key = \" + key + \", Value = \" + value);  \n  \n}  \n```\n你也可以在keySet和values上应用同样的方法。\n\n该种方式看起来冗余却有其优点所在。首先，在老版本java中这是惟一遍历map的方式。另一个好处是，你可以在遍历时调用iterator.remove()来删除entries，另两个方法则不能。根据javadoc的说明，如果在for-each遍历中尝试使用此方法，结果是不可预测的。\n\n从性能方面看，该方法类同于for-each遍历（即方法二）的性能。\n\n### 方法四: 通过键找值遍历（效率低）\n>作为方法一的替代，这个代码看上去更加干净；但实际上它相当慢且无效率。因为从键取值是耗时的操作（与方法一相比，在不同的Map实现中该方法慢了20%~200%）。如果你安装了FindBugs，它会做出检查并警告你关于哪些是低效率的遍历。所以尽量避免使用。\n```java\nMap<Integer, Integer> map = new HashMap<Integer, Integer>();  \n  \nfor (Integer key : map.keySet()) {  \n  \n    Integer value = map.get(key);  \n  \n    System.out.println(\"Key = \" + key + \", Value = \" + value);  \n  \n}  \n```\n\n## 总结\n如果仅需要键(keys)或值(values)使用方法二。如果你使用的语言版本低于java 5，或是打算在遍历时删除entries，必须使用方法三。否则使用方法一(键值都要)。\n\n转自：http://blog.csdn.net/tjcyjd/article/details/11111401","tags":["Java"],"categories":["server"]},{"title":"Java基础","url":"/2017/09/21/backend/Java/Java基础/","content":">全局变量和static修饰的局部变量\n\n默认初始化为 0 。因为全局变量和static静态局部变量存储在静态数据区。在静态数据区，内存中所有的字节默认值都是 0x00。\n\n>Java中的switch-case语句\n\nswitch接受的参数类型有10种，分别是基本类型的byte,short,int,char，以及引用类型的String(只有JavaSE 7 和以后的版本 可以接受String类型参数),enum和byte,short,int,char的封装类Byte,Short,Integer,Character\ncase 后紧跟常量表达式，不能是变量。\n\n>Maps.newHashMap();\n\n Map<String, Object> result = new HashMap<String,Object>();\n \n \n 上面这种是java原生API写法\n 下面这种是google的guava.jar提供的写法，目的是为了简化代码。唯一的区别就是简化代码\n \n \n Map<String, Object> result = Maps.newHashMap();\n>泛型\n\n仅仅是java的一颗语法糖，它不会影响java虚拟机生成的汇编代码，在编译阶段，虚拟机就会把泛型的类型擦除，还原成没有泛型的代码，顶多编译速度稍微慢一些，执行速度是完全没有什么区别的。\n\n>重载的概念\n\n\n 方法名称相同，参数个数、次序、类型不同\n \n 因此重载对返回值没有要求，可以相同，也可以不同\n \n 但是如果参数的个数、类型、次序都相同，方法名也相同，仅返回值不同，则无法构成重载","tags":["Java"],"categories":["server"]},{"title":"常见的编码方式","url":"/2017/09/21/backend/相关技术/常见的编码方式/","content":"### 计算机为什么要编码\n在计算机中所有的数据都是以0,1来存储的,那字符是怎样在计算机存储的呢,美国的科学家把一个特定的数字对应一个特定的字母进行存储和传输，比如我需要存储字母a，那么我存入一个数字97(即在计算机中存入二进制(01100001)，这个过程叫做编码(encode)，而我们在读取数据的时候，当遇到97时，我们就让计算机显示字母a，这个过程叫做解码(decode)。\n### 编码发展历史简介\n\n<!--more-->\n\n#### 第一阶段ASCII\n规则:\n\n\n1. 所有的控制字符(比如CR回车、DEL删除等)编码在0-31范围以及127中。\n\n\n2. 把所有的标点符号，英文大小写全部放在32-126范围中。\n\n\n3. 防止以后出现需要补充的情况，把128-255位这么多位置留出来，应该足够用了吧！所以设置一个字节8位二进制，把这个标准叫American Standard Code for Information Interchange(美国标准信息交换代码，简写为ASCII)，标准制定结束。\n\n实现方式:\n\n第一位始终未0，后面7位表示0-127的范围，一个数字对应一个字母或者标点符号，亦或者控制符号，即所有的ASCII码的统一形式为0xxxx xxxx。\n\n#### 第二阶段 GB2312,GBK, BIG5 Latin1, ISO-8859-1, JIS, ANSI...\n\n>计算机技术到了欧洲，欧洲人发现怎么我们的那么多符号没有编进去啊！\n所以欧洲\"砖家\"坐到了一起，开始讨论。\n发现既然美国人把第一位流出来了，那么我们就用128-255的位置好了。\n\n规则:\n\n1. 128-159之间为控制字符，160-255位文字符号，其中包括了西欧语言、希腊语、泰语、阿拉伯语、希伯来语。\n\n\n2. 刚好把美国人给的空间全部用完，世界真美好，谢谢美利坚预留的每一个位置。\n\n\n3. 砖家们决定把他们的编码名称叫做Latin1，后面由于欧洲统一制定ISO标准，所以又有了一个ISO的名称，即ISO-8859-1。\n\n实现方式:\n\n\n\n1. 0-127的所有位置不动，那么可以兼容ASCII，二进制位0xxx xxxx\n\n\n2. 128-255位置全部用完，二进制位1xxx xxxx\n由于所有的位置全部用完，而欧元符号实在指定标准之后才出现的，所以在这个码表中连欧洲人自己的货币符号都没有办法放进去。\n\n>计算机技术当然也传到了亚洲大地，比如中国。\n中国砖家们坐在一起发现，美国人搞的这个东西真的有问题，预留才128-255的空间，可是我们的汉字个数远远超出了这个数目啊，怎么办？？\n后面聪明的中国砖家们发现，只能使用2个字节了，否则真的搞不定。\n由于必须和美国原来制定的ASCII不冲突，所以指定了如下规则\n\n规则:\n\n1. 如果一个字节中第一位为0，那么这就是一个ASCII字符。\n\n\n2. 如果一个字节中第一位为1，那么这个是汉字，认定需要2个字节才表示一个编码的文字。\n把这个码表叫GB2312\n这个码表中包含汉字6763个和非汉字图形字符682个。\n还有很多的空间没有用到，索性全部预留了吧。\n\n实现方式:\n\n\n1. 0xxxxxxx：表示为ASCII字符\n\n\n2. -1xxxxxxx 1xxxxxxx：表示为汉字\n\n后面再次添加更多的字符进去，再次命名为GB18030，兼容GBK。由于汉字很多，2个字节并不能完全包括进去，所以GB18030采用2\\4位混编的形式。\n\n当然计算机也传到了日本(JIS)、韩国、台湾(BIG5)等等地方，大家全部发挥自己的聪明才智，各自实现了自己的编码。这些编码都与ASCII兼容，但是相互之间不兼容。\n\n使用 2 个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码，又称为\"MBCS（Muilti-Bytes Charecter Set，多字节字符集）\"。在简体中文系统下，ANSI 编码代表 GB2312 编码，在日文操作系统下，ANSI 编码代表 JIS 编码，所以在中文 windows下要转码成gb2312,gbk只需要把文本保存为ANSI编码即可。 不同ANSI编码之间互不兼容\n\n#### 第三阶段\n>随着通讯越来越多，而老美发现在自己公司需要国际化的时候，自己原来埋的这个雷真的害了自己。\n于是乎，开始研讨把世界上几乎所有文字全部放在一个码表中，而这个包罗万象的码表就叫做Unicode，即万国码。\nUnicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。Unicode用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符，或者说有1114112个码位。码位就是可以分配给字符的数字。\n实际上，在软件制造商的协会（unicode.org）在做这个工作时，国际标准化组织（ISO）在做同样的事情，最后大家都意识到世界上并不需要两个不同的万国码，于是大家坐在一起合并研究的成果，最后的结果就是现在的Unicode。\n\n### 各个编码及其范围\n#### ASCII\n\n编码范围00-7F，其中00-1F、FF为控制字符。其它为英文字母、数字、标点符号。\n\n#### Latin1\n\n编码范围00-FF，其中00-7F同ASCII，80-9F为控制符、9F-FF为字母和标点符号.\n\n#### CP1252\n\n微软的企业标准，补充了一些符号和欧元符号，为Latin1的超集。\n\n#### GB2312\n\n编码范围为A1A1-F7FE(剔除xx7F)，共23940个码位。其中很多区间没有用到，而汉字使用的区间为B0A1-F7FE，其他为标点符号和特殊字符。\n除常用简体汉字字符外还包括希腊字母、日文平假名及片假名字母、俄语西里尔字母等字符，未收录繁体中文汉字和一些生僻字。\n对汉字进行了分区管理，其中第一个字节为区位码，包括下面区位。\n01-09区为特殊符号。\n16-55区为一级汉字，按拼音排序。\n56-87区为二级汉字，按部首/笔画排序。\n10-15区及88-94区则未有编码。\n第二个字节为位字节，01-94总计94个。\n为什么实际选择不是01-5E，而是选择A1-F7的位置呢？\n因为英文可见字符区间为20-7F，加上128(也就是最高位为1)后得到的取件即是A1-FE\n区位码使用了0xA1-0xF7(把01-87区的区号加上0xA0)，位字节使用了0xA1-0xFE(把01-94加上 0xA0)\n\n#### GBK\n\n编码范围为8140-FEFE,兼容GB2312，仍然有部分区间没有用到。\nGBK也支持希腊字母、日文假名字母、俄语字母等字符，但不支持韩语中的表音字符（非汉字字符）。GBK还收录了GB2312不包含的 汉字部首符号、竖排标点符号等字符。\nGBK对GB2312就是，你有的，我也有，你没得的，我还有！\n\n#### CP936\n\nCP936是微软指定的标准，属于企业标准，和GBK的有些许差别，绝大多数情况下可以把CP936当作GBK的别名。\n\n#### BIG5\n\nBig5是双字节编码，高字节编码范围是0x81-0xFE，低字节编码范围是0x40-0x7E和0xA1-0xFE。和GBK相比，少了低字节是0x80-0xA0的组合。0x8140-0xA0FE是保留区域，用于用户造字区。\nBig5收录的汉字只包括繁体汉字，不包括简体汉字，一些生僻的汉字也没有收录。\n\n#### CP950\n\n微软的企业标准，可以理解为是对 Big5的扩展。\n\n#### GB18030\n\n编码范围同GBK，补充了更多的字符，由于Unicode开始流行且GB18030补充的字符都比较生僻，所以实际使用上基本是GBK。\nGB18030编码是变长编码，有单字节、双字节和四字节三种方式。GB18030的单字节编码范围是0x00-0x7F，完全等同与ASCII；双字节编码的范围和GBK相同，高字节是0x81-0xFE，低字节的编 码范围是0x40-0x7E和0x80-FE；四字节编码中第一、三字节的编码范围是0x81-0xFE，二、四字节是0x30-0x39。\n\n#### Unicode\n\n中文的编码范围为4E00-9FCF，其中9FC4-9FCF之间的区间没有使用。\n一个蛋疼的问题就是这个区间全部都是文字，中文标点没有包含在其中，中文标点散落在各个位置。详细请看http://blog.chinaunix.net/uid-12348673-id-3335307.html。\n一些特殊的文字和中文部首以及一些特殊符号也不在此范围内，详细情况可以参考网址：http://www.cnblogs.com/sosoft/p/3456631.html\n\n#### Unicode的实现方式\n>Unicode只是进行了编码，也就是说只是一个码表，至于具体怎么实现，并没有规定。\n下面是Unicode的几种实现方法。\n##### Unicode UTF-8之间的关系\n简单来说：\nUnicode 是「字符集」\n\nUTF-8 是「编码规则」\n\n其中：\n\n字符集：为每一个「字符」分配一个唯一的 ID（学名为码位 / 码点 / Code Point）\n\n编码规则：将「码位」转换为字节序列的规则（编码/解码 可以理解为 加密/解密 的过程）\n\nUnicode定义了所有可以用来表示字符的数值集合（称之为Code Point）。UTF-8和UTF-16等UTF标准定义了这些数值和字符的映射关系。\n\n正如名字所示，在UTF－8中，字符是以8位序列来编码的，用一个或几个字节来表示一个字符。这种方式的最大好处，是UTF－8保留了ASCII字符的编码做为它的一部分，例如，在UTF－8和ASCII中，“A”的编码都是0x41. \nUTF－16和UTF－32分别是Unicode的16位和32位编码方式。考虑到最初的目的，通常说的Unicode就是指UTF-16。\n\n##### UTF-8 (UCS Transfer Format:Unicode转做某种格式) \n\nUTF-8以字节为单位对Unicode进行编码。\n\n从Unicode到UTF-8的编码方式如下：  \n\nUnicode编码(16进制)  ║ UTF-8 字节流(二进制)  \n\n000000 - 00007F   ║ 0xxxxxxx  \n\n000080 - 0007FF   ║ 110xxxxx 10xxxxxx  \n\n000800 - 00FFFF   ║ 1110xxxx 10xxxxxx 10xxxxxx  \n\n010000 - 10FFFF   ║ 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n特点:UTF-8的特点是对不同范围的字符使用不同长度的编码\n\n##### UTF-16\n\n在Unicode基本多文种平面定义的字符（无论是拉丁字母、汉字或其他文字或符号），一律使用2字节储存。而在辅助平面定义的字符，会以代理对（surrogate pair）的形式，以两个2字节的值来储存。\nUTF-16比起UTF-8，好处在于大部分字符都以固定长度的字节 (2字节) 储存，但UTF-16却无法兼容于ASCII编码。\n可以认为UTF-16是下面介绍的UCS-2的父集。在没有辅助平面字符（surrogate code points）前，UTF-16与UCS-2所指的是同一的意思。但当引入辅助平面字符后，就称为UTF-16了。现在若有软件声称自己支援UCS-2编码，那其实是暗指它不能支援在UTF-16中超过2bytes的字集。对于小于0x10000的UCS码，UTF-16编码就等于UCS码。\n如果一个UTF-16文件没有指定BOM，默认应该是UTF-16BE，但是在Intel x86中却是UTF-16LE。所以在现实世界中有很多的没有指定大小尾的UTF-16却是UTF-16LE。\n\n##### UTF-32\n\n每一个Unicode码位使用恰好32位元。可以粗暴的认为UTF-32和下面要介绍的UCS-4是等同的。\n\n##### UCS-2\n\n采用2个字节，定长的表示每一个字符，所以总计可以表示2^16个字符。\n\n##### UCS-4\n\nUCS-4根据最高位为0的最高字节分成2^7=128个group。每个group再根据次高字节分为256个plane。每个plane根据第3个字节分为256行(rows)，每行包含256个cells。当然同一行的cells只是最后一个字节不同，其余都相同。\ngroup 0的plane 0被称作Basic Multilingual Plane, 即BMP。或者说UCS-4中，高两个字节为0的码位被称作BMP。\n将UCS-4的BMP去掉前面的两个零字节就得到了UCS-2。在UCS-2的两个字节前加上两个零字节，就得到了UCS-4的BMP。而目前的UCS-4规范中还没有任何字符被分配在BMP之外。\n\n\n转自:http://www.cnblogs.com/jessonluo/p/4800331.html\n\n\n### 编码检测\n到底采用什么编码，如果能检测就好了。专家们也是这么想的，所以专家给每种格式和字节序规定了一些特殊的编码，\n\n这些编码在unicode 中是没有使用的，所以不用担心会冲突。\n\n这个叫做BOM（Byte Order Mark）头。意思是字节序标志头。通过它基本能确定编码格式和字节序。\n\nUTF编码　║　Byte Order Mark \n　　\nUTF-8　  ║　EF BB BF 　　\n\nUTF-16LE ║　FF FE 　　\n\nUTF-16BE ║　FE FF 　　\n\nUTF-32LE ║　FF FE 00 00 　　\n\nUTF-32BE ║　00 00 FE FF\n所以通过检测文件前面的BOM头，基本能确定编码格式和字节序。\n但是这个BOM头只是建议添加，不是强制的，所以不少软件和系统没有添加这个BOM头（所以有些软件格式中有带BOM头\n\n和NoBOM头的选择），这个时候要检测什么格式，就比较麻烦了\n当然可以检测，但是不能保证100%准确，只能通过编码范围从概率上来检查，虽然准确度还是比较高，但是不能保证\n\n100%。所以，时常看到检测错误的软件，也不奇怪了。\n\n### UTF-8 与UTF-16的区别\n\n   UTF-16比较好理解,就是任何字符对应的数字都用两个字节来保存.我们通常对Unicode的误解就是把Unicode与UTF-16等同了.但是很显然如果都是英文字母这做有点浪费.明明用一个字节能表示一个字符为啥整两个啊.\n\n   于是又有个UTF-8,这里的8非常容易误导人,8不是指一个字节,难道一个字节表示一个字符?实际上不是.当用UTF-8时表示一个字符是可变的,有可能是用一个字节表示一个字符,也可能是两个,三个.当然最多不能超过3个字节了.反正是根据字符对应的数字大小来确定.\n\n   于是UTF-8和UTF-16的优劣很容易就看出来了.如果全部英文或英文与其他文字混合,但英文占绝大部分,用UTF-8就比UTF-16节省了很多空间.而如果全部是中文这样类似的字符或者混合字符中中文占绝大多数.UTF-16就占优势了,可以节省很多空间.另外还有个容错问题,等会再讲","tags":["Java"],"categories":["server"]},{"title":"Struts2 问题总结","url":"/2017/09/19/backend/Struts2/Struts2 问题总结/","content":"## 上传图片出现错误\n但是，明明上传的文件格式是正确，还是出现：\n\n    Content-Type not allowed: file \"09poC_wallpapers.jpg\" \"upload_1ea6fe4e_13611ac7d7c__8000_00000012.tmp\" image/pjpeg \n\n\nfirefox 和 ie 的文件类型区别\n    Firefox：\n    \t\n    \n    image/jpeg, image/bmp, image/gif, image/png\n    \n    ie 6：\n    \t\n    \n     image/pjpeg ,image/bmp, image/gif, image/x-png\n    \n    ie 7：\n    \t\n    \n    image/pjpeg, image/bmp, image/gif, image/x-png\n    \n    ie 8：\n    \t\n    \n    image/pjpeg, image/bmp, image/gif, image/x-png\n    \n    Ie 9： \n    \t\n    \n    image/jpeg, image/bmp, image/gif, image/png \n解决方法\n\n    <param name=\"allowedTypes\">\n      image/bmp,image/png,image/gif,image/jpeg,image/jpg,\n      image/pjpeg ,image/bmp, image/gif, image/x-png,\n    </param>","tags":["struts2"],"categories":["服务器"]},{"title":"Struts2 的简单实例","url":"/2017/09/16/backend/Struts2/Struts2 的简单实例/","content":"## Struts2 实现流程\n1. 浏览器发送请求\n2. 到达 StrutsPrepareAndExecuteFilter ( 核心控制器 )\n3. 分发到指定 XXXAction ( 业务控制器 ) 调用业务方法\n4. 返回逻辑视图名\n5. StrutsPrepareAndExecuteFilter forward到物理视图,生成响应内容，输出响应","tags":["struts2"],"categories":["服务器"]},{"title":"web.xml中配置JSP属性","url":"/2017/09/15/backend/JspServlet/web.xml中配置JSP属性/","content":"## web.xml中配置JSP属性\n>为什么要在web.xml配置JSP属性\n\n如果许多JSP有着相似的属性，那么在每个JSP文件的顶部重复添加page指令是非常麻烦的工作。幸运的是，在部署描述符中可以配置通用的JSP属性。\n\n> web.xml中添加JSP属性样例\n\n    <jsp-config>  \n     \t<jsp-property-group>  \n     \t\t<url-pattern>*.jsp</url-pattern>  \n     \t\t<url-pattern>*.jspf</url-pattern>  \n     \t\t<page-encoding>UTF-8</page-encoding>  \n     \t\t<scripting-invalid>false</scripting-invalid>  \n     \t\t<include-prelude>/WEB-INF/jsp/base.jspf</include-prelude>  \n     \t\t<trim-directive-whitespaces>true</trim-directive-whitespaces>  \n     \t\t<default-content-type>text/html</default-content-type>  \n     \t\t</jsp-property-group>  \n    </jsp-config> \n\n<jsp-config>中可以包含任意数目的<jsp-property-group>标签。通过为<jsp-property-group>定义不同的<url-pattern>标签来区分不同的属性组。\n<include-prelude>标签，将告诉容器在所有属于改该属性组的JSP的头部添加文件/WEB-INF/jsp/base.jspf。\n<include-coda>标签定义了包含在组中所有JSP尾部的文件。\n\n在一个JSP组中可以同时使用这些标签多次。\n<page-encoding>与page指令的pageEncoding特性一致。\n<default-content-type>标签可以定义内容类型，默认为text/html\n<trim-directive-whitespaces>也是一个特别有用的属性，该属性告诉JSP转换器删除响应输出中的空白，只保留指令、声明、脚本和其他JSP标签创建的文本。\n<scripting-invalid>标签可以实现完全禁止JSP中的Java\n<el-ignored>的作用类似，不过它对应的是page指令中的isELIgnored特性。\n除了<url-pattern>，<jsp-property-group>中所有标签都是可选的，但在使用它们时必须按照下面的顺序添加到<jsp-property-group>中(忽略掉部希望使用的标签)：<url-pattern>、<el-ignored>、<page-encoding>、<scripting-invalid>、<is-xml>、<include-prelude>、<include-coda>、<deferred-syntax-allowed-as-literal>、<trim-directive-whitespace>、<default-content-type>、<buffer>、<error-on-undeclared-namespace>。","tags":["jsp"],"categories":["服务器"]},{"title":"Servlet","url":"/2017/09/14/backend/JspServlet/Servlet/","content":"## Servlet\n服务器端小程序,运行在服务器端的程序，用于处理及响应客户端的请求,自MVC规范出现之后,Servlet仅仅只作为控制器\n\n## Servlet和Jsp的区别\n1. Servlet中没有内置对象,原来JSP中的内置对象都必须有程序显式创建\n2. Servlet对于HTML标签只能使用页面输出流逐行输出，所以自MVC规范出现之后,Servlet仅仅只作为控制器\n\n<!-- more -->\n\n## @WebServlet \n\n从3.0开始配置Servlet可以使用注解的形式\n>有些人可能会遇到这种种情况，在采用注解WebServlet配置Servlet的时候，明明在配置了urlPatterns属性，部署应用程序的时候也没有出错。但是就是在浏览器发请求的时候访问不到资源，报404错误request resource is not available。捣腾了半天也不知道，到底是哪而出错了？\n Servlet3.0之后新增了注解，用于简化Servlet、Filter及Listener的声明，这样就在配置Servlet的时候多了一个选择。Servlet3.0的部署描述文件web.xml的顶层标签<web-app>有一个metadata-complete属性，该属性为true，则容器在部署时只依赖部署描述文件，忽略所有标注，如果不配置该属性，或者将其设置为false，则表示启动标注支持。当metadata-complete=\"false\"时，web.xml和注解对于Servlet的影响同时起作用，两种方法定义的url-partten都可以访问到该Servlet，但是当通过web.xml定义的url-partten访问时，注解定义的属性（初始化参数等）将失效。\n\n### 属性值\nname\tString\t指定Servlet 的 name 属性，等价于 <servlet-name>。如果没有显式指定，则该 Servlet 的取值即为类的全限定名。\n\nvalue\tString[]\t该属性等价于 urlPatterns 属性。两个属性不能同时使用。\n\nurlPatterns\tString[]\t指定一组 Servlet 的 URL 匹配模式。等价于<url-pattern>标签。\n\nloadOnStartup\tint\t指定 Servlet 的加载顺序，等价于 <load-on-startup>标签。\n\ninitParams\tWebInitParam[]\t指定一组 Servlet 初始化参数，等价于<init-param>标签。\n\nasyncSupported\tboolean\t声明 Servlet 是否支持异步操作模式，等价于<async-supported> 标签。\n\ndescription\tString\t该 Servlet 的描述信息，等价于 <description>标签。\n\ndisplayName\tString\t该 Servlet 的显示名，通常配合工具使用，等价于 <display-name>标签。\n## 创建Servlet有俩个时机\n1. 用户请求某个Servlet，系统创建该Servlet的实例,所以Servlet第一次访问的时间是较长的，因为要初始化Servlet\n2. Web应用启动立即创建Servlet实例,即load-on-startup Servlet\n\n## Servlet 生命周期\n1. 创建实例\n2. Web容器调用Servlet的init方法，对Servlet进行初始化。\n3. 初始化后将一直存在于容器中，用于响应客户端请求,get post service用于响应用户请求\n4. 通常在Web应用关闭之时销毁Servlet，先调用Servlet的destory()方法\n\n## 使用Servlet作为表现层如有以下几个劣势\n1. 所有的Html标签都需要页面输出流完成\n2. 前端人员无法参与到页面的编写\n3. 可维护性差，页面代码不好调试\n","tags":["server"],"categories":["服务器"]},{"title":"JSP脚本中的九个内置对象","url":"/2017/09/14/backend/JspServlet/JSP脚本中的九个内置对象/","content":"JSP脚本中包含九个内置对象，这九个内置对象都是Servlet API接口的实例，只是JSP规范对它们进行了默认初始化（由JSP页面对应的Servlet的_jspService()方法来创建这些实例),也就是说它们已经是对象，可以直接使用\n\n    1\tpageContext\tjavax.servlet.jsp.PageContext\n    \n    2\trequest\tjavax.servlet.http.HttpServletRequest\n    \n    3\tresponse\tjavax.servlet.http.HttpServletResponse\n    \n    4\tsession\tjavax.servlet.http.HttpSession\n    \n    5\tapplication\tjavax.servlet.ServletContext\n    \n    6\tconfig\tjavax.servlet.ServletConfig\n    \n    7\tout\tjavax.servlet.jsp.JspWriter\n    \n    8\tpage\tjava.lang.Object\n    \n    9\texception\tjava.lang.Throwable\n\n<!--more-->\n### page对象\npage对象表示当前一个JSP页面，可以理解为一个对象本身，即：把一个JSP当作一个对象来看待。page对象在开发中几乎不用，了解一下即可\n### out对象\nout对象代表一个页面输出流，通常用于在页面上输出变量值及常量。一般在使用输出表达式的地方都可以使用out对象达到同样的效果。out是个页面输出流，负责输出页面的内容，但是用out需要编写更多的代码。<%=  %>表达式的本质就是out.write(…);\n对于页面上的某个html标签来讲\n<table><tr></tr></table>\n如果使用了out即\n\n      <%\n    \tout.println(“<table>”);\n    \tout.println(“<tr>”);\n    \tout.println(“</tr>”);\n    \tout.println(“</table>”);\n      %>\n\n### pageContext对象\npageContext对象是JSP技术中最重要的一个对象，它代表JSP页面的运行环境，这个对象不仅封装了对其它8大隐式对象的引用，它自身还是一个域对象(容器)，可以用来保存数据。并且，这个对象还封装了web开发中经常涉及到的一些常用操作，例如引入和跳转其它资源、检索其它域对象中的属性等。\n\n    getException方法\t\t返回exception隐式对象\n    getPage方法\t\t\t返回page隐式对象\n    getRequest方法\t\t返回request隐式对象\n    getResponse方法\t\t返回response隐式对象\n    getServletConfig方法 返回config隐式对象\n    getServletContext方法返回application隐式对象\n    getSession方法\t\t返回session隐式对象\n    getOut方法\t\t\t返回out隐式对象\n\n>pageContext 封装其它8大内置对象的意义\n\n　　如果在编程过程中，把pageContext对象传递给一个普通java对象，那么这个java对象将可以获取8大隐式对象，此时这个java对象就可以和浏览器交互了，此时这个java对象就成为了一个动态web资源了，这就是pageContext封装其它8大内置对象的意义，把pageContext传递给谁，谁就能成为一个动态web资源，那么什么情况下需要把pageContext传递给另外一个java类呢，什么情况下需要使用这种技术呢，在比较正规的开发中，jsp页面是不允许出现java代码的，如果jsp页面出现了java代码，那么就应该想办法把java代码移除掉，我们可以开发一个自定义标签来移除jsp页面上的java代码，首先围绕自定义标签写一个java类，jsp引擎在执行自定义标签的时候就会调用围绕自定义标签写的那个java类，在调用java类的时候就会把pageContext对象传递给这个java类，由于pageContext对象封装了对其它8大隐式对象的引用，因此在这个java类中就可以使用jsp页面中的8大隐式对象(request，response，config，application，exception，Session，page，out)了，pageContext对象在jsp自定义标签开发中特别重要。\n\n>pageContext 作为域对象\n\npageContext对象可以作为容器来使用，因此可以将一些数据存储在pageContext对象中。\n\npageContext对象的常用方法\n\n    1 public void setAttribute(java.lang.String name,java.lang.Object value)\n    2 public java.lang.Object getAttribute(java.lang.String name)\n    3 public void removeAttribute(java.lang.String name)\n    4 public java.lang.Object findAttribute(java.lang.String name)\n\n\n\n### application 对象\n - 在整个Web应用的多个JSP、Servlet之间的共享数据。通常被定义为数据字典来使用。通常在一处实现application.setAttribute(“name”,value);来定义一个变量，在JSP中使用application.getAttribute(“name”);获取值；在Servlet中使用一个实例的ServletContext对象sc.getAttribute(“name”);获取值。\n我们可以把application理解成一个Map对象，任何JSP、Servlet都可以把某个变量放入application中保存，并指出一个属性名；而该应用的其他JSP、Servlet就可以根据该属性名来得到这个变量。由于application对象代表整个Web应用，所以只应该把Web应用的状态数据放入到application中。\n - 访问Web应用的配置参数，在web.xml中配置类似的参数，该标签是<web-app></web-app>下的子标签。即\n    \n\n    <context-param>\n       <param-name>name</param-name>\n       <param-value>value</param-value>\n    </context-param>\n    \n\n 在JSP中可以通过 application.getInitParameter(“name”);取得配置的参数，在Servlet中可以先实例个ServletContext对象即：\n final javax.servlet.ServletContext application;\n然后就可以取值了，即：\n\n    application = pageContext.getServletContext();\n    application.getInitParameter(\"name\");\n\n这里通常被用作普通java Web开发中数据库用户名，密码的获取时使用，因为在项目开发用的密码不一定和部署在服务器上的密码一致，但是把它写到这里便于修改这些有关项目的参数。 \n\n### config 对象\nconfig对象代表当前的JSP配置信息，但JSP页面通常无需配置，因此也就不存在配置信息，该对象在JSP页面用的比较少，但在Servlet中用处则相对较大，因为Servlet需要在web.xml文件中进行配置，可以指定配置参数。但是如果说要为某个JSP配置一些参数的话，也是跟配置Servlet一样需要在web.xml中配置，也就说吧JSP当成Servlet配置\n\n    <servlet>\n       <servlet-name>Configure</servlet-name>\n       <jsp-file>/getcontextparam.jsp</jsp-file>\n       <init-param>\n     <param-name>conn</param-name>\n     <param-value>connnn</param-value>\n       </init-param>\n     </servlet>\n     <servlet-mapping>\n       <servlet-name>Configure</servlet-name>\n       <url-pattern>/configure</url-pattern>\n     </servlet-mapping>\n其中这里“<jsp-file>/getcontextparam.jsp</jsp-file>”是表明把某个JSP配置成Servlet。\n在地址栏中访问时要输入http://localhost:8080/test/configure（url-pattern中内容）\n在JSP中获取参数时使用config.getInitParameter(\"conn\")即可。\n\n### exception 对象\n该实例代表其他页面的异常和错误,只有当页面是错误处理页面，即编译指令page的isErrorPage属性为true时,该对象才可以使用","tags":["jsp"],"categories":["服务器"]},{"title":"Spring mvc整合velocity","url":"/2017/09/11/backend/velocity/Spring mvc整合velocity/","content":"# 添加Maven依赖: #\n        <!--springmvc集成 velocity-->\n        <dependency>\n            <groupId>org.apache.velocity</groupId>\n            <artifactId>velocity</artifactId>\n            <version>1.7</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.velocity</groupId>\n            <artifactId>velocity-tools</artifactId>\n            <version>2.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context-support</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n<!--more-->\n# applicationContext-mvc配置文件: #\n    <!--》》》》》》》》》》》》》》》   添加velocity显示技术 》》》》》》》》》》》》》》》》》-->\n    <!-- velocity环境配置 -->\n    <bean id=\"velocityConfig\" class=\"org.springframework.web.servlet.view.velocity.VelocityConfigurer\">\n        <!-- velocity配置文件路径  或者直接用velocityProperties属性 -->\n        <property name=\"configLocation\" value=\"classpath:velocity.properties\"/>\n        <!-- velocity模板路径 -->\n        <property name=\"resourceLoaderPath\" value=\"/WEB-INF/templates/\"/>\n    </bean>\n    <!-- velocity视图解析器 -->\n    <bean id=\"velocityViewResolver\" class=\"org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver\">\n        <property name=\"order\" value=\"0\"/>\n        <property name=\"contentType\" value=\"text/html;charset=UTF-8\"/>\n        <property name=\"cache\" value=\"true\"/>\n        <property name=\"suffix\" value=\".vm\"/>\n        <property name=\"layoutUrl\" value=\"layout/layout.vm\"/>\n        <property name=\"exposeSpringMacroHelpers\" value=\"true\" /><!--是否使用spring对宏定义的支持-->\n        <property name=\"exposeSessionAttributes\" value=\"true\" /><!--是否开放request属性-->\n        <property name=\"requestContextAttribute\" value=\"request\"/><!--request属性引用名称-->\n        <property name=\"dateToolAttribute\" value=\"dateTool\"/>\n        <property name=\"numberToolAttribute\" value=\"numberTool\"/>\n    </bean>\n# velocity.properties 配置文件 #\n该文件velocity.properties 在下面的包路径可以找到 org.apache.velocity.runtime.defaults.velocity.properties\n\n\n    #设置字符集\n    #encoding\n    input.encoding  =UTF-8\n    output.encoding=UTF-8\n    contentType=text/html;charset=UTF-8\n    \n    \n    #autoreload when vm changed\n    file.resource.loader.cache=false\n    file.resource.loader.modificationCheckInterval  =1\n    velocimacro.library.autoreload=false\n# 显示文件目录结构 #\n![](/images/server/velocity-layout.png)\n\n## header.mv \n\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n    <meta http-equiv=\"Cache-Control\" content=\"no-store\"/>\n    <meta http-equiv=\"Pragma\" content=\"no-cache\"/>\n    <meta http-equiv=\"Expires\" content=\"3600\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" name=\"viewport\">\n\n## layout.mv ##\n    <html>\n    <head>\n    <title>$!page_title</title>\n    #parse(\"default/header.vm\")\n    </head>\n    <body>\n    \n    <div>\n    \n    $screen_content\n    \n    </div>\n    \n    </body>\n    </html>\n## velocity.mv ##\n    <html>\n    <head>\n    <title>Spring MVC and Velocity</title>\n    </head>\n    <body>\n    <h1>Spring MVC and Velocity</h1>\n    \n       Hello  ${hello}\n    \n    <hr />\n    Copyright &copy 2014 lm\n    </body>\n    </html>\n## velocity 基本语法 ##\nVelocity的基本语法：\n1、\"#\"用来标识Velocity的脚本语句，包括#set、#if 、#else、#end、#foreach、#end、#iinclude、#parse、#macro等；\n如:\n#if($info.imgs)\n<img src=\"$info.imgs\" border=0>\n#else\n<img src=\"noPhoto.jpg\">\n#end\n\n\n2、\"$\"用来标识一个对象(或理解为变量)；如\n如：$i、$msg、$TagUtil.options(...)等。\n\n\n3、\"{}\"用来明确标识Velocity变量；\n比如在页面中，页面中有一个$someonename，此时，Velocity将把someonename作为变量名，若我们程序是想在someone这 个变量的后面紧接着显示name字符，则上面的标签应该改成${someone}name。\n\n\n4、\"!\"用来强制把不存在的变量显示为空白。\n如当页面中包含$msg，如果msg对象有值，将显示msg的值，如果不存在msg对象同，则在页面中将显示$msg字符。这是我们不希望的，为了把不存 在的变量或变量值为null的对象显示为空白，则只需要在变量名前加一个“!”号即可。\n如：$!msg\n\n5、循#foreach( $info in $list) $info.someList #end，环读取集合list中的对象\n#foreach( $info in $hotL包含文件#inclue(\"模板文件名\")或#parse(\"模板文件名\")st1) \n<a href=\"/blog/list?&cid=$!info.cid\" target=\"_blank\">$!info.title</a><br>\n#end \n上面的脚本表示循环遍历hotList1集合中的对象，并输出对象的相关内容。\n\n6、包含文件#inclue(\"模板文件名\")或#parse(\"模板文件名\")\n主要用于处理具有相同内容的页面，比如每个网站的顶部或尾部内容。\n使用方法，可以参考EasyJF开源Blog及EasyJF开源论坛中的应用！\n如：#parse(\"/blog/top.html\")或#include(\"/blog/top.html\")\nparse与include的区别在于，若包含的文件中有Velocity脚本标签，将会进一步解析，而include将原样显示。","tags":["Spring Mvc"],"categories":["server"]},{"title":"常用的JavaEE服务器","url":"/2017/09/10/backend/JavaEE服务器/常用的JavaEE服务器/","content":"# Web服务器 #\n## 1：Tomcat ##\n\t与Java结合的最好、开源、Oracle官方推荐的JSP服务器\n## 2：Jetty  ##\n\t嵌入式服务器：在应用中加入Jetty的Jar文件,即可提供Web服务，最好搭配Maven使用，采用maven jetty插件，即可通过简单的配置，执行命令即可启动web服务\n## 3：Resin ##\n\t目前最快的Jsp，Servlet运行平台，支持EJB,个人免费，商业交钱\n# Java EE服务器 #\n## 1：JBoss ##\n\t开源，全面支持各种最新的Java EE规范\n## 2：GlassFish ##\n\tOracle官方提供的JavaEE服务器\n## 3：WebLogic ##\n\t收费所以牛逼\n## 4：WebSphere ##\n\tIBM收费也是牛逼,WebSphere 是 IBM 的软件平台。它包含了编写、运行和监视全天候的工业强度的随需应变 Web 应用程序和跨平台、跨产品解决方案所需要的整个中间件基础设施，如服务器、服务和工具。WebSphere 提供了可靠、灵活和健壮的软件。","tags":["server"],"categories":["服务器"]},{"title":"新建博客方法","url":"/2017/09/10/essay/新建博客方法/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!--more-->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["github"],"categories":["随笔"]},{"title":"Java学习路线","url":"/2017/09/10/backend/Java学习路线/","content":"JAVA学习路线图\n\n此乃是java攻城狮的学习路线图，由简到繁，由易到难，一步步的学习\n\n阶段1\n\n1：学习HTML     2:学习CSS    3:Javascript    4:jquery    5:xml解析   6：Bootstrap    \n \n阶段2  \n\n7:JAVAse基础      8：mysql数据库     9：Powerdesigner   10:JDBC    11:JAVAWEB   \n    \n阶段3\n\n12:oracle         13:struts2         14:Hibernate       15:Spring\n\n阶段4\n\n16:Maven         17:SpringMVC      18:MyBatis\n\n<!--more-->\n\n![logo](/images/learn-route.png) ","tags":["java"],"categories":["server"]},{"title":"前端学习技术","url":"/2017/09/10/frontend/前端学习技术/","content":"技术架构图:\n<!--more-->\n![logo](/images/client.jpg)","tags":["web"],"categories":["client"]},{"title":"Hexo问题总结","url":"/2017/09/09/essay/hexo问题总结/","content":"# Hexo问题总结\n\n\n- **hexo部署后，CNAME会被自动删除，怎么办？**\n\n&nbsp;&nbsp;&nbsp;&nbsp;准确来说 CNAME 文件是放在 hexo 项目下的 source 目录，你再运行下hexo generade\n然后你再去 public 目录中看看就明白了BTW，为了达到更有说服力的验证，最好在开始前先运行下hexo clean\n这样会先删除 public 目录\n\n- **HEXO发布到Github上，README.md文件正常显示的解决**\n\n&nbsp;&nbsp;&nbsp;&nbsp;使用hexo d 发布本地编译过的代码到github上的时候，发现这个README.md文件也被解析的乱七八糟的，不是一般的github项目里面的README.md文件的显示样式，查了下，在最外层的_config.yml里面把\nskip_render: README.md\n添加这个配置，就OK啦。\n\n\n- **指定端口启动**\n\n    ` hexo server -p 4001`\n\n- **如何在markdowm中添加本地图片**\n\t\n    建议将图片统一放在 `source/images` 文件夹中。然后通过绝对路径` ![](/images/image.jpg)` 引用\n    \n- **卸载hexo**\n    `npm uninstall hexo -g `\n- hexo版本\n```xml\nhexo: 3.7.0\nhexo-cli: 1.0.3\n```","tags":["github"],"categories":["技术"]},{"title":"第一篇博客","url":"/2017/09/09/essay/第一篇博客/","content":"# 使用hexo+github搭建免费个人博客\n## 优势:\n1. 全是静态文件，访问速度快；\n2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；\n3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；\n4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；\n5. 博客内容可以轻松打包、转移、发布到其它平台；\n\n\n<!--more-->\n##  hexo\n\n### 简介\nHexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。\n\n官网： http://hexo.io\n\ngithub: https://github.com/hexojs/hexo\n\n### 原理\n由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。\n\n\n### 注意事项 \n1. 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行\n2. hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导\n3. hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的\n4. 使用Hexo搭建博客时，需要区分『博客源代码』和『博客生成代码』\n\t1. 『博客源代码』: Hexo的源码，包括themes目录（博客模板），source目录(使用MarkDown写的博客)等\n\t2. 『博客生成代码』： 执行hexo generate或者hexo server命令生成的代码，是Hexo自动生成的，再public目录\n\n\n### 常用命令\n    hexo new \"postName\" \t #新建文章\n    hexo new page \"pageName\" #新建页面\n    hexo generate \t\t\t #生成静态页面至public目录\n    hexo server \t\t     #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n    hexo deploy \t\t\t #部署到GitHub\n    hexo help  \t\t\t\t #查看帮助\n    hexo version  \t\t\t #查看Hexo的版本\n### \n\n### hexo的文件结构\n    ├── _config.yml \n    ├── db.json\n    ├── node_modules \n    ├── package.json\n    ├── public \n    ├── scaffolds \n    ├── source #所有文章文件放在这里\n    └── themes #主题文件夹\n\n    _config.yml  站点的配置文件。\n    db.json   缓存文件\n    node_modules   安装的插件以及hexo所需的一些node.js模块。\n    package.json  应用程序信息，配置hexo运行需要的js包。\n    public  最终所见网页的所有内容\n    scaffolds   模板文件夹。当新建一个文章时，会默认包含对应模板的内容。\n    source  资源文件夹是存放用户资源的地方。所有的源文件都会被保存在_post文件夹中。除 posts 文件夹之外，开头命名为 (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n    themes  存放主题文件，hexo会根据主题来生成静态页面。\n\n### 图片测试\n![logo](/images/dont-run.gif) ","tags":["nodejs"],"categories":["技术"]}]