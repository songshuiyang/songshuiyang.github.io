<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宋水阳个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.songshuiyang.com/"/>
  <updated>2019-09-01T09:28:03.279Z</updated>
  <id>http://www.songshuiyang.com/</id>
  
  <author>
    <name>songshuiyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud(Feign)工作原理源码分析</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Feign)%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Feign)工作原理源码分析/</id>
    <published>2019-08-06T16:06:01.000Z</published>
    <updated>2019-09-01T09:28:03.279Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>上一章节我们知道<code>SpringCloudFeign</code>基于接口来实现调用，那我们要知道它是怎么实现的，可以通过断点来一步步跟进，因为接口是不能具体执行任务，所以我们可以猜测是采用动态代理来实现的，应该和<code>Mybatis</code>的<code>Mapper</code>接口的工作原理差不多</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>我们先在<code>AuthenticationFilter</code>的下面这行打好断点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用sso服务鉴权</span></span><br><span class="line">resModel = ssoClient.checkToken(<span class="keyword">new</span> TokenMO(token));</span><br></pre></td></tr></table></figure><ul><li>然后进入方法体<code>feign.ReflectiveFeign.FeignInvocationHandler#invoke()</code>，果不其然，见<code>InvocationHandler</code>接口就可以知道使用了<code>JDK</code>的动态代理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Target target;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MethodHandler&gt; dispatch;</span><br><span class="line"></span><br><span class="line">FeignInvocationHandler(Target target, Map&lt;Method, MethodHandler&gt; dispatch) &#123;</span><br><span class="line">  <span class="keyword">this</span>.target = checkNotNull(target, <span class="string">"target"</span>);</span><br><span class="line">  <span class="keyword">this</span>.dispatch = checkNotNull(dispatch, <span class="string">"dispatch for %s"</span>, target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="comment">// 执行equals()方法</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"equals"</span>.equals(method.getName())) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Object</span><br><span class="line">          otherHandler =</span><br><span class="line">          args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] != <span class="keyword">null</span> ? Proxy.getInvocationHandler(args[<span class="number">0</span>]) : <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">return</span> equals(otherHandler);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"hashCode"</span>.equals(method.getName())) &#123;</span><br><span class="line">    <span class="comment">// 执行hashCode()方法</span></span><br><span class="line">    <span class="keyword">return</span> hashCode();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"toString"</span>.equals(method.getName())) &#123;</span><br><span class="line">    <span class="comment">// 执行toString()方法</span></span><br><span class="line">    <span class="keyword">return</span> toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dispatch.get(method).invoke(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> FeignInvocationHandler) &#123;</span><br><span class="line">    FeignInvocationHandler other = (FeignInvocationHandler) obj;</span><br><span class="line">    <span class="keyword">return</span> target.equals(other.target);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> target.hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> target.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到实际上调用了<code>dispatch.get(method).invoke(args);</code>方法，<code>dispatch</code>是个<code>Map</code>里面存的两个<code>MethodHandler</code>就是对应我们上一章节定义的<code>SsoClient</code>的两个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MethodHandler&gt; dispatch;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/feign/feign-method.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>继续跳入，我们来到<code>feign.SynchronousMethodHandler#invoke()</code>方法，可以看到根据方法参数构造了一个<code>RequestTemplate</code>对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    RequestTemplate template = buildTemplateFromArgs.create(argv);</span><br><span class="line">    Retryer retryer = <span class="keyword">this</span>.retryer.clone();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executeAndDecode(template);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">        retryer.continueOrPropagate(e);</span><br><span class="line">        <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">          logger.logRetry(metadata.configKey(), logLevel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继续跳入<code>executeAndDecode(template);</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">executeAndDecode</span><span class="params">(RequestTemplate template)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="comment">// 请求Request对象</span></span><br><span class="line">  Request request = targetRequest(template);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">    logger.logRequest(metadata.configKey(), logLevel, request);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 结果Response对象</span></span><br><span class="line">  Response response;</span><br><span class="line">  <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    response = client.execute(request, options);</span><br><span class="line">    <span class="comment">// ensure the request is set. <span class="doctag">TODO:</span> remove in Feign 10</span></span><br><span class="line">    response.toBuilder().request(request).build();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime(start));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> errorExecuting(request, e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> elapsedTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> shouldClose = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      response =</span><br><span class="line">          logger.logAndRebufferResponse(metadata.configKey(), logLevel, response, elapsedTime);</span><br><span class="line">      <span class="comment">// ensure the request is set. <span class="doctag">TODO:</span> remove in Feign 10</span></span><br><span class="line">      response.toBuilder().request(request).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Response.class == metadata.returnType()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.body() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (response.body().length() == <span class="keyword">null</span> ||</span><br><span class="line">              response.body().length() &gt; MAX_RESPONSE_BUFFER_SIZE) &#123;</span><br><span class="line">        shouldClose = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Ensure the response body is disconnected</span></span><br><span class="line">      <span class="keyword">byte</span>[] bodyData = Util.toByteArray(response.body().asInputStream());</span><br><span class="line">      <span class="keyword">return</span> response.toBuilder().body(bodyData).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (response.status() &gt;= <span class="number">200</span> &amp;&amp; response.status() &lt; <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">void</span>.class == metadata.returnType()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decode(response);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (decode404 &amp;&amp; response.status() == <span class="number">404</span> &amp;&amp; <span class="keyword">void</span>.class != metadata.returnType()) &#123;</span><br><span class="line">      <span class="keyword">return</span> decode(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> errorDecoder.decode(metadata.configKey(), response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> errorReading(request, response, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldClose) &#123;</span><br><span class="line">      ensureClosed(response.body());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/feign/feign-loadBalancer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>我们关注<code>response = client.execute(request, options);</code>方法，这里<code>client</code>我们由上一张图可以看到是<code>LoadBalancerFeignClient</code>，这里的设计和之前的<code>Ribbon</code>的<code>IClient</code>类似</p></li><li><p>这个方法位于<code>org.springframework.cloud.netflix.feign.ribbon.LoadBalancerFeignClient</code>，见方法名可以知道是要实现负载均衡</p></li><li><p>下面的方法我们可以知道主体逻辑是调用<code>com.netflix.client.AbstractLoadBalancerAwareClient#executeWithLoadBalancer(S, com.netflix.client.config.IClientConfig)</code>，这个类及方法是不是有点熟悉，没错和我们之前分析<code>Ribbon</code>实现负载均衡的执行的方法是一样的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>   </span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        URI asUri = URI.create(request.url());</span><br><span class="line">        String clientName = asUri.getHost();</span><br><span class="line">        URI uriWithoutHost = cleanUrl(request.url(), clientName);</span><br><span class="line">        FeignLoadBalancer.RibbonRequest ribbonRequest = <span class="keyword">new</span> FeignLoadBalancer.RibbonRequest(</span><br><span class="line">                <span class="keyword">this</span>.delegate, request, uriWithoutHost);</span><br><span class="line"></span><br><span class="line">        IClientConfig requestConfig = getClientConfig(options, clientName);</span><br><span class="line">        <span class="comment">// 开始负载均衡处理了</span></span><br><span class="line">        <span class="keyword">return</span> lbClient(clientName).executeWithLoadBalancer(ribbonRequest,</span><br><span class="line">                requestConfig).toResponse();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">        IOException io = findIOException(e);</span><br><span class="line">        <span class="keyword">if</span> (io != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> io;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们这里关注<code>lbClient(clientName)</code>方法，这个方法是构造<code>FeignLoadBalancer</code>，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> FeignLoadBalancer <span class="title">lbClient</span><span class="params">(String clientName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.lbClientFactory.create(clientName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>FeignLoadBalancer</code></p><ul><li><p>类成员变量及主要方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignLoadBalancer</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">        <span class="title">AbstractLoadBalancerAwareClient</span>&lt;<span class="title">FeignLoadBalancer</span>.<span class="title">RibbonRequest</span>, <span class="title">FeignLoadBalancer</span>.<span class="title">RibbonResponse</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> connectTimeout;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> readTimeout;</span><br><span class="line">    <span class="keyword">protected</span> IClientConfig clientConfig;</span><br><span class="line">    <span class="keyword">protected</span> ServerIntrospector serverIntrospector;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FeignLoadBalancer</span><span class="params">(ILoadBalancer lb, IClientConfig clientConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ServerIntrospector serverIntrospector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(lb, clientConfig);</span><br><span class="line">        <span class="keyword">this</span>.setRetryHandler(RetryHandler.DEFAULT);</span><br><span class="line">        <span class="keyword">this</span>.clientConfig = clientConfig;</span><br><span class="line">        <span class="keyword">this</span>.connectTimeout = clientConfig.get(CommonClientConfigKey.ConnectTimeout);</span><br><span class="line">        <span class="keyword">this</span>.readTimeout = clientConfig.get(CommonClientConfigKey.ReadTimeout);</span><br><span class="line">        <span class="keyword">this</span>.serverIntrospector = serverIntrospector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RibbonResponse <span class="title">execute</span><span class="params">(RibbonRequest request, IClientConfig configOverride)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request.Options options;</span><br><span class="line">        <span class="keyword">if</span> (configOverride != <span class="keyword">null</span>) &#123;</span><br><span class="line">            options = <span class="keyword">new</span> Request.Options(</span><br><span class="line">                    configOverride.get(CommonClientConfigKey.ConnectTimeout,</span><br><span class="line">                            <span class="keyword">this</span>.connectTimeout),</span><br><span class="line">                    (configOverride.get(CommonClientConfigKey.ReadTimeout,</span><br><span class="line">                            <span class="keyword">this</span>.readTimeout)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            options = <span class="keyword">new</span> Request.Options(<span class="keyword">this</span>.connectTimeout, <span class="keyword">this</span>.readTimeout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行请求</span></span><br><span class="line">        Response response = request.client().execute(request.toRequest(), options);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RibbonResponse(request.getUri(), response);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>类继承关系图<br><img src="/images/server/spring/spring-cloud/feign/FeignLoadBalancer.png" alt=""></p></li></ul></li></ul><ul><li><p>由上图我们看到<code>FeignLoadBalancer</code>继承了<code>Ribbon</code>的<code>AbstractLoadBalancerAwareClient</code>， 这个类是<code>Ribbon</code>执行请求客户端</p></li><li><p>我们现在来看是怎么构建<code>FeignLoadBalancer</code>的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FeignLoadBalancer <span class="title">create</span><span class="params">(String clientName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里做了缓存处理</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cache.containsKey(clientName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cache.get(clientName);</span><br><span class="line">    &#125;</span><br><span class="line">    IClientConfig config = <span class="keyword">this</span>.factory.getClientConfig(clientName);</span><br><span class="line">    ILoadBalancer lb = <span class="keyword">this</span>.factory.getLoadBalancer(clientName);</span><br><span class="line">    ServerIntrospector serverIntrospector = <span class="keyword">this</span>.factory.getInstance(clientName, ServerIntrospector.class);</span><br><span class="line">    FeignLoadBalancer client = enableRetry ? <span class="keyword">new</span> RetryableFeignLoadBalancer(lb, config, serverIntrospector,</span><br><span class="line">        loadBalancedRetryPolicyFactory, loadBalancedBackOffPolicyFactory, loadBalancedRetryListenerFactory) : <span class="keyword">new</span> FeignLoadBalancer(lb, config, serverIntrospector);</span><br><span class="line">    <span class="keyword">this</span>.cache.put(clientName, client);</span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/feign/feign-feignLoadBalancer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>由上图我们可以看到之前设置的连接超时时间及读取超时时间及重试参数</li></ul><ul><li>继续跳入<code>executeWithLoadBalancer</code>方法，进入到<code>com.netflix.client.AbstractLoadBalancerAwareClient</code>类中，到这里<code>Feign</code>就把负载均衡及重试工作给<code>Ribbon</code>了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">executeWithLoadBalancer</span><span class="params">(<span class="keyword">final</span> S request, <span class="keyword">final</span> IClientConfig requestConfig)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">    LoadBalancerCommand&lt;T&gt; command = buildLoadBalancerCommand(request, requestConfig);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> command.submit(</span><br><span class="line">            <span class="keyword">new</span> ServerOperation&lt;T&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Server server)</span> </span>&#123;</span><br><span class="line">                    URI finalUri = reconstructURIWithServer(server, request.getUri());</span><br><span class="line">                    S requestForServer = (S) request.replaceUri(finalUri);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> Observable.just(AbstractLoadBalancerAwareClient.<span class="keyword">this</span>.execute(requestForServer, requestConfig));</span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .toBlocking()</span><br><span class="line">            .single();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Throwable t = e.getCause();</span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> ClientException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (ClientException) t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的<code>return Observable.just(AbstractLoadBalancerAwareClient.this.execute(requestForServer, requestConfig));</code>会调用我们的<code>FeignLoadBalancer</code>的<code>execute()</code>方法，这里完成请求处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RibbonResponse <span class="title">execute</span><span class="params">(RibbonRequest request, IClientConfig configOverride)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Request.Options options;</span><br><span class="line">    <span class="keyword">if</span> (configOverride != <span class="keyword">null</span>) &#123;</span><br><span class="line">        options = <span class="keyword">new</span> Request.Options(</span><br><span class="line">                configOverride.get(CommonClientConfigKey.ConnectTimeout,</span><br><span class="line">                        <span class="keyword">this</span>.connectTimeout),</span><br><span class="line">                (configOverride.get(CommonClientConfigKey.ReadTimeout,</span><br><span class="line">                        <span class="keyword">this</span>.readTimeout)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        options = <span class="keyword">new</span> Request.Options(<span class="keyword">this</span>.connectTimeout, <span class="keyword">this</span>.readTimeout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    Response response = request.client().execute(request.toRequest(), options);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RibbonResponse(request.getUri(), response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>feign.Client.Default#execute()</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">(Request request, Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">// 包装参数及发送请求</span></span><br><span class="line">  HttpURLConnection connection = convertAndSend(request, options);</span><br><span class="line">  <span class="keyword">return</span> convertResponse(connection).toBuilder().request(request).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HttpURLConnection <span class="title">convertAndSend</span><span class="params">(Request request, Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> HttpURLConnection</span><br><span class="line">      connection =</span><br><span class="line">      (HttpURLConnection) <span class="keyword">new</span> URL(request.url()).openConnection();</span><br><span class="line">  <span class="keyword">if</span> (connection <span class="keyword">instanceof</span> HttpsURLConnection) &#123;</span><br><span class="line">    HttpsURLConnection sslCon = (HttpsURLConnection) connection;</span><br><span class="line">    <span class="keyword">if</span> (sslContextFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">      sslCon.setSSLSocketFactory(sslContextFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hostnameVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">      sslCon.setHostnameVerifier(hostnameVerifier);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  connection.setConnectTimeout(options.connectTimeoutMillis());</span><br><span class="line">  connection.setReadTimeout(options.readTimeoutMillis());</span><br><span class="line">  connection.setAllowUserInteraction(<span class="keyword">false</span>);</span><br><span class="line">  connection.setInstanceFollowRedirects(<span class="keyword">true</span>);</span><br><span class="line">  connection.setRequestMethod(request.method());</span><br><span class="line"></span><br><span class="line">  Collection&lt;String&gt; contentEncodingValues = request.headers().get(CONTENT_ENCODING);</span><br><span class="line">  <span class="keyword">boolean</span></span><br><span class="line">      gzipEncodedRequest =</span><br><span class="line">      contentEncodingValues != <span class="keyword">null</span> &amp;&amp; contentEncodingValues.contains(ENCODING_GZIP);</span><br><span class="line">  <span class="keyword">boolean</span></span><br><span class="line">      deflateEncodedRequest =</span><br><span class="line">      contentEncodingValues != <span class="keyword">null</span> &amp;&amp; contentEncodingValues.contains(ENCODING_DEFLATE);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> hasAcceptHeader = <span class="keyword">false</span>;</span><br><span class="line">  Integer contentLength = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (String field : request.headers().keySet()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (field.equalsIgnoreCase(<span class="string">"Accept"</span>)) &#123;</span><br><span class="line">      hasAcceptHeader = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String value : request.headers().get(field)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (field.equals(CONTENT_LENGTH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!gzipEncodedRequest &amp;&amp; !deflateEncodedRequest) &#123;</span><br><span class="line">          contentLength = Integer.valueOf(value);</span><br><span class="line">          connection.addRequestProperty(field, value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        connection.addRequestProperty(field, value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Some servers choke on the default accept string.</span></span><br><span class="line">  <span class="keyword">if</span> (!hasAcceptHeader) &#123;</span><br><span class="line">    connection.addRequestProperty(<span class="string">"Accept"</span>, <span class="string">"*/*"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.body() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (contentLength != <span class="keyword">null</span>) &#123;</span><br><span class="line">      connection.setFixedLengthStreamingMode(contentLength);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      connection.setChunkedStreamingMode(<span class="number">8196</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    connection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">    OutputStream out = connection.getOutputStream();</span><br><span class="line">    <span class="keyword">if</span> (gzipEncodedRequest) &#123;</span><br><span class="line">      out = <span class="keyword">new</span> GZIPOutputStream(out);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deflateEncodedRequest) &#123;</span><br><span class="line">      out = <span class="keyword">new</span> DeflaterOutputStream(out);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      out.write(request.body());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        out.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException suppressed) &#123; <span class="comment">// NOPMD</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>SpringCloudFeign</code>采用<code>JDK</code>动态代理基于接口来实现调用，<code>SpringCloudFeign</code>主要做的就是解析<code>@FeignClient</code>注解及其方法定义信息，一个方法封装成一个<code>MethodHandler</code>，由此对象来完成方法执行逻辑 ，同时集成了<code>Ribbon</code>来实现负载均衡处理，专人做专事，具体发送请求是由自身<code>FeignLoadBalancer</code>的<code>execute()</code>方法来执行的，这里涉及到请求参数及响应参数的解析</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;上一章节我们知道&lt;code&gt;SpringCloudFeign&lt;/code&gt;基于接口来实现调用，那我们要知道它是怎么实现的，可以通
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Feign)声明式服务调用介绍</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Feign)%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Feign)声明式服务调用介绍/</id>
    <published>2019-08-06T16:06:00.000Z</published>
    <updated>2019-09-01T08:06:15.454Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Feign-简介"><a href="#Feign-简介" class="headerlink" title="Feign 简介"></a>Feign 简介</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><ul><li><p><code>Feign</code>是一个声明式的<code>Web Service</code>客户端，它让微服务之间的调用变得更简单了</p></li><li><p><code>SpringCloudFeign</code>在<code>Netfix Feign</code>的基础上扩展了对<code>SpringMVC</code>的注解支持，所以通过这些注解可以很方便的定义一些服务接口，服务调服务通过接口来调用十分方便，同时<code>SpringCloudFeign</code>整合了<code>Spring Cloud Ribbon</code>与<code>Spring Cloud Hystrix</code></p></li></ul><h4 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h4><ul><li>只需创建一个接口并用注解的方式来配置它，即可完成服务提供方的接口绑定</li><li>在使用过程中与<code>Spring MVC</code>完美衔接</li><li>整合了<code>Spring Cloud Ribbon</code>，可实现负载均衡，实现服务高可用</li><li>整合了<code>Spring Cloud Hystrix</code>，可实现服务断路及服务降级</li></ul><h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><ul><li>下面通过一个简单示例来展示<code>SpringCloudFeign</code>在服务客户端定义上所带来的便利</li></ul><blockquote><p>1、pom.xml 添加依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、启动类添加开关注解 <code>@EnableFeignClients</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、新增cloudSso服务接口类，下面可以看到使用了<code>Spring MVC</code>的注解，<code>@FeignClient(value = &quot;cloudSso&quot;)</code>的<code>value</code>是具体调用服务的服务名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"cloudSso"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SsoClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/sso/createToken"</span>)</span><br><span class="line">    <span class="function">ResponseMO <span class="title">createToken</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/sso/checkToken"</span>)</span><br><span class="line">    <span class="function">ResponseMO <span class="title">checkToken</span><span class="params">(@RequestBody TokenMO tokenMO)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SsoController.java 是cloudSso服务下的接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sso"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SsoController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/createToken"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseMO <span class="title">createToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseUtil.successWithData(<span class="string">"EADF89QWJ0IFJWEJFQHWEFU9QEWH9FH0Q9EW"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/checkToken"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseMO <span class="title">checkToken</span><span class="params">(@RequestBody TokenMO tokenMO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseUtil.successWithData(tokenMO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4、有了上面的准备之后就可以使用<code>SsoClient</code>的接口了，前面学习<code>Zuul</code>的文章有介绍，如果要对网关服务进行鉴权校验，我们这里添加了一个<code>鉴权Filter</code>,通过调用<code>SsoClient</code>接口的<code>checkToken()</code>方法来校验<code>Token</code>是否有效</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SsoClient ssoClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pattern p = Pattern.compile(<span class="string">"/*/pub/*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseMO resMO = <span class="keyword">new</span> ResponseMO();</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line"></span><br><span class="line">        String relativeURL = extractRelativePath(request);</span><br><span class="line">        String token = request.getHeader(WebConstants.TOKEN_HEADER);</span><br><span class="line">        <span class="keyword">if</span> (p.matcher(relativeURL).find()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"&gt;&gt; 鉴权开始[&#123;&#125;]"</span>,relativeURL);</span><br><span class="line">        ResponseMO resModel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (relativeURL.startsWith(ApplicationConstants.APPLICATION_ZUUL) ||</span><br><span class="line">                relativeURL.startsWith(ApplicationConstants.APPLICATION_USER) ||</span><br><span class="line">                relativeURL.startsWith(ApplicationConstants.APPLICATION_SSO)) &#123;</span><br><span class="line">            <span class="comment">// 调用sso服务鉴权</span></span><br><span class="line">            resModel = ssoClient.checkToken(<span class="keyword">new</span> TokenMO(token));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其他服务不对其进行路由</span></span><br><span class="line">            authorizationFailed(relativeURL, ctx, resMO);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resModel.getCode() != ResponseMO.RESPONSE_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="comment">// 鉴权失败不对其进行路由</span></span><br><span class="line">            authorizationFailed(relativeURL, ctx, resMO);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从jwt解析后的userId</span></span><br><span class="line">        ctx.addZuulRequestHeader(<span class="string">"userId"</span>, <span class="string">"reUserId"</span>);</span><br><span class="line">        log.info(<span class="string">"&lt;&lt; 鉴权通过[&#123;&#125;]] "</span>, relativeURL);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个boolean值来判断该过滤器是否要执行，true表示执行，false表示不执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * gives the order in which this filter will be executed, relative to other</span></span><br><span class="line"><span class="comment">     * filters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鉴权失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeURL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resMO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">authorizationFailed</span> <span class="params">(String relativeURL, RequestContext ctx, ResponseMO resMO)</span> </span>&#123;</span><br><span class="line">        ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">        ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        resMO.setAnonymous();</span><br><span class="line">        String resBody = convertToString(resMO);</span><br><span class="line">        ctx.setResponseBody(resBody);</span><br><span class="line">        log.info(<span class="string">"&lt;&lt; 鉴权失败[&#123;&#125;]"</span>,relativeURL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">convertToString</span><span class="params">(ResponseMO resMO)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = mapper.writeValueAsString(resMO);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取相对访问路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">extractRelativePath</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        <span class="keyword">return</span> requestURI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>SpringCloudFeign</code>基于接口来实现调用，<code>Spring Cloud</code> 给<code>Feign</code> 添加了支持 <code>Spring MVC</code>  注解，这对应我们平常开发来说是很容易上手的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Feign-简介&quot;&gt;&lt;a href=&quot;#Feign-简介&quot; class=&quot;headerlink&quot; title=&quot;Feign 简介&quot;&gt;&lt;/a&gt;Feign 简介&lt;/h3&gt;&lt;h4 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Zuul)服务路由转发RibbonRoutingFilter</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Zuul)%E6%9C%8D%E5%8A%A1%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91RibbonRoutingFilter/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Zuul)服务路由转发RibbonRoutingFilter/</id>
    <published>2019-08-06T16:05:03.000Z</published>
    <updated>2019-08-31T02:33:57.805Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>当我们为<code>Spring Cloud Zuul</code>构建的<code>API</code>网关服务引入<code>Spring Cloud Consul</code>之后，它会为<code>Consul</code>中的每个服务都自动创建一个默认路由规则，这些默认规则的<code>path</code>会使用<code>ServiceId</code>配置的服务名作为请求前缀</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/consul-dc1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>比如上图我们在<code>consul</code>注册了<code>cloudZuul</code>，<code>cloudSso</code>，<code>cloudUser</code>三个服务，那么就可以通过服务名作为请求前缀将请求转发到不同服务上，这里我们<code>cloudZuul</code>服务地址为<code>http://127.0.0.1:2000</code></p><ul><li>访问<code>cloudUser</code>服务接口，举例:<code>http://127.0.0.1:2000/cloudUser/user/getById/1</code></li><li>访问<code>cloudSso</code>服务接口，举例:<code>http://127.0.0.1:2000/cloudSso/sso/createToken</code></li></ul></li><li><p>上面这个服务路由转发是怎么实现的呢，通过上面几章我们可以知道<code>zuul</code>内部工作是通过一系列的<code>ZuulFilter</code>来实现的，通过调试断点可以定位到这个<code>RibbonRoutingFilter</code>，这个<code>ZuulFilter</code>的<code>filterType</code>是<code>route</code></p></li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>查看<code>RibbonRoutingFilter.java</code>，查看注释可以看到是使用了<code>Ribbon</code>及<code>Hystrix</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Route &#123;<span class="doctag">@link</span> ZuulFilter&#125; that uses Ribbon, Hystrix and pluggable http clients to send requests.</span></span><br><span class="line"><span class="comment"> * ServiceIds are found in the &#123;<span class="doctag">@link</span> RequestContext&#125; attribute &#123;<span class="doctag">@link</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants#SERVICE_ID_KEY&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Baxter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonRoutingFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(RibbonRoutingFilter.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> ProxyRequestHelper helper;</span><br><span class="line"><span class="keyword">protected</span> RibbonCommandFactory&lt;?&gt; ribbonCommandFactory;</span><br><span class="line"><span class="keyword">protected</span> List&lt;RibbonRequestCustomizer&gt; requestCustomizers;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> useServlet31 = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RibbonRoutingFilter</span><span class="params">(ProxyRequestHelper helper,</span></span></span><br><span class="line"><span class="function"><span class="params">   RibbonCommandFactory&lt;?&gt; ribbonCommandFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">   List&lt;RibbonRequestCustomizer&gt; requestCustomizers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.helper = helper;</span><br><span class="line"><span class="keyword">this</span>.ribbonCommandFactory = ribbonCommandFactory;</span><br><span class="line"><span class="keyword">this</span>.requestCustomizers = requestCustomizers;</span><br><span class="line"><span class="comment">// To support Servlet API 3.1 we need to check if getContentLengthLong exists</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> remove in 2.0</span></span><br><span class="line">HttpServletRequest.class.getMethod(<span class="string">"getContentLengthLong"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(NoSuchMethodException e) &#123;</span><br><span class="line">useServlet31 = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RibbonRoutingFilter</span><span class="params">(RibbonCommandFactory&lt;?&gt; ribbonCommandFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="keyword">new</span> ProxyRequestHelper(), ribbonCommandFactory, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* for testing */</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isUseServlet31</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> useServlet31;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ROUTE_TYPE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> RIBBON_ROUTING_FILTER_ORDER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line"><span class="keyword">return</span> (ctx.getRouteHost() == <span class="keyword">null</span> &amp;&amp; ctx.get(SERVICE_ID_KEY) != <span class="keyword">null</span></span><br><span class="line">&amp;&amp; ctx.sendZuulResponse());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line"><span class="keyword">this</span>.helper.addIgnoredHeaders();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">RibbonCommandContext commandContext = buildCommandContext(context);</span><br><span class="line">ClientHttpResponse response = forward(commandContext);</span><br><span class="line">setResponse(response);</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ZuulException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RibbonCommandContext <span class="title">buildCommandContext</span><span class="params">(RequestContext context)</span> </span>&#123;</span><br><span class="line">HttpServletRequest request = context.getRequest();</span><br><span class="line"></span><br><span class="line">MultiValueMap&lt;String, String&gt; headers = <span class="keyword">this</span>.helper</span><br><span class="line">.buildZuulRequestHeaders(request);</span><br><span class="line">MultiValueMap&lt;String, String&gt; params = <span class="keyword">this</span>.helper</span><br><span class="line">.buildZuulRequestQueryParams(request);</span><br><span class="line">String verb = getVerb(request);</span><br><span class="line">InputStream requestEntity = getRequestBody(request);</span><br><span class="line"><span class="keyword">if</span> (request.getContentLength() &lt; <span class="number">0</span> &amp;&amp; !verb.equalsIgnoreCase(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">context.setChunkedRequestBody();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String serviceId = (String) context.get(SERVICE_ID_KEY);</span><br><span class="line">Boolean retryable = (Boolean) context.get(RETRYABLE_KEY);</span><br><span class="line">Object loadBalancerKey = context.get(LOAD_BALANCER_KEY);</span><br><span class="line"></span><br><span class="line">String uri = <span class="keyword">this</span>.helper.buildZuulRequestURI(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove double slashes</span></span><br><span class="line">uri = uri.replace(<span class="string">"//"</span>, <span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> contentLength = useServlet31 ? request.getContentLengthLong(): request.getContentLength();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RibbonCommandContext(serviceId, verb, uri, retryable, headers, params,</span><br><span class="line">requestEntity, <span class="keyword">this</span>.requestCustomizers, contentLength, loadBalancerKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ClientHttpResponse <span class="title">forward</span><span class="params">(RibbonCommandContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; info = <span class="keyword">this</span>.helper.debug(context.getMethod(),</span><br><span class="line">context.getUri(), context.getHeaders(), context.getParams(),</span><br><span class="line">context.getRequestEntity());</span><br><span class="line"></span><br><span class="line">RibbonCommand command = <span class="keyword">this</span>.ribbonCommandFactory.create(context);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ClientHttpResponse response = command.execute();</span><br><span class="line"><span class="keyword">this</span>.helper.appendDebug(info, response.getRawStatusCode(), response.getHeaders());</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (HystrixRuntimeException ex) &#123;</span><br><span class="line"><span class="keyword">return</span> handleException(info, ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ClientHttpResponse <span class="title">handleException</span><span class="params">(Map&lt;String, Object&gt; info,</span></span></span><br><span class="line"><span class="function"><span class="params">HystrixRuntimeException ex)</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> statusCode = HttpStatus.INTERNAL_SERVER_ERROR.value();</span><br><span class="line">Throwable cause = ex;</span><br><span class="line">String message = ex.getFailureType().toString();</span><br><span class="line"></span><br><span class="line">ClientException clientException = findClientException(ex);</span><br><span class="line"><span class="keyword">if</span> (clientException == <span class="keyword">null</span>) &#123;</span><br><span class="line">clientException = findClientException(ex.getFallbackException());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clientException != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (clientException</span><br><span class="line">.getErrorType() == ClientException.ErrorType.SERVER_THROTTLED) &#123;</span><br><span class="line">statusCode = HttpStatus.SERVICE_UNAVAILABLE.value();</span><br><span class="line">&#125;</span><br><span class="line">cause = clientException;</span><br><span class="line">message = clientException.getErrorType().toString();</span><br><span class="line">&#125;</span><br><span class="line">info.put(<span class="string">"status"</span>, String.valueOf(statusCode));</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZuulException(cause, <span class="string">"Forwarding error"</span>, statusCode, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ClientException <span class="title">findClientException</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t <span class="keyword">instanceof</span> ClientException) &#123;</span><br><span class="line"><span class="keyword">return</span> (ClientException) t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> findClientException(t.getCause());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> InputStream <span class="title">getRequestBody</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">InputStream requestEntity = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">requestEntity = (InputStream) RequestContext.getCurrentContext()</span><br><span class="line">.get(REQUEST_ENTITY_KEY);</span><br><span class="line"><span class="keyword">if</span> (requestEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">requestEntity = request.getInputStream();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">log.error(<span class="string">"Error during getRequestBody"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> requestEntity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getVerb</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String method = request.getMethod();</span><br><span class="line"><span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"GET"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setResponse</span><span class="params">(ClientHttpResponse resp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ClientException, IOException </span>&#123;</span><br><span class="line">RequestContext.getCurrentContext().set(<span class="string">"zuulResponse"</span>, resp);</span><br><span class="line"><span class="keyword">this</span>.helper.setResponse(resp.getRawStatusCode(),</span><br><span class="line">resp.getBody() == <span class="keyword">null</span> ? <span class="keyword">null</span> : resp.getBody(), resp.getHeaders());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们关注<code>run()方法</code>，可以发现可以划分为三个步骤</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取RequestContext</span></span><br><span class="line">    RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">    <span class="keyword">this</span>.helper.addIgnoredHeaders();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 构建执行Ribbon命令的参数</span></span><br><span class="line">        RibbonCommandContext commandContext = buildCommandContext(context);</span><br><span class="line">        <span class="comment">// 执行请求(核心)</span></span><br><span class="line">        ClientHttpResponse response = forward(commandContext);</span><br><span class="line">        <span class="comment">// 设置返回体</span></span><br><span class="line">        setResponse(response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ZuulException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1、构建执行Ribbon命令的参数"><a href="#1、构建执行Ribbon命令的参数" class="headerlink" title="1、构建执行Ribbon命令的参数"></a>1、构建执行Ribbon命令的参数</h5><ul><li>下图是<code>http://127.0.0.1:2000/cloudSso/sso/createToken</code>链接构造的<code>RibbonCommandContext</code>，可以看到获取到了<code>serviceId</code>、请求链接及方式、请求头的一些信息</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/commandContext.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><code>buildCommandContext()</code>方法就是通过<code>RequestContext</code>来构造<code>RibbonCommandContext</code>，<code>RequestContext</code>通过之前的<code>ZuulFilter</code>已经设置了一些属性，那么<code>buildCommandContext()</code>方法就可以很方便的获取一些参数信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RibbonCommandContext <span class="title">buildCommandContext</span><span class="params">(RequestContext context)</span> </span>&#123;</span><br><span class="line">    HttpServletRequest request = context.getRequest();</span><br><span class="line"></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">this</span>.helper</span><br><span class="line">            .buildZuulRequestHeaders(request);</span><br><span class="line">    MultiValueMap&lt;String, String&gt; params = <span class="keyword">this</span>.helper</span><br><span class="line">            .buildZuulRequestQueryParams(request);</span><br><span class="line">    String verb = getVerb(request);</span><br><span class="line">    InputStream requestEntity = getRequestBody(request);</span><br><span class="line">    <span class="keyword">if</span> (request.getContentLength() &lt; <span class="number">0</span> &amp;&amp; !verb.equalsIgnoreCase(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">        context.setChunkedRequestBody();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取serviceId</span></span><br><span class="line">    String serviceId = (String) context.get(SERVICE_ID_KEY);</span><br><span class="line">    <span class="comment">// 是否重试</span></span><br><span class="line">    Boolean retryable = (Boolean) context.get(RETRYABLE_KEY);</span><br><span class="line">    <span class="comment">// 负载均衡key</span></span><br><span class="line">    Object loadBalancerKey = context.get(LOAD_BALANCER_KEY);</span><br><span class="line"></span><br><span class="line">    String uri = <span class="keyword">this</span>.helper.buildZuulRequestURI(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove double slashes</span></span><br><span class="line">    uri = uri.replace(<span class="string">"//"</span>, <span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> contentLength = useServlet31 ? request.getContentLengthLong(): request.getContentLength();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RibbonCommandContext(serviceId, verb, uri, retryable, headers, params,</span><br><span class="line">            requestEntity, <span class="keyword">this</span>.requestCustomizers, contentLength, loadBalancerKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、执行请求-核心"><a href="#2、执行请求-核心" class="headerlink" title="2、执行请求(核心)"></a>2、执行请求(核心)</h5><ul><li><code>forward()</code>方法是执行的主体逻辑，可以看到主要逻辑是构建<code>RibbonCommand</code>然后执行<code>command.execute()</code>方法，由<code>RibbonCommand</code>完成<code>HTTP</code>请求的发送并的得到响应结果<code>ClientHttpResponse</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ClientHttpResponse <span class="title">forward</span><span class="params">(RibbonCommandContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; info = <span class="keyword">this</span>.helper.debug(context.getMethod(),</span><br><span class="line">            context.getUri(), context.getHeaders(), context.getParams(),</span><br><span class="line">            context.getRequestEntity());</span><br><span class="line">    RibbonCommand command = <span class="keyword">this</span>.ribbonCommandFactory.create(context);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ClientHttpResponse response = command.execute();</span><br><span class="line">        <span class="keyword">this</span>.helper.appendDebug(info, response.getRawStatusCode(), response.getHeaders());</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (HystrixRuntimeException ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> handleException(info, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>command.execute();</code> 方法，可以看到注释这个方法是同步执行方法，但里面又调用了<code>queue().get()</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Used for synchronous execution of command.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment"> *         Result of &#123;<span class="doctag">@link</span> #run()&#125; execution or a fallback from &#123;<span class="doctag">@link</span> #getFallback()&#125; if the command fails for any reason.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HystrixRuntimeException</span></span><br><span class="line"><span class="comment"> *             if a failure occurs and a fallback cannot be retrieved</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HystrixBadRequestException</span></span><br><span class="line"><span class="comment"> *             if invalid arguments or state were used representing a user failure, not a system failure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException</span></span><br><span class="line"><span class="comment"> *             if invoked more than once</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue().get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exceptions.sneakyThrow(decomposeException(e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Used for asynchronous execution of command.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This will queue up the command on the thread pool and return an &#123;<span class="doctag">@link</span> Future&#125; to get the result once it completes.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> If configured to not run in a separate thread, this will have the same effect as &#123;<span class="doctag">@link</span> #execute()&#125; and will block.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * We don't throw an exception but just flip to synchronous execution so code doesn't need to change in order to switch a command from running on a separate thread to the calling thread.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Future&lt;R&gt;&#125; Result of &#123;<span class="doctag">@link</span> #run()&#125; execution or a fallback from &#123;<span class="doctag">@link</span> #getFallback()&#125; if the command fails for any reason.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HystrixRuntimeException</span></span><br><span class="line"><span class="comment"> *             if a fallback does not exist</span></span><br><span class="line"><span class="comment"> *             &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;li&gt;via &#123;<span class="doctag">@code</span> Future.get()&#125; in &#123;<span class="doctag">@link</span> ExecutionException#getCause()&#125; if a failure occurs&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;li&gt;or immediately if the command can not be queued (such as short-circuited, thread-pool/semaphore rejected)&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HystrixBadRequestException</span></span><br><span class="line"><span class="comment"> *             via &#123;<span class="doctag">@code</span> Future.get()&#125; in &#123;<span class="doctag">@link</span> ExecutionException#getCause()&#125; if invalid arguments or state were used representing a user failure, not a system failure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException</span></span><br><span class="line"><span class="comment"> *             if invoked more than once</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;R&gt; <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The Future returned by Observable.toBlocking().toFuture() does not implement the</span></span><br><span class="line"><span class="comment">     * interruption of the execution thread when the "mayInterrupt" flag of Future.cancel(boolean) is set to true;</span></span><br><span class="line"><span class="comment">     * thus, to comply with the contract of Future, we must wrap around it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Future&lt;R&gt; delegate = toObservable().toBlocking().toFuture();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> Future&lt;R&gt; f = <span class="keyword">new</span> Future&lt;R&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (delegate.isCancelled()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (HystrixCommand.<span class="keyword">this</span>.getProperties().executionIsolationThreadInterruptOnFutureCancel().get()) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * The only valid transition here is false -&gt; true. If there are two futures, say f1 and f2, created by this command</span></span><br><span class="line"><span class="comment">                 * (which is super-weird, but has never been prohibited), and calls to f1.cancel(true) and to f2.cancel(false) are</span></span><br><span class="line"><span class="comment">                 * issued by different threads, it's unclear about what value would be used by the time mayInterruptOnCancel is checked.</span></span><br><span class="line"><span class="comment">                 * The most consistent way to deal with this scenario is to say that if *any* cancellation is invoked with interruption,</span></span><br><span class="line"><span class="comment">                 * than that interruption request cannot be taken back.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                interruptOnFutureCancel.compareAndSet(<span class="keyword">false</span>, mayInterruptIfRunning);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> res = delegate.cancel(interruptOnFutureCancel.get());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isExecutionComplete() &amp;&amp; interruptOnFutureCancel.get()) &#123;</span><br><span class="line">                <span class="keyword">final</span> Thread t = executionThread.get();</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; !t.equals(Thread.currentThread())) &#123;</span><br><span class="line">                    t.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.isCancelled();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.isDone();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> R <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> R <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.get(timeout, unit);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特殊处理立即抛出的错误状态</span></span><br><span class="line">    <span class="comment">/* special handling of error states that throw immediately */</span></span><br><span class="line">    <span class="keyword">if</span> (f.isDone()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f.get();</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Throwable t = decomposeException(e);</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> HystrixBadRequestException) &#123;</span><br><span class="line">                <span class="keyword">return</span> f;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class="line">                HystrixRuntimeException hre = (HystrixRuntimeException) t;</span><br><span class="line">                <span class="keyword">switch</span> (hre.getFailureType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> COMMAND_EXCEPTION:</span><br><span class="line">                <span class="keyword">case</span> TIMEOUT:</span><br><span class="line">                    <span class="comment">// we don't throw these types from queue() only from queue().get() as they are execution errors</span></span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">// these are errors we throw from queue() as they as rejection type errors</span></span><br><span class="line">                    <span class="keyword">throw</span> hre;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> Exceptions.sneakyThrow(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这个<code>queue()</code>方法</p><ul><li>查看注释可以知道这里采用了异步执行命令，这将在线程池上排队命令并返回<code>{@link Future}</code>以在结果完成后获得结果。</li><li>可以看到<code>final Future&lt;R&gt; delegate = toObservable().toBlocking().toFuture();</code>，这里使用了<code>Future</code>来执行处理，这个在多线程中可以经常看见，使用这个类可以得到线程的执行结果、什么<code>Observable</code> 观察者模式、<code>toBlocking</code> 队列形式</li><li><code>toObservable()</code>方法，这里使用了<code>ReactiveX</code>，这块感觉比较复杂，加个<code>TODO</code></li></ul></li><li><p><code>ReactiveX</code>这里简单百度了下</p><ul><li><code>RxJava</code>是 <code>ReactiveX</code> 在<code>JVM</code>上的一个实现，<code>ReactiveX</code>使用<code>Observable</code>序列组合异步和基于事件的程序。</li><li>相关链接:<a href="http://reactivex.io" target="_blank" rel="noopener">官网</a> <a href="https://mcxiaoke.gitbooks.io/rxdocs/content/topics/Getting-Started.html" target="_blank" rel="noopener">中文文档</a></li></ul></li></ul><ul><li><p>经过上面异步和基于事件的处理，我们可以来到下面这个方法</p></li><li><p>进入<code>com.netflix.loadbalancer.reactive.LoadBalancerCommand#selectServer()</code>方法，这个方法是根据负载均衡器返回一个<code>Server</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an Observable that either emits only the single requested server</span></span><br><span class="line"><span class="comment"> * or queries the load balancer for the next server on each subscription</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Observable&lt;Server&gt; <span class="title">selectServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Server&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Server&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Server server = loadBalancerContext.getServerFromLoadBalancer(loadBalancerURI, loadBalancerKey);   </span><br><span class="line">                next.onNext(server);</span><br><span class="line">                next.onCompleted();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                next.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>com.netflix.loadbalancer.LoadBalancerContext#getServerFromLoadBalancer()</code>方法，可以看到主要逻辑是从请求中的部分<code>URI</code>计算最终<code>URI</code>，下面有好几种情况<ul><li>如果主机丢失并且有负载均衡器，那么是从负载均衡器中选择的服务器获取主机/端口</li><li>如果主机丢失且没有负载均衡器，请尝试从客户端设置的虚拟地址派生主机/端口</li><li>如果主机存在并且<code>URI</code>的权限部分是为客户端设置的虚拟地址，并且存在负载均衡器，则从负载均衡器中选择的服务器获取主机/端口</li><li>如果主机存在但上述情况均不适用，则将主机解释为实际物理地址</li><li>如果主机丢失但以上都不适用，则抛出<code>ClientException</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compute the final URI from a partial URI in the request. The following steps are performed:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; if host is missing and there is a load balancer, get the host/port from server chosen from load balancer</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; if host is missing and there is no load balancer, try to derive host/port from virtual address set with the client</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; if host is present and the authority part of the URI is a virtual address set for the client, </span></span><br><span class="line"><span class="comment"> * and there is a load balancer, get the host/port from server chosen from load balancer</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; if host is present but none of the above applies, interpret the host as the actual physical address</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; if host is missing but none of the above applies, throws ClientException</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> original Original URI passed from caller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">getServerFromLoadBalancer</span><span class="params">(@Nullable URI original, @Nullable Object loadBalancerKey)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">    String host = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> port = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (original != <span class="keyword">null</span>) &#123;</span><br><span class="line">        host = original.getHost();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (original != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Pair&lt;String, Integer&gt; schemeAndPort = deriveSchemeAndPortFromPartialUri(original);        </span><br><span class="line">        port = schemeAndPort.second();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Various Supported Cases</span></span><br><span class="line">    <span class="comment">// The loadbalancer to use and the instances it has is based on how it was registered</span></span><br><span class="line">    <span class="comment">// In each of these cases, the client might come in using Full Url or Partial URL</span></span><br><span class="line">    ILoadBalancer lb = getLoadBalancer();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Partial URI or no URI Case</span></span><br><span class="line">        <span class="comment">// well we have to just get the right instances from lb - or we fall back</span></span><br><span class="line">        <span class="keyword">if</span> (lb != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 选择服务实例</span></span><br><span class="line">            Server svc = lb.chooseServer(loadBalancerKey);</span><br><span class="line">            <span class="keyword">if</span> (svc == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(ClientException.ErrorType.GENERAL,</span><br><span class="line">                        <span class="string">"Load balancer does not have available server for client: "</span></span><br><span class="line">                                + clientName);</span><br><span class="line">            &#125;</span><br><span class="line">            host = svc.getHost();</span><br><span class="line">            <span class="keyword">if</span> (host == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(ClientException.ErrorType.GENERAL,</span><br><span class="line">                        <span class="string">"Invalid Server for :"</span> + svc);</span><br><span class="line">            &#125;</span><br><span class="line">            logger.debug(<span class="string">"&#123;&#125; using LB returned Server: &#123;&#125; for request &#123;&#125;"</span>, <span class="keyword">new</span> Object[]&#123;clientName, svc, original&#125;);</span><br><span class="line">            <span class="keyword">return</span> svc;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No Full URL - and we dont have a LoadBalancer registered to</span></span><br><span class="line">            <span class="comment">// obtain a server</span></span><br><span class="line">            <span class="comment">// if we have a vipAddress that came with the registration, we</span></span><br><span class="line">            <span class="comment">// can use that else we</span></span><br><span class="line">            <span class="comment">// bail out</span></span><br><span class="line">            <span class="keyword">if</span> (vipAddresses != <span class="keyword">null</span> &amp;&amp; vipAddresses.contains(<span class="string">","</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(</span><br><span class="line">                        ClientException.ErrorType.GENERAL,</span><br><span class="line">                        <span class="string">"Method is invoked for client "</span> + clientName + <span class="string">" with partial URI of ("</span></span><br><span class="line">                        + original</span><br><span class="line">                        + <span class="string">") with no load balancer configured."</span></span><br><span class="line">                        + <span class="string">" Also, there are multiple vipAddresses and hence no vip address can be chosen"</span></span><br><span class="line">                        + <span class="string">" to complete this partial uri"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vipAddresses != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Pair&lt;String,Integer&gt; hostAndPort = deriveHostAndPortFromVipAddress(vipAddresses);</span><br><span class="line">                    host = hostAndPort.first();</span><br><span class="line">                    port = hostAndPort.second();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(</span><br><span class="line">                            ClientException.ErrorType.GENERAL,</span><br><span class="line">                            <span class="string">"Method is invoked for client "</span> + clientName + <span class="string">" with partial URI of ("</span></span><br><span class="line">                            + original</span><br><span class="line">                            + <span class="string">") with no load balancer configured. "</span></span><br><span class="line">                            + <span class="string">" Also, the configured/registered vipAddress is unparseable (to determine host and port)"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(</span><br><span class="line">                        ClientException.ErrorType.GENERAL,</span><br><span class="line">                        <span class="keyword">this</span>.clientName</span><br><span class="line">                        + <span class="string">" has no LoadBalancer registered and passed in a partial URL request (with no host:port)."</span></span><br><span class="line">                        + <span class="string">" Also has no vipAddress registered"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Full URL Case</span></span><br><span class="line">        <span class="comment">// This could either be a vipAddress or a hostAndPort or a real DNS</span></span><br><span class="line">        <span class="comment">// if vipAddress or hostAndPort, we just have to consult the loadbalancer</span></span><br><span class="line">        <span class="comment">// but if it does not return a server, we should just proceed anyways</span></span><br><span class="line">        <span class="comment">// and assume its a DNS</span></span><br><span class="line">        <span class="comment">// For restClients registered using a vipAddress AND executing a request</span></span><br><span class="line">        <span class="comment">// by passing in the full URL (including host and port), we should only</span></span><br><span class="line">        <span class="comment">// consult lb IFF the URL passed is registered as vipAddress in Discovery</span></span><br><span class="line">        <span class="keyword">boolean</span> shouldInterpretAsVip = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lb != <span class="keyword">null</span>) &#123;</span><br><span class="line">            shouldInterpretAsVip = isVipRecognized(original.getAuthority());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shouldInterpretAsVip) &#123;</span><br><span class="line">            Server svc = lb.chooseServer(loadBalancerKey);</span><br><span class="line">            <span class="keyword">if</span> (svc != <span class="keyword">null</span>)&#123;</span><br><span class="line">                host = svc.getHost();</span><br><span class="line">                <span class="keyword">if</span> (host == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(ClientException.ErrorType.GENERAL,</span><br><span class="line">                            <span class="string">"Invalid Server for :"</span> + svc);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.debug(<span class="string">"using LB returned Server: &#123;&#125; for request: &#123;&#125;"</span>, svc, original);</span><br><span class="line">                <span class="keyword">return</span> svc;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// just fall back as real DNS</span></span><br><span class="line">                logger.debug(<span class="string">"&#123;&#125;:&#123;&#125; assumed to be a valid VIP address or exists in the DNS"</span>, host, port);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// consult LB to obtain vipAddress backed instance given full URL</span></span><br><span class="line">            <span class="comment">//Full URL execute request - where url!=vipAddress</span></span><br><span class="line">            logger.debug(<span class="string">"Using full URL passed in by caller (not using load balancer): &#123;&#125;"</span>, original);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// end of creating final URL</span></span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(ClientException.ErrorType.GENERAL,<span class="string">"Request contains no HOST to talk to"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// just verify that at this point we have a full URL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Server(host, port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>我们这里进入<code>Server svc = lb.chooseServer(loadBalancerKey);</code>方法</p></li><li><p>进入<code>com.netflix.loadbalancer.AbstractServerPredicate#chooseRoundRobinAfterFiltering()</code>方法，我这里可以看到是有两个服务实例，那么就是需要从这两个中选择一个</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/chooseRoundRobin.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Choose a server in a round robin fashion after the predicate filters a given list of servers and load balancer key. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;Server&gt; <span class="title">chooseRoundRobinAfterFiltering</span><span class="params">(List&lt;Server&gt; servers, Object loadBalancerKey)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从服务实例列表中筛选一下符合条件的服务</span></span><br><span class="line">    List&lt;Server&gt; eligible = getEligibleServers(servers, loadBalancerKey);</span><br><span class="line">    <span class="keyword">if</span> (eligible.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.absent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Optional.of(eligible.get(incrementAndGetModulo(eligible.size())));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Referenced from RoundRobinRule</span></span><br><span class="line"><span class="comment"> * Inspired by the implementation of &#123;<span class="doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modulo The modulo to bound the value of the counter.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The next value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> current = nextIndex.get();</span><br><span class="line">        <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">        <span class="keyword">if</span> (nextIndex.compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>incrementAndGetModulo()</code>这里默认是采用了简单轮询负载均衡<code>（RoundRobin）</code>策略，看注释这里是<code>copy</code>了<code>JDK里的{@link AtomicInteger#incrementAndGet()}</code></p><ul><li>我们可以测试下这个方法</li><li><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncrementAndGetModuloTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger nextIndex = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IncrementAndGetModuloTest incrementAndGetModuloTest = <span class="keyword">new</span> IncrementAndGetModuloTest();</span><br><span class="line">        List&lt;String&gt; eligible = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        eligible.add(<span class="string">"服务1"</span>);</span><br><span class="line">        eligible.add(<span class="string">"服务2"</span>);</span><br><span class="line">        eligible.add(<span class="string">"服务3"</span>);</span><br><span class="line">        eligible.add(<span class="string">"服务4"</span>);</span><br><span class="line">        eligible.add(<span class="string">"服务5"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(incrementAndGetModuloTest.getServer(eligible));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getServer</span><span class="params">(List&lt;String&gt; eligible)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> eligible.get(incrementAndGetModulo(eligible.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">int</span> current = nextIndex.get();</span><br><span class="line">            <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">            <span class="keyword">if</span> (nextIndex.compareAndSet(current, next))</span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">服务1</span><br><span class="line">服务2</span><br><span class="line">服务3</span><br><span class="line">服务4</span><br><span class="line">服务5</span><br><span class="line">服务1</span><br><span class="line">服务2</span><br><span class="line">服务3</span><br><span class="line">服务4</span><br><span class="line">服务5</span><br><span class="line">服务1</span><br><span class="line">服务2</span><br><span class="line">服务3</span><br><span class="line">服务4</span><br><span class="line">服务5</span><br><span class="line">服务1</span><br><span class="line">服务2</span><br><span class="line">服务3</span><br><span class="line">服务4</span><br><span class="line">服务5</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="3、设置返回体"><a href="#3、设置返回体" class="headerlink" title="3、设置返回体"></a>3、设置返回体</h5><ul><li>执行完请求之后的得到结果， 可以看到是直接将<code>ClientHttpResponse</code>赋值到了<code>RequestContext</code>中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setResponse</span><span class="params">(ClientHttpResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ClientException, IOException </span>&#123;</span><br><span class="line">    RequestContext.getCurrentContext().set(<span class="string">"zuulResponse"</span>, resp);</span><br><span class="line">    <span class="keyword">this</span>.helper.setResponse(resp.getRawStatusCode(),</span><br><span class="line">            resp.getBody() == <span class="keyword">null</span> ? <span class="keyword">null</span> : resp.getBody(), resp.getHeaders());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p><code>RibbonRoutingFilter</code>这个类会为<code>Consul</code>中的每个服务都自动创建一个默认路由规则，然后根据这个规则将请求转发到不同的服务实例上，这些默认规则的<code>path</code>会使用<code>ServiceId</code>配置的服务名作为请求前缀</p></li><li><p><code>RibbonRoutingFilter</code>的类的主要功能</p><ul><li>1、先要挑选出具体调那个服务实例，如果是有多个服务具体选用的是哪种负载均衡策略，默认采用的是简单轮询负载均衡<code>（RoundRobin）</code>策略</li><li>2、获取到实例之后就是就是拼接<code>HTTP</code>请求，涉及请求<code>host</code>及<code>port</code>，组装完成之后就是执行请求了</li><li>3、执行请求之后就是把结果赋值到了<code>RequestContext</code>中，然后执行下一步<code>ZuulFilter</code></li></ul></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当我们为&lt;code&gt;Spring Cloud Zuul&lt;/code&gt;构建的&lt;code&gt;API&lt;/code&gt;网关服务引入&lt;code
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Zuul)工作原理源码分析之执行流程</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Zuul)%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Zuul)工作原理源码分析之执行流程/</id>
    <published>2019-08-06T16:05:02.000Z</published>
    <updated>2019-09-01T07:55:58.762Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p>上一章节已经介绍了使用<code>@EnableZuulServer</code>注解会开启 <code>ZuulProxyAutoConfiguration</code>自动注册功能，这个类会自动注册<code>Zuul</code>服务启动所需要的<code>Bean</code>，因为我们这里是网关服务，所以是需要接受外部应用的<code>Http</code>请求的</p></li><li><p>回顾<code>ZuulProxyAutoConfiguration</code> 的父类<code>ZuulServerAutoConfiguration</code>，从下面可以看到是注册了<code>ZuulController</code>，<code>ZuulHandlerMapping</code>，<code>ZuulServlet</code>三个<code>Bean</code>，所以我们可以猜测入口应该是<code>Spring MVC DispatcherServlet</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明是配置类</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123; ZuulProperties.class &#125;) <span class="comment">// 激活 zuul配置</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ZuulServlet.class) <span class="comment">// 条件1 存在ZuulServlet.class</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ZuulServerMarkerConfiguration.Marker.class) <span class="comment">// 条件2 存在ZuulServerMarkerConfiguration.Marker.class bean, 即应用使用@EnableZuulServer注解</span></span><br><span class="line"><span class="comment">// Make sure to get the ServerProperties from the same place as a normal web app would</span></span><br><span class="line"><span class="meta">@Import</span>(ServerPropertiesAutoConfiguration.class) <span class="comment">// 配置ServerProperties实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">protected</span> ZuulProperties zuulProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">protected</span> ServerProperties server;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> ErrorController errorController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HasFeatures <span class="title">zuulFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> HasFeatures.namedFeature(<span class="string">"Zuul (Simple)"</span>, ZuulServerAutoConfiguration.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompositeRouteLocator <span class="title">primaryRouteLocator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Collection&lt;RouteLocator&gt; routeLocators)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CompositeRouteLocator(routeLocators);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(SimpleRouteLocator.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleRouteLocator <span class="title">simpleRouteLocator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleRouteLocator(<span class="keyword">this</span>.server.getServletPrefix(),</span><br><span class="line"><span class="keyword">this</span>.zuulProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * zuulController, 包装了一个ZuulServlet类型的servlet, 实现对ZuulServlet类型的servlet的初始化.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulController <span class="title">zuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ZuulController();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulHandlerMapping <span class="title">zuulHandlerMapping</span><span class="params">(RouteLocator routes)</span> </span>&#123;</span><br><span class="line">ZuulHandlerMapping mapping = <span class="keyword">new</span> ZuulHandlerMapping(routes, zuulController());</span><br><span class="line">mapping.setErrorController(<span class="keyword">this</span>.errorController);</span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ApplicationListener&lt;ApplicationEvent&gt; <span class="title">zuulRefreshRoutesListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ZuulRefreshListener();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"zuulServlet"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">zuulServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ServletRegistrationBean servlet = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> ZuulServlet(),</span><br><span class="line"><span class="keyword">this</span>.zuulProperties.getServletPattern());</span><br><span class="line"><span class="comment">// The whole point of exposing this servlet is to provide a route that doesn't</span></span><br><span class="line"><span class="comment">// buffer requests.</span></span><br><span class="line">servlet.addInitParameter(<span class="string">"buffer-requests"</span>, <span class="string">"false"</span>);</span><br><span class="line"><span class="keyword">return</span> servlet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>查看源码是怎样执行调用的可以在代码里打好断点，观察其执行链，第六章节已经介绍了<code>Zuul</code>的一个简单例子，我们可以在自己定义的<code>Filter</code>的<code>run()</code>方法里打好断点，只要没配置错误，这里是一定会执行的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SsoClient ssoClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pattern p = Pattern.compile(<span class="string">"/*/pub/*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseMO resMO = <span class="keyword">new</span> ResponseMO();</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line"></span><br><span class="line">        String relativeURL = extractRelativePath(request);</span><br><span class="line">        String token = request.getHeader(WebConstants.TOKEN_HEADER);</span><br><span class="line">        <span class="keyword">if</span> (p.matcher(relativeURL).find()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"&gt;&gt; 鉴权开始[&#123;&#125;]"</span>,relativeURL);</span><br><span class="line">        ResponseMO resModel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (relativeURL.startsWith(ApplicationConstants.APPLICATION_ZUUL) ||</span><br><span class="line">                relativeURL.startsWith(ApplicationConstants.APPLICATION_USER) ||</span><br><span class="line">                relativeURL.startsWith(ApplicationConstants.APPLICATION_SSO)) &#123;</span><br><span class="line">            <span class="comment">// 调用sso服务鉴权</span></span><br><span class="line">            resModel = ssoClient.checkToken(<span class="keyword">new</span> TokenMO(token));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其他服务不对其进行路由</span></span><br><span class="line">            authorizationFailed(relativeURL, ctx, resMO);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resModel.getCode() != ResponseMO.RESPONSE_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="comment">// 鉴权失败不对其进行路由</span></span><br><span class="line">            authorizationFailed(relativeURL, ctx, resMO);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从jwt解析后的userId</span></span><br><span class="line">        ctx.addZuulRequestHeader(<span class="string">"userId"</span>, <span class="string">"reUserId"</span>);</span><br><span class="line">        log.info(<span class="string">"&lt;&lt; 鉴权通过[&#123;&#125;]] "</span>, relativeURL);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个boolean值来判断该过滤器是否要执行，true表示执行，false表示不执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * gives the order in which this filter will be executed, relative to other</span></span><br><span class="line"><span class="comment">     * filters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鉴权失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeURL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resMO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">authorizationFailed</span> <span class="params">(String relativeURL, RequestContext ctx, ResponseMO resMO)</span> </span>&#123;</span><br><span class="line">        ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">        ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        resMO.setAnonymous();</span><br><span class="line">        String resBody = convertToString(resMO);</span><br><span class="line">        ctx.setResponseBody(resBody);</span><br><span class="line">        log.info(<span class="string">"&lt;&lt; 鉴权失败[&#123;&#125;]"</span>,relativeURL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">convertToString</span><span class="params">(ResponseMO resMO)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = mapper.writeValueAsString(resMO);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取相对访问路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">extractRelativePath</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        <span class="keyword">return</span> requestURI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下图是其方法调用链路图，可以看到入口是<code>Spring MVC</code>的<code>DispatcherServlet</code>，然后就是<code>doDispatch</code>到了<code>ZuulController</code>上，<code>ZuulController</code>又转发到了<code>ZuulServlet</code>的<code>service</code>方法</li></ul><p><img src="/images/server/spring/spring-cloud/ZuulController.jpg" alt=""></p><ul><li>根据上图可以梳理出大致的执行流程<ul><li>1、内置<code>tomcat</code>容器接受<code>Http</code>请求</li><li>2、进入<code>DispatcherServlet</code>进行<code>doDispatch</code>请求转发</li><li>3、转发到<code>ZuulController</code>上，执行其<code>handleRequest()</code>方法</li><li>4、然后转发到<code>ZuulServlet</code>上的<code>service()</code>方法上，这个是个<code>HttpServlet</code>，这里会执行一系列的拦截器</li></ul></li></ul><h4 id="1、ZuulController"><a href="#1、ZuulController" class="headerlink" title="1、ZuulController"></a>1、ZuulController</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ZuulController.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>我们平常开发使用 <code>Spring MVC</code>一般都是通过<code>@Controller</code>注解的形式来定义其执行方法，<code>Spring</code>也提供通过实现接口的形式来定义其执行方法，下面的<code>ZuulController</code>就是这个例子，可以看到这个类十分简单，就只有主体方法<code>handleRequest()</code>，此方法是定义在<code>Controller</code>接口上</p></li><li><p>那是<code>DispatcherServlet</code>是怎样找到<code>ZuulController</code>这个执行类的呢，可以看到<code>ZuulServerAutoConfiguration</code>是注册了<code>ZuulController</code>及<code>ZuulHandlerMapping</code>这两个<code>bean</code>，<code>ZuulHandlerMapping</code>和我们平常使用的<code>RequestMappingHandlerMapping</code>都是继承<code>HandlerMapping</code>接口，这个接口是定义请求与具体执行者的映射关系，所以<code>DispatcherServlet</code>就能发现<code>ZuulController</code>这个执行类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * zuulController, 包装了一个ZuulServlet类型的servlet, 实现对ZuulServlet类型的servlet的初始化.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulController <span class="title">zuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ZuulController();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulHandlerMapping <span class="title">zuulHandlerMapping</span><span class="params">(RouteLocator routes)</span> </span>&#123;</span><br><span class="line">    ZuulHandlerMapping mapping = <span class="keyword">new</span> ZuulHandlerMapping(routes, zuulController());</span><br><span class="line">    mapping.setErrorController(<span class="keyword">this</span>.errorController);</span><br><span class="line">    <span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>org.springframework.web.servlet.mvc.Controller#handleRequest</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the request and return a ModelAndView object which the DispatcherServlet</span></span><br><span class="line"><span class="comment"> * will render. A &#123;<span class="doctag">@code</span> null&#125; return value is not an error: it indicates that</span></span><br><span class="line"><span class="comment"> * this object completed request processing itself and that there is therefore no</span></span><br><span class="line"><span class="comment"> * ModelAndView to render.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a ModelAndView to render, or &#123;<span class="doctag">@code</span> null&#125; if handled directly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception in case of errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>org.springframework.cloud.netflix.zuul.web.ZuulController#handleRequest</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulController</span> <span class="keyword">extends</span> <span class="title">ServletWrappingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setServletClass(ZuulServlet.class);</span><br><span class="line">setServletName(<span class="string">"zuul"</span>);</span><br><span class="line">setSupportedMethods((String[]) <span class="keyword">null</span>); <span class="comment">// Allow all</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// We don't care about the other features of the base class, just want to</span></span><br><span class="line"><span class="comment">// handle the request</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.handleRequestInternal(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// @see com.netflix.zuul.context.ContextLifecycleFilter.doFilter</span></span><br><span class="line">RequestContext.getCurrentContext().unset();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>查看<code>ZuulController</code>的构造函数里面<code>setServletClass(ZuulServlet.class)</code>可以看到是设置了父类<code>ServletWrappingController</code>的<code>servletClass</code>为<code>ZuulServlet.class</code></p><ul><li><p>看看父类<code>ServletWrappingController</code></p><ul><li>代码如下，可以看到成员变量是记录了<code>Servlet</code>的<code>name</code>及<code>Class</code>对象，<code>Servlet servletInstance</code>是在<code>afterPropertiesSet()</code>赋值的，这个函数是<code>Spring</code>的钩子函数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWrappingController</span> <span class="keyword">extends</span> <span class="title">AbstractController</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;? extends Servlet&gt; servletClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String servletName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties initParameters = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Servlet servletInstance;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServletWrappingController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the class of the servlet to wrap.</span></span><br><span class="line"><span class="comment">     * Needs to implement &#123;<span class="doctag">@code</span> javax.servlet.Servlet&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> javax.servlet.Servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletClass</span><span class="params">(Class&lt;? extends Servlet&gt; servletClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servletClass = servletClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the name of the servlet to wrap.</span></span><br><span class="line"><span class="comment">     * Default is the bean name of this controller.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletName</span><span class="params">(String servletName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servletName = servletName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Specify init parameters for the servlet to wrap,</span></span><br><span class="line"><span class="comment">     * as name-value pairs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInitParameters</span><span class="params">(Properties initParameters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initParameters = initParameters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the wrapped Servlet instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> javax.servlet.Servlet#init(javax.servlet.ServletConfig)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.servletClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"'servletClass' is required"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.servletName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.servletName = <span class="keyword">this</span>.beanName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.servletInstance = <span class="keyword">this</span>.servletClass.newInstance();</span><br><span class="line">        <span class="keyword">this</span>.servletInstance.init(<span class="keyword">new</span> DelegatingServletConfig());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoke the wrapped Servlet instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> javax.servlet.Servlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleRequestInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.servletInstance.service(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进入<code>ZuulController</code>的<code>handleRequest()</code>方法，可以看到就一个入口<code>super.handleRequestInternal(request, response);</code>，进入此方法，可以看到实际上就是执行了<code>ZuulServlet</code>的<code>service()</code>方法，<code>Spring</code>将一个<code>Servlet</code>包裹在一个<code>Controller</code>里面了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行被包裹的Servlet</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment"> * Invoke the wrapped Servlet instance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.servlet.Servlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleRequestInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.servletInstance.service(request, response);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2、ZuulServlet"><a href="#2、ZuulServlet" class="headerlink" title="2、ZuulServlet"></a>2、ZuulServlet</h4><ul><li>先看代码，可以看到<code>ZuulServlet</code>就是个<code>Servlet</code>，所以我们关心他的<code>service()</code>方法，注意这个类是属于<code>com.netflix.zuul</code>包下的，不是<code>Spring</code>的类，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Core Zuul servlet which intializes and orchestrates zuulFilter execution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mikey Cohen</span></span><br><span class="line"><span class="comment"> *         Date: 12/23/11</span></span><br><span class="line"><span class="comment"> *         Time: 10:44 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3374242278843351500L</span>;</span><br><span class="line">    <span class="keyword">private</span> ZuulRunner zuulRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(config);</span><br><span class="line"></span><br><span class="line">        String bufferReqsStr = config.getInitParameter(<span class="string">"buffer-requests"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> bufferReqs = bufferReqsStr != <span class="keyword">null</span> &amp;&amp; bufferReqsStr.equals(<span class="string">"true"</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        zuulRunner = <span class="keyword">new</span> ZuulRunner(bufferReqs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Marks this request as having passed through the "Zuul engine", as opposed to servlets</span></span><br><span class="line">            <span class="comment">// explicitly bound in web.xml, for which requests will not have the same data attached</span></span><br><span class="line">            RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">            context.setZuulEngineRan();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preRoute();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRoute();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                route();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRoute();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                postRoute();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            error(<span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNHANDLED_EXCEPTION_"</span> + e.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RequestContext.getCurrentContext().unset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * executes "post" ZuulFilters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        zuulRunner.postRoute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * executes "route" filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">route</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        zuulRunner.route();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * executes "pre" filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        zuulRunner.preRoute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * initializes request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(HttpServletRequest servletRequest, HttpServletResponse servletResponse)</span> </span>&#123;</span><br><span class="line">        zuulRunner.init(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sets error context info and executes "error" filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(ZuulException e)</span> </span>&#123;</span><br><span class="line">        RequestContext.getCurrentContext().setThrowable(e);</span><br><span class="line">        zuulRunner.error();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        HttpServletRequest servletRequest;</span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        HttpServletResponseWrapper servletResponse;</span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        FilterProcessor processor;</span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        PrintWriter writer;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Before</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessZuulFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            ZuulServlet zuulServlet = <span class="keyword">new</span> ZuulServlet();</span><br><span class="line">            zuulServlet = spy(zuulServlet);</span><br><span class="line">            RequestContext context = spy(RequestContext.getCurrentContext());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FilterProcessor.setProcessor(processor);</span><br><span class="line">                RequestContext.testSetCurrentContext(context);</span><br><span class="line">                when(servletResponse.getWriter()).thenReturn(writer);</span><br><span class="line"></span><br><span class="line">                zuulServlet.init(servletRequest, servletResponse);</span><br><span class="line">                verify(zuulServlet, times(<span class="number">1</span>)).init(servletRequest, servletResponse);</span><br><span class="line">                assertTrue(RequestContext.getCurrentContext().getRequest() <span class="keyword">instanceof</span> HttpServletRequestWrapper);</span><br><span class="line">                assertTrue(RequestContext.getCurrentContext().getResponse() <span class="keyword">instanceof</span> HttpServletResponseWrapper);</span><br><span class="line"></span><br><span class="line">                zuulServlet.preRoute();</span><br><span class="line">                verify(processor, times(<span class="number">1</span>)).preRoute();</span><br><span class="line"></span><br><span class="line">                zuulServlet.postRoute();</span><br><span class="line">                verify(processor, times(<span class="number">1</span>)).postRoute();</span><br><span class="line"><span class="comment">//                verify(context, times(1)).unset();</span></span><br><span class="line"></span><br><span class="line">                zuulServlet.route();</span><br><span class="line">                verify(processor, times(<span class="number">1</span>)).route();</span><br><span class="line">                RequestContext.testSetCurrentContext(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关注<code>service()</code>方法，可以说这里是<code>zuul</code>的核心方法，看到这里的代码再来理解之前章节截的图就十分形象了，可以看到这里主要逻辑就是执行<code>filter</code>了，可以发现<code>preRoute()</code>及<code>route()</code>都是跳转到<code>ZuulRunner zuulRunner</code>里对应的方法执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.init((HttpServletRequest)servletRequest, (HttpServletResponse)servletResponse);</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        context.setZuulEngineRan();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行 pre filter</span></span><br><span class="line">            <span class="keyword">this</span>.preRoute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException var12) &#123;</span><br><span class="line">            <span class="comment">// 发生异常 执行error 及 post filter</span></span><br><span class="line">            <span class="keyword">this</span>.error(var12);</span><br><span class="line">            <span class="keyword">this</span>.postRoute();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行 routing filter</span></span><br><span class="line">            <span class="keyword">this</span>.route();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException var13) &#123;</span><br><span class="line">            <span class="comment">// 发生异常 执行error 及 post filter</span></span><br><span class="line">            <span class="keyword">this</span>.error(var13);</span><br><span class="line">            <span class="keyword">this</span>.postRoute();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行 post filter</span></span><br><span class="line">            <span class="keyword">this</span>.postRoute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException var11) &#123;</span><br><span class="line">            <span class="keyword">this</span>.error(var11);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var14) &#123;</span><br><span class="line">        <span class="keyword">this</span>.error(<span class="keyword">new</span> ZuulException(var14, <span class="number">500</span>, <span class="string">"UNHANDLED_EXCEPTION_"</span> + var14.getClass().getName()));</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        RequestContext.getCurrentContext().unset();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>我们现在来调试<code>service()</code>方法</p><ul><li><p>先来看第一行<code>this.init((HttpServletRequest)servletRequest, (HttpServletResponse)servletResponse);</code></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(HttpServletRequest servletRequest, HttpServletResponse servletResponse)</span> </span>&#123;</span><br><span class="line">    zuulRunner.init(servletRequest, servletResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>跳转到<code>zuulRunner.init（）</code>方法，可以看到下面使用了构造了一个<code>RequestContext</code>，并设置<code>HttpServlet request and HttpResponse</code>，不出所外这个类就是<code>ThreadLocal</code>来实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sets HttpServlet request and HttpResponse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(HttpServletRequest servletRequest, HttpServletResponse servletResponse)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">    <span class="keyword">if</span> (bufferRequests) &#123;</span><br><span class="line">        ctx.setRequest(<span class="keyword">new</span> HttpServletRequestWrapper(servletRequest));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.setRequest(servletRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ctx.setResponse(<span class="keyword">new</span> HttpServletResponseWrapper(servletResponse));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看<code>RequestContext</code>类，查看本地变量可以发现<code>ThreadLocal&lt;? extends RequestContext&gt; threadLocal</code>，而且这个类继承了<code>ConcurrentHashMap</code>所以这个类应该是存放每次请求的各种参数的，使用<code>ThreadLocal</code>变量来达到线程隔离的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Request Context holds request, response,  state information and data for ZuulFilters to access and share.</span></span><br><span class="line"><span class="comment"> * The RequestContext lives for the duration of the request and is ThreadLocal.</span></span><br><span class="line"><span class="comment"> * extensions of RequestContext can be substituted by setting the contextClass.</span></span><br><span class="line"><span class="comment"> * Most methods here are convenience wrapper methods; the RequestContext is an extension of a ConcurrentHashMap</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mikey Cohen</span></span><br><span class="line"><span class="comment"> *         Date: 10/13/11</span></span><br><span class="line"><span class="comment"> *         Time: 10:21 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span> <span class="keyword">extends</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(RequestContext.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> Class&lt;? extends RequestContext&gt; contextClass = RequestContext.class;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RequestContext testContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;? extends RequestContext&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;RequestContext&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> RequestContext <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> contextClass.newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>看完第一行我们知道构造了一个<code>RequestContext</code>，再来回去看第二三行代码</p><ul><li>可以看到重新获取了一下<code>RequestContext</code>,<code>context.setZuulEngineRan();</code>用于标记这个请求是<code>Zuul engine</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Marks this request as having passed through the "Zuul engine", as opposed to servlets</span></span><br><span class="line"><span class="comment">// explicitly bound in web.xml, for which requests will not have the same data attached</span></span><br><span class="line">RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">context.setZuulEngineRan();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>下面就是执行各种<code>Route</code>了</p><h5 id="2-1、preRoute"><a href="#2-1、preRoute" class="headerlink" title="2.1、preRoute()"></a>2.1、preRoute()</h5></li></ul></li><li><p>先来看<code>preRoute()</code>，这个<code>filters</code>是最先执行的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    zuulRunner.preRoute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>com.netflix.zuul.ZuulRunner#preRoute()</code>，可以看到又包装了一个<code>FilterProcessor</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    FilterProcessor.getInstance().preRoute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>查看<code>FilterProcessor</code>类，这个类是执行<code>filters</code>的核心类，可以看到这个类的使用是用了单例模式</p><ul><li>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This the the core class to execute filters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mikey Cohen</span></span><br><span class="line"><span class="comment"> *         Date: 10/24/11</span></span><br><span class="line"><span class="comment"> *         Time: 12:47 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> FilterProcessor INSTANCE = <span class="keyword">new</span> FilterProcessor();</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(FilterProcessor.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FilterUsageNotifier usageNotifier;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        usageNotifier = <span class="keyword">new</span> BasicFilterUsageNotifier();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the singleton FilterProcessor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FilterProcessor <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sets a singleton processor in case of a need to override default behavior</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setProcessor</span><span class="params">(FilterProcessor processor)</span> </span>&#123;</span><br><span class="line">        INSTANCE = processor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进入<code>com.netflix.zuul.FilterProcessor#preRoute()</code>，看注释可以看到本方法是在请求路由之前执行所有的<code>&quot;pre&quot; filters</code>，可以看到得到<code>List&lt;ZuulFilter&gt; list</code>然后<code>for</code>循环执行</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * runs all "pre" filters. These filters are run before routing to the orgin.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runFilters(<span class="string">"pre"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNCAUGHT_EXCEPTION_IN_PRE_FILTER_"</span> + e.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * runs all filters of the filterType sType/ Use this method within filters to run custom filters by type</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sType the filterType.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Throwable throws up an arbitrary exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">runFilters</span><span class="params">(String sType)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (RequestContext.getCurrentContext().debugRouting()) &#123;</span><br><span class="line">        Debug.addRoutingDebug(<span class="string">"Invoking &#123;"</span> + sType + <span class="string">"&#125; type filters"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> bResult = <span class="keyword">false</span>;</span><br><span class="line">    List&lt;ZuulFilter&gt; list = FilterLoader.getInstance().getFiltersByType(sType);</span><br><span class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            ZuulFilter zuulFilter = list.get(i);</span><br><span class="line">            <span class="comment">// 执行ZuulFilter</span></span><br><span class="line">            Object result = processZuulFilter(zuulFilter);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">                bResult |= ((Boolean) result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>List<zuulfilter> list 结果</zuulfilter></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/pre-filter.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>上面代码可以看到已经筛选出上图这些<code>&quot;pre&quot; filters</code></p><ul><li>这些<code>&quot;pre&quot; filters</code> 也有我们自己定义的<code>AuthenticationFilter</code></li><li>可以看到<code>ServletDetectionFilter</code>是最先执行的<code>filter</code>，因为<code>filterOrder()</code>是最小，这个<code>filter</code>用于标识请求是否是<code>DispatcherServletRequest</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDetectionFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServletDetectionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Must run before other filters that rely on the difference between </span></span><br><span class="line"><span class="comment">     * DispatcherServlet and ZuulServlet.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SERVLET_DETECTION_FILTER_ORDER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="keyword">if</span> (!(request <span class="keyword">instanceof</span> HttpServletRequestWrapper) </span><br><span class="line">                &amp;&amp; isDispatcherServletRequest(request)) &#123;</span><br><span class="line">            ctx.set(IS_DISPATCHER_SERVLET_REQUEST_KEY, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.set(IS_DISPATCHER_SERVLET_REQUEST_KEY, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isDispatcherServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE) != <span class="keyword">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进入<code>Object result = processZuulFilter(zuulFilter)</code> 查看<code>ZuulFilter</code>执行逻辑</p><ul><li><p><code>com.netflix.zuul.FilterProcessor#processZuulFilter</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Processes an individual ZuulFilter. This method adds Debug information. Any uncaught Thowables are caught by this method and converted to a ZuulException with a 500 status code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the return value for that filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">processZuulFilter</span><span class="params">(ZuulFilter filter)</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">    <span class="keyword">boolean</span> bDebug = ctx.debugRouting();</span><br><span class="line">    <span class="keyword">final</span> String metricPrefix = <span class="string">"zuul.filter-"</span>;</span><br><span class="line">    <span class="keyword">long</span> execTime = <span class="number">0</span>;</span><br><span class="line">    String filterName = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> ltime = System.currentTimeMillis();</span><br><span class="line">        filterName = filter.getClass().getSimpleName();</span><br><span class="line">        </span><br><span class="line">        RequestContext copy = <span class="keyword">null</span>;</span><br><span class="line">        Object o = <span class="keyword">null</span>;</span><br><span class="line">        Throwable t = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (bDebug) &#123;</span><br><span class="line">            Debug.addRoutingDebug(<span class="string">"Filter "</span> + filter.filterType() + <span class="string">" "</span> + filter.filterOrder() + <span class="string">" "</span> + filterName);</span><br><span class="line">            copy = ctx.copy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        ZuulFilterResult result = filter.runFilter();</span><br><span class="line">        ExecutionStatus s = result.getStatus();</span><br><span class="line">        execTime = System.currentTimeMillis() - ltime;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">            <span class="keyword">case</span> FAILED:</span><br><span class="line">                t = result.getException();</span><br><span class="line">                ctx.addFilterExecutionSummary(filterName, ExecutionStatus.FAILED.name(), execTime);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SUCCESS:</span><br><span class="line">                o = result.getResult();</span><br><span class="line">                ctx.addFilterExecutionSummary(filterName, ExecutionStatus.SUCCESS.name(), execTime);</span><br><span class="line">                <span class="keyword">if</span> (bDebug) &#123;</span><br><span class="line">                    Debug.addRoutingDebug(<span class="string">"Filter &#123;"</span> + filterName + <span class="string">" TYPE:"</span> + filter.filterType() + <span class="string">" ORDER:"</span> + filter.filterOrder() + <span class="string">"&#125; Execution time = "</span> + execTime + <span class="string">"ms"</span>);</span><br><span class="line">                    Debug.compareContextState(filterName, copy);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">throw</span> t;</span><br><span class="line">    </span><br><span class="line">        usageNotifier.notify(filter, s);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bDebug) &#123;</span><br><span class="line">            Debug.addRoutingDebug(<span class="string">"Running Filter failed "</span> + filterName + <span class="string">" type:"</span> + filter.filterType() + <span class="string">" order:"</span> + filter.filterOrder() + <span class="string">" "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        usageNotifier.notify(filter, ExecutionStatus.FAILED);</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ZuulException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (ZuulException) e;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ZuulException ex = <span class="keyword">new</span> ZuulException(e, <span class="string">"Filter threw Exception"</span>, <span class="number">500</span>, filter.filterType() + <span class="string">":"</span> + filterName);</span><br><span class="line">            ctx.addFilterExecutionSummary(filterName, ExecutionStatus.FAILED.name(), execTime);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进入<code>ZuulFilterResult result = filter.runFilter();</code>可以看到是直接调用了<code>run()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ZuulFilterResult <span class="title">runFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ZuulFilterResult zr = <span class="keyword">new</span> ZuulFilterResult();</span><br><span class="line">    <span class="keyword">if</span> (!isFilterDisabled()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldFilter()) &#123;</span><br><span class="line">            Tracer t = TracerFactory.instance().startMicroTracer(<span class="string">"ZUUL::"</span> + <span class="keyword">this</span>.getClass().getSimpleName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行run方法</span></span><br><span class="line">                Object res = run();</span><br><span class="line">                zr = <span class="keyword">new</span> ZuulFilterResult(res, ExecutionStatus.SUCCESS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                t.setName(<span class="string">"ZUUL::"</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" failed"</span>);</span><br><span class="line">                zr = <span class="keyword">new</span> ZuulFilterResult(ExecutionStatus.FAILED);</span><br><span class="line">                zr.setException(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                t.stopAndLog();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            zr = <span class="keyword">new</span> ZuulFilterResult(ExecutionStatus.SKIPPED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> zr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="2-2、route"><a href="#2-2、route" class="headerlink" title="2.2、route()"></a>2.2、route()</h5><ul><li><code>preRoute()</code>执行完成之后就是执行<code>route()</code>了，我们进入<code>com.netflix.zuul.ZuulRunner#route()</code>，可以看到这里和<code>preRoute()</code>方法执行一样也是执行了<code>runFilters()</code>方法，只不过是用参数进行区分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * executes "route" filterType  ZuulFilters</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">route</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    FilterProcessor.getInstance().route();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.netflix.zuul.FilterProcessor#route </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">route</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runFilters(<span class="string">"route"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNCAUGHT_EXCEPTION_IN_ROUTE_FILTER_"</span> + e.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>List<zuulfilter> list</zuulfilter></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/route.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>查看上图可以发现默认是有三个<code>routing filter</code>，我们这里关注的是<code>RibbonRoutingFilter</code>，这里是进行负载均衡路由转发的操作</p><ul><li>进入<code>processZuulFilter(ZuulFilter filter)</code>方法，查看<code>RequestContext</code>变量已经发现有一些关键信息了，这些信息是<code>pre filter</code>添加上去的，为路由转发为准备<br><img src="/images/server/spring/spring-cloud/routing-filter.jpg" alt=""></li><li><p>进入<code>RibbonRoutingFilter</code>的<code>run()</code>方法，可以看到是封装了一个<code>Ribbon</code>请求，执行请求，设置请求结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line"><span class="keyword">this</span>.helper.addIgnoredHeaders();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 根据RequestContext封装为一个Ribbon请求命名对象，里面有请求链接及请求参数</span></span><br><span class="line">RibbonCommandContext commandContext = buildCommandContext(context);</span><br><span class="line"><span class="comment">// 执行请求</span></span><br><span class="line">ClientHttpResponse response = forward(commandContext);</span><br><span class="line"><span class="comment">// 设置请求结果</span></span><br><span class="line">setResponse(response);</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ZuulException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进入<code>forward(commandContext)</code>方法，<code>command.execute();</code>就是通过服务名来找出具体可以接受服务的<code>ip</code>及<code>port</code>，然后请求执行，这里涉及到从注册中心获取服务<code>ip</code>及<code>port</code>，负载均衡处理，断路器处理</p></li><li><p>最终结果会放在<code>ClientHttpResponse</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ClientHttpResponse <span class="title">forward</span><span class="params">(RibbonCommandContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; info = <span class="keyword">this</span>.helper.debug(context.getMethod(),</span><br><span class="line">context.getUri(), context.getHeaders(), context.getParams(),</span><br><span class="line">context.getRequestEntity());</span><br><span class="line">       <span class="comment">// 创建请求</span></span><br><span class="line">RibbonCommand command = <span class="keyword">this</span>.ribbonCommandFactory.create(context);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 执行请求</span></span><br><span class="line">ClientHttpResponse response = command.execute();</span><br><span class="line"><span class="keyword">this</span>.helper.appendDebug(info, response.getRawStatusCode(), response.getHeaders());</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (HystrixRuntimeException ex) &#123;</span><br><span class="line"><span class="keyword">return</span> handleException(info, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进入<code>this.ribbonCommandFactory.create(context);</code>，下图是获取了<code>RibbonLoadBalancingHttpClient</code>，查看参数可以看到一些关键信息，比如链接超时时间<br><img src="/images/server/spring/spring-cloud/ribbonCommand.jpg" alt=""></p></li></ul></li></ul><h5 id="2-3、postRoute"><a href="#2-3、postRoute" class="headerlink" title="2.3、postRoute()"></a>2.3、postRoute()</h5><ul><li>进入<code>com.netflix.zuul.ZuulRunner#postRoute()</code> 与上面同理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    FilterProcessor.getInstance().postRoute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.netflix.zuul.FilterProcessor#postRoute </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runFilters(<span class="string">"post"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNCAUGHT_EXCEPTION_IN_POST_FILTER_"</span> + e.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4、error"><a href="#2-4、error" class="headerlink" title="2.4、error()"></a>2.4、error()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runFilters(<span class="string">"error"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.netflix.zuul.FilterProcessor#error </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runFilters(<span class="string">"error"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>ZuulController</code>是<code>SpringCloud Zuul</code>的统一入口，因为要和<code>Spring</code>联系起来，所以这里遵循的<code>Spring MVC DispatcherServlet</code>的模式，这个<code>ZuulController</code>将<code>com.netflix.zuul</code>包下的<code>ZuulServlet</code>整合起来，实际请求是跳转到<code>ZuulServlet</code>来处理的</li><li><code>Zuul</code>组件的核心是一系列的过滤器<code>filters</code>，通过一系列的<code>filters</code>流式处理，按照阶段分为<code>pre</code>、<code>routing</code> 、<code>post</code>、<code>error</code>四种类型的<code>filter</code>，在流式处理过程中使用<code>RequestContext</code>保存整个请求需要的参数及结果</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上一章节已经介绍了使用&lt;code&gt;@EnableZuulServer&lt;/code&gt;注解会开启 &lt;code&gt;ZuulProx
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Zuul)工作原理源码分析之初始化</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Zuul)%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Zuul)工作原理源码分析之初始化/</id>
    <published>2019-08-06T16:05:01.000Z</published>
    <updated>2019-08-31T02:31:25.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p>由上一章节可以知道要创建一个<code>zuul</code>应用，只需添加<code>spring-cloud-starter-zuul</code> <code>maven</code>依赖及启动类上添加<code>@EnableZuulProxy</code>就可创建一个<code>zuul</code>应用，那么要知道<code>Zuul</code>工作原理就需从这个两个地方作为入口进行研究</p></li><li><p>zuul版本: <code>1.4.3.RELEASE</code></p></li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="Zuul-初始化"><a href="#Zuul-初始化" class="headerlink" title="Zuul 初始化"></a>Zuul 初始化</h4><h5 id="spring-cloud-starter-zuul-starter"><a href="#spring-cloud-starter-zuul-starter" class="headerlink" title="spring-cloud-starter-zuul starter"></a>spring-cloud-starter-zuul starter</h5><ul><li>我们先查看<code>spring-cloud-starter-zuul starter</code>包下有什么，这里的重点就是<code>pom.xml</code>文件，<code>ZuulDeprecationWarningAutoConfiguration.java</code>此类已经被<code>@Deprecated</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul-starter.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>打开<code>org.springframework.cloud/spring-cloud-starter-zuul/pom.xml</code> ，可以看到是依赖了<code>spring-cloud-starter-netflix-zuul</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>..<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud Starter Zuul (deprecated, please use spring-cloud-starter-netflix-zuul)<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://projects.spring.io/spring-cloud<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main.basedir</span>&gt;</span>$&#123;basedir&#125;/../..<span class="tag">&lt;/<span class="name">main.basedir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们查看<code>spring-cloud-starter-netflix-zuul</code>包</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul-starter2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>这里关注<code>spring-cloud-starter-netflix-zuul/pom.xml</code>及<code>spring-cloud-starter-netflix-zuul-1.4.3.RELEASE.jar!/META-INF/spring.provides</code></p><ul><li><p>打开<code>/pom.xml</code>可以看到依赖了<code>com.netflix.zuul</code>，所以说<code>Spring Cloud Zuul</code>是基于<code>netflix</code>公司的<code>zuul</code>实现的，除此之外还添加了<code>hystrix</code>及<code>ribbon</code>依赖，所以<code>zuul</code>是自带这两个功能的，<code>spring-boot-starter-web</code>依赖可以使应用成为<code>web</code>应用，<code>spring-boot-starter-actuator</code>是监控依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Cloud Starter Netflix Zuul<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud Starter Netflix Zuul<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://projects.spring.io/spring-cloud<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main.basedir</span>&gt;</span>$&#123;basedir&#125;/../../..<span class="tag">&lt;/<span class="name">main.basedir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-archaius<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.zuul<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zuul-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>/META-INF/spring.provides</code> 依赖<code>spring-platform-netflix-core</code>模块及<code>zuul-core</code>模块</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">provides: spring-platform-netflix-core, zuul-core</span><br></pre></td></tr></table></figure></li></ul></li><li><p>现在我们进入<code>spring-platform-netflix-core</code>，看看<code>Spring</code>是怎样集成<code>Netflix</code>的一系列框架了，下面是代码框架图</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/netflix-core.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>可以看到这个炸包也包含了<code>spring.factories</code>文件，所以<code>SpringBoot</code>项目启动的时候会检索此配置文件，此文件是<code>zuul</code>实现自动注册配置的关键，下面可以看到熟悉的<code>zuul</code>,<code>hystrix</code>,<code>feign</code>,<code>ribbon</code>的自动配置类</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.feign.ribbon.FeignRibbonClientAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.feign.FeignAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.feign.encoding.FeignAcceptGzipEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.feign.encoding.FeignContentGzipEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.hystrix.security.HystrixSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.rx.RxJavaAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.metrics.servo.ServoMetricsAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.zuul.ZuulServerAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.zuul.ZuulProxyAutoConfiguration</span><br><span class="line"></span><br><span class="line">org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker=\</span><br><span class="line">org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration</span><br><span class="line"></span><br><span class="line">org.springframework.boot.env.EnvironmentPostProcessor=\</span><br><span class="line">org.springframework.cloud.netflix.metrics.ServoEnvironmentPostProcessor</span><br></pre></td></tr></table></figure><ul><li>我们现在关心<code>Zuul</code>的自动配置类，从上面<code>spring.factories</code>文件可以看到和<code>Zuul</code>相关的是自动配置了两个类，下图可以看到这两个有继承关系，<code>ZuulProxyAutoConfiguration</code>功能最为完全</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ZuulProxyAutoConfiguration.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p><code>ZuulServerAutoConfiguration</code> 与  <code>ZuulProxyAutoConfiguration</code></p><ul><li><p><code>ZuulServerAutoConfiguration</code>自动配置类，启动类上如果有<code>@EnableZuulServer</code>则此类生效</p><ul><li>下面代码可以看到大量使用了<code>@Conditional</code>作为条件判断，注意这个<code>ZuulController</code>这个<code>Bean</code>，它是我们<code>Zuul</code>的请求入口，这个类实现了<code>Controller</code>了，说明这里也使用了<code>Spring MVC DispatcherServlet</code>，</li><li>同时此类注册了大量的<code>ZuulFilter</code></li><li>代码:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明是配置类</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123; ZuulProperties.class &#125;) <span class="comment">// 激活 zuul配置</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ZuulServlet.class) <span class="comment">// 条件1 存在ZuulServlet.class</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ZuulServerMarkerConfiguration.Marker.class) <span class="comment">// 条件2 存在ZuulServerMarkerConfiguration.Marker.class bean, 即应用使用@EnableZuulServer注解</span></span><br><span class="line"><span class="comment">// Make sure to get the ServerProperties from the same place as a normal web app would</span></span><br><span class="line"><span class="meta">@Import</span>(ServerPropertiesAutoConfiguration.class) <span class="comment">// 配置ServerProperties实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> ZuulProperties zuulProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> ServerProperties server;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> ErrorController errorController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HasFeatures <span class="title">zuulFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HasFeatures.namedFeature(<span class="string">"Zuul (Simple)"</span>, ZuulServerAutoConfiguration.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompositeRouteLocator <span class="title">primaryRouteLocator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Collection&lt;RouteLocator&gt; routeLocators)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompositeRouteLocator(routeLocators);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(SimpleRouteLocator.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleRouteLocator <span class="title">simpleRouteLocator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleRouteLocator(<span class="keyword">this</span>.server.getServletPrefix(),</span><br><span class="line">                <span class="keyword">this</span>.zuulProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zuulController, 包装了一个ZuulServlet类型的servlet, 实现对ZuulServlet类型的servlet的初始化.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulController <span class="title">zuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulController();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulHandlerMapping <span class="title">zuulHandlerMapping</span><span class="params">(RouteLocator routes)</span> </span>&#123;</span><br><span class="line">        ZuulHandlerMapping mapping = <span class="keyword">new</span> ZuulHandlerMapping(routes, zuulController());</span><br><span class="line">        mapping.setErrorController(<span class="keyword">this</span>.errorController);</span><br><span class="line">        <span class="keyword">return</span> mapping;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationListener&lt;ApplicationEvent&gt; <span class="title">zuulRefreshRoutesListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulRefreshListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"zuulServlet"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">zuulServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean servlet = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> ZuulServlet(),</span><br><span class="line">                <span class="keyword">this</span>.zuulProperties.getServletPattern());</span><br><span class="line">        <span class="comment">// The whole point of exposing this servlet is to provide a route that doesn't</span></span><br><span class="line">        <span class="comment">// buffer requests.</span></span><br><span class="line">        servlet.addInitParameter(<span class="string">"buffer-requests"</span>, <span class="string">"false"</span>);</span><br><span class="line">        <span class="keyword">return</span> servlet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pre filters</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletDetectionFilter <span class="title">servletDetectionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletDetectionFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FormBodyWrapperFilter <span class="title">formBodyWrapperFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FormBodyWrapperFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DebugFilter <span class="title">debugFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DebugFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Servlet30WrapperFilter <span class="title">servlet30WrapperFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Servlet30WrapperFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post filters</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendResponseFilter <span class="title">sendResponseFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SendResponseFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendErrorFilter <span class="title">sendErrorFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SendErrorFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendForwardFilter <span class="title">sendForwardFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SendForwardFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"zuul.ribbon.eager-load.enabled"</span>, matchIfMissing = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulRouteApplicationContextInitializer <span class="title">zuulRoutesApplicationContextInitiazer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            SpringClientFactory springClientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulRouteApplicationContextInitializer(springClientFactory,</span><br><span class="line">                zuulProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulFilterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, ZuulFilter&gt; filters;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ZuulFilterInitializer <span class="title">zuulFilterInitializer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                CounterFactory counterFactory, TracerFactory tracerFactory)</span> </span>&#123;</span><br><span class="line">            FilterLoader filterLoader = FilterLoader.getInstance();</span><br><span class="line">            FilterRegistry filterRegistry = FilterRegistry.instance();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ZuulFilterInitializer(<span class="keyword">this</span>.filters, counterFactory, tracerFactory, filterLoader, filterRegistry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(CounterService.class)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulCounterFactoryConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnBean</span>(CounterService.class)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> CounterFactory <span class="title">counterFactory</span><span class="params">(CounterService counterService)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DefaultCounterFactory(counterService);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulMetricsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span>(CounterFactory.class)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> CounterFactory <span class="title">counterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EmptyCounterFactory();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span>(TracerFactory.class)</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TracerFactory <span class="title">tracerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EmptyTracerFactory();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulRefreshListener</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ZuulHandlerMapping zuulHandlerMapping;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> HeartbeatMonitor heartbeatMonitor = <span class="keyword">new</span> HeartbeatMonitor();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ContextRefreshedEvent</span><br><span class="line">                    || event <span class="keyword">instanceof</span> RefreshScopeRefreshedEvent</span><br><span class="line">                    || event <span class="keyword">instanceof</span> RoutesRefreshedEvent) &#123;</span><br><span class="line">                <span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> HeartbeatEvent) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.heartbeatMonitor.update(((HeartbeatEvent) event).getValue())) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ZuulProxyAutoConfiguration</code>自动配置类，启动类上如果有对应<code>@EnableZuulProxy</code>则此类生效</p><ul><li>由上面此类的继承图可以发现这个类继承了<code>ZuulServerAutoConfiguration</code>，所以此类拥有<code>ZuulServerAutoConfiguration</code>的所有功能，并在此基础上添加了使用了服务发现作为路由寻址功能</li><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明是配置类</span></span><br><span class="line"><span class="meta">@Import</span>(&#123; RibbonCommandFactoryConfiguration.RestClientRibbonConfiguration.class, <span class="comment">// 引入RibbonCommandFactory配置</span></span><br><span class="line">        RibbonCommandFactoryConfiguration.OkHttpRibbonConfiguration.class,</span><br><span class="line">        RibbonCommandFactoryConfiguration.HttpClientRibbonConfiguration.class,</span><br><span class="line">        HttpClientConfiguration.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ZuulProxyMarkerConfiguration.Marker.class) <span class="comment">// 条件2 存在ZuulProxyMarkerConfiguration.Marker.class bean, 即应用使用@EnableZuulProxy注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulProxyAutoConfiguration</span> <span class="keyword">extends</span> <span class="title">ZuulServerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;RibbonRequestCustomizer&gt; requestCustomizers = Collections.emptyList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网关服务注册实例信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Registration registration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务发现客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discovery;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * serviceId和路由的映射逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServiceRouteMapper serviceRouteMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HasFeatures <span class="title">zuulFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HasFeatures.namedFeature(<span class="string">"Zuul (Discovery)"</span>,</span><br><span class="line">                ZuulProxyAutoConfiguration.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态和动态路由寻址: 静态从配置文件获取, 动态通过服务发现客户端完成. 后者优先级更高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(DiscoveryClientRouteLocator.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DiscoveryClientRouteLocator <span class="title">discoveryRouteLocator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DiscoveryClientRouteLocator(<span class="keyword">this</span>.server.getServletPrefix(),</span><br><span class="line">                <span class="keyword">this</span>.discovery, <span class="keyword">this</span>.zuulProperties, <span class="keyword">this</span>.serviceRouteMapper, <span class="keyword">this</span>.registration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pre filters</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PreDecorationFilter <span class="title">preDecorationFilter</span><span class="params">(RouteLocator routeLocator,</span></span></span><br><span class="line"><span class="function"><span class="params">            ProxyRequestHelper proxyRequestHelper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PreDecorationFilter(routeLocator, <span class="keyword">this</span>.server.getServletPrefix(),</span><br><span class="line">                <span class="keyword">this</span>.zuulProperties, proxyRequestHelper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// route filters</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RibbonRoutingFilter <span class="title">ribbonRoutingFilter</span><span class="params">(ProxyRequestHelper helper,</span></span></span><br><span class="line"><span class="function"><span class="params">            RibbonCommandFactory&lt;?&gt; ribbonCommandFactory)</span> </span>&#123;</span><br><span class="line">        RibbonRoutingFilter filter = <span class="keyword">new</span> RibbonRoutingFilter(helper, ribbonCommandFactory,</span><br><span class="line">                <span class="keyword">this</span>.requestCustomizers);</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;SimpleHostRoutingFilter.class, CloseableHttpClient.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleHostRoutingFilter <span class="title">simpleHostRoutingFilter</span><span class="params">(ProxyRequestHelper helper,</span></span></span><br><span class="line"><span class="function"><span class="params">            ZuulProperties zuulProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApacheHttpClientConnectionManagerFactory connectionManagerFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApacheHttpClientFactory httpClientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleHostRoutingFilter(helper, zuulProperties,</span><br><span class="line">                connectionManagerFactory, httpClientFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;SimpleHostRoutingFilter.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleHostRoutingFilter <span class="title">simpleHostRoutingFilter2</span><span class="params">(ProxyRequestHelper helper,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           ZuulProperties zuulProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           CloseableHttpClient httpClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleHostRoutingFilter(helper, zuulProperties,</span><br><span class="line">                httpClient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationListener&lt;ApplicationEvent&gt; <span class="title">zuulDiscoveryRefreshRoutesListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulDiscoveryRefreshListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(ServiceRouteMapper.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceRouteMapper <span class="title">serviceRouteMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleServiceRouteMapper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingClass</span>(<span class="string">"org.springframework.boot.actuate.endpoint.Endpoint"</span>)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoActuatorConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ProxyRequestHelper <span class="title">proxyRequestHelper</span><span class="params">(ZuulProperties zuulProperties)</span> </span>&#123;</span><br><span class="line">            ProxyRequestHelper helper = <span class="keyword">new</span> ProxyRequestHelper();</span><br><span class="line">            helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());</span><br><span class="line">            helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());</span><br><span class="line">            <span class="keyword">return</span> helper;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加 Endpoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(Endpoint.class)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EndpointConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">        <span class="keyword">private</span> TraceRepository traces;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnEnabledEndpoint</span>(<span class="string">"routes"</span>)</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RoutesEndpoint <span class="title">routesEndpoint</span><span class="params">(RouteLocator routeLocator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RoutesEndpoint(routeLocator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnEnabledEndpoint</span>(<span class="string">"routes"</span>)</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RoutesMvcEndpoint <span class="title">routesMvcEndpoint</span><span class="params">(RouteLocator routeLocator,</span></span></span><br><span class="line"><span class="function"><span class="params">                RoutesEndpoint endpoint)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RoutesMvcEndpoint(endpoint, routeLocator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnEnabledEndpoint</span>(<span class="string">"filters"</span>)</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FiltersEndpoint <span class="title">filtersEndpoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            FilterRegistry filterRegistry = FilterRegistry.instance();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FiltersEndpoint(filterRegistry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ProxyRequestHelper <span class="title">proxyRequestHelper</span><span class="params">(ZuulProperties zuulProperties)</span> </span>&#123;</span><br><span class="line">            TraceProxyRequestHelper helper = <span class="keyword">new</span> TraceProxyRequestHelper();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.traces != <span class="keyword">null</span>) &#123;</span><br><span class="line">                helper.setTraces(<span class="keyword">this</span>.traces);</span><br><span class="line">            &#125;</span><br><span class="line">            helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());</span><br><span class="line">            helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());</span><br><span class="line">            <span class="keyword">return</span> helper;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDiscoveryRefreshListener</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> HeartbeatMonitor monitor = <span class="keyword">new</span> HeartbeatMonitor();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ZuulHandlerMapping zuulHandlerMapping;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> InstanceRegisteredEvent) &#123;</span><br><span class="line">                reset();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ParentHeartbeatEvent) &#123;</span><br><span class="line">                ParentHeartbeatEvent e = (ParentHeartbeatEvent) event;</span><br><span class="line">                resetIfNeeded(e.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> HeartbeatEvent) &#123;</span><br><span class="line">                HeartbeatEvent e = (HeartbeatEvent) event;</span><br><span class="line">                resetIfNeeded(e.getValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetIfNeeded</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.monitor.update(value)) &#123;</span><br><span class="line">                reset();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>ZuulServerAutoConfiguration</code> 与  <code>ZuulProxyAutoConfiguration</code>具体使用哪种模式，是分别通过<code>@EnableZuulServer</code> 和<code>@EnableZuulProxy</code>注解来区别的</p><ul><li>前者使用了<code>ZuulProperties</code>进行配置路由寻址;</li><li>后者在原来的基础上添加了使用了服务发现作为路由寻址功能, 并使用<code>Ribbon</code>做客户端的负载均衡，这个最为常用;</li></ul></li></ul><h5 id="EnableZuulProxy"><a href="#EnableZuulProxy" class="headerlink" title="@EnableZuulProxy"></a>@EnableZuulProxy</h5><ul><li><code>@EnableZuulProxy</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets up a Zuul server endpoint and installs some reverse proxy filters in it, so it can</span></span><br><span class="line"><span class="comment"> * forward requests to backend servers. The backends can be registered manually through</span></span><br><span class="line"><span class="comment"> * configuration or via DiscoveryClient.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> EnableZuulServer for how to get a Zuul server without any proxying</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Import</span>(ZuulProxyMarkerConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableZuulProxy &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>@EnableZuulProxy</code>分析</p><ul><li><p><code>@EnableCircuitBreaker</code>注解用于开启短路器功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation to enable a CircuitBreaker implementation.</span></span><br><span class="line"><span class="comment"> * http://martinfowler.com/bliki/CircuitBreaker.html</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(EnableCircuitBreakerImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableCircuitBreaker &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Import(ZuulProxyMarkerConfiguration.class)</code>注解用于注册<code>ZuulProxyMarkerConfiguration.Marker.class</code>这个<code>Bean</code>，这个<code>Bean</code>与上面的<code>ZuulProxyAutoConfiguration</code>的条件注解相对应<code>@ConditionalOnBean(ZuulProxyMarkerConfiguration.Marker.class)</code>，所以说如果启动类带了这个<code>@EnableZuulProxy</code>注解将会开启<code>ZuulProxyMarkerConfiguration</code>自动注册的功能，<code>Spring</code>这个可配置化对使用者来说十分方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulProxyMarkerConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Marker <span class="title">zuulProxyMarkerBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Marker();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Marker</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="使用Consul作为注册中心"><a href="#使用Consul作为注册中心" class="headerlink" title="使用Consul作为注册中心"></a>使用Consul作为注册中心</h5><ul><li><p><code>@EnableZuulProxy</code>模式下的<code>zuul</code>需要注册中心的支持，因为<code>eureka</code>已经被抛弃了，我们这里选用的是<code>Consul</code></p><ul><li><p>添加<code>Maven</code>依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动类上加上<code>@EnableDiscoveryClient</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这样<code>Zuul</code>应用就可以发挥作用了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li></ul></li><li>本章节对<code>Zuul</code>的初始化进行了一次梳理，可以发现<code>Zuul</code>的初始化就是注册各种需要的<code>Bean</code>,粮草备好之后就是要发挥作用了，下一章节将介绍其具体是怎样发挥作用的</li><li><code>Spring Cloud</code>对<code>Netflix Zuul</code>做了封装集成, 使得在<code>Spring Cloud</code>环境中使用<code>Zuul</code>更方便，只需添加<code>spring-cloud-starter-zuul</code> <code>maven</code>依赖及启动类上添加<code>@EnableZuulProxy</code>就可创建一个<code>zuul</code>应用</li><li><code>Spring Cloud Zuul</code> 实际上就是在<code>Servlet</code>的基础上添加了一些<code>ZuulFilter</code>去完成一些额外事情，封装了就成框架了</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/lexiaofei/p/7080257.html" target="_blank" rel="noopener">https://www.cnblogs.com/lexiaofei/p/7080257.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;由上一章节可以知道要创建一个&lt;code&gt;zuul&lt;/code&gt;应用，只需添加&lt;code&gt;spring-cloud-star
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Zuul)网关服务Zuul</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Zuul)%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1Zuul/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Zuul)网关服务Zuul/</id>
    <published>2019-08-06T16:05:00.000Z</published>
    <updated>2019-08-31T02:31:25.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Zuul-简介"><a href="#Zuul-简介" class="headerlink" title="Zuul 简介"></a>Zuul 简介</h3><h4 id="Zuul是什么"><a href="#Zuul是什么" class="headerlink" title="Zuul是什么"></a>Zuul是什么</h4><ul><li><p><code>Zuul</code> 是<code>Netflix</code>开源的一个<code>API Gateway</code> 服务器, 本质上是一个<code>Web servlet</code>应用，他可以和<code>Eureka,Ribbon,Hystrix</code>等组件配合使用。</p></li><li><p><code>Zuul</code>组件的核心是一系列的过滤器<code>filters</code>，其作用可以类比<code>Servlet</code>框架的<code>Filter</code>，或者<code>AOP</code>。</p></li></ul><h4 id="为什么要用Zuul"><a href="#为什么要用Zuul" class="headerlink" title="为什么要用Zuul"></a>为什么要用Zuul</h4><ul><li>在分布式架构中，对外提供的服务，在无网关的情况下，<code>API</code>接口直接暴露给服务调用方，当调用方增多，不同业务调用方各不相同，势必需要添加定制化访问权限、校验等逻辑。当添加<code>API</code>网关后，再第三方调用端和服务提供方之间就创建了一面墙，这面墙直接与调用方通信进行权限控制，后将请求均衡分发给后台服务端。<code>Zuul</code>就是提供负载均衡、反向代理、权限认证的这么一个<code>API gateway</code>。</li></ul><ul><li>微服务网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过微服务网关</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul1.png" alt="logo" title="">                </div>                <div class="image-caption">logo</div>            </figure><h4 id="Zuul-提供什么功能"><a href="#Zuul-提供什么功能" class="headerlink" title="Zuul 提供什么功能"></a>Zuul 提供什么功能</h4><ul><li><p><code>Zuul</code>组件的核心是一系列的过滤器，这些过滤器可以完成以下功能：</p><ul><li>身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求</li><li>审查与监控：</li><li>动态路由：动态将请求路由到不同后端集群</li><li>压力测试：逐渐增加指向集群的流量，以了解性能</li><li>负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求</li><li>静态响应处理：边缘位置进行响应，避免转发到内部集群</li><li>多区域弹性：跨域<code>AWS Region</code>进行请求路由，旨在实现<code>ELB(ElasticLoad Balancing)</code>使用多样化</li></ul></li><li><p><code>Spring Cloud</code>对<code>Zuul</code>进行了整合和增强。目前<code>Zuul</code>使用的默认是<code>Apache</code>的<code>HTTP Client</code>，也可以使用<code>Rest Client</code>，可以设置<code>ribbon.restclient.enabled=true</code>.</p></li></ul><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><blockquote><p>添加Maven依赖配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>添加配置文件application.yml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9001</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: zuul-gateway</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:9010/eureka/,http://localhost:9011/eureka/</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    baidu-url: #传统路由方式</span><br><span class="line">      path: /baidu/**</span><br><span class="line">      url: http://www.baidu.com/</span><br><span class="line">    provider:  #面向服务的路由</span><br><span class="line">      path: /provider/**</span><br><span class="line">      serviceId: eureka-provider</span><br><span class="line">    consumer:  #面向服务的路由</span><br><span class="line">      path: /consumer/**</span><br><span class="line">      serviceId: eureka-consumer</span><br></pre></td></tr></table></figure><blockquote><p>启动类加上@EnableZuulProxy注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加一个过滤器 AccessFilter.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义过滤器的类型，决定过滤器在请求的那个生命周期中执行</span></span><br><span class="line"><span class="comment">     * pre     请求被路由之前 </span></span><br><span class="line"><span class="comment">     * routing 在路由请求时被调用</span></span><br><span class="line"><span class="comment">     * post    在routing和error过滤器之后被调用</span></span><br><span class="line"><span class="comment">     * error   处理请求时发生错误时被调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代表会在请求被路由之前被执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义过滤器的顺序，当请求在一个阶段中存在多个过滤器时，可以根据该值来决定执行顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断过滤器是否需要被执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的具体实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        logger.info(<span class="string">"send &#123;&#125; request to &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString());</span><br><span class="line">        Object accessToken = request.getParameter(<span class="string">"accessToken"</span>);</span><br><span class="line">        <span class="keyword">if</span> (accessToken == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">"access check failed"</span>);</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.error(<span class="string">"access check passs"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="zuul默认支持hystrix和ribbon"><a href="#zuul默认支持hystrix和ribbon" class="headerlink" title="zuul默认支持hystrix和ribbon"></a>zuul默认支持hystrix和ribbon</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        timeout:</span><br><span class="line">          enabled: true</span><br><span class="line">        isolation:</span><br><span class="line">          thread: </span><br><span class="line">            timeoutInMilliseconds: 60000 // 设置API网关中路由转发请求的HystrixCommand执行超时时间，就是整个路由转发请求的执行时间</span><br><span class="line">ribbon:</span><br><span class="line">  ConnectTimeout: 60000 // 设置创建请求连接的超时时间，如果该值小于上面的HystrixCommand执行超时时间，会自动进行重试路由请求</span><br><span class="line">  ReadTimeout: 60000 // 设置请求连接建立之后执行处理的超时时间，如果该值小于上面的HystrixCommand执行超时时间，会自动进行重试路由请求</span><br></pre></td></tr></table></figure><ul><li><p><code>Zuul</code>的过滤器之间没有直接的相互通信，他们之间通过一个<code>RequestContext</code>的静态类来进行数据传递的。<code>RequestContext</code>类中有<code>ThreadLocal</code>变量来记录每个<code>Request</code>所需要传递的数据。</p></li><li><p><code>Zuul</code>的过滤器是由<code>Groovy</code>写成，这些过滤器文件被放在<code>Zuul Server</code>上的特定目录下面，Zuul会定期轮询这些目录，修改过的过滤器会动态的加载到<code>Zuul Server</code>中以便过滤请求使用。</p></li></ul><h4 id="过滤器机制"><a href="#过滤器机制" class="headerlink" title="过滤器机制"></a>过滤器机制</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><code>Zuul</code>大部分功能都是通过过滤器来实现的。Zuul中定义了四种标准过滤器类型，这些过滤器类型对应于请求的典型生命周期，下面有几种标准的过滤器类型：<ul><li>(1) PRE：这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</li><li>(2) ROUTING：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用<code>Apache HttpClient</code>或<code>Netfilx Ribbon</code>请求微服务。</li><li>(3) POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的<code>HTTP Header</code>、收集统计信息和指标、将响应从微服务发送给客户端等。</li><li>(4) ERROR：在其他阶段发生错误时执行该过滤器。</li></ul></li></ul><h5 id="过滤器的生命周期"><a href="#过滤器的生命周期" class="headerlink" title="过滤器的生命周期"></a>过滤器的生命周期</h5><ul><li>各种不同类型的过滤器流转流程<ul><li>当客户端请求过来首先会到 <code>pre filters</code> 这样的一个前置过滤器做一些处理，然后调用自定义的过滤器</li><li>前置过滤器执行完了之后会调用 <code>routing filters</code> 过滤器 ，看名字都知道这是做路由分发的过滤器</li><li>在路由的过程中出现了异常，那么会走 <code>error filters</code>过滤器，然后再走 <code>post filters</code> 过滤器 ，或者正常路由完成也会走到<code>post filters</code></li><li><code>post filters</code>过滤器负责处理响应 ，最后把结果响应给客户端</li></ul></li></ul><p><img src="/images/server/spring/spring-cloud/zuul.png" alt=""></p><h5 id="内置的特殊过滤器"><a href="#内置的特殊过滤器" class="headerlink" title="内置的特殊过滤器"></a>内置的特殊过滤器</h5><ul><li>下面是<code>zuul</code>默认实现的过滤器</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>当我们为<code>Spring Cloud Zuul</code>构建的<code>API</code>网关服务引入<code>Spring Cloud Eureka</code>之后，它会为<code>Eureka</code>中的每个服务都自动创建一个默认路由规则，这些默认规则的<code>path</code>会使用<code>ServiceId</code>配置的服务名作为请求前缀</p></li><li><p><code>Spring Cloud Zuul</code>还特别提供了<code>/routes</code>端点来返回当前的所有路由规则</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/lexiaofei/p/7080257.html" target="_blank" rel="noopener">https://www.cnblogs.com/lexiaofei/p/7080257.html</a></li><li><a href="https://www.jianshu.com/p/fd0d8a0019d6" target="_blank" rel="noopener">https://www.jianshu.com/p/fd0d8a0019d6</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Zuul-简介&quot;&gt;&lt;a href=&quot;#Zuul-简介&quot; class=&quot;headerlink&quot; title=&quot;Zuul 简介&quot;&gt;&lt;/a&gt;Zuul 简介&lt;/h3&gt;&lt;h4 id=&quot;Zuul是什么&quot;&gt;&lt;a href=&quot;#Zuul是什么&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Hystrix)服务容错保护介绍</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Hystrix)%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E4%BF%9D%E6%8A%A4%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Hystrix)服务容错保护介绍/</id>
    <published>2019-08-06T16:04:00.000Z</published>
    <updated>2019-09-01T07:05:42.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="Hystrix是什么"><a href="#Hystrix是什么" class="headerlink" title="Hystrix是什么"></a>Hystrix是什么</h4><ul><li><code>Hystrix</code>对应的中文名字是“豪猪”，豪猪周身长满了刺，能保护自己不受天敌的伤害，代表了一种防御机制，这与<code>Hystrix</code>本身的功能不谋而合，因此<code>Netflix</code>团队将该框架命名为<code>Hystrix</code>，并使用了对应的卡通形象做作为<code>logo</code></li></ul><h4 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h4><p>在一个分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，如何能够保证在一个依赖出问题的情况下，不会导致整体服务失败（比如生活中的电路的保险丝用途），这个就是<code>Hystrix</code>需做的事情。</p><h4 id="提供哪些功能"><a href="#提供哪些功能" class="headerlink" title="提供哪些功能"></a>提供哪些功能</h4><p><code>Hystrix</code>提供了熔断、隔离、<code>Fallback</code>、<code>cache</code>、监控等功能，能够在一个、或多个依赖同时出现问题时保证系统依然可用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;Hystrix是什么&quot;&gt;&lt;a href=&quot;#Hystrix是什么&quot; class=&quot;headerlink&quot; title=&quot;Hystr
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Ribbon)工作原理源码分析三</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Ribbon)%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%89/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Ribbon)工作原理源码分析三/</id>
    <published>2019-08-06T16:03:04.000Z</published>
    <updated>2019-09-01T04:07:59.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><ul><li><p>由前面章节我们知道<code>Ribbon</code>功能主要是将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行，那么如果要实现负载均衡，具体是要做哪些事呢？</p><ul><li>1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况</li><li>2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例</li><li>3、然后就是将执行请求，响应处理</li><li>4、如果调用失败是不是要重试</li></ul></li><li><p>下面将从<code>Ribbon</code>的源码来按照上面的步骤来分析其具体实现, 源码版本：</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.netflix.ribbon/ribbon-core --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.netflix.ribbon&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ribbon-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.4&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>下面将继续接上一章节的内容</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况"><a href="#1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况" class="headerlink" title="1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况"></a>1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况</h4><h5 id="1、1-定义服务实例Server"><a href="#1、1-定义服务实例Server" class="headerlink" title="1、1 定义服务实例Server"></a>1、1 定义服务实例<code>Server</code></h5><h5 id="1、2-定义服务器列表ServerList"><a href="#1、2-定义服务器列表ServerList" class="headerlink" title="1、2 定义服务器列表ServerList"></a>1、2 定义服务器列表<code>ServerList</code></h5><h4 id="2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例"><a href="#2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例" class="headerlink" title="2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例"></a>2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例</h4><h5 id="2、1-负责选取Server的接口ILoadBalancer"><a href="#2、1-负责选取Server的接口ILoadBalancer" class="headerlink" title="2、1 负责选取Server的接口ILoadBalancer"></a>2、1 负责选取<code>Server</code>的接口<code>ILoadBalancer</code></h5><h5 id="2、2-负债均衡策略IRule"><a href="#2、2-负债均衡策略IRule" class="headerlink" title="2、2 负债均衡策略IRule"></a>2、2 负债均衡策略<code>IRule</code></h5><h4 id="3、然后就是将执行请求，响应处理"><a href="#3、然后就是将执行请求，响应处理" class="headerlink" title="3、然后就是将执行请求，响应处理"></a>3、然后就是将执行请求，响应处理</h4><h5 id="3-1-执行请求客户端AbstractLoadBalancerAwareClient"><a href="#3-1-执行请求客户端AbstractLoadBalancerAwareClient" class="headerlink" title="3.1 执行请求客户端AbstractLoadBalancerAwareClient"></a>3.1 执行请求客户端<code>AbstractLoadBalancerAwareClient</code></h5><h5 id="3-2-执行命令-LoadBalancerCommand"><a href="#3-2-执行命令-LoadBalancerCommand" class="headerlink" title="3.2 执行命令 LoadBalancerCommand"></a>3.2 执行命令 <code>LoadBalancerCommand</code></h5><hr><h4 id="4、如果调用失败是不是要重试"><a href="#4、如果调用失败是不是要重试" class="headerlink" title="4、如果调用失败是不是要重试"></a>4、如果调用失败是不是要重试</h4><ul><li>这个构造的<code>LoadBalancerCommand</code>是一个<code>RxJava</code>风格的，从下面可以看到具体执行流程就是通过选取<code>Server</code>的接口<code>ILoadBalancer</code>来获取<code>Server</code>，然后就是执行请求了，它包含了重试和异常处理机制、同时还记录了执行状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">submit</span><span class="params">(<span class="keyword">final</span> ServerOperation&lt;T&gt; operation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ExecutionInfoContext context = <span class="keyword">new</span> ExecutionInfoContext();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            listenerInvoker.onExecutionStart();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AbortExecutionException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取在每个服务实例重试的的次数</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> maxRetrysSame = retryHandler.getMaxRetriesOnSameServer();</span><br><span class="line">    <span class="comment">// 最多尝试几个服务实例</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> maxRetrysNext = retryHandler.getMaxRetriesOnNextServer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于每个服务实例的调用逻辑</span></span><br><span class="line">    <span class="comment">// 默认field server是null，通过selectServer()方法获取一个Server</span></span><br><span class="line">    Observable&lt;T&gt; o = </span><br><span class="line">            (server == <span class="keyword">null</span> ? selectServer() : Observable.just(server))</span><br><span class="line">            .concatMap(<span class="keyword">new</span> Func1&lt;Server, Observable&lt;T&gt;&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="comment">// 对于每个Server，按顺序映射为对于每个Server包含重试逻辑的请求调用</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Server server)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 设置上下文</span></span><br><span class="line">                    context.setServer(server);</span><br><span class="line">                    <span class="keyword">final</span> ServerStats stats = loadBalancerContext.getServerStats(server);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 每个Server包含重试逻辑的请求调用</span></span><br><span class="line">                    Observable&lt;T&gt; o = Observable</span><br><span class="line">                            .just(server)</span><br><span class="line">                            .concatMap(<span class="keyword">new</span> Func1&lt;Server, Observable&lt;T&gt;&gt;() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(<span class="keyword">final</span> Server server)</span> </span>&#123;</span><br><span class="line">                                    context.incAttemptCount();</span><br><span class="line">                                    <span class="comment">// 增加Server正在处理的请求计数</span></span><br><span class="line">                                    loadBalancerContext.noteOpenConnection(stats);</span><br><span class="line"></span><br><span class="line">                                    <span class="comment">// 监听器</span></span><br><span class="line">                                    <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            listenerInvoker.onStartWithServer(context.toExecutionInfo());</span><br><span class="line">                                        &#125; <span class="keyword">catch</span> (AbortExecutionException e) &#123;</span><br><span class="line">                                            <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="comment">// 计时器</span></span><br><span class="line">                                    <span class="keyword">final</span> Stopwatch tracer = loadBalancerContext.getExecuteTracer().start();</span><br><span class="line">                                    <span class="comment">// operation.call(server)就是刚刚分析的AbstractLoadBalancerAwareClient传过来的ServerOperation，就是直接对这个Server调用请求</span></span><br><span class="line">                                    <span class="comment">// doOnEach的操作就是记录请求前后的一些数据用于负载均衡数据统计</span></span><br><span class="line">                                    <span class="keyword">return</span> operation.call(server).doOnEach(<span class="keyword">new</span> Observer&lt;T&gt;() &#123;</span><br><span class="line">                                        <span class="keyword">private</span> T entity;</span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                            <span class="comment">// 记录请求完成</span></span><br><span class="line">                                            recordStats(tracer, stats, entity, <span class="keyword">null</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                                            <span class="comment">// 记录请求结束</span></span><br><span class="line">                                            recordStats(tracer, stats, <span class="keyword">null</span>, e);</span><br><span class="line">                                            logger.debug(<span class="string">"Got error &#123;&#125; when executed on server &#123;&#125;"</span>, e, server);</span><br><span class="line">                                            <span class="comment">// 发生了错误，通知listener</span></span><br><span class="line">                                            <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                listenerInvoker.onExceptionWithServer(e, context.toExecutionInfo());</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">                                            <span class="comment">// 因为只有调用请求成功只有一个结果（只有一个请求）， 这里的entity就是结果，只要收到结果就代表请求成功</span></span><br><span class="line">                                            <span class="keyword">this</span>.entity = entity;</span><br><span class="line">                                            <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                listenerInvoker.onExecutionSuccess(entity, context.toExecutionInfo());</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;                            </span><br><span class="line"></span><br><span class="line">                                        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recordStats</span><span class="params">(Stopwatch tracer, ServerStats stats, Object entity, Throwable exception)</span> </span>&#123;</span><br><span class="line">                                            tracer.stop();</span><br><span class="line">                                            loadBalancerContext.noteRequestCompletion(stats, entity, exception, tracer.getDuration(TimeUnit.MILLISECONDS), retryHandler);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (maxRetrysSame &gt; <span class="number">0</span>)</span><br><span class="line">                        <span class="comment">// 是否retry</span></span><br><span class="line">                        o = o.retry(retryPolicy(maxRetrysSame, <span class="keyword">true</span>));</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (maxRetrysNext &gt; <span class="number">0</span> &amp;&amp; server == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 是否retry，如果retry回调用selectServer()返回下一个Server</span></span><br><span class="line">        o = o.retry(retryPolicy(maxRetrysNext, <span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常处理</span></span><br><span class="line">    <span class="keyword">return</span> o.onErrorResumeNext(<span class="keyword">new</span> Func1&lt;Throwable, Observable&lt;T&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (context.getAttemptCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果超过重试次数，则抛异常</span></span><br><span class="line">                <span class="keyword">if</span> (maxRetrysNext &gt; <span class="number">0</span> &amp;&amp; context.getServerAttemptCount() == (maxRetrysNext + <span class="number">1</span>)) &#123;</span><br><span class="line">                    e = <span class="keyword">new</span> ClientException(ClientException.ErrorType.NUMBEROF_RETRIES_NEXTSERVER_EXCEEDED,</span><br><span class="line">                            <span class="string">"Number of retries on next server exceeded max "</span> + maxRetrysNext</span><br><span class="line">                            + <span class="string">" retries, while making a call for: "</span> + context.getServer(), e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (maxRetrysSame &gt; <span class="number">0</span> &amp;&amp; context.getAttemptCount() == (maxRetrysSame + <span class="number">1</span>)) &#123;</span><br><span class="line">                    e = <span class="keyword">new</span> ClientException(ClientException.ErrorType.NUMBEROF_RETRIES_EXEEDED,</span><br><span class="line">                            <span class="string">"Number of retries exceeded max "</span> + maxRetrysSame</span><br><span class="line">                            + <span class="string">" retries, while making a call for: "</span> + context.getServer(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                listenerInvoker.onExecutionFailed(e, context.toFinalExecutionInfo());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面来拆解</li></ul><h5 id="4-1-获取重试设置参数-RetryHandler"><a href="#4-1-获取重试设置参数-RetryHandler" class="headerlink" title="4.1 获取重试设置参数 RetryHandler"></a>4.1 获取重试设置参数 RetryHandler</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取在每个服务实例重试的的次数</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> maxRetrysSame = retryHandler.getMaxRetriesOnSameServer();</span><br><span class="line"><span class="comment">// 最多尝试几个服务实例</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> maxRetrysNext = retryHandler.getMaxRetriesOnNextServer();</span><br></pre></td></tr></table></figure><ul><li>这个参数可以在配置文件中配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  ReadTimeout: <span class="number">60000</span></span><br><span class="line">  ConnectTimeout: <span class="number">60000</span></span><br><span class="line">  MaxAutoRetries: <span class="number">1</span></span><br><span class="line">  MaxAutoRetriesNextServer: <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>上面配置的参数获取到的结果如下</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ribbon/maxRetrysParamter.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="4-1-通过选取Server的接口ILoadBalancer来获取Server"><a href="#4-1-通过选取Server的接口ILoadBalancer来获取Server" class="headerlink" title="4.1 通过选取Server的接口ILoadBalancer来获取Server"></a>4.1 通过选取<code>Server</code>的接口<code>ILoadBalancer</code>来获取<code>Server</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个只包含一个Server的Observable，但是每次从负载均衡器中获取一个</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Observable&lt;Server&gt; <span class="title">selectServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Server&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Server&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Server server = loadBalancerContext.getServerFromLoadBalancer(loadBalancerURI, loadBalancerKey);   </span><br><span class="line">                next.onNext(server);</span><br><span class="line">                next.onCompleted();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                next.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-重试机制看代码是采用了RxJava重试方法"><a href="#4-2-重试机制看代码是采用了RxJava重试方法" class="headerlink" title="4.2 重试机制看代码是采用了RxJava重试方法"></a>4.2 重试机制看代码是采用了<code>RxJava</code>重试方法</h5><ul><li>一开始默认进入到下面这行判断，这里 <code>server == null</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (maxRetrysNext &gt; <span class="number">0</span> &amp;&amp; server == <span class="keyword">null</span>) </span><br><span class="line">    o = o.retry(retryPolicy(maxRetrysNext, <span class="keyword">false</span>));</span><br></pre></td></tr></table></figure><ul><li>然后就是进入到下面这执行体方法，可以得到以下信息<ul><li>第一个可以看到主体逻辑就是执行<code>operation.call(server)</code>方法，这个就是刚刚分析的<code>AbstractLoadBalancerAwareClient</code>传过来的<code>ServerOperation</code>，就是直接对这个<code>Server</code>调用请求</li><li>第二个就是使用<code>ServerStats</code>来记录服务执行状态，这个是负载均衡选择策略时计算需要</li><li>第三个就是使用<code>if (maxRetrysSame &gt; 0) {o = o.retry(retryPolicy(maxRetrysSame, true)); }</code> 来控制是否重试</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置上下文</span></span><br><span class="line">context.setServer(server);</span><br><span class="line"><span class="comment">// 记录服务请求执行状态</span></span><br><span class="line"><span class="keyword">final</span> ServerStats stats = loadBalancerContext.getServerStats(server);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个Server包含重试逻辑的请求调用</span></span><br><span class="line">Observable&lt;T&gt; o = Observable</span><br><span class="line">        .just(server)</span><br><span class="line">        .concatMap(<span class="keyword">new</span> Func1&lt;Server, Observable&lt;T&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(<span class="keyword">final</span> Server server)</span> </span>&#123;</span><br><span class="line">                context.incAttemptCount();</span><br><span class="line">                <span class="comment">// 增加Server正在处理的请求计数</span></span><br><span class="line">                loadBalancerContext.noteOpenConnection(stats);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 监听器</span></span><br><span class="line">                <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        listenerInvoker.onStartWithServer(context.toExecutionInfo());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (AbortExecutionException e) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计时器</span></span><br><span class="line">                <span class="keyword">final</span> Stopwatch tracer = loadBalancerContext.getExecuteTracer().start();</span><br><span class="line">                <span class="comment">// operation.call(server)就是刚刚分析的AbstractLoadBalancerAwareClient传过来的ServerOperation，就是直接对这个Server调用请求</span></span><br><span class="line">                <span class="comment">// doOnEach的操作就是记录请求前后的一些数据用于负载均衡数据统计</span></span><br><span class="line">                <span class="keyword">return</span> operation.call(server).doOnEach(<span class="keyword">new</span> Observer&lt;T&gt;() &#123;</span><br><span class="line">                    <span class="keyword">private</span> T entity;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 记录请求完成</span></span><br><span class="line">                        recordStats(tracer, stats, entity, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 记录请求结束</span></span><br><span class="line">                        recordStats(tracer, stats, <span class="keyword">null</span>, e);</span><br><span class="line">                        logger.debug(<span class="string">"Got error &#123;&#125; when executed on server &#123;&#125;"</span>, e, server);</span><br><span class="line">                        <span class="comment">// 发生了错误，通知listener</span></span><br><span class="line">                        <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            listenerInvoker.onExceptionWithServer(e, context.toExecutionInfo());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 因为只有调用请求成功只有一个结果（只有一个请求）， 这里的entity就是结果，只要收到结果就代表请求成功</span></span><br><span class="line">                        <span class="keyword">this</span>.entity = entity;</span><br><span class="line">                        <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            listenerInvoker.onExecutionSuccess(entity, context.toExecutionInfo());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;                            </span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recordStats</span><span class="params">(Stopwatch tracer, ServerStats stats, Object entity, Throwable exception)</span> </span>&#123;</span><br><span class="line">                        tracer.stop();</span><br><span class="line">                        loadBalancerContext.noteRequestCompletion(stats, entity, exception, tracer.getDuration(TimeUnit.MILLISECONDS), retryHandler);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (maxRetrysSame &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 是否retry</span></span><br><span class="line">    o = o.retry(retryPolicy(maxRetrysSame, <span class="keyword">true</span>));</span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Observable&lt;T&gt; retry(Func2&lt;Integer, Throwable, Boolean&gt; predicate)</code> 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Observable&lt;T&gt; <span class="title">retry</span><span class="params">(Func2&lt;Integer, Throwable, Boolean&gt; predicate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nest().lift(<span class="keyword">new</span> OperatorRetryWithPredicate&lt;T&gt;(predicate));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://blog.csdn.net/zhxdick/article/details/79717757" target="_blank" rel="noopener">https://blog.csdn.net/zhxdick/article/details/79717757</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;由前面章节我们知道&lt;code&gt;Ribbon&lt;/code&gt;功能主要是将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Ribbon)工作原理源码分析二</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Ribbon)%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8C/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Ribbon)工作原理源码分析二/</id>
    <published>2019-08-06T16:03:03.000Z</published>
    <updated>2019-09-01T03:32:55.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><ul><li><p>由前面章节我们知道<code>Ribbon</code>功能主要是将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行，那么如果要实现负载均衡，具体是要做哪些事呢？</p><ul><li>1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况</li><li>2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例</li><li>3、然后就是将执行请求，响应处理</li><li>4、如果调用失败是不是要重试</li></ul></li><li><p>下面将从<code>Ribbon</code>的源码来按照上面的步骤来分析其具体实现, 源码版本：</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.netflix.ribbon/ribbon-core --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.netflix.ribbon&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ribbon-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.4&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>下面将继续接上一章节的内容</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况"><a href="#1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况" class="headerlink" title="1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况"></a>1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况</h4><h5 id="1、1-定义服务实例Server"><a href="#1、1-定义服务实例Server" class="headerlink" title="1、1 定义服务实例Server"></a>1、1 定义服务实例<code>Server</code></h5><h5 id="1、2-定义服务器列表ServerList"><a href="#1、2-定义服务器列表ServerList" class="headerlink" title="1、2 定义服务器列表ServerList"></a>1、2 定义服务器列表<code>ServerList</code></h5><h4 id="2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例"><a href="#2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例" class="headerlink" title="2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例"></a>2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例</h4><h5 id="2、1-负责选取Server的接口ILoadBalancer"><a href="#2、1-负责选取Server的接口ILoadBalancer" class="headerlink" title="2、1 负责选取Server的接口ILoadBalancer"></a>2、1 负责选取<code>Server</code>的接口<code>ILoadBalancer</code></h5><hr><h5 id="2、2-负债均衡策略IRule"><a href="#2、2-负债均衡策略IRule" class="headerlink" title="2、2 负债均衡策略IRule"></a>2、2 负债均衡策略<code>IRule</code></h5><ul><li><code>Ribbon</code>对于负债均衡策略的实现是通过<code>IRule</code>来定义的，比如前面我们接触了<code>RoundRobinRule</code>线性轮询策略，下面来介绍下<code>IRule</code>接口的各个实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface that defines a "Rule" for a LoadBalancer. A Rule can be thought of</span></span><br><span class="line"><span class="comment"> * as a Strategy for loadbalacing. Well known loadbalancing strategies include</span></span><br><span class="line"><span class="comment"> * Round Robin, Response Time based etc.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stonse</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRule</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * choose one alive server from lb.allServers or</span></span><br><span class="line"><span class="comment">     * lb.upServers according to key</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @return choosen Server object. NULL is returned if none</span></span><br><span class="line"><span class="comment">     *  server is available </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadBalancer</span><span class="params">(ILoadBalancer lb)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ILoadBalancer <span class="title">getLoadBalancer</span><span class="params">()</span></span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ribbon/IRule.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>子类实现</p><ul><li><p><code>AbstractLoadBalancerRule</code></p><ul><li>负债均衡策略的抽象类，主要是定义了负债均衡器<code>ILoadBalancer</code>对象，该对象上一章节已经介绍了<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class that provides a default implementation for setting and getting load balancer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stonse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLoadBalancerRule</span> <span class="keyword">implements</span> <span class="title">IRule</span>, <span class="title">IClientConfigAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ILoadBalancer lb;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadBalancer</span><span class="params">(ILoadBalancer lb)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lb = lb;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ILoadBalancer <span class="title">getLoadBalancer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lb;</span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>RandomRule</code></p><ul><li>随机选择策略，使用<code>rand.nextInt(serverCount);</code>作为实例列表的索引值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@edu</span>.umd.cs.findbugs.annotations.SuppressWarnings(value = <span class="string">"RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Server server = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Server&gt; upList = lb.getReachableServers();</span><br><span class="line">        List&lt;Server&gt; allList = lb.getAllServers();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> serverCount = allList.size();</span><br><span class="line">        <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * No servers. End regardless of pass, because subsequent passes</span></span><br><span class="line"><span class="comment">             * only get more restrictive.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> index = rand.nextInt(serverCount);</span><br><span class="line">        server = upList.get(index);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * The only time this should happen is if the server list were</span></span><br><span class="line"><span class="comment">             * somehow trimmed. This is a transient condition. Retry after</span></span><br><span class="line"><span class="comment">             * yielding.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> (server);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Shouldn't actually happen.. but must be transient or a bug.</span></span><br><span class="line">        server = <span class="keyword">null</span>;</span><br><span class="line">        Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>RoundRobinRule</code></p><ul><li>线性轮询策略，具体实现使用了<code>AtomicInteger nextServerCyclicCounter;</code>自增<code>+1</code>来取得下一个实例列表的索引值，并取模求余来归位<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">        log.warn(<span class="string">"no load balancer"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Server server = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (server == <span class="keyword">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">        List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">        <span class="keyword">int</span> upCount = reachableServers.size();</span><br><span class="line">        <span class="keyword">int</span> serverCount = allServers.size();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> ((upCount == <span class="number">0</span>) || (serverCount == <span class="number">0</span>)) &#123;</span><br><span class="line">            log.warn(<span class="string">"No up servers available from load balancer: "</span> + lb);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> nextServerIndex = incrementAndGetModulo(serverCount);</span><br><span class="line">        server = allServers.get(nextServerIndex);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/* Transient. */</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;</span><br><span class="line">            <span class="keyword">return</span> (server);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Next.</span></span><br><span class="line">        server = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        log.warn(<span class="string">"No available alive servers after 10 tries from load balancer: "</span></span><br><span class="line">                + lb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inspired by the implementation of &#123;<span class="doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modulo The modulo to bound the value of the counter.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The next value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> current = nextServerCyclicCounter.get();</span><br><span class="line">        <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">        <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>RetryRule</code></p><ul><li>重试策略<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> requestTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> deadline = requestTime + maxRetryMillis;</span><br><span class="line">    </span><br><span class="line">    Server answer = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    answer = subRule.choose(key);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (((answer == <span class="keyword">null</span>) || (!answer.isAlive()))</span><br><span class="line">            &amp;&amp; (System.currentTimeMillis() &lt; deadline)) &#123;</span><br><span class="line">    </span><br><span class="line">        InterruptTask task = <span class="keyword">new</span> InterruptTask(deadline</span><br><span class="line">                - System.currentTimeMillis());</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">            answer = subRule.choose(key);</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> (((answer == <span class="keyword">null</span>) || (!answer.isAlive()))</span><br><span class="line">                    &amp;&amp; (System.currentTimeMillis() &lt; deadline)) &#123;</span><br><span class="line">                <span class="comment">/* pause and retry hoping it's transient */</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        task.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((answer == <span class="keyword">null</span>) || (!answer.isAlive())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>WeightedResponseTimeRule</code></p><ul><li>对<code>RoundRobinRule</code>的扩展，根据权重来挑选实例</li></ul></li><li><code>BestAvailableRule</code><ul><li>找出最空闲的服务实例</li></ul></li><li><code>ZoneAvoidanceRule</code><ul><li>复合判断<code>server</code>所在区域的性能和<code>server</code>的可用性选择<code>server</code></li></ul></li></ul></li></ul><h4 id="3、然后就是将执行请求，响应处理"><a href="#3、然后就是将执行请求，响应处理" class="headerlink" title="3、然后就是将执行请求，响应处理"></a>3、然后就是将执行请求，响应处理</h4><ul><li>经过上面的逻辑处理，我们已经得到了对应的服务实例<code>Server</code>，所以我们现在就是要执行请求了，这个处理在<code>Ribbon</code>是通过<code>IClient</code>来定义的，可以看里面就一个<code>execute()</code>执行方法<ul><li>接口上面两个泛型对象一个对应请求对象<code>ClientRequest</code>，另一个对应响应对象<code>IResponse</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A client that can execute a single request. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> awang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IClient</span>&lt;<span class="title">S</span> <span class="keyword">extends</span> <span class="title">ClientRequest</span>, <span class="title">T</span> <span class="keyword">extends</span> <span class="title">IResponse</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute the request and return the response. It is expected that there is no retry and all exceptions</span></span><br><span class="line"><span class="comment">     * are thrown directly.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">execute</span><span class="params">(S request, IClientConfig requestConfig)</span> <span class="keyword">throws</span> Exception</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类继承关系图</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ribbon/IClient.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="3-1-执行请求客户端AbstractLoadBalancerAwareClient"><a href="#3-1-执行请求客户端AbstractLoadBalancerAwareClient" class="headerlink" title="3.1 执行请求客户端AbstractLoadBalancerAwareClient"></a>3.1 执行请求客户端<code>AbstractLoadBalancerAwareClient</code></h5><ul><li>这个类是<code>IClient</code>抽象实现类，主要是执行请求，还有重试及异常处理，代码使用了<code>RxJava</code>风格，所以看起来比较陌生，下面可以看到构造了一个<code>LoadBalancerCommand</code>并传入了一个<code>ServerOperation</code>对象<ul><li>并<code>ServerOperation</code>实现了其<code>call</code>方法，这里是个接口，哇，第一次见，<code>call()</code>方法是具体执行请求的方法</li><li><code>LoadBalancerCommand</code>的<code>submit()</code>方法是个入口统筹方法，里面不仅会调用<code>ServerOperation</code>的<code>call</code>方法，还做了重试及异常处理，这种设计方式可以学习学习</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">executeWithLoadBalancer</span><span class="params">(<span class="keyword">final</span> S request, <span class="keyword">final</span> IClientConfig requestConfig)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取重试处理器，这个由其他实现类动态实现</span></span><br><span class="line">    RequestSpecificRetryHandler handler = getRequestSpecificRetryHandler(request, requestConfig);</span><br><span class="line">    <span class="comment">// 构造LoadBalancerCommand，RxJava风格</span></span><br><span class="line">    LoadBalancerCommand&lt;T&gt; command = LoadBalancerCommand.&lt;T&gt;builder()</span><br><span class="line">            .withLoadBalancerContext(<span class="keyword">this</span>)</span><br><span class="line">            .withRetryHandler(handler)</span><br><span class="line">            .withLoadBalancerURI(request.getUri())</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> command.submit(</span><br><span class="line">            <span class="keyword">new</span> ServerOperation&lt;T&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Server server)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 修改原始url为实际的url</span></span><br><span class="line">                    URI finalUri = reconstructURIWithServer(server, request.getUri());</span><br><span class="line">                    S requestForServer = (S) request.replaceUri(finalUri);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 执行请求</span></span><br><span class="line">                        <span class="keyword">return</span> Observable.just(AbstractLoadBalancerAwareClient.<span class="keyword">this</span>.execute(requestForServer, requestConfig));</span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .toBlocking()</span><br><span class="line">            .single();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Throwable t = e.getCause();</span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> ClientException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (ClientException) t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们看这行代码<code>Observable.just(AbstractLoadBalancerAwareClient.this.execute(requestForServer, requestConfig));</code>，进入<code>org.springframework.cloud.netflix.ribbon.apache.RibbonLoadBalancingHttpClient#execute()</code>方法，可以看到实际上是<code>CloseableHttpClient</code>来发送我们的请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RibbonApacheHttpResponse <span class="title">execute</span><span class="params">(RibbonApacheHttpRequest request, IClientConfig configOverride)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Builder builder = RequestConfig.custom();</span><br><span class="line">    IClientConfig config = configOverride != <span class="keyword">null</span> ? configOverride : <span class="keyword">this</span>.config;</span><br><span class="line">    <span class="comment">// 连接超时时间</span></span><br><span class="line">    builder.setConnectTimeout(((Integer)config.get(CommonClientConfigKey.ConnectTimeout, <span class="keyword">this</span>.connectTimeout)).intValue());</span><br><span class="line">    <span class="comment">// 读取超时时间</span></span><br><span class="line">    builder.setSocketTimeout(((Integer)config.get(CommonClientConfigKey.ReadTimeout, <span class="keyword">this</span>.readTimeout)).intValue());</span><br><span class="line">    builder.setRedirectsEnabled(((Boolean)config.get(CommonClientConfigKey.FollowRedirects, <span class="keyword">this</span>.followRedirects)).booleanValue());</span><br><span class="line">    RequestConfig requestConfig = builder.build();</span><br><span class="line">    request = <span class="keyword">this</span>.getSecureRequest(request, configOverride);</span><br><span class="line">    HttpUriRequest httpUriRequest = request.toRequest(requestConfig);</span><br><span class="line">    HttpResponse httpResponse = ((CloseableHttpClient)<span class="keyword">this</span>.delegate).execute(httpUriRequest);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RibbonApacheHttpResponse(httpResponse, httpUriRequest.getURI());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调试代码可以看到实际已经拼装好了具体请求的参数，包括请求链接</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ribbon/ribbonHttpClient.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="3-2-执行命令-LoadBalancerCommand"><a href="#3-2-执行命令-LoadBalancerCommand" class="headerlink" title="3.2 执行命令 LoadBalancerCommand"></a>3.2 执行命令 LoadBalancerCommand</h5><ul><li>这个构造的<code>LoadBalancerCommand</code>是一个<code>RxJava</code>风格的，从下面可以看到具体执行流程就是通过选取<code>Server</code>的接口<code>ILoadBalancer</code>来获取<code>Server</code>，然后就是执行请求了，它包含了重试和异常处理机制、同时还记录了执行状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 返回一个只包含一个Server的Observable，但是每次从负载均衡器中获取一个</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Observable&lt;Server&gt; <span class="title">selectServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Server&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Server&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Server server = loadBalancerContext.getServerFromLoadBalancer(loadBalancerURI, loadBalancerKey);   </span><br><span class="line">                next.onNext(server);</span><br><span class="line">                next.onCompleted();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                next.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">submit</span><span class="params">(<span class="keyword">final</span> ServerOperation&lt;T&gt; operation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ExecutionInfoContext context = <span class="keyword">new</span> ExecutionInfoContext();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            listenerInvoker.onExecutionStart();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AbortExecutionException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取在每个服务实例重试的的次数</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> maxRetrysSame = retryHandler.getMaxRetriesOnSameServer();</span><br><span class="line">    <span class="comment">// 最多尝试几个服务实例</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> maxRetrysNext = retryHandler.getMaxRetriesOnNextServer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对 于每个服务实例的调用逻辑</span></span><br><span class="line">    <span class="comment">// 默认field server是null，通过selectServer()方法获取一个Server</span></span><br><span class="line">    Observable&lt;T&gt; o = </span><br><span class="line">            (server == <span class="keyword">null</span> ? selectServer() : Observable.just(server))</span><br><span class="line">            .concatMap(<span class="keyword">new</span> Func1&lt;Server, Observable&lt;T&gt;&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="comment">// 对于每个Server，按顺序映射为对于每个Server包含重试逻辑的请求调用</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Server server)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 设置上下文</span></span><br><span class="line">                    context.setServer(server);</span><br><span class="line">                    <span class="keyword">final</span> ServerStats stats = loadBalancerContext.getServerStats(server);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 每个Server包含重试逻辑的请求调用</span></span><br><span class="line">                    Observable&lt;T&gt; o = Observable</span><br><span class="line">                            .just(server)</span><br><span class="line">                            .concatMap(<span class="keyword">new</span> Func1&lt;Server, Observable&lt;T&gt;&gt;() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(<span class="keyword">final</span> Server server)</span> </span>&#123;</span><br><span class="line">                                    context.incAttemptCount();</span><br><span class="line">                                    <span class="comment">// 增加Server正在处理的请求计数</span></span><br><span class="line">                                    loadBalancerContext.noteOpenConnection(stats);</span><br><span class="line"></span><br><span class="line">                                    <span class="comment">// 监听器</span></span><br><span class="line">                                    <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            listenerInvoker.onStartWithServer(context.toExecutionInfo());</span><br><span class="line">                                        &#125; <span class="keyword">catch</span> (AbortExecutionException e) &#123;</span><br><span class="line">                                            <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="comment">// 计时器</span></span><br><span class="line">                                    <span class="keyword">final</span> Stopwatch tracer = loadBalancerContext.getExecuteTracer().start();</span><br><span class="line">                                    <span class="comment">// operation.call(server)就是刚刚分析的AbstractLoadBalancerAwareClient传过来的ServerOperation，就是直接对这个Server调用请求</span></span><br><span class="line">                                    <span class="comment">// doOnEach的操作就是记录请求前后的一些数据用于负载均衡数据统计</span></span><br><span class="line">                                    <span class="keyword">return</span> operation.call(server).doOnEach(<span class="keyword">new</span> Observer&lt;T&gt;() &#123;</span><br><span class="line">                                        <span class="keyword">private</span> T entity;</span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                            <span class="comment">// 记录请求完成</span></span><br><span class="line">                                            recordStats(tracer, stats, entity, <span class="keyword">null</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                                            <span class="comment">// 记录请求结束</span></span><br><span class="line">                                            recordStats(tracer, stats, <span class="keyword">null</span>, e);</span><br><span class="line">                                            logger.debug(<span class="string">"Got error &#123;&#125; when executed on server &#123;&#125;"</span>, e, server);</span><br><span class="line">                                            <span class="comment">// 发生了错误，通知listener</span></span><br><span class="line">                                            <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                listenerInvoker.onExceptionWithServer(e, context.toExecutionInfo());</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">                                            <span class="comment">// 因为只有调用请求成功只有一个结果（只有一个请求）， 这里的entity就是结果，只要收到结果就代表请求成功</span></span><br><span class="line">                                            <span class="keyword">this</span>.entity = entity;</span><br><span class="line">                                            <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                listenerInvoker.onExecutionSuccess(entity, context.toExecutionInfo());</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;                            </span><br><span class="line"></span><br><span class="line">                                        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recordStats</span><span class="params">(Stopwatch tracer, ServerStats stats, Object entity, Throwable exception)</span> </span>&#123;</span><br><span class="line">                                            tracer.stop();</span><br><span class="line">                                            loadBalancerContext.noteRequestCompletion(stats, entity, exception, tracer.getDuration(TimeUnit.MILLISECONDS), retryHandler);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (maxRetrysSame &gt; <span class="number">0</span>)</span><br><span class="line">                        <span class="comment">// 是否retry</span></span><br><span class="line">                        o = o.retry(retryPolicy(maxRetrysSame, <span class="keyword">true</span>));</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (maxRetrysNext &gt; <span class="number">0</span> &amp;&amp; server == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 是否retry，如果retry回调用selectServer()返回下一个Server</span></span><br><span class="line">        o = o.retry(retryPolicy(maxRetrysNext, <span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常处理</span></span><br><span class="line">    <span class="keyword">return</span> o.onErrorResumeNext(<span class="keyword">new</span> Func1&lt;Throwable, Observable&lt;T&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (context.getAttemptCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果超过重试次数，则抛异常</span></span><br><span class="line">                <span class="keyword">if</span> (maxRetrysNext &gt; <span class="number">0</span> &amp;&amp; context.getServerAttemptCount() == (maxRetrysNext + <span class="number">1</span>)) &#123;</span><br><span class="line">                    e = <span class="keyword">new</span> ClientException(ClientException.ErrorType.NUMBEROF_RETRIES_NEXTSERVER_EXCEEDED,</span><br><span class="line">                            <span class="string">"Number of retries on next server exceeded max "</span> + maxRetrysNext</span><br><span class="line">                            + <span class="string">" retries, while making a call for: "</span> + context.getServer(), e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (maxRetrysSame &gt; <span class="number">0</span> &amp;&amp; context.getAttemptCount() == (maxRetrysSame + <span class="number">1</span>)) &#123;</span><br><span class="line">                    e = <span class="keyword">new</span> ClientException(ClientException.ErrorType.NUMBEROF_RETRIES_EXEEDED,</span><br><span class="line">                            <span class="string">"Number of retries exceeded max "</span> + maxRetrysSame</span><br><span class="line">                            + <span class="string">" retries, while making a call for: "</span> + context.getServer(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                listenerInvoker.onExecutionFailed(e, context.toFinalExecutionInfo());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、如果调用失败是不是要重试"><a href="#4、如果调用失败是不是要重试" class="headerlink" title="4、如果调用失败是不是要重试"></a>4、如果调用失败是不是要重试</h4><ul><li>下章研究</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>由这几章我们了解到<code>Ribbon</code>主要由如下几个组件组成：<ul><li>服务实例列表维护机制实现的接口<code>ServerList</code></li><li>负责选取<code>Server</code>的接口<code>ILoadBalancer</code></li><li>服务实例列表更新机制实现的接口<code>ServerListUpdater</code></li><li>服务实例列表过滤机制<code>ServerListFilter</code></li><li>负载均衡选取规则实现的接口<code>IRule</code></li><li>所有<code>Ribbon</code>负载均衡器需要实现的接口<code>IClient</code></li></ul></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://blog.csdn.net/zhxdick/article/details/79717757" target="_blank" rel="noopener">https://blog.csdn.net/zhxdick/article/details/79717757</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;由前面章节我们知道&lt;code&gt;Ribbon&lt;/code&gt;功能主要是将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Ribbon)工作原理源码分析一</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Ribbon)%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Ribbon)工作原理源码分析一/</id>
    <published>2019-08-06T16:03:02.000Z</published>
    <updated>2019-08-31T14:50:59.515Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p>由前面章节我们知道<code>Ribbon</code>功能主要是将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行，那么如果要实现负载均衡，具体是要做哪些事呢？</p><ul><li>1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况</li><li>2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例</li><li>3、然后就是将执行请求，响应处理</li><li>4、如果调用失败是不是要重试</li></ul></li><li><p>下面将从<code>Ribbon</code>的源码来按照上面的步骤来分析其具体实现, 源码版本：</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.netflix.ribbon/ribbon-core --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.netflix.ribbon&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ribbon-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.4&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况"><a href="#1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况" class="headerlink" title="1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况"></a>1、第一步是要维护哪些服务实例可用，需要处理临时新增了服务或者某个服务不可用了情况</h4><h5 id="1、1-定义服务实例Server"><a href="#1、1-定义服务实例Server" class="headerlink" title="1、1 定义服务实例Server"></a>1、1 定义服务实例Server</h5><ul><li><p>首先先要定义服务实例，这里这里<code>Ribbon</code>用<code>com.netflix.loadbalancer.Server</code>来定义，从成员变量可以看到<code>host</code>及<code>port</code>的定义</p></li><li><p><code>Server</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class that represents a typical Server (or an addressable Node) i.e. a</span></span><br><span class="line"><span class="comment"> * Host:port identifier</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stonse</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNKNOWN_ZONE = <span class="string">"UNKNOWN"</span>;</span><br><span class="line">    <span class="comment">// host</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="comment">// 端口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">private</span> String scheme;</span><br><span class="line">    <span class="comment">// 服务id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> String id;</span><br><span class="line">    <span class="comment">// 是否存活</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isAliveFlag;</span><br><span class="line">    <span class="keyword">private</span> String zone = UNKNOWN_ZONE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> readyToServe = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 服务器的其他元信息</span></span><br><span class="line">    <span class="keyword">private</span> MetaInfo simpleMetaInfo = <span class="keyword">new</span> MetaInfo() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getAppName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getServerGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getServiceIdForDiscovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getInstanceId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li>因为我们前面使用的是<code>Consul</code>来作为注册中心，所以我们先看看使用<code>Consul</code>是怎么定义服务实例的，由下面可以看到是添加了一个<code>HealthService</code>及存储服务实例元数据信息的<code>metaInfo</code>,<code>metadata</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulServer</span> <span class="keyword">extends</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MetaInfo metaInfo;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HealthService service;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; metadata;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConsulServer</span><span class="params">(<span class="keyword">final</span> HealthService healthService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(findHost(healthService), healthService.getService().getPort());</span><br><span class="line"><span class="keyword">this</span>.service = healthService;</span><br><span class="line"><span class="keyword">this</span>.metadata = ConsulServerUtils.getMetadata(<span class="keyword">this</span>.service);</span><br><span class="line">metaInfo = <span class="keyword">new</span> MetaInfo() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAppName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> service.getService().getService();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getServerGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getMetadata().get(<span class="string">"group"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getServiceIdForDiscovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInstanceId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> service.getService().getId();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setAlive(isPassingChecks());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MetaInfo <span class="title">getMetaInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> metaInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> HealthService <span class="title">getHealthService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getMetadata</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> metadata;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPassingChecks</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Check check : <span class="keyword">this</span>.service.getChecks()) &#123;</span><br><span class="line"><span class="keyword">if</span> (check.getStatus() != Check.CheckStatus.PASSING) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1、2-定义服务器列表ServerList"><a href="#1、2-定义服务器列表ServerList" class="headerlink" title="1、2 定义服务器列表ServerList"></a>1、2 定义服务器列表ServerList</h5><ul><li><p>因为这里是要处理负载均衡，所以涉及到多个<code>Server</code>, 这里<code>Ribbon</code>用<code>ServerList</code>接口来定义服务器列表相关的方法，可以看到这两个接口有两个方法，都是返回<code>List&lt;T extends Server&gt;</code></p><ul><li><code>getInitialListOfServers</code>定义初次获取服务实例列表方法</li><li><code>getUpdatedListOfServers</code>定义获取更新后服务实例列表方法<ul><li>这里会有个<code>Loadbalancer</code>的<code>Ping</code>处理会每30秒更新服务</li></ul></li></ul></li><li><p><code>ServerList</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface that defines the methods sed to obtain the List of Servers</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stonse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServerList</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Server</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getInitialListOfServers</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return updated list of servers. This is called say every 30 secs</span></span><br><span class="line"><span class="comment">     * (configurable) by the Loadbalancer's Ping cycle</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getUpdatedListOfServers</span><span class="params">()</span></span>;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再看下哪些类实现了这个接口</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ribbon/ServerList.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>子类解析</p><ul><li><code>StaticServerList</code> 定义静态的服务实例列表，用作服务实例固定的情况，具体有哪些服务实例由构造函数提供</li><li><code>AbstractServerList</code>该类包含一个API方法，用于创建负载均衡器使用的过滤器</li><li><code>ConfigurationBasedServerList</code>定义可以从配置中加载服务器列表</li><li><code>ConsulServerList</code>在<code>Consul</code>环境下的服务实例</li></ul></li><li><p>我们这里关注<code>org.springframework.cloud.consul.discovery.ConsulServerList</code>，可以看到成员变量有我们之前接触到的<code>ConsulClient client</code>，用于访问<code>Consul Restful API</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Richard Kettelerij</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulServerList</span> <span class="keyword">extends</span> <span class="title">AbstractServerList</span>&lt;<span class="title">ConsulServer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 访问Consul Restful API的客户端</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsulClient client;</span><br><span class="line"><span class="comment">// Consul的配置 </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsulDiscoveryProperties properties;</span><br><span class="line">    <span class="comment">// 要实现负载均衡的服务id</span></span><br><span class="line"><span class="keyword">private</span> String serviceId;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConsulServerList</span><span class="params">(ConsulClient client, ConsulDiscoveryProperties properties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.client = client;</span><br><span class="line"><span class="keyword">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConsulClient <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConsulDiscoveryProperties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> properties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getServiceId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> serviceId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.serviceId = clientConfig.getClientName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ConsulServer&gt; <span class="title">getInitialListOfServers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getServers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ConsulServer&gt; <span class="title">getUpdatedListOfServers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getServers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li>我们这里关注它是怎么实现<code>getInitialListOfServers()</code>及<code>getUpdatedListOfServers()</code>方法的，可以看到都是直接调用了<code>getServers()</code>方法，里面的逻辑就是根据服务<code>id</code>调用<code>Consul Restful API /v1/health/service/</code>来获取服务实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ConsulServer&gt; <span class="title">getServers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.client == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    String tag = getTag(); <span class="comment">// null is ok</span></span><br><span class="line">    <span class="comment">// 直接调用Consul Restful API</span></span><br><span class="line">    Response&lt;List&lt;HealthService&gt;&gt; response = <span class="keyword">this</span>.client.getHealthServices(</span><br><span class="line">            <span class="keyword">this</span>.serviceId, tag, <span class="keyword">this</span>.properties.isQueryPassing(),</span><br><span class="line">            createQueryParamsForClientRequest(), <span class="keyword">this</span>.properties.getAclToken());</span><br><span class="line">    <span class="keyword">if</span> (response.getValue() == <span class="keyword">null</span> || response.getValue().isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformResponse(response.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例"><a href="#2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例" class="headerlink" title="2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例"></a>2、有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例</h4><ul><li>上一块已经有了服务实例列表，那么现在就是要挑选具体是要调用哪个实例了，<code>Ribbon</code>是通过<code>ILoadBalancer</code>接口来抽象的</li></ul><h5 id="2、1-负责选取Server的接口ILoadBalancer"><a href="#2、1-负责选取Server的接口ILoadBalancer" class="headerlink" title="2、1 负责选取Server的接口ILoadBalancer"></a>2、1 负责选取<code>Server</code>的接口<code>ILoadBalancer</code></h5><ul><li>该接口定义了一个客户端负债均衡器需要的一系列抽象操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILoadBalancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向负债均衡器维护的实例列表中添加服务实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addServers</span><span class="params">(List&lt;Server&gt; newServers)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 通过某种策略挑选一个具体的服务实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">chooseServer</span><span class="params">(Object key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知和标记负债均衡器某个具体实例已经停止服务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">markServerDown</span><span class="params">(Server server)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Server&gt; <span class="title">getServerList</span><span class="params">(<span class="keyword">boolean</span> availableOnly)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前正常服务的实例列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Server&gt; <span class="title">getReachableServers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有服务实例列表，包括正常与不正常的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Server&gt; <span class="title">getAllServers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ribbon/ILoadBalancer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p><code>ILoadBalancer</code>子类解析</p><ul><li><p>1、<code>AbstractLoadBalancer</code>抽象实现类</p><ul><li><p>该抽象类定义了一个关于服务实例的分组枚举类<code>ServerGroup</code>，包含</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ServerGroup&#123;</span><br><span class="line">    <span class="comment">// 所有服务实例</span></span><br><span class="line">    ALL,</span><br><span class="line">    <span class="comment">// 正常服务的实例</span></span><br><span class="line">    STATUS_UP,</span><br><span class="line">    <span class="comment">// 停止服务的实例</span></span><br><span class="line">    STATUS_NOT_UP        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>getServerList(ServerGroup serverGroup);</code>添加了一个按分组来获取不同的服务实例的列表方法</p></li><li><code>LoadBalancerStats getLoadBalancerStats();</code>获取服务实例当前的属性和统计信息</li></ul></li><li><p>2、<code>BaseLoadBalancer</code> 负债均衡器的基础实现类</p><ul><li>这个类维护了存储服务实例的列表对象，并通过<code>IPing</code>对象来检查服务的状态</li><li><p>下面是其成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A basic implementation of the load balancer where an arbitrary list of</span></span><br><span class="line"><span class="comment"> * servers can be set as the server pool. A ping can be set to determine the</span></span><br><span class="line"><span class="comment"> * liveness of a server. Internally, this class maintains an "all" server list</span></span><br><span class="line"><span class="comment"> * and an "up" server list and use them depending on what the caller asks for.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stonse</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseLoadBalancer</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancer</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">PrimeConnections</span>.<span class="title">PrimeConnectionListener</span>, <span class="title">IClientConfigAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory</span><br><span class="line">            .getLogger(BaseLoadBalancer.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> IRule DEFAULT_RULE = <span class="keyword">new</span> RoundRobinRule();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> SerialPingStrategy DEFAULT_PING_STRATEGY = <span class="keyword">new</span> SerialPingStrategy();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_NAME = <span class="string">"default"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">"LoadBalancer_"</span>;</span><br><span class="line">    <span class="comment">// 负债均衡的处理规则</span></span><br><span class="line">    <span class="keyword">protected</span> IRule rule = DEFAULT_RULE;</span><br><span class="line">    <span class="comment">// 检查服务实例操作的执行策略对象，默认使用SerialPingStrategy，该策略采用线性遍历`ping`服务实例的方式检查</span></span><br><span class="line">    <span class="keyword">protected</span> IPingStrategy pingStrategy = DEFAULT_PING_STRATEGY;</span><br><span class="line">    <span class="comment">// 检查服务实例是否正常</span></span><br><span class="line">    <span class="keyword">protected</span> IPing ping = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 所有服务实例列表</span></span><br><span class="line">    <span class="meta">@Monitor</span>(name = PREFIX + <span class="string">"AllServerList"</span>, type = DataSourceType.INFORMATIONAL)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> List&lt;Server&gt; allServerList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;Server&gt;());</span><br><span class="line">    <span class="comment">// 正常服务实例列表</span></span><br><span class="line">    <span class="meta">@Monitor</span>(name = PREFIX + <span class="string">"UpServerList"</span>, type = DataSourceType.INFORMATIONAL)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> List&lt;Server&gt; upServerList = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;Server&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ReadWriteLock allServerLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">protected</span> ReadWriteLock upServerLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name = DEFAULT_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Timer lbTimer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> pingIntervalSeconds = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> maxTotalPingTimeSeconds = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">protected</span> Comparator&lt;Server&gt; serverComparator = <span class="keyword">new</span> ServerComparator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AtomicBoolean pingInProgress = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">protected</span> LoadBalancerStats lbStats;</span><br><span class="line">    <span class="comment">// 用于跟踪事件发生频率的监控</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Counter counter = Monitors.newCounter(<span class="string">"LoadBalancer_ChooseServer"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PrimeConnections primeConnections;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> enablePrimingConnections = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IClientConfig config;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;ServerListChangeListener&gt; changeListeners = <span class="keyword">new</span> CopyOnWriteArrayList&lt;ServerListChangeListener&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ServerStatusChangeListener&gt; serverStatusListeners = <span class="keyword">new</span> CopyOnWriteArrayList&lt;ServerStatusChangeListener&gt;();</span><br><span class="line">    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>从构造函数可以看到，主要做了如下事情</p><ul><li><code>this.ping</code>对象默认赋值为空，</li><li>负债均衡的处理规则默认是线性轮循</li><li>启动一个用于定时检查<code>Server</code>是否健康的任务，该任务默认的执行间隔是10秒</li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseLoadBalancer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = DEFAULT_NAME;</span><br><span class="line">    <span class="keyword">this</span>.ping = <span class="keyword">null</span>;</span><br><span class="line">    setRule(DEFAULT_RULE);</span><br><span class="line">    setupPingTask();</span><br><span class="line">    lbStats = <span class="keyword">new</span> LoadBalancerStats(DEFAULT_NAME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>addServer()</code>方法可向负债均衡器增加新的服务实例列表，查看注释可以看到方法不保证其唯一性也就是说可以通过添加服务的服务实例来提高此服务的命中几率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addServer</span><span class="params">(Server newServer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newServer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;Server&gt; newList = <span class="keyword">new</span> ArrayList&lt;Server&gt;();</span><br><span class="line">    </span><br><span class="line">            newList.addAll(allServerList);</span><br><span class="line">            newList.add(newServer);</span><br><span class="line">            setServersList(newList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"LoadBalancer [&#123;&#125;]: Error adding newServer &#123;&#125;"</span>, name, newServer.getHost(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>chooseServer(Object key)</code>选择服务实例，可以看到实际上是使用<code>IRule</code>对象来选择实例，此类将在下面详细介绍，这里只要知道是调用这个对象的方来获取实例的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  * Get the alive server dedicated to key</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * @return the dedicated server</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Server <span class="title">chooseServer</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (counter == <span class="keyword">null</span>) &#123;</span><br><span class="line">         counter = createCounter();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 用于跟踪事件发生频率的监控</span></span><br><span class="line">     <span class="comment">// private volatile Counter counter = Monitors.newCounter("LoadBalancer_ChooseServer");</span></span><br><span class="line">     counter.increment();</span><br><span class="line">     <span class="keyword">if</span> (rule == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> rule.choose(key);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             logger.warn(<span class="string">"LoadBalancer [&#123;&#125;]:  Error choosing server for key &#123;&#125;"</span>, name, key, e);</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>3、<code>DynamicServerListLoadBalancer</code> 对<code>BaseLoadBalancer</code>的扩展</p><ul><li>该类实现了服务实例清单在运行期的动态更新能力，同时还添加了对服务实例清单的过滤功能</li><li><p>下面是其成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A LoadBalancer that has the capabilities to obtain the candidate list of</span></span><br><span class="line"><span class="comment"> * servers using a dynamic source. i.e. The list of servers can potentially be</span></span><br><span class="line"><span class="comment"> * changed at Runtime. It also contains facilities wherein the list of servers</span></span><br><span class="line"><span class="comment"> * can be passed through a Filter criteria to filter out servers that do not</span></span><br><span class="line"><span class="comment"> * meet the desired criteria.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stonse</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicServerListLoadBalancer</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Server</span>&gt; <span class="keyword">extends</span> <span class="title">BaseLoadBalancer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DynamicServerListLoadBalancer.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isSecure = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> useTunnel = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// to keep track of modification of server lists</span></span><br><span class="line">    <span class="keyword">protected</span> AtomicBoolean serverListUpdateInProgress = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 服务实例清单</span></span><br><span class="line">    <span class="keyword">volatile</span> ServerList&lt;T&gt; serverListImpl;</span><br><span class="line">    <span class="comment">// 服务实例清单的过滤</span></span><br><span class="line">    <span class="keyword">volatile</span> ServerListFilter&lt;T&gt; filter;</span><br><span class="line">    <span class="comment">// 该对象实现对serverListImpl服务实例清单的更新</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ServerListUpdater.UpdateAction updateAction = <span class="keyword">new</span> ServerListUpdater.UpdateAction() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            updateListOfServers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> ServerListUpdater serverListUpdater;</span><br><span class="line">      </span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></li><li><p><code>com.netflix.loadbalancer.ServerListUpdater</code>为服务更新器</p><ul><li><p>可以看到创建了<code>ServerListUpdater</code>接口的一个内部类<code>UpdateAction</code>并实现了其<code>doUpdate()</code>方法，里面又调用了<code>updateListOfServers();</code>方法，此定义是下面定时任务的执行方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> ServerListUpdater.UpdateAction updateAction = <span class="keyword">new</span> ServerListUpdater.UpdateAction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        updateListOfServers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateListOfServers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;T&gt; servers = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    <span class="keyword">if</span> (serverListImpl != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用ConsulServerList 的getUpdatedListOfServers()</span></span><br><span class="line">        servers = serverListImpl.getUpdatedListOfServers();</span><br><span class="line">        LOGGER.debug(<span class="string">"List of Servers for &#123;&#125; obtained from Discovery client: &#123;&#125;"</span>,</span><br><span class="line">                getIdentifier(), servers);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (filter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            servers = filter.getFilteredListOfServers(servers);</span><br><span class="line">            LOGGER.debug(<span class="string">"Filtered List of Servers for &#123;&#125; obtained from Discovery client: &#123;&#125;"</span>,</span><br><span class="line">                    getIdentifier(), servers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    updateAllServerList(servers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ServerListUpdater</code>该对象实现对<code>serverListImpl</code>服务实例清单的更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServerListUpdater</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 内部类，doUpdate()实现对ServerList的具体更新操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UpdateAction</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doUpdate</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 启动服务更新器</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(UpdateAction updateAction)</span></span>;</span><br><span class="line">    <span class="comment">// 停止</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 获取最近的更新时间戳</span></span><br><span class="line">    <span class="function">String <span class="title">getLastUpdate</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 获取上一次更新到现在的时间间隔</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getDurationSinceLastUpdateMs</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 获取错过的更新周期数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNumberMissedCycles</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 获取核心线程数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCoreThreads</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>com.netflix.loadbalancer.PollingServerListUpdater</code>此类是动态服务列表更新的默认策略，也就是说<code>DynamicServerListLoadBalancer</code>负债均衡器中的默认实现就是它，它通过定时任务的方式对服务列表进行更新</p><ul><li>先从用于启动<code>服务更新器</code>的<code>start</code>函数源码看起，可以看到先创建了<code>Runnable</code>线程，并在实现中调用了上面提到的具体更新服务实例列表的<code>new ServerListUpdater.UpdateAction().doUpdate()</code>方法，定时器默认是服务实例初始化延迟1秒后开始执行，30秒周期循环<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">final</span> UpdateAction updateAction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isActive.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">final</span> Runnable wrapperRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!isActive.get()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (scheduledFuture != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        scheduledFuture.cancel(<span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    updateAction.doUpdate();</span><br><span class="line">                    lastUpdated = System.currentTimeMillis();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    logger.warn(<span class="string">"Failed one update cycle"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">            </span><br><span class="line">        scheduledFuture = getRefreshExecutor().scheduleWithFixedDelay(</span><br><span class="line">                wrapperRunnable,</span><br><span class="line">                <span class="comment">// 默认服务实例初始化延迟1秒后开始执行</span></span><br><span class="line">                initialDelayMs,</span><br><span class="line">                <span class="comment">// 30秒周期循环</span></span><br><span class="line">                refreshIntervalMs,</span><br><span class="line">                TimeUnit.MILLISECONDS</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"Already active, no-op"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>回到<code>DynamicServerListLoadBalancer</code>类寻找是怎么启动<code>ServerListUpdater</code>服务更新器的</p><ul><li><p>先看下构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DynamicServerListLoadBalancer</span><span class="params">(IClientConfig clientConfig, IRule rule, IPing ping,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     ServerList&lt;T&gt; serverList, ServerListFilter&lt;T&gt; filter,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     ServerListUpdater serverListUpdater)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(clientConfig, rule, ping);</span><br><span class="line">    <span class="keyword">this</span>.serverListImpl = serverList;</span><br><span class="line">    <span class="keyword">this</span>.filter = filter;</span><br><span class="line">    <span class="keyword">this</span>.serverListUpdater = serverListUpdater;</span><br><span class="line">    <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> AbstractServerListFilter) &#123;</span><br><span class="line">        ((AbstractServerListFilter) filter).setLoadBalancerStats(getLoadBalancerStats());</span><br><span class="line">    &#125;</span><br><span class="line">    restOfInit(clientConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们关心<code>restOfInit(clientConfig);</code>方法用于初始化</p><ul><li><p>进入该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">restOfInit</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> primeConnection = <span class="keyword">this</span>.isEnablePrimingConnections();</span><br><span class="line">    <span class="comment">// turn this off to avoid duplicated asynchronous priming done in BaseLoadBalancer.setServerList()</span></span><br><span class="line">    <span class="keyword">this</span>.setEnablePrimingConnections(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 开启定时com.netflix.loadbalancer.ServerListUpdater#start()</span></span><br><span class="line">    enableAndInitLearnNewServersFeature();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新服务实例</span></span><br><span class="line">    updateListOfServers();</span><br><span class="line">    <span class="keyword">if</span> (primeConnection &amp;&amp; <span class="keyword">this</span>.getPrimeConnections() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getPrimeConnections()</span><br><span class="line">                .primeConnections(getReachableServers());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.setEnablePrimingConnections(primeConnection);</span><br><span class="line">    LOGGER.info(<span class="string">"DynamicServerListLoadBalancer for client &#123;&#125; initialized: &#123;&#125;"</span>, clientConfig.getClientName(), <span class="keyword">this</span>.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>enableAndInitLearnNewServersFeature();</code>方法调用了前面的<code>com.netflix.loadbalancer.ServerListUpdater#start()</code>方法用于开启定时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enableAndInitLearnNewServersFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     LOGGER.info(<span class="string">"Using serverListUpdater &#123;&#125;"</span>, serverListUpdater.getClass().getSimpleName());</span><br><span class="line">     serverListUpdater.start(updateAction);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>updateListOfServers();</code>方法，更新服务实例，这里<code>serverListImpl</code>实现类为<code>ConsulServerList</code>，前面知道<code>ConsulServerList</code>会调用<code>Consul Restful API</code>获取服务实例信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateListOfServers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;T&gt; servers = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">    <span class="keyword">if</span> (serverListImpl != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用ConsulServerList 的getUpdatedListOfServers()</span></span><br><span class="line">        servers = serverListImpl.getUpdatedListOfServers();</span><br><span class="line">        LOGGER.debug(<span class="string">"List of Servers for &#123;&#125; obtained from Discovery client: &#123;&#125;"</span>,</span><br><span class="line">                getIdentifier(), servers);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (filter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            servers = filter.getFilteredListOfServers(servers);</span><br><span class="line">            LOGGER.debug(<span class="string">"Filtered List of Servers for &#123;&#125; obtained from Discovery client: &#123;&#125;"</span>,</span><br><span class="line">                    getIdentifier(), servers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    updateAllServerList(servers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>再此更新服务实例的定时任务已经启动了</p></li><li><code>updateListOfServers();</code>方法里面的<code>filter.getFilteredListOfServers(servers);</code>方法用于过滤服务清单</li></ul></li></ul></li><li>4、<code>ZoneAwareLoadBalancer</code>负债均衡器是对<code>DynamicServerListLoadBalancer</code>的扩展<ul><li>在<code>DynamicServerListLoadBalancer</code>中，我们看到它并没有重写选择具体实例的<code>chooseServer()</code>函数，所以它依旧使用<code>BaseLoadBalancer</code>的线性轮询方式来选择调用的服务实例</li></ul></li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;由前面章节我们知道&lt;code&gt;Ribbon&lt;/code&gt;功能主要是将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Ribbon)与SpringCloud集成简单示例</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Ribbon)%E4%B8%8ESpringCloud%E9%9B%86%E6%88%90%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Ribbon)与SpringCloud集成简单示例/</id>
    <published>2019-08-06T16:03:01.000Z</published>
    <updated>2019-08-31T02:31:25.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><code>Spring Cloud Ribbon</code>是为客户端提供负载均衡功能的服务，简单来说，就是从注册中心<code>Eureka、Consul</code>获取可用服务实例列表，然后将请求根据某种策略发到这些实例上面执行</li></ul><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><h5 id="1、集成ribbon"><a href="#1、集成ribbon" class="headerlink" title="1、集成ribbon"></a>1、集成ribbon</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、消费方"><a href="#2、消费方" class="headerlink" title="2、消费方"></a>2、消费方</h5><ul><li><p>定义消费方调用方法，通过<code>@LoadBalanced</code>注解开启客户端负债均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要用来调用REST服务，本身并不具备调用分布式服务的能力，但通过<span class="doctag">@LoadBalanced</span>注解开启客户端负债均衡</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/router"</span>, method = RequestMethod.GET,</span><br><span class="line">            produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">router</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestTemplate restTpl = getRestTemplate();</span><br><span class="line">        <span class="comment">// 根据应用名称调用服务</span></span><br><span class="line">        String json = restTpl.getForObject(<span class="string">"http://eureka-provider/person/1"</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费方配置文件</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">9050</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-consumer</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:9010/eureka/,http://localhost:9020/eureka/</span></span><br></pre></td></tr></table></figure><h5 id="3、服务方"><a href="#3、服务方" class="headerlink" title="3、服务方"></a>3、服务方</h5><ul><li><p>服务提供方法, 这里就是简单模拟了一下根据personId获取人员信息，并返回对应服务的端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/person/&#123;personId&#125;"</span>, method = RequestMethod.GET,</span><br><span class="line">         produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Person <span class="title">findPerson</span><span class="params">(@PathVariable(<span class="string">"personId"</span>)</span> Integer personId, HttpServletRequest request) </span>&#123;</span><br><span class="line">     Person person = <span class="keyword">new</span> Person(personId, <span class="string">"songsy"</span>, <span class="number">18</span>);</span><br><span class="line">     person.setName(person.getName() + <span class="string">"端口："</span> + IpConfigurationUtils.getPort());</span><br><span class="line">     <span class="keyword">return</span> person;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-provider</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:9010/eureka/,http://localhost:9020/eureka/</span><br></pre></td></tr></table></figure><h6 id="3-1-服务方1-以9011端口启动"><a href="#3-1-服务方1-以9011端口启动" class="headerlink" title="3.1 服务方1 以9011端口启动"></a>3.1 服务方1 以9011端口启动</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> SpringApplicationBuilder(Slave1ProviderApplication.class).properties(<span class="string">"server.port=9011"</span>).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-2-服务方2-以9023端口启动"><a href="#3-2-服务方2-以9023端口启动" class="headerlink" title="3.2 服务方2 以9023端口启动"></a>3.2 服务方2 以9023端口启动</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> SpringApplicationBuilder(Slave1ProviderApplication.class).properties(<span class="string">"server.port=9023"</span>).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、测试结果"><a href="#4、测试结果" class="headerlink" title="4、测试结果"></a>4、测试结果</h5><ul><li>连续访问 <code>http://localhost:9050/router</code> 会得到不同的结果， 可以看到已经实现了负载均衡</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;"id":1,"name":"songsy端口：9023","age":18&#125;</span><br><span class="line"></span><br><span class="line">&#123;"id":1,"name":"songsy端口：9011","age":18&#125;</span><br></pre></td></tr></table></figure><h4 id="LoadBalanced注解解析"><a href="#LoadBalanced注解解析" class="headerlink" title="@LoadBalanced注解解析"></a><code>@LoadBalanced</code>注解解析</h4><ul><li>上一章节<code>Ribbon</code>实现客户端负债均衡是通过<code>@LoadBalanced</code>注解来开启的，下面是<code>@LoadBalanced</code> 注解，查看注释可以看到该注解具体发挥作用的是<code>LoadBalancerClient</code>类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用 LoadBalancerClient 该类来配置</span></span><br><span class="line"><span class="comment"> * Annotation to mark a RestTemplate bean to be configured to use a LoadBalancerClient</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD &#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LoadBalanced &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看<code>LoadBalancerClient.java</code>类可以看到主要有三种方法，这三种方法就是<code>Ribbon</code>的具体要做的事情<ul><li><code>choose()</code> 根据传入的服务实例名<code>serviceId</code>，从负债均衡中挑选一个对应服务的实例</li><li><code>reconstructURI()</code>将 <code>http://myservice/path/to/service</code>构建一个真实的<code>host:port</code>形式的<code>url</code></li><li><code>execute()</code> 根据挑选出来服务实例执行请求</li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/LoadBalancerClient.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><code>ServiceInstanceChooser.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServiceInstanceChooser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  根据传入的服务实例名serviceId，从负债均衡中挑选一个对应服务的实例</span></span><br><span class="line"><span class="comment">     * Choose a ServiceInstance from the LoadBalancer for the specified service</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceId the service id to look up the LoadBalancer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a ServiceInstance that matches the serviceId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ServiceInstance <span class="title">choose</span><span class="params">(String serviceId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>LoadBalancerClient.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents a client side load balancer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadBalancerClient</span> <span class="keyword">extends</span> <span class="title">ServiceInstanceChooser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据挑选出来服务实例执行请求</span></span><br><span class="line"><span class="comment"> * execute request using a ServiceInstance from the LoadBalancer for the specified</span></span><br><span class="line"><span class="comment"> * service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceId the service id to look up the LoadBalancer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request allows implementations to execute pre and post actions such as</span></span><br><span class="line"><span class="comment"> * incrementing metrics</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the result of the LoadBalancerRequest callback on the selected</span></span><br><span class="line"><span class="comment"> * ServiceInstance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(String serviceId, LoadBalancerRequest&lt;T&gt; request)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据服务实例执行请求</span></span><br><span class="line"><span class="comment"> * execute request using a ServiceInstance from the LoadBalancer for the specified</span></span><br><span class="line"><span class="comment"> * service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceId the service id to look up the LoadBalancer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceInstance the service to execute the request to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request allows implementations to execute pre and post actions such as</span></span><br><span class="line"><span class="comment"> * incrementing metrics</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the result of the LoadBalancerRequest callback on the selected</span></span><br><span class="line"><span class="comment"> * ServiceInstance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(String serviceId, ServiceInstance serviceInstance, LoadBalancerRequest&lt;T&gt; request)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 http://myservice/path/to/service 构建一个真实的host:port形式的url</span></span><br><span class="line"><span class="comment"> * Create a proper URI with a real host and port for systems to utilize.</span></span><br><span class="line"><span class="comment"> * Some systems use a URI with the logical serivce name as the host,</span></span><br><span class="line"><span class="comment"> * such as http://myservice/path/to/service.  This will replace the</span></span><br><span class="line"><span class="comment"> * service name with the host:port from the ServiceInstance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> original a URI with the host as a logical service name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a reconstructed URI</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">URI <span class="title">reconstructURI</span><span class="params">(ServiceInstance instance, URI original)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>它内部提供了一个叫做<code>ILoadBalance</code>的接口代表负载均衡器的操作，比如有添加服务器操作、选择服务器操作、获取所有的服务器列表、获取可用的服务器列表等等。</li></ul><ul><li>连接服务实例超时怎么办，连接服务实例后读取内容超时怎么处理</li><li>断路器是怎么处理的</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>负载均衡器的目的主要是根据负责均衡策略选取合适的服务端实例</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/zhxdick/article/details/79449146" target="_blank" rel="noopener">https://blog.csdn.net/zhxdick/article/details/79449146</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Spring Cloud Ribbon&lt;/code&gt;是为客户端提供负载均衡功能的服务，简单来说，就是从注册中心&lt;co
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Ribbon)负载均衡介绍</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Ribbon)%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Ribbon)负载均衡介绍/</id>
    <published>2019-08-06T16:03:00.000Z</published>
    <updated>2019-08-31T02:31:25.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="什么是负载均衡"><a href="#什么是负载均衡" class="headerlink" title="什么是负载均衡"></a>什么是负载均衡</h4><ul><li><p>查看百度百科，英文名称为<code>Load Balance</code>，其含义就是指将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行</p></li><li><p>那么如果要实现负载均衡，具体是要做哪些事呢</p><ul><li>第一步是要维护哪些服务实例可用，包括需要处理临时新增了服务或者某个服务不可用了情况</li><li>有了服务实例之后就是根据请求以及某种负载均衡规则选择服务实例</li><li>然后就是将执行请求，响应处理</li><li>如果调用失败是不是要重试</li></ul></li></ul><h4 id="主要负载均衡策略"><a href="#主要负载均衡策略" class="headerlink" title="主要负载均衡策略"></a>主要负载均衡策略</h4><ul><li><p>1、简单轮询负载均衡<code>（RoundRobin）</code></p><ul><li>以轮询的方式依次将请求调度不同的服务器，即每次调度执行<code>i = (i + 1) mod n</code>，并选出第i台服务器。</li></ul></li><li><p>2、随机负载均衡 <code>（Random）</code></p><ul><li>随机选择状态为<code>UP</code>的<code>Server</code></li></ul></li><li><p>3、加权响应时间负载均衡 <code>（WeightedResponseTime）</code></p><ul><li>根据响应时间分配一个<code>weight</code>，响应时间越长，<code>weight</code>越小，被选中的可能性越低。</li></ul></li><li><p>4、区域感知轮询负载均衡<code>（ZoneAvoidanceRule）</code></p><ul><li>复合判断<code>server</code>所在区域的性能和<code>server</code>的可用性选择<code>server</code></li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>负载均衡器的目的主要是根据负责均衡策略选取合适的服务端实例，那么负载均衡器就需要维护一个可用的服务端清单，然后通过心跳机制来删除故障的服务端节点以保证清单中都是可以正常访问的服务端节点，此时当客户端的请求到达负载均衡服务器时，负载均衡服务器按照某种配置好的规则从可用服务端清单中选出一台服务器去处理客户端的请求。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/zhxdick/article/details/79449146" target="_blank" rel="noopener">https://blog.csdn.net/zhxdick/article/details/79449146</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;什么是负载均衡&quot;&gt;&lt;a href=&quot;#什么是负载均衡&quot; class=&quot;headerlink&quot; title=&quot;什么是负载均衡&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Consul)集成源码分析之执行流程二</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Consul)%E9%9B%86%E6%88%90%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E4%BA%8C/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Consul)集成源码分析之执行流程二/</id>
    <published>2019-08-06T16:02:03.000Z</published>
    <updated>2019-08-31T02:31:25.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>上一章节通过日志信息定位<code>ConsulServiceRegistry</code>这个类会进行注册操作，通过断点调试发现是由<code>ConsulAutoServiceRegistration</code>这个类来指挥的，这一章节来介绍这个类</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="ConsulAutoServiceRegistration的配置"><a href="#ConsulAutoServiceRegistration的配置" class="headerlink" title="ConsulAutoServiceRegistration的配置"></a>ConsulAutoServiceRegistration的配置</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/consul0d-dsd.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>这个类是哪里配置呢，查看<code>spring.factories</code>里面配置了一个类<code>ConsulAutoServiceRegistrationAutoConfiguration</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.cloud.consul.discovery.RibbonConsulAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.discovery.configclient.ConsulConfigServerAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.serviceregistry.ConsulAutoServiceRegistrationAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.serviceregistry.ConsulServiceRegistryAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.discovery.ConsulDiscoveryClientConfiguration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org.springframework.cloud.bootstrap.BootstrapConfiguration=\</span><br><span class="line">org.springframework.cloud.consul.discovery.configclient.ConsulDiscoveryClientConfigServiceBootstrapConfiguration</span><br></pre></td></tr></table></figure><ul><li>查看<code>ConsulAutoServiceRegistrationAutoConfiguration.java</code>类可以发现里面配置了<code>@Bean</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(AutoServiceRegistrationProperties.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(type = <span class="string">"org.springframework.cloud.consul.discovery.ConsulLifecycle"</span>)</span><br><span class="line"><span class="meta">@ConditionalOnConsulEnabled</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.cloud.service-registry.auto-registration.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123;AutoServiceRegistrationConfiguration.class, ConsulServiceRegistryAutoConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulAutoServiceRegistrationAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AutoServiceRegistrationProperties autoServiceRegistrationProperties;</span><br><span class="line">    <span class="comment">// 注册ConsulAutoServiceRegistration</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsulAutoServiceRegistration <span class="title">consulAutoServiceRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ConsulServiceRegistry registry,</span></span></span><br><span class="line"><span class="function"><span class="params">            AutoServiceRegistrationProperties autoServiceRegistrationProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">            ConsulDiscoveryProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">            ConsulAutoRegistration consulRegistration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConsulAutoServiceRegistration(registry,</span><br><span class="line">                autoServiceRegistrationProperties, properties, consulRegistration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsulAutoRegistration <span class="title">consulRegistration</span><span class="params">(AutoServiceRegistrationProperties autoServiceRegistrationProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">            ConsulDiscoveryProperties properties, ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">            ObjectProvider&lt;List&lt;ConsulRegistrationCustomizer&gt;&gt; registrationCustomizers, HeartbeatProperties heartbeatProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ConsulAutoRegistration.registration(autoServiceRegistrationProperties, properties,</span><br><span class="line">            applicationContext, registrationCustomizers.getIfAvailable(), heartbeatProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(ServletContext.class)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulServletConfiguration</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ConsulRegistrationCustomizer <span class="title">servletConsulCustomizer</span><span class="params">(ObjectProvider&lt;ServletContext&gt; servletContext)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConsulServletRegistrationCustomizer(servletContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConsulAutoServiceRegistration-类解析"><a href="#ConsulAutoServiceRegistration-类解析" class="headerlink" title="ConsulAutoServiceRegistration 类解析"></a>ConsulAutoServiceRegistration 类解析</h4><h5 id="ConsulAutoServiceRegistration-继承关系图"><a href="#ConsulAutoServiceRegistration-继承关系图" class="headerlink" title="ConsulAutoServiceRegistration 继承关系图"></a>ConsulAutoServiceRegistration 继承关系图</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ConsulAutoServiceRegistration.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>由上图可以看到此类实现了<code>Lifecycle</code>接口，也就是说<code>Spring</code>容器启动时或者关闭时会找出所有实现了<code>LifeCycle</code>及其子类接口的类，并一一调用其接口方法</p><ul><li><p>下面是<code>Lifecycle</code>接口， <code>start()</code>方法对应容器启动时执行的方法，<code>stop()</code>方法对应容器关闭时执行的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>所以可以猜出<code>ConsulAutoServiceRegistration</code>就是借助了<code>Lifecycle</code>接口来达到启动应用时会自动注册到<code>Consul</code>，应用关闭时自动注销在<code>Consul</code>的注册信息</p></li><li>回顾下上一章节的内容，可以看到是调用了<code>start()</code>方法<br><img src="/images/server/spring/spring-cloud/consul-register.png" alt=""></li></ul></li><li><p>下面来看看<code>ConsulAutoServiceRegistration</code>是怎么实现这两个方法的，<code>ConsulAutoServiceRegistration</code>对这两个方法的实现在<code>AbstractDiscoveryLifecycle</code>类上</p></li></ul><h5 id="start-注册consul应用信息"><a href="#start-注册consul应用信息" class="headerlink" title="start() 注册consul应用信息"></a>start() 注册consul应用信息</h5><ul><li><code>org.springframework.cloud.client.discovery.AbstractDiscoveryLifecycle#start()</code> 下面可以看到是调用了<code>register()</code>方法，这个方法是抽象方法，由子类来实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Discovery Lifecycle disabled. Not starting"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// only set the port if the nonSecurePort is 0 and this.port != 0</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.port.get() != <span class="number">0</span> &amp;&amp; getConfiguredPort() == <span class="number">0</span>) &#123;</span><br><span class="line">        setConfiguredPort(<span class="keyword">this</span>.port.get());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// only initialize if nonSecurePort is greater than 0 and it isn't already running</span></span><br><span class="line">    <span class="comment">// because of containerPortInitializer below</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.running.get() &amp;&amp; getConfiguredPort() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        register();</span><br><span class="line">        <span class="keyword">if</span> (shouldRegisterManagement()) &#123;</span><br><span class="line">            registerManagement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.context.publishEvent(<span class="keyword">new</span> InstanceRegisteredEvent&lt;&gt;(<span class="keyword">this</span>,</span><br><span class="line">                getConfiguration()));</span><br><span class="line">        <span class="keyword">this</span>.running.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入此方法 <code>org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration#register()</code>，可以看到调用了<code>ServiceRegistry&lt;R&gt; serviceRegistry</code>对象的注册方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the local service with the &#123;<span class="doctag">@link</span> ServiceRegistry&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.serviceRegistry.register(getRegistration());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>org.springframework.cloud.consul.serviceregistry.ConsulServiceRegistry#register()</code>方法，可以看到有两步操作<ul><li>添加<code>ttlScheduler</code>定时任务</li><li><code>agentServiceRegister</code>注册服务</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(ConsulRegistration reg)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Registering service with consul: "</span> + reg.getService());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        client.agentServiceRegister(reg.getService(), properties.getAclToken());</span><br><span class="line">        <span class="keyword">if</span> (heartbeatProperties.isEnabled() &amp;&amp; ttlScheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ttlScheduler.add(reg.getInstanceId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ConsulException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.properties.isFailFast()) &#123;</span><br><span class="line">            log.error(<span class="string">"Error registering service with consul: "</span> + reg.getService(), e);</span><br><span class="line">            ReflectionUtils.rethrowRuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.warn(<span class="string">"Failfast is false. Error registering service with consul: "</span> + reg.getService(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继续跳入，直到进入<code>com.ecwid.consul.v1.agent.AgentConsulClient#agentServiceRegister()</code>，这个方法是<code>consul</code>的包里面的，不是<code>Spring</code>的，可以发现底层就是发送了一个<code>RESTFUL API</code>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response&lt;Void&gt; <span class="title">agentServiceRegister</span><span class="params">(NewService newService, String token)</span> </span>&#123;</span><br><span class="line">    UrlParameters tokenParam = token != <span class="keyword">null</span> ? <span class="keyword">new</span> SingleUrlParameters(<span class="string">"token"</span>, token) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    String json = GsonFactory.getGson().toJson(newService);</span><br><span class="line">    RawResponse rawResponse = rawClient.makePutRequest(<span class="string">"/v1/agent/service/register"</span>, json, tokenParam);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rawResponse.getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response&lt;Void&gt;(<span class="keyword">null</span>, rawResponse);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OperationException(rawResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>查看<code>com.ecwid.consul.v1.agent.AgentConsulClient#agentServiceRegister()</code>方法所在包</p><ul><li><p>可以看到是依赖的下面这个包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ecwid.consul<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consul-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>查看其源码可以发现这个包封装了与<code>consul</code>通信的各种接口，也就是说使用该包可以很方便的注册服务，注销服务<br><img src="/images/server/spring/spring-cloud/consul-api.jpg" alt=""></p></li><li><p>里面有个<code>ConsulClient</code>类是个一站式的<code>consul-api</code>客户端，下面可以看到是继承各种<code>Client</code>，每种<code>Client</code>提供不同类型的接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Full consul-api client with all supported methods.</span></span><br><span class="line"><span class="comment"> * If you like to use more specific clients, please look at *Client classes (AclClient, AgentClient etc.)</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Implementation notes:</span></span><br><span class="line"><span class="comment"> * Do not afraid of the class size :)</span></span><br><span class="line"><span class="comment"> * There aren't any 'smart' or specific methods - all methods in this class are just delegates and auto-generated by IntelliJ IDEA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Vasily Vasilkov (vgv@ecwid.com)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulClient</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">AclClient</span>,</span></span><br><span class="line"><span class="class">        <span class="title">AgentClient</span>,</span></span><br><span class="line"><span class="class">        <span class="title">CatalogClient</span>,</span></span><br><span class="line"><span class="class">        <span class="title">CoordinateClient</span>,</span></span><br><span class="line"><span class="class">        <span class="title">EventClient</span>,</span></span><br><span class="line"><span class="class">        <span class="title">HealthClient</span>,</span></span><br><span class="line"><span class="class">        <span class="title">KeyValueClient</span>,</span></span><br><span class="line"><span class="class">        <span class="title">QueryClient</span>,</span></span><br><span class="line"><span class="class">        <span class="title">SessionClient</span>,</span></span><br><span class="line"><span class="class">        <span class="title">StatusClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AclClient aclClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AgentClient agentClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CatalogClient catalogClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CoordinateClient coordinateClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventClient eventClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HealthClient healthClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KeyValueClient keyValueClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> QueryClient queryClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SessionClient sessionClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StatusClient statusClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsulClient</span><span class="params">(ConsulRawClient rawClient)</span> </span>&#123;</span><br><span class="line">        aclClient = <span class="keyword">new</span> AclConsulClient(rawClient);</span><br><span class="line">        agentClient = <span class="keyword">new</span> AgentConsulClient(rawClient);</span><br><span class="line">        catalogClient = <span class="keyword">new</span> CatalogConsulClient(rawClient);</span><br><span class="line">        coordinateClient = <span class="keyword">new</span> CoordinateConsulClient(rawClient);</span><br><span class="line">        eventClient = <span class="keyword">new</span> EventConsulClient(rawClient);</span><br><span class="line">        healthClient = <span class="keyword">new</span> HealthConsulClient(rawClient);</span><br><span class="line">        keyValueClient = <span class="keyword">new</span> KeyValueConsulClient(rawClient);</span><br><span class="line">        queryClient = <span class="keyword">new</span> QueryConsulClient(rawClient);</span><br><span class="line">        sessionClient = <span class="keyword">new</span> SessionConsulClient(rawClient);</span><br><span class="line">        statusClient = <span class="keyword">new</span> StatusConsulClient(rawClient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Consul client will connect to local consul agent on</span></span><br><span class="line"><span class="comment">     * 'http://localhost:8500'</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsulClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> ConsulRawClient());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>查看方法<br><img src="/images/server/spring/spring-cloud/consul/consul-client.jpg" alt=""></p></li></ul></li></ul><h5 id="stop-注销consul应用信息"><a href="#stop-注销consul应用信息" class="headerlink" title="stop() 注销consul应用信息"></a>stop() 注销consul应用信息</h5><ul><li><code>org.springframework.cloud.client.discovery.AbstractDiscoveryLifecycle#stop()</code>下面可以看到是调用了<code>deregister()</code>方法，这个方法是抽象方法，由子类来实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.running.compareAndSet(<span class="keyword">true</span>, <span class="keyword">false</span>) &amp;&amp; isEnabled()) &#123;</span><br><span class="line">        deregister();</span><br><span class="line">        <span class="keyword">if</span> (shouldRegisterManagement()) &#123;</span><br><span class="line">            deregisterManagement();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入此方法 <code>org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration#deregister()</code>，可以看到调用了<code>ServiceRegistry&lt;R&gt; serviceRegistry</code>对象的注册方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * De-register the local service with the &#123;<span class="doctag">@link</span> ServiceRegistry&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deregister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.serviceRegistry.deregister(getRegistration());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>进入<code>org.springframework.cloud.consul.serviceregistry.ConsulServiceRegistry#deregister()</code>方法，可以看到有两步操作</p><ul><li>去除<code>ttlScheduler</code>定时</li><li><code>agentServiceDeregister</code>注销服务<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deregister</span><span class="params">(ConsulRegistration reg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ttlScheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ttlScheduler.remove(reg.getInstanceId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">        log.info(<span class="string">"Deregistering service with consul: "</span> + reg.getInstanceId());</span><br><span class="line">    &#125;</span><br><span class="line">    client.agentServiceDeregister(reg.getInstanceId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>继续跳入，直到进入<code>com.ecwid.consul.v1.agent.AgentConsulClient#agentServiceDeregister()</code>方法，可以发现底层就是发送了一个<code>RESTFUL API</code>请求</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response&lt;Void&gt; <span class="title">agentServiceDeregister</span><span class="params">(String serviceId, String token)</span> </span>&#123;</span><br><span class="line">    UrlParameters tokenParam = token != <span class="keyword">null</span> ? <span class="keyword">new</span> SingleUrlParameters(<span class="string">"token"</span>, token) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    RawResponse rawResponse = rawClient.makePutRequest(<span class="string">"/v1/agent/service/deregister/"</span> + serviceId, <span class="string">""</span>, tokenParam);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rawResponse.getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response&lt;Void&gt;(<span class="keyword">null</span>, rawResponse);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OperationException(rawResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>ConsulAutoServiceRegistration</code>就是借助了<code>Lifecycle</code>接口来实现启动应用时会自动注册到<code>Consul</code>，应用关闭时自动注销在<code>Consul</code>的注册信息功能</li><li>如果我们有需求在应用启动时或者关闭时做一些额外的事情，那么借助<code>Lifecycle</code>接口就可以达到我们的目的，不过需要注意的在使用<code>Lifecycle</code>接口方法时，如果<code>Spring</code>容器上下文没有显式的调用容器的<code>start</code>和<code>destory(或者close,stop)</code>等方法时是不会触发接口方法的，我们可以借助<code>SmartLifecycle</code>接口， 实现这个接口类会在所在的上下文在调用<code>refresh</code>时，希望能够自己自动进行回调</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;上一章节通过日志信息定位&lt;code&gt;ConsulServiceRegistry&lt;/code&gt;这个类会进行注册操作，通过断点调试发
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Consul)集成源码分析之执行流程一</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Consul)%E9%9B%86%E6%88%90%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E4%B8%80/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Consul)集成源码分析之执行流程一/</id>
    <published>2019-08-06T16:02:02.000Z</published>
    <updated>2019-08-31T02:31:25.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p>上一章节我们知道了<code>SpringCloud</code>集成<code>Consul</code>过程就是注册<code>bean</code>的过程，那么有了这些<code>bean</code>，那它们是怎样发挥作用的呢，如果要实现微服务之间的通信就是要将本地服务信息注册得到注册中心上，那<code>SpringCloudConsul</code>是怎么实现的，这个是我们本章要探究的。</p></li><li><p>因为<code>SpringCloudConsul</code>自动配置的类很多，一个一个去找十分麻烦，所以我们这里先关注它是怎么将本地服务注册得到注册中心上，通过之前章节可以知道只要启动应用，应用就会自动将自己注册到注册中心上，因为<code>Spring</code>有很多钩子接口及一套生命周期，所以我们看看它是怎么实现的，我们可以将<code>log</code>日志改为<code>debug</code>，通过日志来找出那些关键信息</p></li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>通过启动日志查看关键字<code>registe</code>我们可以定位到这行日志，这些信息就是我们在<code>SpringCloud(二)注册中心Consul</code>章节中介绍注册服务的信息是一一对应的，所以我们可以知道<code>SpringCloudConsul</code>注册服务也是通过<code>RESTful HTTP API</code>来注册服务的 </li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o.s.c.c.s.ConsulServiceRegistry          : Registering service with consul: NewService&#123;id='cloudUser-dev-2010', name='cloudUser', tags=[], address='10.135.95.34', port=2010, enableTagOverride=null, check=Check&#123;script='null', interval='10s', ttl='null', http='http://10.135.95.34:2010/health', tcp='null', timeout='null', deregisterCriticalServiceAfter='null', tlsSkipVerify=null, status='null'&#125;, checks=null&#125;</span><br></pre></td></tr></table></figure><ul><li>日志拆解</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">id=&apos;cloudUser-dev-2010&apos;,   // 服务id</span><br><span class="line">name=&apos;cloudUser&apos;,          // 服务名</span><br><span class="line">tags=[],                   // 服务的tag，自定义，可以根据这个tag来区分同一个服务名的服务</span><br><span class="line">address=&apos;10.135.95.34&apos;,    // 服务注册到consul的IP，服务发现，发现的就是这个IP</span><br><span class="line">port=2010,                 // 服务注册consul的PORT，发现的就是这个PORT</span><br><span class="line">enableTagOverride=null, </span><br><span class="line">check = Check&#123;             // 健康检查部分</span><br><span class="line">    script=&apos;null&apos;,</span><br><span class="line">           interval=&apos;10s&apos;,                   // 健康检查间隔时间，每隔10s，调用一次上面的URL</span><br><span class="line">    ttl=&apos;null&apos;, </span><br><span class="line">    http=&apos;http://10.135.95.34:2010/health&apos;,  // 指定健康检查的URL，调用后只要返回20X，consul都认为是健康的</span><br><span class="line">    tcp=&apos;null&apos;, </span><br><span class="line">    timeout=&apos;null&apos;, </span><br><span class="line">    deregisterCriticalServiceAfter=&apos;null&apos;, </span><br><span class="line">    tlsSkipVerify=null, </span><br><span class="line">    status=&apos;null&apos;</span><br><span class="line">&#125;, </span><br><span class="line">checks=null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>看日志定位到<code>org.springframework.cloud.consul.serviceregistry.ConsulServiceRegistry</code>，这个类是在<code>spring-cloud-consul-discovery</code>包下的，上一章节有涉及到</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/consul0d-dsd.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>通过类名字及方法名我们可以知道这个类是<code>Consul</code>服务的注册及下架的处理类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulServiceRegistry</span> <span class="keyword">implements</span> <span class="title">ServiceRegistry</span>&lt;<span class="title">ConsulRegistration</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Log log = LogFactory.getLog(ConsulServiceRegistry.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsulClient client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsulDiscoveryProperties properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TtlScheduler ttlScheduler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HeartbeatProperties heartbeatProperties;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConsulServiceRegistry</span><span class="params">(ConsulClient client, ConsulDiscoveryProperties properties, TtlScheduler ttlScheduler, HeartbeatProperties heartbeatProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.client = client;</span><br><span class="line"><span class="keyword">this</span>.properties = properties;</span><br><span class="line"><span class="keyword">this</span>.ttlScheduler = ttlScheduler;</span><br><span class="line"><span class="keyword">this</span>.heartbeatProperties = heartbeatProperties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(ConsulRegistration reg)</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"Registering service with consul: "</span> + reg.getService());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client.agentServiceRegister(reg.getService(), properties.getAclToken());</span><br><span class="line"><span class="keyword">if</span> (heartbeatProperties.isEnabled() &amp;&amp; ttlScheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">ttlScheduler.add(reg.getInstanceId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ConsulException e) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.properties.isFailFast()) &#123;</span><br><span class="line">log.error(<span class="string">"Error registering service with consul: "</span> + reg.getService(), e);</span><br><span class="line">ReflectionUtils.rethrowRuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">log.warn(<span class="string">"Failfast is false. Error registering service with consul: "</span> + reg.getService(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deregister</span><span class="params">(ConsulRegistration reg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ttlScheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">ttlScheduler.remove(reg.getInstanceId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">log.info(<span class="string">"Deregistering service with consul: "</span> + reg.getInstanceId());</span><br><span class="line">&#125;</span><br><span class="line">client.agentServiceDeregister(reg.getInstanceId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(ConsulRegistration registration, String status)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (status.equalsIgnoreCase(OUT_OF_SERVICE.getCode())) &#123;</span><br><span class="line">client.agentServiceSetMaintenance(registration.getInstanceId(), <span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (status.equalsIgnoreCase(UP.getCode())) &#123;</span><br><span class="line">client.agentServiceSetMaintenance(registration.getInstanceId(), <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown status: "</span>+status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getStatus</span><span class="params">(ConsulRegistration registration)</span> </span>&#123;</span><br><span class="line">String serviceId = registration.getServiceId();</span><br><span class="line">Response&lt;List&lt;Check&gt;&gt; response = client.getHealthChecksForService(serviceId, QueryParams.DEFAULT);</span><br><span class="line">List&lt;Check&gt; checks = response.getValue();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Check check : checks) &#123;</span><br><span class="line"><span class="keyword">if</span> (check.getServiceId().equals(registration.getInstanceId())) &#123;</span><br><span class="line"><span class="keyword">if</span> (check.getName().equalsIgnoreCase(<span class="string">"Service Maintenance Mode"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> OUT_OF_SERVICE.getCode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> UP.getCode();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面来看<code>ConsulServiceRegistry</code>是如何发挥作用的</li></ul><h4 id="ConsulServiceRegistry-bean注册初始化"><a href="#ConsulServiceRegistry-bean注册初始化" class="headerlink" title="ConsulServiceRegistry bean注册初始化"></a>ConsulServiceRegistry bean注册初始化</h4><ul><li>点击<code>ConsulServiceRegistry</code>的引用可以进入到<code>org.springframework.cloud.consul.serviceregistry.ConsulServiceRegistryAutoConfiguration</code>类，这个类是见名是自动配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnConsulEnabled</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.cloud.service-registry.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(ServiceRegistryAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulServiceRegistryAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> TtlScheduler ttlScheduler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConsulServiceRegistry <span class="title">consulServiceRegistry</span><span class="params">(ConsulClient consulClient, ConsulDiscoveryProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">   HeartbeatProperties heartbeatProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ConsulServiceRegistry(consulClient, properties, ttlScheduler, heartbeatProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(<span class="string">"spring.cloud.consul.discovery.heartbeat.enabled"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> TtlScheduler <span class="title">ttlScheduler</span><span class="params">(ConsulClient consulClient, HeartbeatProperties heartbeatProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TtlScheduler(heartbeatProperties, consulClient);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HeartbeatProperties <span class="title">heartbeatProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HeartbeatProperties();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConsulDiscoveryProperties <span class="title">consulDiscoveryProperties</span><span class="params">(InetUtils inetUtils)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ConsulDiscoveryProperties(inetUtils);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>回顾上一章节，我们知道<code>spring.factories</code>里面配置了这个类，所以这个类会被<code>Spring</code>自动注册</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.cloud.consul.discovery.RibbonConsulAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.discovery.configclient.ConsulConfigServerAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.serviceregistry.ConsulAutoServiceRegistrationAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.serviceregistry.ConsulServiceRegistryAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.discovery.ConsulDiscoveryClientConfiguration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org.springframework.cloud.bootstrap.BootstrapConfiguration=\</span><br><span class="line">org.springframework.cloud.consul.discovery.configclient.ConsulDiscoveryClientConfigServiceBootstrapConfiguration</span><br></pre></td></tr></table></figure><ul><li><p>观察<code>ConsulServiceRegistryAutoConfiguration</code>类</p><ul><li><p>关注<code>@ConditionalOnProperty(value = &quot;spring.cloud.service-registry.enabled&quot;, matchIfMissing = true)</code>这个条件注解，这里是说需要配置了该属性<code>ConsulServiceRegistryAutoConfiguration</code>类才生效，这个属性名是不是很熟悉，没错就是上一章节<code>@EnableDiscoveryClient</code>注解自动注册的<code>AutoServiceRegistrationConfiguration</code>类相对应的，<code>AutoServiceRegistrationConfiguration</code>类就是配置了这个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(AutoServiceRegistrationProperties.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.cloud.service-registry.auto-registration.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoServiceRegistrationConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.cloud.service-registry.auto-registration"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoServiceRegistrationProperties</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在这里可以得出结论<code>@EnableDiscoveryClient</code>是开启服务自动注册类的开关，因为<code>@SpringCloudApplication</code>注解默认自带这个注解，所以在<code>SpringCloud</code>中只要添加了注册中心的依赖，就会默认开启注册中心的功能</p></li><li><code>TtlScheduler</code>这个<code>Bean</code>，这个是个定时器</li><li><p><code>HeartbeatProperties</code> 属性配置类，对应的属性前缀：<code>spring.cloud.consul.discovery.heartbeat</code>，这个是心跳检测的属性配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.cloud.consul.discovery.heartbeat"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@CommonsLog</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartbeatProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> change enabled to default to true when I stop seeing messages like</span></span><br><span class="line">    <span class="comment">// [WARN] agent: Check 'service:testConsulApp:xtest:8080' missed TTL, is now critical</span></span><br><span class="line">    <span class="keyword">boolean</span> enabled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ttlValue = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String ttlUnit = <span class="string">"s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DecimalMin</span>(<span class="string">"0.1"</span>)</span><br><span class="line">    <span class="meta">@DecimalMax</span>(<span class="string">"0.9"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> intervalRatio = <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Period heartbeatInterval;</span><br></pre></td></tr></table></figure></li><li><p><code>ConsulDiscoveryProperties</code>属性配置类，对应的属性前缀：<code>spring.cloud.consul.discovery</code>，这个是<code>Consul</code>的主要配置类，我们平常最常使用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.cloud.consul.discovery"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulDiscoveryProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String MANAGEMENT = <span class="string">"management"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span>(AccessLevel.PRIVATE)</span><br><span class="line">    <span class="meta">@Setter</span>(AccessLevel.PRIVATE)</span><br><span class="line">    <span class="keyword">private</span> InetUtils.HostInfo hostInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;consul.token:$&#123;CONSUL_TOKEN:$&#123;spring.cloud.consul.token:$&#123;SPRING_CLOUD_CONSUL_TOKEN:&#125;&#125;&#125;&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String aclToken;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Tags to use when registering service */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tags = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Is service discovery enabled? */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Tags to use when registering management service */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; managementTags = Arrays.asList(MANAGEMENT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Alternate server path to invoke for health checking */</span></span><br><span class="line">    <span class="keyword">private</span> String healthCheckPath = <span class="string">"/health"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Custom health check url to override default */</span></span><br><span class="line">    <span class="keyword">private</span> String healthCheckUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** How often to perform the health check (e.g. 10s), defaults to 10s. */</span></span><br><span class="line">    <span class="keyword">private</span> String healthCheckInterval = <span class="string">"10s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Timeout for health check (e.g. 10s). */</span></span><br><span class="line">    <span class="keyword">private</span> String healthCheckTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Timeout to deregister services critical for longer than timeout (e.g. 30m).</span></span><br><span class="line"><span class="comment">     * Requires consul version 7.x or higher.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String healthCheckCriticalTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** IP address to use when accessing service (must also set preferIpAddress to use) */</span></span><br><span class="line">    <span class="keyword">private</span> String ipAddress;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Hostname to use when accessing server */</span></span><br><span class="line">    <span class="keyword">private</span> String hostname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Port to register the service under (defaults to listening port) */</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Port to register the management service under (defaults to management port) */</span></span><br><span class="line">    <span class="keyword">private</span> Integer managementPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lifecycle lifecycle = <span class="keyword">new</span> Lifecycle();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Use ip address rather than hostname during registration */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> preferIpAddress = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Source of how we will determine the address to use */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> preferAgentAddress = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> catalogServicesWatchDelay = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> catalogServicesWatchTimeout = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Service name */</span></span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Unique service instance id */</span></span><br><span class="line">    <span class="keyword">private</span> String instanceId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Service instance zone */</span></span><br><span class="line">    <span class="keyword">private</span> String instanceZone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Service instance group*/</span></span><br><span class="line">    <span class="keyword">private</span> String instanceGroup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service instance zone comes from metadata.</span></span><br><span class="line"><span class="comment">     * This allows changing the metadata tag name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String defaultZoneMetadataName = <span class="string">"zone"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Whether to register an http or https service */</span></span><br><span class="line">    <span class="keyword">private</span> String scheme = <span class="string">"http"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Suffix to use when registering management service */</span></span><br><span class="line">    <span class="keyword">private</span> String managementSuffix = MANAGEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map of serviceId's -&gt; tag to query for in server list.</span></span><br><span class="line"><span class="comment">     * This allows filtering services by a single tag.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; serverListQueryTags = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map of serviceId's -&gt; datacenter to query for in server list.</span></span><br><span class="line"><span class="comment">     * This allows looking up services in another datacenters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; datacenters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Tag to query for in service list if one is not listed in serverListQueryTags. */</span></span><br><span class="line">    <span class="keyword">private</span> String defaultQueryTag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add the 'passing` parameter to /v1/health/service/serviceName.</span></span><br><span class="line"><span class="comment">     * This pushes health check passing to the server.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> queryPassing = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Register as a service in consul. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> register = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Disable automatic de-registration of service in consul. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> deregister = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Register health check in consul. Useful during development of a service. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> registerHealthCheck = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Throw exceptions during service registration if true, otherwise, log</span></span><br><span class="line"><span class="comment">     * warnings (defaults to true).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> failFast = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Skips certificate verification during service checks if true, otherwise</span></span><br><span class="line"><span class="comment">     * runs certificate verification.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean healthCheckTlsSkipVerify;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ConsulDiscoveryProperties</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsulDiscoveryProperties</span><span class="params">(InetUtils inetUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hostInfo = inetUtils.findFirstNonLoopbackHostInfo();</span><br><span class="line">        <span class="keyword">this</span>.ipAddress = <span class="keyword">this</span>.hostInfo.getIpAddress();</span><br><span class="line">        <span class="keyword">this</span>.hostname = <span class="keyword">this</span>.hostInfo.getHostname();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceId The service who's filtering tag is being looked up</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The tag the given service id should be filtered by, or null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQueryTagForService</span><span class="params">(String serviceId)</span></span>&#123;</span><br><span class="line">        String tag = serverListQueryTags.get(serviceId);</span><br><span class="line">        <span class="keyword">return</span> tag != <span class="keyword">null</span> ? tag : defaultQueryTag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHostname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.preferIpAddress ? <span class="keyword">this</span>.ipAddress : <span class="keyword">this</span>.hostname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHostname</span><span class="params">(String hostname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hostname = hostname;</span><br><span class="line">        <span class="keyword">this</span>.hostInfo.override = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIpAddress</span><span class="params">(String ipAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ipAddress = ipAddress;</span><br><span class="line">        <span class="keyword">this</span>.hostInfo.override = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> enabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="如何注册服务的"><a href="#如何注册服务的" class="headerlink" title="如何注册服务的"></a>如何注册服务的</h4><ul><li><code>Bean</code>注册完成了就要发挥作用了，我们在日志处<code>log.info(&quot;Registering service with consul: &quot; + reg.getService());</code>打断点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(ConsulRegistration reg)</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"Registering service with consul: "</span> + reg.getService());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client.agentServiceRegister(reg.getService(), properties.getAclToken());</span><br><span class="line"><span class="keyword">if</span> (heartbeatProperties.isEnabled() &amp;&amp; ttlScheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">ttlScheduler.add(reg.getInstanceId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ConsulException e) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.properties.isFailFast()) &#123;</span><br><span class="line">log.error(<span class="string">"Error registering service with consul: "</span> + reg.getService(), e);</span><br><span class="line">ReflectionUtils.rethrowRuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">log.warn(<span class="string">"Failfast is false. Error registering service with consul: "</span> + reg.getService(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看方法执行链</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/consul-register.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>下面来看看具体执行流程，可以看到还是老样子的<code>refresh()</code>方法</p><ul><li><p>进入<code>org.springframework.context.support.AbstractApplicationContext#refresh()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * refresh()统一入口 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line"><span class="comment">// 准备刷新的上下文环境，例如对系统属性或者环境变量进行准备及验证</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line"><span class="comment">// 初始化BeanFactory，并进行XML文件读取，这一步之后ClassPathXmlApplicationContext实际上就已经包含了BeanFactory所提供的功能</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line"><span class="comment">// 进入prepareBeanFactory前，Spring已经完成了对配置的解析，而ApplicationContext在功能上的扩展也由此展开</span></span><br><span class="line"><span class="comment">// 对BeanFactory进行各种功能组件填充 @Qualifier @Autowired这两注解功能组件就是在这步骤中增加的支持</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line"><span class="comment">// 子类覆盖方法做额外的处理</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line"><span class="comment">// 调用工厂后处理器 根据反射机制从BeanDefinitionRegistry中找出所有实现了BeanFactoryPostProcessor接口的bean，</span></span><br><span class="line"><span class="comment">// 并调用其postProcessBeanFactory接口方法</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line"><span class="comment">// 注册Bean后处理器 根据反射机制从BeanDefinitionRegistry中找出所有实现了BeanPostProcessor接口的bean，</span></span><br><span class="line"><span class="comment">// 并将它们注册到容器Bean后处理器的注册表中，这里只是注册，真正的调用在getBean时候</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line"><span class="comment">// 初始化消息源 初始化容器的国际化消息资源</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line"><span class="comment">// 初始化应用上下文事件广播器</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line"><span class="comment">// 初始化其他特殊的bean，由具体子类实现，这是个钩子方法</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line"><span class="comment">// 注册事件监听器</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line"><span class="comment">// 重点：初始化所有单实例的Bean，使用懒加载模式的bean除外，初始化Bean后将它们放到Spring容器的缓冲池中</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line"><span class="comment">// 完成刷新并发布容器刷新事件</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以看到注册中心的注册动作是放到最后一步<code>finishRefresh()</code>来执行的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.finishRefresh();</span><br><span class="line">    EmbeddedServletContainer localContainer = <span class="keyword">this</span>.startEmbeddedServletContainer();</span><br><span class="line">    <span class="keyword">if</span> (localContainer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        <span class="keyword">this</span>.publishEvent(<span class="keyword">new</span> EmbeddedServletContainerInitializedEvent(<span class="keyword">this</span>, localContainer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们跳入<code>org.springframework.context.event.SimpleApplicationEventMulticaster#multicastEvent()</code>方法可以看到这里出现了<code>ConsulAutoServiceRegistration</code>这个类<br><img src="/images/server/spring/spring-cloud/consul-auto-service.png" alt=""></p></li><li>查看<code>ConsulAutoServiceRegistration</code>这个类，我们可以看到这个类实现了<code>Spring</code>的很多接口，比如继承了<code>EventListener</code>，这里涉及到了事件监听，还有继承了<code>Lifecycle</code>，可以猜测<code>Spirng</code>容器销毁时用这个接口来向<code>consul</code>注销服务，因为这个类比较复杂，所以放到下一章节详细介绍<br><img src="/images/server/spring/spring-cloud/ConsulAutoServiceRegistration.png" alt=""></li><li><p>然后跳到<code>org.springframework.cloud.consul.serviceregistry.ConsulServiceRegistry#register)</code>方法，这个方法打印了我们上面的日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(ConsulRegistration reg)</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"Registering service with consul: "</span> + reg.getService());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">client.agentServiceRegister(reg.getService(), properties.getAclToken());</span><br><span class="line"><span class="keyword">if</span> (heartbeatProperties.isEnabled() &amp;&amp; ttlScheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">ttlScheduler.add(reg.getInstanceId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ConsulException e) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.properties.isFailFast()) &#123;</span><br><span class="line">log.error(<span class="string">"Error registering service with consul: "</span> + reg.getService(), e);</span><br><span class="line">ReflectionUtils.rethrowRuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">log.warn(<span class="string">"Failfast is false. Error registering service with consul: "</span> + reg.getService(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面只是些执行流程，下一章节将详细介绍<code>ConsulAutoServiceRegistration</code>这个类</p></li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>由于各种自动配置类的作用，<code>SpringCloudConsul</code>会在应用启动的时候通过<code>RESTful HTTP API</code> 向<code>consul</code>注册本地服务信息</li><li>通过日志信息定位<code>ConsulServiceRegistry</code>类，这个类会进行注册操作，通过断点调试发现是由<code>ConsulAutoServiceRegistration</code>这个类来指挥的，这个类比较复杂所以放到下一章节介绍</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上一章节我们知道了&lt;code&gt;SpringCloud&lt;/code&gt;集成&lt;code&gt;Consul&lt;/code&gt;过程就是注册&lt;
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Consul)集成源码分析之初始化</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Consul)%E9%9B%86%E6%88%90%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Consul)集成源码分析之初始化/</id>
    <published>2019-08-06T16:02:01.000Z</published>
    <updated>2019-08-31T02:31:25.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>上一章节介绍了<code>Consul</code>的一些基本概念，这一章节来介绍<code>SpringCloud</code>是怎样集成<code>Consul</code>的，按照<code>SpringBoot</code>的一贯作法来说这里会有一个<code>starter pom</code></li></ul><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><ul><li><p>下面来集成<code>Consul</code></p><ul><li><p>第一步：导入<code>starter pom</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二步：直接启动就可以了，使用起来十分方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/14 17:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>从上面可以看到要让<code>SpringCloud</code>集成<code>Consul</code>主要是一个<code>spring-cloud-starter-consul-discovery</code>的<code>Maven</code>依赖</li></ul><h5 id="spring-cloud-starter-consul-discovery"><a href="#spring-cloud-starter-consul-discovery" class="headerlink" title="spring-cloud-starter-consul-discovery"></a>spring-cloud-starter-consul-discovery</h5><ul><li>我们先来看这个<code>starter</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/consul11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>因为是个<code>starter</code>，所以我们关注<code>pom</code>及<code>spring.provides</code>文件</p><ul><li><p><code>pom</code>文件： 可以看到有<code>spring-cloud-starter-consul</code>及<code>spring-cloud-consul-discovery</code>两个依赖，除此之外还依赖了<code>spring-cloud-netflix-core</code>及<code>spring-cloud-starter-ribbon</code>，这两个依赖是为了开启负债均衡吧</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>..<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Cloud Starter Consul Discovery<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud Starter Consul Discovery<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://projects.spring.io/spring-cloud<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main.basedir</span>&gt;</span>$&#123;basedir&#125;/../..<span class="tag">&lt;/<span class="name">main.basedir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Only needed at compile time --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>spring.provides</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">provides: spring-cloud-consul-discovery</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>我们现在关注<code>spring-cloud-starter-consul</code>及<code>spring-cloud-consul-discovery</code>这两个依赖</p><ul><li><p>1、<code>spring-cloud-starter-consul</code>，这里核心依赖是<code>spring-cloud-consul-core</code>及<code>com.ecwid.consul:consul-api</code>，第二包是<code>consul</code>依赖包</p><ul><li>打开<code>pom.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>..<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Cloud Starter Consul<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud Starter Consul<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://projects.spring.io/spring-cloud<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main.basedir</span>&gt;</span>$&#123;basedir&#125;/../..<span class="tag">&lt;/<span class="name">main.basedir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-consul-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ecwid.consul<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consul-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- required by com.ecwid.consul but not as a pom dependency --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>2、<code>spring-cloud-consul-discovery</code></p><ul><li>先看有什么<br><img src="/images/server/spring/spring-cloud/consul-discovery.png" alt=""></li><li><p><code>pom</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Cloud Consul Discovery<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud Consul Discovery<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>..<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-consul-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ecwid.consul<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consul-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- required by com.ecwid.consul but not as a pom dependency --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-archaius<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.ribbon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.ribbon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ribbon-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.ribbon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ribbon-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.ribbon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ribbon-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Only needed at compile time --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>spring.factories</code>，这里我们看到了一些自动配置类，这个是<code>SpringCloud</code>集成<code>Consul</code>的关键</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.cloud.consul.discovery.RibbonConsulAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.discovery.configclient.ConsulConfigServerAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.serviceregistry.ConsulAutoServiceRegistrationAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.serviceregistry.ConsulServiceRegistryAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.consul.discovery.ConsulDiscoveryClientConfiguration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org.springframework.cloud.bootstrap.BootstrapConfiguration=\</span><br><span class="line">org.springframework.cloud.consul.discovery.configclient.ConsulDiscoveryClientConfigServiceBootstrapConfiguration</span><br></pre></td></tr></table></figure></li><li><p>其他代码</p></li></ul></li></ul></li></ul><h5 id="EnableDiscoveryClient注解"><a href="#EnableDiscoveryClient注解" class="headerlink" title="@EnableDiscoveryClient注解"></a>@EnableDiscoveryClient注解</h5><ul><li><code>@SpringCloudApplication</code>注解里面可以看到默认有<code>@EnableDiscoveryClient</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringCloudApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们现在看<code>@EnableDiscoveryClient</code>注解，查看注释可以知道这个注解开启了就会自动将本地服务注册到相应的注册中心</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation to enable a DiscoveryClient implementation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(EnableDiscoveryClientImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableDiscoveryClient &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If true, the ServiceRegistry will automatically register the local server.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">autoRegister</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>@Import(EnableDiscoveryClientImportSelector.class)</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/EnableDiscoveryClientImportSelector.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>可以看到这个类实现了<code>ImportSelector</code>接口，我们在之前的<code>SpringBoot</code>系列的<code>@EnableAutoConfiguration自动配置</code>章节就接触到了这个接口，<code>ImportSelector</code>接口的<code>selectImports</code>返回的数组（类的全类名）都会被注册到<code>Spring</code>容器中，所以可以通过这个方法来自定义注册哪些<code>bean</code></p></li><li><p>从下面代码可以看到<code>String[]</code>是只有一个<code>org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration</code>类，所以可以得到结果<code>@EnableDiscoveryClient</code>注解用于注册<code>AutoServiceRegistrationConfiguration</code>这个<code>Bean</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span>(Ordered.LOWEST_PRECEDENCE - <span class="number">100</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableDiscoveryClientImportSelector</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">SpringFactoryImportSelector</span>&lt;<span class="title">EnableDiscoveryClient</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata metadata) &#123;</span><br><span class="line">String[] imports = <span class="keyword">super</span>.selectImports(metadata);</span><br><span class="line"></span><br><span class="line">AnnotationAttributes attributes = AnnotationAttributes.fromMap(</span><br><span class="line">metadata.getAnnotationAttributes(getAnnotationClass().getName(), <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> autoRegister = attributes.getBoolean(<span class="string">"autoRegister"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (autoRegister) &#123;</span><br><span class="line">List&lt;String&gt; importsList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(imports));</span><br><span class="line">importsList.add(<span class="string">"org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration"</span>);</span><br><span class="line">imports = importsList.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Environment env = getEnvironment();</span><br><span class="line"><span class="keyword">if</span>(ConfigurableEnvironment.class.isInstance(env)) &#123;</span><br><span class="line">ConfigurableEnvironment configEnv = (ConfigurableEnvironment)env;</span><br><span class="line">LinkedHashMap&lt;String, Object&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"spring.cloud.service-registry.auto-registration.enabled"</span>, <span class="keyword">false</span>);</span><br><span class="line">MapPropertySource propertySource = <span class="keyword">new</span> MapPropertySource(</span><br><span class="line"><span class="string">"springCloudDiscoveryClient"</span>, map);</span><br><span class="line">configEnv.getPropertySources().addLast(propertySource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> imports;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RelaxedPropertyResolver(getEnvironment()).getProperty(</span><br><span class="line"><span class="string">"spring.cloud.discovery.enabled"</span>, Boolean.class, Boolean.TRUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">hasDefaultFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面我们来关注<code>org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration</code>，这里是注册了<code>AutoServiceRegistrationProperties</code>配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(AutoServiceRegistrationProperties.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.cloud.service-registry.auto-registration.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoServiceRegistrationConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>spring-cloud-starter-consul-discovery</code>利用了<code>Maven</code>传递依赖的功能定义了集成<code>Consul</code>所需的各种依赖，先备粮草</li><li><code>SpringCloud</code>集成<code>Consul</code>过程就是注册<code>bean</code>的过程，具体实现还是通过<code>spring.factories</code>、<code>EnableAutoConfiguration</code>自动配置来实现的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;上一章节介绍了&lt;code&gt;Consul&lt;/code&gt;的一些基本概念，这一章节来介绍&lt;code&gt;SpringCloud&lt;/code
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Consul)注册中心介绍</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Consul)%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Consul)注册中心介绍/</id>
    <published>2019-08-06T16:02:00.000Z</published>
    <updated>2019-08-31T02:31:25.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Consul-介绍"><a href="#Consul-介绍" class="headerlink" title="Consul 介绍"></a>Consul 介绍</h3><ul><li><p><code>Consul</code> 是 <code>HashiCorp</code> 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其它分布式服务注册与发现的方案，<code>Consul</code> 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、<code>Key/Value</code> 存储、多数据中心方案，不再需要依赖其它工具（比如 <code>ZooKeeper</code> 等）。</p></li><li><p>使用起来也较 为简单。<code>Consul</code> 使用 Go 语言编写，因此具有天然可移植性(支持<code>Linux、windows</code>和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与 Docker 等轻量级容器可无缝配合。</p></li></ul><h4 id="Consul-基础概念"><a href="#Consul-基础概念" class="headerlink" title="Consul 基础概念"></a>Consul 基础概念</h4><ul><li><code>Agent</code>: agent 就是实际运行的 consul 服务，启动时可选以 server 或者 client 模式运行，每个集群至少有 1 个 server，由于使用了 Raft 算法，所以对于每个集群你应该把它的 server 数设置成 3 或 5 个。<ul><li><code>Server</code>: 核心的 consul 服务，存储了所有服务注册的信息，响应查询操作，跨数据中心通信等。</li><li><code>Client</code>: 用来在集群中每个机器上运行，进行服务注册 / 健康检查的进程。</li></ul></li><li><code>Cluster</code>: 集群，由多台共同提供服务的机器组成的集合称为集群，agent 在集群的每个成员上都要运行。</li><li><code>DataCenter</code>: 数据中心。consul 支持跨数据中心组成集群。</li><li><code>Node</code>: 安装了 agent，接入集群的机器称为 node。</li><li><code>Service</code>: 你的服务，即服务注册和服务发现之类操作的对象。通过提供 config 文件或者调用 consul 的 HTTP API 来定义一个服务。</li></ul><h4 id="Consul-角色"><a href="#Consul-角色" class="headerlink" title="Consul 角色"></a>Consul 角色</h4><p><code>client</code>: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。</p><p><code>server</code>: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其它数据中心通讯。 每个数据中心的 server 数量推荐为 3 个或是 5 个。</p><h4 id="Consul-模式"><a href="#Consul-模式" class="headerlink" title="Consul 模式"></a>Consul 模式</h4><ul><li><p><code>CLIENT</code>：表示<code>consul</code>的<code>client</code>模式，就是客户端模式。是<code>consul</code>节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到SERVER，本身是不持久化这些信息。</p></li><li><p><code>SERVER</code>：表示<code>consul</code>的<code>server</code>模式，表明这个<code>consul</code>是个server，这种模式下，功能和CLIENT都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的。</p></li><li><p><code>SERVER-LEADER</code>：中间那个<code>SERVER</code>下面有<code>LEADER</code>的字眼，表明这个<code>SERVER</code>是它们的老大，它和其它<code>SERVER</code>不一样的一点是，它需要负责同步注册的信息给其它的<code>SERVER</code>，同时也要负责各个节点的健康监测。</p></li><li><p>其它信息：其它信息包括它们之间的通信方式，还有一些协议信息，算法。它们是用于保证节点之间的数据同步，实时性要求等等一系列集群问题的解决。这些有兴趣的自己看看官方文档。</p></li></ul><h4 id="Consul-基本使用"><a href="#Consul-基本使用" class="headerlink" title="Consul 基本使用"></a>Consul 基本使用</h4><h5 id="启动consul"><a href="#启动consul" class="headerlink" title="启动consul"></a>启动consul</h5><ul><li>启动节点1（server模式）<ul><li>-node：节点的名称 </li><li>-bind：绑定的一个地址，用于节点之间通信的地址，可以是内外网，必须是可以访问到的地址 </li><li>-server：这个就是表示这个节点是个SERVER </li><li>-bootstrap-expect：这个就是表示期望提供的SERVER节点数目，数目一达到，它就会被激活，然后就是LEADER了</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -server -bind=172.17.0.2  -bootstrap-expect=3 -node=node1</span><br></pre></td></tr></table></figure><ul><li>启动节点2-3（server模式）<ul><li>-join：这个表示启动的时候，要加入到哪个集群内，这里就是说要加入到节点1的集群 </li><li>-node-id：这个貌似版本8才加入的，这里用这个来指定唯一的节点ID，可以查看这个issue </li><li>-client：这个表示注册或者查询等一系列客户端对它操作的IP，如果不指定这个IP，默认是127.0.0.1。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -server -bind=<span class="number">172.17</span>.0.3  -join=<span class="number">172.17</span>.0.2 -node-id=$(uuidgen | awk <span class="string">'&#123;print tolower($0)&#125;'</span>)  -node=node2</span><br></pre></td></tr></table></figure><ul><li><p>启动节点4（client模式）</p><ul><li>除了没有-server，其它都是一样的，没有这个就说明这个节点是CLIENT<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -bind=<span class="number">172.17</span>.0.5 -retry-join=<span class="number">172.17</span>.0.2 -node-id=$(uuidgen | awk <span class="string">'&#123;print tolower($0)&#125;'</span>)  -node=node4</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Consul集群 </p><ul><li><code>consul members</code>查看下集群的状态<ul><li>4个节点都列出来了。Status表示它们的状态，都是alive。Type表示它们的类型，三个SERVER一个CLIENT，和我们之前启动的一样。DC表示数据中心，都是dc1。</li></ul></li><li><code>consul join 10.201.102.198</code> 加入集群</li></ul></li></ul><p><img src="/images/server/spring/spring-cloud/consul-members.png" alt=""></p><ul><li>Consul同时提供了一个漂亮的功能齐全的WEB界面,开箱即用.界面可以用来查看所有的节点,可以查看健康检查和他们的当前状态.可以读取和设置K/V 存储的数据，启动完成之后就可以使用<code>http://127.0.0.1:8500</code>来查询服务状态，有界面查看还是挺人性化的</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/consul-dc.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>节点异常consul的处理<ul><li>LEADER 挂了 <ul><li>leader挂了，consul会重新选取出新的leader，只要超过一半的SERVER还活着，集群是可以正常工作的。node1是leader，所以把这个容器停了。</li><li>日志打印，心跳检查node1的ip超时，接着开始选举。node2被选举为新的leader</li></ul></li></ul></li></ul><h5 id="使用consul"><a href="#使用consul" class="headerlink" title="使用consul"></a>使用consul</h5><ul><li><p>操作 <code>Consul</code> 有 <code>Commands</code> 和 <code>RESTful HTTP API</code> 两种方式，具体详情可以到<a href="https://www.consul.io/api/index.html" target="_blank" rel="noopener">官网API链接</a>里查看，使用起来十分方便</p></li><li><p>注册服务</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT http://127.0.0.1:8500/v1/agent/service/register</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;ID&quot;: &quot;userServiceId1&quot;,  //服务id</span><br><span class="line">  &quot;Name&quot;: &quot;userServiceName1&quot;, //服务名</span><br><span class="line">  &quot;Tags&quot;: [              //服务的tag，自定义，可以根据这个tag来区分同一个服务名的服务</span><br><span class="line">    &quot;userService1&quot;,</span><br><span class="line">    &quot;v1&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;Address&quot;: &quot;127.0.0.1&quot;,//服务注册到consul的IP，服务发现，发现的就是这个IP</span><br><span class="line">  &quot;Port&quot;: 8000,          //服务注册consul的PORT，发现的就是这个PORT</span><br><span class="line">  &quot;EnableTagOverride&quot;: false,</span><br><span class="line">  &quot;Check&quot;: &#123;             //健康检查部分</span><br><span class="line">    &quot;DeregisterCriticalServiceAfter&quot;: &quot;90m&quot;,</span><br><span class="line">    &quot;HTTP&quot;: &quot;http://www.baidu.com&quot;, //指定健康检查的URL，调用后只要返回20X，consul都认为是健康的</span><br><span class="line">    &quot;Interval&quot;: &quot;10s&quot;   //健康检查间隔时间，每隔10s，调用一次上面的URL</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下架服务</li></ul><blockquote><p>Sample Request</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT  http://127.0.0.1:8500/v1/catalog/service/&#123;serviceId&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Sample Response</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status <span class="number">200</span> ok</span><br></pre></td></tr></table></figure><ul><li>查看所有的服务</li></ul><blockquote><p>Sample Request</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://127.0.0.1:8500/v1/agent/services</span><br></pre></td></tr></table></figure><blockquote><p>Sample Response</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;userServiceId1&quot;: &#123;</span><br><span class="line">        &quot;Kind&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ID&quot;: &quot;userServiceId1&quot;,</span><br><span class="line">        &quot;Service&quot;: &quot;userServiceName1&quot;,</span><br><span class="line">        &quot;Tags&quot;: [</span><br><span class="line">            &quot;userService1&quot;,</span><br><span class="line">            &quot;v1&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Meta&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Port&quot;: 8001,</span><br><span class="line">        &quot;Address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;EnableTagOverride&quot;: false,</span><br><span class="line">        &quot;CreateIndex&quot;: 0,</span><br><span class="line">        &quot;ModifyIndex&quot;: 0,</span><br><span class="line">        &quot;ProxyDestination&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Connect&quot;: null</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;userServiceId2&quot;: &#123;</span><br><span class="line">        &quot;Kind&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ID&quot;: &quot;userServiceId2&quot;,</span><br><span class="line">        &quot;Service&quot;: &quot;userServiceName2&quot;,</span><br><span class="line">        &quot;Tags&quot;: [</span><br><span class="line">            &quot;userService2&quot;,</span><br><span class="line">            &quot;v1&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Meta&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Port&quot;: 8001,</span><br><span class="line">        &quot;Address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;EnableTagOverride&quot;: false,</span><br><span class="line">        &quot;CreateIndex&quot;: 0,</span><br><span class="line">        &quot;ModifyIndex&quot;: 0,</span><br><span class="line">        &quot;ProxyDestination&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Connect&quot;: null</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;userServiceId3&quot;: &#123;</span><br><span class="line">        &quot;Kind&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ID&quot;: &quot;userServiceId3&quot;,</span><br><span class="line">        &quot;Service&quot;: &quot;userServiceName3&quot;,</span><br><span class="line">        &quot;Tags&quot;: [</span><br><span class="line">            &quot;userService3&quot;,</span><br><span class="line">            &quot;v1&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Meta&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Port&quot;: 8001,</span><br><span class="line">        &quot;Address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;EnableTagOverride&quot;: false,</span><br><span class="line">        &quot;CreateIndex&quot;: 0,</span><br><span class="line">        &quot;ModifyIndex&quot;: 0,</span><br><span class="line">        &quot;ProxyDestination&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Connect&quot;: null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查看某个服务</li></ul><blockquote><p>Sample Request</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET  http://127.0.0.1:8500/v1/catalog/service/&#123;serviceName&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Sample Response</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;ID&quot;: &quot;3c1b78a3-701a-2625-f617-94cade896b47&quot;,</span><br><span class="line">        &quot;Node&quot;: &quot;DESKTOP-DT6DIHG&quot;,</span><br><span class="line">        &quot;Address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;Datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">        &quot;TaggedAddresses&quot;: &#123;</span><br><span class="line">            &quot;lan&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;wan&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NodeMeta&quot;: &#123;</span><br><span class="line">            &quot;consul-network-segment&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ServiceKind&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ServiceID&quot;: &quot;userServiceId1&quot;,</span><br><span class="line">        &quot;ServiceName&quot;: &quot;userServiceName1&quot;,</span><br><span class="line">        &quot;ServiceTags&quot;: [</span><br><span class="line">            &quot;userService1&quot;,</span><br><span class="line">            &quot;v1&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ServiceAddress&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;ServiceMeta&quot;: &#123;&#125;,</span><br><span class="line">        &quot;ServicePort&quot;: 8001,</span><br><span class="line">        &quot;ServiceEnableTagOverride&quot;: false,</span><br><span class="line">        &quot;ServiceProxyDestination&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ServiceConnect&quot;: &#123;</span><br><span class="line">            &quot;Native&quot;: false,</span><br><span class="line">            &quot;Proxy&quot;: null</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;CreateIndex&quot;: 3220,</span><br><span class="line">        &quot;ModifyIndex&quot;: 3220</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>KV Store 存值</p></li><li><p>列出所有节点</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http:<span class="comment">//consul.rocks/v1/catelog/nodes</span></span><br></pre></td></tr></table></figure><h4 id="Consul-工作原理"><a href="#Consul-工作原理" class="headerlink" title="Consul 工作原理"></a>Consul 工作原理</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/consul1.png" alt="logo" title="">                </div>                <div class="image-caption">logo</div>            </figure><ul><li>1、当 <code>Producer</code> 启动的时候，会向 <code>Consul</code> 发送一个 <code>post</code> 请求，告诉 <code>Consul</code> 自己的 <code>IP</code> 和 <code>Port</code></li><li>2、<code>Consul</code> 接收到 <code>Producer</code> 的注册后，每隔<code>10s</code>（默认）会向 <code>Producer</code> 发送一个健康检查的请求，检验<code>Producer</code>是否健康</li><li>3、当 <code>Consumer</code> 发送 <code>GET</code> 方式请求 <code>/api/address</code> 到 <code>Producer</code> 时，会先从 <code>Consul</code> 中拿到一个存储服务 <code>IP</code> 和 <code>Port</code> 的临时表，从表中拿到 <code>Producer</code> 的 <code>IP</code> 和 <code>Port</code> 后再发送 <code>GET</code> 方式请求 <code>/api/address</code></li><li>4、该临时表每隔<code>10s</code>会更新，只包含有通过了健康检查的 <code>Producer</code></li></ul><h4 id="Consul-的优势"><a href="#Consul-的优势" class="headerlink" title="Consul 的优势"></a>Consul 的优势</h4><ul><li>使用 <code>Raft</code> 算法来保证一致性, 比复杂的 <code>Paxos</code> 算法更直接. 相比较而言, <code>zookeeper</code> 采用的是 <code>Paxos</code>, 而 <code>etcd</code> 使用的则是 <code>Raft</code>。</li><li>支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等。<code>zookeeper</code>和 <code>etcd</code> 均不提供多数据中心功能的支持。</li><li>支持健康检查。 <code>etcd</code> 不提供此功能。</li><li>支持 <code>http</code> 和 <code>dns</code> 协议接口。 <code>zookeeper</code> 的集成较为复杂, <code>etcd</code> 只支持 <code>http</code> 协议。</li><li>官方提供 <code>web</code> 管理界面, <code>etcd</code> 无此功能。</li><li>综合比较, <code>Consul</code> 作为服务注册和配置管理的新星, 比较值得关注和研究。</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><code>consul</code> 默认使用下列端口<ul><li>8300(tcp): Server RPC，server 用于接受其他 agent 的请求</li><li>8301(tcp,udp): Serf LAN，数据中心内 gossip 交换数据用</li><li>8302(tcp,udp): Serf WAN，跨数据中心 gossip 交换数据用</li><li>8400(tcp): CLI RPC，接受命令行的 RPC 调用</li><li>8500(tcp): HTTP API 及 Web UI</li><li>8600(tcp udp): DNS 服务，可以把它配置到 53 端口来响应 dns 请求</li></ul></li><li>测试开发环境下可以使用<code>consul agent -dev</code>来启动<code>consul</code>，该模式下（该节点的启动不能用于生产环境，因为该模式下不会持久化任何状态），该启动模式仅仅是为了快速便捷的启动单节点<code>consul</code>，该节点处于<code>server</code>模式且是<code>leader</code></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>官网：<a href="https://www.consul.io" target="_blank" rel="noopener">https://www.consul.io</a></li><li><a href="https://www.cnblogs.com/xiaohanlin/p/8016803.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaohanlin/p/8016803.html</a></li><li><a href="https://farer.org/2018/05/17/consul-notes/" target="_blank" rel="noopener">https://farer.org/2018/05/17/consul-notes/</a></li><li>参考：<a href="http://www.ityouknow.com/springcloud/2018/07/20/spring-cloud-consul.html" target="_blank" rel="noopener">http://www.ityouknow.com/springcloud/2018/07/20/spring-cloud-consul.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Consul-介绍&quot;&gt;&lt;a href=&quot;#Consul-介绍&quot; class=&quot;headerlink&quot; title=&quot;Consul 介绍&quot;&gt;&lt;/a&gt;Consul 介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Consul&lt;/code&gt; 是 &lt;code&gt;Hashi
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Eureka)服务治理介绍</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Eureka)%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Eureka)服务治理介绍/</id>
    <published>2019-08-06T16:01:00.000Z</published>
    <updated>2019-08-31T02:31:25.674Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="什么是-Eureka"><a href="#什么是-Eureka" class="headerlink" title="什么是 Eureka"></a>什么是 Eureka</h4><ul><li><code>Eureka</code>是<code>Netflix</code>开发的服务发现框架，本身是一个基于<code>REST</code>的服务，主要用于定位运行在<code>AWS</code>域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。<code>SpringCloud</code>将它集成在其子项目<code>spring-cloud-netflix</code>中，以实现<code>SpringCloud</code>的服务发现功能。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/eureka1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><ul><li><p>服务发现就像聊天室一个,每个用户来的时候去服务器上注册,这样他的好友们就能看到你,你同时也将获取好友的上线列表.在微服务中,服务就相当于聊天室的用户,而服务注册中心就像聊天室服务器一样。</p></li><li><p>目前服务发现的解决方案有<code>Eureka,Consul,Etcd,Zookeeper,SmartStack</code>等等</p></li><li><p><code>Eureka Client</code>通过<code>HTTP</code>(或者<code>TCP,UDP</code>)去<code>Eureka Server</code>册和获取服务列表,为了高可用一般会有多个</p></li><li><p><code>Eureka Server</code>可以组成集群，<code>Eureka</code>会移除那些心跳检查未到达的服务.</p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>因为此组件官方没有在维护了，所以在此没有更多研究，可以参考其他解决方案比如<code>Consul</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;h4 id=&quot;什么是-Eureka&quot;&gt;&lt;a href=&quot;#什么是-Eureka&quot; class=&quot;headerlink&quot; title=&quot;什么是 E
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud()SpringCloudNetflix</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Netflix)SpringCloudNetflix/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/SpringCloud(Netflix)SpringCloudNetflix/</id>
    <published>2019-08-06T16:00:00.000Z</published>
    <updated>2019-08-31T02:31:25.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><ul><li><p><code>Spring Cloud</code>是一系列框架的有序集合。它利用<code>Spring Boot</code>的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用<code>Spring Boot</code>的开发风格做到一键启动和部署。</p></li><li><p><code>Spring Cloud</code>并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过<code>Spring Boot</code>风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p></li></ul><h4 id="Spring-Cloud组成"><a href="#Spring-Cloud组成" class="headerlink" title="Spring Cloud组成"></a>Spring Cloud组成</h4><ul><li><code>Spring Cloud</code>的子项目，大致可分成两类，对于我们想快速实践微服务的开发者来说，第一类子项目就已经足够使用<ul><li>第一类是对现有成熟框架<code>Spring Boot</code>的封装和抽象，比如对<code>Netflix</code>服务组件的封装，也是数量最多的项目</li><li>第二类是开发了一部分分布式系统的基础设施的实现，如<code>Spring Cloud Stream</code>扮演的就是<code>kafka, ActiveMQ</code>这样的角色</li></ul></li></ul><h4 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h4><ul><li><p><code>SpringCloud</code>下包含了多个工程，其中的<code>Spring Cloud Netflix</code>提供了一系列搭建微服务基础架构的功能组件，<code>Netflix</code>的部分组件及功能特性如下：</p><ul><li><code>Eureka</code>（服务注册与发现框架）：一个基于<code>REST</code>风格的服务组件，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移</li><li><code>Hystrix</code>（服务容错组件）：容错管理工具，旨在通过控制服务和第三方库的节点，从而对延迟和故障提供强大的容村能力</li><li><code>Zuul</code>（服务网关）：边缘服务工具，提供动态路由、监控、贪心、安全等边缘服务</li><li><code>Ribbon</code>（客户端负载均衡器）：提供客户端负载均衡算法，将<code>Netflix</code>的中间层服务连接起来</li><li><code>Feign</code>（声明式HTTP客户端）：可以创建声明式、模板化的<code>HTTP</code>客户端，进行微服务调用</li></ul></li><li><p>下面的章节将详细介绍这些<code>Spring Cloud Netflix</code>组件</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>专人做专事，<code>Spring Cloud</code>并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，提供了标准化的、全站式的技术方案</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>官网传送：<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud</a></li><li>百度百科 <a href="https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring-Cloud&quot;&gt;&lt;a href=&quot;#Spring-Cloud&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud&quot;&gt;&lt;/a&gt;Spring Cloud&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Spring Cloud&lt;/c
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot(七)内嵌Tomcat启动原理解析</title>
    <link href="http://www.songshuiyang.com/2019/08/06/backend/framework/spring/spring-boot/SpringBoot(%E4%B8%83)%E5%86%85%E5%B5%8CTomcat%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.songshuiyang.com/2019/08/06/backend/framework/spring/spring-boot/SpringBoot(七)内嵌Tomcat启动原理解析/</id>
    <published>2019-08-05T16:07:00.000Z</published>
    <updated>2019-08-18T01:50:32.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>我们知道在使用<code>Spring Boot</code>项目的时候可以不用依赖外部<code>Tomcat</code>就可以启动，那么<code>Spring Boot</code>是怎么做到的呢？其实就是只需要引入<code>spring-boot-starter-web</code>，在应用启动时会自动启动嵌入版的<code>tomcat</code>作为应用服务器，下面我们来学习下其实现原理。</li></ul><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h4 id="TomcatEmbeddedServletContainerFactory-自动配置"><a href="#TomcatEmbeddedServletContainerFactory-自动配置" class="headerlink" title="TomcatEmbeddedServletContainerFactory 自动配置"></a>TomcatEmbeddedServletContainerFactory 自动配置</h4><ul><li><p>嵌入版的<code>tomcat</code>起作用的关键是<code>TomcatEmbeddedServletContainerFactory</code>，下面将讲解该类的注册</p></li><li><p>第四章节已经介绍了自动配置的实现，查看<code>spring-boot-autoconfigure</code>模块的<code>META-INF/spring.factories</code>文件，关注<code>EmbeddedServletContainerAutoConfiguration</code>这个配置类，看类名可以翻译为嵌入式的<code>Servlet</code>容器自动配置类，所以以后如果想知道其他功能是怎么被集成进来的，可以在<code>spring.factories</code>中找找对应的自动配置类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">... </span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">...</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure><ul><li>进入<code>EmbeddedServletContainerAutoConfiguration.java</code>，可以看到使用不同的<code>@Conditional</code>注解可以针对不同的环境情况选择注册不同的<code>Bean</code>，下面根据条件会注册不同的<code>Servlet</code>容器<ul><li>注册<code>Tomcat</code>容器工厂</li><li>注册<code>Jetty</code>容器工厂</li><li>注册<code>Undertow</code>容器工厂</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 嵌入式的`Servlet`容器自动配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> EnableAutoConfiguration Auto-configuration&#125; for an embedded servlet containers.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Phillip Webb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ivan Sopov</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Stephane Nicoll</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">// 注解表明只有在web环境下才会创建容器相关信息，因此应用无需容器则使用</span></span><br><span class="line"><span class="meta">@Import</span>(BeanPostProcessorsRegistrar.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册Tomcat容器工厂</span></span><br><span class="line"><span class="comment"> * 由于存在<span class="doctag">@ConditionalOnMissingBean</span>注解，因此优先使用用户自定义的EmbeddedServletContainerFactory</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Nested configuration if Tomcat is being used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Tomcat.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">tomcatEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册Jetty容器工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Nested configuration if Jetty is being used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Server.class, Loader.class,</span><br><span class="line">WebAppContext.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JettyEmbeddedServletContainerFactory <span class="title">jettyEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册Undertow容器工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Nested configuration if Undertow is being used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedUndertow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="title">undertowEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers a &#123;<span class="doctag">@link</span> EmbeddedServletContainerCustomizerBeanPostProcessor&#125;. Registered</span></span><br><span class="line"><span class="comment"> * via &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125; for early registration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorsRegistrar</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line"><span class="keyword">this</span>.beanFactory = (ConfigurableListableBeanFactory) beanFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">registerSyntheticBeanIfMissing(registry,</span><br><span class="line"><span class="string">"embeddedServletContainerCustomizerBeanPostProcessor"</span>,</span><br><span class="line">EmbeddedServletContainerCustomizerBeanPostProcessor.class);</span><br><span class="line">registerSyntheticBeanIfMissing(registry,</span><br><span class="line"><span class="string">"errorPageRegistrarBeanPostProcessor"</span>,</span><br><span class="line">ErrorPageRegistrarBeanPostProcessor.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerSyntheticBeanIfMissing</span><span class="params">(BeanDefinitionRegistry registry,</span></span></span><br><span class="line"><span class="function"><span class="params">String name, Class&lt;?&gt; beanClass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(</span><br><span class="line"><span class="keyword">this</span>.beanFactory.getBeanNamesForType(beanClass, <span class="keyword">true</span>, <span class="keyword">false</span>))) &#123;</span><br><span class="line">RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(beanClass);</span><br><span class="line">beanDefinition.setSynthetic(<span class="keyword">true</span>);</span><br><span class="line">registry.registerBeanDefinition(name, beanDefinition);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们这里关注<code>TomcatEmbeddedServletContainerFactory</code>类，下面是类继承关系图：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-boot/TomcatEmbeddedServletContainerFactory.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><code>TomcatEmbeddedServletContainerFactory</code>类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatEmbeddedServletContainerFactory</span> <span class="keyword">extends</span> <span class="title">AbstractEmbeddedServletContainerFactory</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; NO_CLASSES = Collections.emptySet();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The class name of default protocol used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PROTOCOL = <span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> File baseDirectory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Valve&gt; engineValves = <span class="keyword">new</span> ArrayList&lt;Valve&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Valve&gt; contextValves = <span class="keyword">new</span> ArrayList&lt;Valve&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;LifecycleListener&gt; contextLifecycleListeners = <span class="keyword">new</span> ArrayList&lt;LifecycleListener&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;TomcatContextCustomizer&gt; tomcatContextCustomizers = <span class="keyword">new</span> ArrayList&lt;TomcatContextCustomizer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;TomcatConnectorCustomizer&gt; tomcatConnectorCustomizers = <span class="keyword">new</span> ArrayList&lt;TomcatConnectorCustomizer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Connector&gt; additionalTomcatConnectors = <span class="keyword">new</span> ArrayList&lt;Connector&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String protocol = DEFAULT_PROTOCOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; tldSkipPatterns = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;(</span><br><span class="line">TldSkipPatterns.DEFAULT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Charset uriEncoding = DEFAULT_CHARSET;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> backgroundProcessorDelay;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> TomcatEmbeddedServletContainerFactory&#125; instance.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TomcatEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> TomcatEmbeddedServletContainerFactory&#125; that listens for</span></span><br><span class="line"><span class="comment"> * requests using the specified port.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> port the port to listen on</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TomcatEmbeddedServletContainerFactory</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> TomcatEmbeddedServletContainerFactory&#125; with the specified</span></span><br><span class="line"><span class="comment"> * context path and port.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> contextPath the root context path</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> port the port to listen on</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TomcatEmbeddedServletContainerFactory</span><span class="params">(String contextPath, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(contextPath, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取EmbeddedServletContainer</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> initializers &#123;<span class="doctag">@link</span> ServletContextInitializer&#125;s that should be applied as</span></span><br><span class="line"><span class="comment"> * the container starts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 构建Tomcat实例</span></span><br><span class="line">Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line"><span class="comment">// 配置Tomcat的基本环境</span></span><br><span class="line">File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory</span><br><span class="line">: createTempDir(<span class="string">"tomcat"</span>));</span><br><span class="line">tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">tomcat.getService().addConnector(connector);</span><br><span class="line">customizeConnector(connector);</span><br><span class="line">tomcat.setConnector(connector);</span><br><span class="line">tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">configureEngine(tomcat.getEngine());</span><br><span class="line"><span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">&#125;</span><br><span class="line">prepareContext(tomcat.getHost(), initializers);</span><br><span class="line"><span class="comment">// 将配置好的Tomcat传入进去。返回一个EmbeddedServletContainer 并且启动tomcat容器</span></span><br><span class="line"><span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><p><code>TomcatEmbeddedServletContainerFactory</code>类，这个类是创建<code>Tomcat</code>容器的工厂类，可以看到这个类实现了<code>EmbeddedServletContainerFactory</code>接口</p><ul><li><p>查看<code>EmbeddedServletContainerFactory</code>接口，该接口只有一个方法，该方法用于获取<code>Servlet</code>容器（<code>EmbeddedServletContainer</code>）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ServletContextInitializer... initializers)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>TomcatEmbeddedServletContainerFactory</code>类实现了<code>getEmbeddedServletContainer()</code>方法，可以看到<code>Tomcat tomcat = new Tomcat()</code>是创建了一个汤姆猫，然后构造为<code>EmbeddedServletContainer</code>对象</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取EmbeddedServletContainer</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> initializers &#123;<span class="doctag">@link</span> ServletContextInitializer&#125;s that should be applied as</span></span><br><span class="line"><span class="comment"> * the container starts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建Tomcat实例</span></span><br><span class="line">    Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    <span class="comment">// 配置Tomcat的基本环境</span></span><br><span class="line">    File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory</span><br><span class="line">            : createTempDir(<span class="string">"tomcat"</span>));</span><br><span class="line">    tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">    Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">    tomcat.getService().addConnector(connector);</span><br><span class="line">    customizeConnector(connector);</span><br><span class="line">    tomcat.setConnector(connector);</span><br><span class="line">    tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">    configureEngine(tomcat.getEngine());</span><br><span class="line">    <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">        tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">    &#125;</span><br><span class="line">    prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">    <span class="comment">// 将配置好的Tomcat传入进去。返回一个EmbeddedServletContainer 并且启动tomcat容器</span></span><br><span class="line">    <span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看<code>EmbeddedServletContainer</code>接口，该接口是<code>Servlet</code>容器的抽象，可以看到有三个方法，<code>start()</code> <code>stop()</code> <code>getPort();</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动容器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Starts the embedded servlet container. Calling this method on an already started</span></span><br><span class="line"><span class="comment">     * container has no effect.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> EmbeddedServletContainerException if the container cannot be started</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> EmbeddedServletContainerException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止容器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Stops the embedded servlet container. Calling this method on an already stopped</span></span><br><span class="line"><span class="comment">     * container has no effect.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> EmbeddedServletContainerException if the container cannot be stopped</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> EmbeddedServletContainerException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取服务端口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Return the port this server is listening on.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the port (or -1 if none)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>下图是显示了<code>Spring Boot</code>定义了哪些容器</p><ul><li><code>UndertowEmbeddedServletContainer</code> (org.springframework.boot.context.embedded.undertow)</li><li><code>MockEmbeddedServletContainer</code> (org.springframework.boot.context.embedded)</li><li><code>TomcatEmbeddedServletContainer</code> (org.springframework.boot.context.embedded.tomcat)</li><li><code>JettyEmbeddedServletContainer</code> (org.springframework.boot.context.embedded.jetty)</li></ul></li></ul></li><li><code>EmbeddedServletContainer.java</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-boot/EmbeddedServletContainer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>到这里<code>TomcatEmbeddedServletContainerFactory</code>已经自动注册完成了，使用<code>@Conditional</code>相关注解可以控制只有在web环境下才会创建容器相关信息，有了容器的创建工厂之后就可以使用<code>Servlet</code>容器了<code>EmbeddedServletContainer</code></li></ul><h4 id="TomcatEmbeddedServletContainer-创建"><a href="#TomcatEmbeddedServletContainer-创建" class="headerlink" title="TomcatEmbeddedServletContainer 创建"></a>TomcatEmbeddedServletContainer 创建</h4><ul><li>由上面可以知道<code>TomcatEmbeddedServletContainer</code>的创建是由<code>TomcatEmbeddedServletContainerFactory</code>类的<code>getEmbeddedServletContainer()</code>方法来实现的，从下面<code>private final Tomcat tomcat;</code>可以看到我们的<code>Tomcat</code>猫</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatEmbeddedServletContainer</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(TomcatEmbeddedServletContainer.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger containerCounter = <span class="keyword">new</span> AtomicInteger(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object monitor = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Service, Connector[]&gt; serviceConnectors = <span class="keyword">new</span> HashMap&lt;Service, Connector[]&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tomcat猫</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Tomcat tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> autoStart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> started;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> TomcatEmbeddedServletContainer&#125; instance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tomcat the underlying Tomcat server</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TomcatEmbeddedServletContainer</span><span class="params">(Tomcat tomcat)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(tomcat, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@link</span> TomcatEmbeddedServletContainer&#125; instance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tomcat the underlying Tomcat server</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> autoStart if the server should be started</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TomcatEmbeddedServletContainer</span><span class="params">(Tomcat tomcat, <span class="keyword">boolean</span> autoStart)</span> </span>&#123;</span><br><span class="line">Assert.notNull(tomcat, <span class="string">"Tomcat Server must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.tomcat = tomcat;</span><br><span class="line"><span class="keyword">this</span>.autoStart = autoStart;</span><br><span class="line"><span class="comment">// 启动容器</span></span><br><span class="line">initialize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> EmbeddedServletContainerException </span>&#123;</span><br><span class="line">TomcatEmbeddedServletContainer.logger</span><br><span class="line">.info(<span class="string">"Tomcat initialized with port(s): "</span> + getPortsDescription(<span class="keyword">false</span>));</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.monitor) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">addInstanceIdToEngineName();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Remove service connectors to that protocol binding doesn't happen</span></span><br><span class="line"><span class="comment">// yet</span></span><br><span class="line">removeServiceConnectors();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start the server to trigger initialization listeners</span></span><br><span class="line"><span class="comment">// 启动 Tomcat</span></span><br><span class="line"><span class="keyword">this</span>.tomcat.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// We can re-throw failure exception directly in the main thread</span></span><br><span class="line">rethrowDeferredStartupExceptions();</span><br><span class="line"></span><br><span class="line">Context context = findContext();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ContextBindings.bindClassLoader(context, getNamingToken(context),</span><br><span class="line">getClass().getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NamingException ex) &#123;</span><br><span class="line"><span class="comment">// Naming is not enabled. Continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unlike Jetty, all Tomcat threads are daemon threads. We create a</span></span><br><span class="line"><span class="comment">// blocking non-daemon to stop immediate shutdown</span></span><br><span class="line">startDaemonAwaitThread();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">containerCounter.decrementAndGet();</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> EmbeddedServletContainerException(</span><br><span class="line"><span class="string">"Unable to start embedded Tomcat"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="TomcatEmbeddedServletContainer-使用"><a href="#TomcatEmbeddedServletContainer-使用" class="headerlink" title="TomcatEmbeddedServletContainer 使用"></a>TomcatEmbeddedServletContainer 使用</h4><ul><li>有了<code>TomcatServletContainer</code>之后就需要启动了，那么<code>Spring Boot</code>是哪里触发调用的呢，可以在<code>TomcatEmbeddedServletContainer</code>的<code>initialize()</code>方法里打个断点</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-boot/tomcat1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>打好断点之后就是启动<code>Spring Boot</code>项目了，由下图可以看到是从<code>ApplicationContext</code>的<code>refresh()</code>开始触发的</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-boot/tomcat2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>现在我们从<code>main</code>方法开始一步步跟进</p><ul><li><p>1、<code>main</code>方法开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       SpringApplication.run(SampleTomcatJspApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object[] sources, String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建 SpringApplication 对象，并执行运行。</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(sources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2、进入<code>org.springframework.boot.SpringApplication#run(java.lang.String...)</code>方法，由之前的第三章节可以知道这里我们的到的<code>ApplicationContext</code>实现类是<code>AnnotationConfigEmbeddedWebApplicationContext</code>，看名字可以知道这个类是基于注解配置的嵌入式Web应用容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//  创建 StopWatch 对象，并启动。StopWatch 主要用于简单统计 run 启动过程的时长。</span></span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 配置 headless 属性，这个逻辑，可以无视，和 AWT 相关。</span></span><br><span class="line">configureHeadlessProperty();</span><br><span class="line"><span class="comment">// 获得 SpringApplicationRunListener 的数组，并启动监听</span></span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建  ApplicationArguments 对象</span></span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line"><span class="comment">// 加载属性配置。执行完成后，所有的 environment 的属性都会加载进来，包括 application.properties 和外部的属性配置。</span></span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line"><span class="comment">// 打印 Spring Banner</span></span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line"><span class="comment">// 创建 Spring 容器。</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line">analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line"><span class="comment">// 主要是调用所有初始化类的 initialize 方法</span></span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line"><span class="comment">// 初始化 Spring 容器。</span></span><br><span class="line">refreshContext(context);</span><br></pre></td></tr></table></figure></li><li><p>3、进入<code>refreshContext(context);</code>方法，下面可以看到是调用了<code>refresh(context);</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 开启（刷新）Spring 容器</span></span><br><span class="line">refresh(context);</span><br><span class="line"><span class="comment">// 注册 ShutdownHook 钩子</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">context.registerShutdownHook();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line"><span class="comment">// Not allowed in some environments.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>4、一直跳入可以发现进入到了<code>org.springframework.boot.context.embedded.EmbeddedWebApplicationContext#onRefresh</code>方法，<code>EmbeddedWebApplicationContext</code>重写了<code>onRefresh()</code>方法，在调父类<code>super.onRefresh();</code>方法之后又调用了<code>createEmbeddedServletContainer();</code>方法用于创建及启动容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onRefresh();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建及启动容器</span></span><br><span class="line">createEmbeddedServletContainer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Unable to start embedded container"</span>,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>5、进入<code>createEmbeddedServletContainer()</code>方法可以看到通过<code>org.springframework.boot.context.embedded.EmbeddedServletContainerFactory#getEmbeddedServletContainer()</code>方法来创建了<code>EmbeddedServletContainer</code>，到现在就是和之前的内容联系起来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createEmbeddedServletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">EmbeddedServletContainer localContainer = <span class="keyword">this</span>.embeddedServletContainer;</span><br><span class="line">ServletContext localServletContext = getServletContext();</span><br><span class="line"><span class="keyword">if</span> (localContainer == <span class="keyword">null</span> &amp;&amp; localServletContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</span><br><span class="line"><span class="comment">// 获取EmbeddedServletContainer</span></span><br><span class="line"><span class="keyword">this</span>.embeddedServletContainer = containerFactory.getEmbeddedServletContainer(getSelfInitializer());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (localServletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">getSelfInitializer().onStartup(localServletContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Cannot initialize servlet context"</span>,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">initPropertySources();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>6、可以看到<code>containerFactory.getEmbeddedServletContainer(getSelfInitializer());</code> 的参数<code>getSelfInitializer()</code>是个<code>ServletContextInitializer</code>对象</p></li><li><p><code>getSelfInitializer()</code>方法获得的<code>Servlet</code>初始化器内部会去构造一个<code>ServletContextInitializerBeans</code>(<code>Servlet</code>初始化器的集合)，<code>ServletContextInitializerBeans</code>构造的时候会去<code>Spring</code>容器中查找<code>ServletContextInitializer</code>类型的<code>bean</code>，其中<code>ServletRegistrationBean、FilterRegistrationBean、ServletListenerRegistrationBean</code>会被找出(如果有定义)，这3种<code>ServletContextInitializer</code>会在<code>onStartup</code>方法中将<code>Servlet、Filter、Listener</code>添加到<code>Servlet</code>容器中(如果我们只定义了<code>Servlet、Filter</code>或者<code>Listener，ServletContextInitializerBeans</code>内部会调用<code>addAdaptableBeans</code>方法把它们包装成<code>RegistrationBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> org.springframework.boot.web.servlet.<span class="function">ServletContextInitializer <span class="title">getSelfInitializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ServletContextInitializer() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">selfInitialize(servletContext);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>7、进入<code>containerFactory.getEmbeddedServletContainer(getSelfInitializer());</code>继续跳入，就来到了<code>TomcatEmbeddedServletContainer.initialize();</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TomcatEmbeddedServletContainer</span><span class="params">(Tomcat tomcat, <span class="keyword">boolean</span> autoStart)</span> </span>&#123;</span><br><span class="line">Assert.notNull(tomcat, <span class="string">"Tomcat Server must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.tomcat = tomcat;</span><br><span class="line"><span class="keyword">this</span>.autoStart = autoStart;</span><br><span class="line"><span class="comment">// 启动容器</span></span><br><span class="line">initialize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> EmbeddedServletContainerException </span>&#123;</span><br><span class="line">       TomcatEmbeddedServletContainer.logger</span><br><span class="line">               .info(<span class="string">"Tomcat initialized with port(s): "</span> + getPortsDescription(<span class="keyword">false</span>));</span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>.monitor) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               addInstanceIdToEngineName();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">// Remove service connectors to that protocol binding doesn't happen</span></span><br><span class="line">                   <span class="comment">// yet</span></span><br><span class="line">                   removeServiceConnectors();</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// Start the server to trigger initialization listeners</span></span><br><span class="line">                   <span class="comment">// 启动 Tomcat</span></span><br><span class="line">                   <span class="keyword">this</span>.tomcat.start();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>SpringBoot</code>内置了<code>Servlet</code>容器，这样项目的发布、部署就不需要额外的<code>Servlet</code>容器，直接启动<code>jar</code>包即可</li><li>如果是<code>Web</code>程序，那么会构造<code>AnnotationConfigEmbeddedWebApplicationContext</code>类型的<code>Spring</code>容器，<code>AnnotationConfigEmbeddedWebApplicationContext</code>类型的<code>Spring</code>容器在<code>refresh</code>的过程中会在<code>onRefresh</code>方法中创建内置的<code>Servlet</code>容器。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>芋道源码 <a href="http://www.iocoder.cn" target="_blank" rel="noopener">http://www.iocoder.cn</a></li><li><a href="https://www.jianshu.com/p/043579ae733f" target="_blank" rel="noopener">https://www.jianshu.com/p/043579ae733f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们知道在使用&lt;code&gt;Spring Boot&lt;/code&gt;项目的时候可以不用依赖外部&lt;code&gt;Tomcat&lt;/code&gt;就
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.songshuiyang.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot(六)Starter解析及自己定制实现</title>
    <link href="http://www.songshuiyang.com/2019/08/06/backend/framework/spring/spring-boot/SpringBoot(%E5%85%AD)Starter%E8%A7%A3%E6%9E%90%E5%8F%8A%E8%87%AA%E5%B7%B1%E5%AE%9A%E5%88%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.songshuiyang.com/2019/08/06/backend/framework/spring/spring-boot/SpringBoot(六)Starter解析及自己定制实现/</id>
    <published>2019-08-05T16:06:00.000Z</published>
    <updated>2019-08-18T01:50:32.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p><code>SpringBoot</code> 能够快速的接入各种框架的关键是靠各种<code>Starter</code>来实现的，比如我们想搭建一个<code>Web</code>应用，只要在<code>POM</code>依赖中添加<code>spring-boot-starter-web</code>就可以完成，它会帮我们自动引入各种<code>Web</code>应用所需的依赖并完成<code>Bean</code>的自动注册</p></li><li><p><code>Starter</code> 主要用来简化依赖用的，<code>Spring Boot</code> 通过<code>starter</code>依赖为项目的依赖管理提供帮助，<code>starter</code>依赖起始就是特殊的<code>maven</code>依赖，利用了传递依赖解析，把常用库聚合在一起,组成了几个为特定功能而定制的依赖</p></li><li><p><code>SpringBoot</code>自带的<code>Starter</code>见下图，因为太多了所以只截了部分</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-boot/startes.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h4 id="spring-boot-starter-web-解析"><a href="#spring-boot-starter-web-解析" class="headerlink" title="spring-boot-starter-web 解析"></a>spring-boot-starter-web 解析</h4><ul><li><p>查看<code>spring-boot-starter-web</code>的源码，见下图可以发现就两个文件，<code>pom.xml</code>定义了会自动导入哪些依赖，<code>spring.provides</code>也是告诉我们，通过在我们的构建中包含 <code>spring-webmvc,spring-web,jackson-databind</code> 作为依赖</p></li><li><p>为什么<code>spring.provides</code>定义了依赖又要在<code>pom.xml</code>再次定义？这个问题还需研究</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-boot/starter-web.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>META-INF/spring.provides</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">provides: spring-webmvc,spring-web,jackson-databind</span><br></pre></td></tr></table></figure><blockquote><p>spring-boot-starters/spring-boot-starter-web/pom.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starters<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Boot Web Starter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Starter for building web, including RESTful, applications using Spring</span><br><span class="line">MVC. Uses Tomcat as the default embedded container<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://projects.spring.io/spring-boot/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main.basedir</span>&gt;</span>$&#123;basedir&#125;/../..<span class="tag">&lt;/<span class="name">main.basedir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自己定制实现Starter"><a href="#自己定制实现Starter" class="headerlink" title="自己定制实现Starter"></a>自己定制实现Starter</h3><ul><li><p>我们知道<code>spring-boot-actuator</code> 中已经内置了非常多的 <code>Endpoint</code>比如<code>health、info、beans、metrics、httptrace、shutdown</code>，只要添加<code>spring-boot-actuator</code>依赖就可以获得这些功能</p></li><li><p>如果要我们自己来实现这些功能要怎么实现呢，下面我们将创建自己<code>Starter</code>来实现一个简单的功能，比如实现一个 <code>可以获取系统应用状态</code>的功能，只要在应用中导入<code>Starter</code>依赖并开启注解就可以使用该功能</p></li><li><p>创建项目，项目结构如下图所示：</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-boot/cloud-starter.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>我们这里为了方便所以将<code>Starter</code>的定义及实现（添加了几个类）放到了一起，一般是<code>Starter</code>里面就一个<code>META-INF/spring.factories</code>及<code>pom.xml</code>文件</p></li><li><p><code>META-INF/spring.factories</code> 这里配置了一个自动配置的类，只要导入了<code>Starter Pom</code>依赖，启动<code>SpringBoot</code>应用的时候就会自动注册这个类<code>com.songsy.springcloud.plus.starter.CloudAutoConfiguration</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.songsy.springcloud.plus.starter.CloudAutoConfiguration</span><br></pre></td></tr></table></figure><ul><li><p><code>CloudAutoConfiguration.java</code>此类定义了一个<code>Bean</code>，这个<code>Bean</code>是个<code>Controller</code>，可以看到调用此链接<code>/system/info</code>就返回了一些应用信息，这里只是为了测试功能所以就返回了固定值</p><ul><li><code>@Configuration</code> 标识此类是<code>Spring</code>的配置类，相当于一个<code>bean.xml</code>文件</li><li><code>@ConditionalOnBean(CloudMarkerConfiguration.Marker.class)</code> 标识只有当前<code>Spring</code>容器注册了<code>CloudMarkerConfiguration.Marker</code>这个<code>Bean</code>的时候此<code>CloudAutoConfiguration</code>配置类才生效</li></ul></li><li><p><code>CloudAutoConfiguration.java</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(CloudMarkerConfiguration.Marker.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/system"</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SystemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping</span>(<span class="string">"/info"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Map&lt;String, Object&gt; objectMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">8</span>);</span><br><span class="line">            objectMap.put(<span class="string">"appName"</span>,<span class="string">"spring-cloud-plus-parent"</span>);</span><br><span class="line">            objectMap.put(<span class="string">"groupId"</span>,<span class="string">"com.songsy.springcloud.plus"</span>);</span><br><span class="line">            objectMap.put(<span class="string">"artifactId"</span>,<span class="string">"cloud-parent"</span>);</span><br><span class="line">            objectMap.put(<span class="string">"version"</span>,<span class="string">"1.0-SNAPSHOT"</span>);</span><br><span class="line">            objectMap.put(<span class="string">"currentTimeMillis"</span>,System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">return</span> objectMap;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>CloudMarkerConfiguration.Marker</code> 这个是个标识类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册Marker标记bean，使&#123;<span class="doctag">@link</span> CloudAutoConfiguration&#125;配置类生效</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/15 18:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudMarkerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Marker <span class="title">zuulProxyMarkerBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Marker();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Marker</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@EnableCloudAutoConfig</code> 注解是开启此功能的开关，可以看到只要使用了此注解，就会注册<code>CloudMarkerConfiguration.class</code> 这个<code>Bean</code>，有了此<code>Bean</code>之后<code>CloudAutoConfiguration.java</code>的条件(<code>@ConditionalOnBean(CloudMarkerConfiguration.Marker.class</code>))就成立了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开启自动配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/15 18:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Import</span>(CloudMarkerConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableCloudAutoConfig &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如何使用</p><ul><li>把上面的<code>Starter</code>打成<code>maven</code> <code>jar</code>包</li><li><p>在其他应用中导入<code>pom</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.songsy.springcloud.plus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动类加上<code>@EnableCloudAutoConfig</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCloudAutoConfig</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动访问<code>/system/info</code>链接，可以看到可以得到结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"artifactId"</span>: <span class="string">"cloud-parent"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0-SNAPSHOT"</span>,</span><br><span class="line">    <span class="attr">"appName"</span>: <span class="string">"spring-cloud-plus-parent"</span>,</span><br><span class="line">    <span class="attr">"groupId"</span>: <span class="string">"com.songsy.springcloud.plus"</span>,</span><br><span class="line">    <span class="attr">"currentTimeMillis"</span>: <span class="number">1565939848850</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>Starter</code>可以说是<code>SpringBoot</code>的灵魂，官方已经将一些常用的功能封装了，要什么就添加什么，万物皆可配置，我们也可以根据自己业务需求实现自己的<code>Starter</code></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;SpringBoot&lt;/code&gt; 能够快速的接入各种框架的关键是靠各种&lt;code&gt;Starter&lt;/code
      
    
    </summary>
    
      <category term="server" scheme="http://www.songshuiyang.com/categories/server/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.songshuiyang.com/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
