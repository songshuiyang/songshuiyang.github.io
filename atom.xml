<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宋水阳个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.songshuiyang.com/"/>
  <updated>2023-05-02T08:59:39.826Z</updated>
  <id>http://www.songshuiyang.com/</id>
  
  <author>
    <name>songshuiyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java位运算实现复合位状态</title>
    <link href="http://www.songshuiyang.com/2022/03/04/backend/framework/tools/Java%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%90%88%E4%BD%8D%E7%8A%B6%E6%80%81/"/>
    <id>http://www.songshuiyang.com/2022/03/04/backend/framework/tools/Java位运算实现复合位状态/</id>
    <published>2022-03-04T13:30:44.000Z</published>
    <updated>2023-05-02T08:59:39.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li><p><a href="http://www.songshuiyang.com/2018/10/10/backend/java/basicKnowledge/Java%E5%9F%BA%E7%A1%80-Java%E4%BD%8D%E8%BF%90%E7%AE%97/">Java基础-Java位运算</a> 在JAVA基础篇中我们梳理了基础知识，学了理论后我们要用于实际项目中，我们知道二进制位是各种<code>00010110101</code>，组成，不是0就是1</p></li><li><p>上面这种情况在项目中是不是可以存放各种状态位，1就是代表开启，0就是代表未开启，上面有多少位就可以代表多少个状态，而且在数据库里面只要存放一个<code>int</code>字段就行，后续获取和设置都可以使用位运算来处理</p></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songsy.springboot.test.service.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二进制复合状态工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songshuiyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/5/2 12:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryStateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(BinaryStateUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复合状态位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> StateEnum&#123;</span><br><span class="line">        ORDER(<span class="number">0</span>,<span class="string">"已下单"</span>),</span><br><span class="line">        PUSH(<span class="number">1</span>,<span class="string">"已推送"</span>),</span><br><span class="line">        REFUND(<span class="number">2</span>,<span class="string">"已退款"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.code = code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> desc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">StateEnum</span><span class="params">(Integer code,String desc)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.code = code;</span><br><span class="line">            <span class="keyword">this</span>.desc = desc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询指定下标 位状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> complexState 位状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 指定下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">queryBinaryState</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> complexState, <span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (complexState &gt;&gt; index) &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置指定下标 位状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> complexState 位状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 指定下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">setBinaryOpen</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> complexState, <span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (complexState | <span class="number">1</span> &lt;&lt; index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除指定下标位状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> complexState 位状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 指定下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">clearBinaryOpen</span><span class="params">(<span class="keyword">int</span> complexState,<span class="keyword">final</span> <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        complexState &amp;= ~(<span class="number">1</span> &lt;&lt; index);</span><br><span class="line">        <span class="keyword">return</span> complexState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证复合状态是否Ok</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> complexState</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stateEnum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOk</span><span class="params">(<span class="keyword">int</span> complexState, StateEnum stateEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queryBinaryState(complexState, stateEnum.code) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置复合状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> complexState</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stateEnum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">setOk</span><span class="params">(<span class="keyword">int</span> complexState, StateEnum stateEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> setBinaryOpen(complexState, stateEnum.code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类："><a href="#测试类：" class="headerlink" title="测试类："></a>测试类：</h2><blockquote><p>单元测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songsy.springboot.test.service.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二进制复合状态工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songshuiyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/5/2 12:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryStateUtilsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(BinaryStateUtilsTest.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"0001 &#123;&#125;"</span>, BinaryStateUtils.isOk(<span class="number">1</span>, BinaryStateUtils.StateEnum.ORDER));</span><br><span class="line">        LOGGER.info(<span class="string">"0010 &#123;&#125;"</span>, BinaryStateUtils.isOk(<span class="number">2</span>, BinaryStateUtils.StateEnum.PUSH));</span><br><span class="line">        LOGGER.info(<span class="string">"0100 &#123;&#125;"</span>, BinaryStateUtils.isOk(<span class="number">4</span>, BinaryStateUtils.StateEnum.REFUND));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"最开始状态 -----------------------"</span>);</span><br><span class="line">        <span class="keyword">int</span> complexState = <span class="number">0</span>;</span><br><span class="line">        LOGGER.info(<span class="string">"下单状态:&#123;&#125; 推送状态:&#123;&#125; 退款状态:&#123;&#125;"</span>,</span><br><span class="line">                BinaryStateUtils.isOk(complexState, BinaryStateUtils.StateEnum.ORDER),</span><br><span class="line">                BinaryStateUtils.isOk(complexState, BinaryStateUtils.StateEnum.PUSH),</span><br><span class="line">                BinaryStateUtils.isOk(complexState, BinaryStateUtils.StateEnum.REFUND));</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"然后用户下单了 -----------------------"</span>);</span><br><span class="line">        complexState = BinaryStateUtils.setOk(complexState, BinaryStateUtils.StateEnum.ORDER);</span><br><span class="line">        LOGGER.info(<span class="string">"下单状态:&#123;&#125; 推送状态:&#123;&#125; 退款状态:&#123;&#125;"</span>,</span><br><span class="line">                BinaryStateUtils.isOk(complexState, BinaryStateUtils.StateEnum.ORDER),</span><br><span class="line">                BinaryStateUtils.isOk(complexState, BinaryStateUtils.StateEnum.PUSH),</span><br><span class="line">                BinaryStateUtils.isOk(complexState, BinaryStateUtils.StateEnum.REFUND));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"然后用户退款了 -----------------------"</span>);</span><br><span class="line">        complexState = BinaryStateUtils.setOk(complexState, BinaryStateUtils.StateEnum.REFUND);</span><br><span class="line">        LOGGER.info(<span class="string">"下单状态:&#123;&#125; 推送状态:&#123;&#125; 退款状态:&#123;&#125;"</span>,</span><br><span class="line">                BinaryStateUtils.isOk(complexState, BinaryStateUtils.StateEnum.ORDER),</span><br><span class="line">                BinaryStateUtils.isOk(complexState, BinaryStateUtils.StateEnum.PUSH),</span><br><span class="line">                BinaryStateUtils.isOk(complexState, BinaryStateUtils.StateEnum.REFUND));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">19</span>:<span class="number">44.676</span> [main] INFO com.songsy.springboot.test.service.util.BinaryStateUtilsTest - 最开始状态 -----------------------</span><br><span class="line"><span class="number">13</span>:<span class="number">19</span>:<span class="number">44.680</span> [main] INFO com.songsy.springboot.test.service.util.BinaryStateUtilsTest - 下单状态:<span class="keyword">false</span> 推送状态:<span class="keyword">false</span> 退款状态:<span class="keyword">false</span></span><br><span class="line"><span class="number">13</span>:<span class="number">19</span>:<span class="number">44.681</span> [main] INFO com.songsy.springboot.test.service.util.BinaryStateUtilsTest - 然后用户下单了 -----------------------</span><br><span class="line"><span class="number">13</span>:<span class="number">19</span>:<span class="number">44.681</span> [main] INFO com.songsy.springboot.test.service.util.BinaryStateUtilsTest - 下单状态:<span class="keyword">true</span> 推送状态:<span class="keyword">false</span> 退款状态:<span class="keyword">false</span></span><br><span class="line"><span class="number">13</span>:<span class="number">19</span>:<span class="number">44.682</span> [main] INFO com.songsy.springboot.test.service.util.BinaryStateUtilsTest - 然后用户退款了 -----------------------</span><br><span class="line"><span class="number">13</span>:<span class="number">19</span>:<span class="number">44.682</span> [main] INFO com.songsy.springboot.test.service.util.BinaryStateUtilsTest - 下单状态:<span class="keyword">true</span> 推送状态:<span class="keyword">false</span> 退款状态:<span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>利用位运算可以很方便的存放状态，数据库只需存放一个字段，可有效减少过多的变量定义或过多的表字段</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.songshuiyang.com/2018/10/10/backend/java/
      
    
    </summary>
    
      <category term="开发工具" scheme="http://www.songshuiyang.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Java" scheme="http://www.songshuiyang.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>日志脱敏实现工具类</title>
    <link href="http://www.songshuiyang.com/2022/03/01/backend/framework/tools/%E6%97%A5%E5%BF%97%E8%84%B1%E6%95%8F%E5%AE%9E%E7%8E%B0%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://www.songshuiyang.com/2022/03/01/backend/framework/tools/日志脱敏实现工具类/</id>
    <published>2022-03-01T13:30:44.000Z</published>
    <updated>2023-05-02T08:59:39.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li><p>因为线上环境日志跑的都是真实数据，有些手机号及姓名都是用户敏感数据，所以需要对日志进行脱敏</p></li><li><p>平时输出日志都是下面这样，通过序列化工具将用户信息直接打印出来，这样直接暴露了用户信息</p><ul><li><code>LOGGER.debug(&quot;用户信息：{}&quot;, JsonUtils.deserializer(user))</code></li><li><code>用户信息：{&quot;name&quot;:&quot;小刘&quot;,&quot;id&quot;:&quot;1&quot;,&quot;mobile&quot;:&quot;13145671452&quot;}</code></li></ul></li><li><p>所以我们的目标是把用户的敏感信息进行加密打印</p></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><p>定义加密字段注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.ANNOTATION_TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JsonLogIgnore &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将注解放到需要加密的字段，这里我们将手机号加上了此注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonLogIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>定义日志脱敏工具类</p><ul><li>重点关注<code>initObjectMapper</code>方法，这里使用了<code>fasterxml</code>的<code>Introspector</code>拦截器来对日志进行截胡<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songsy.springboot.test.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFilter;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.AnnotationIntrospector;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.PropertyWriter;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.MapProperty;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日志脱敏工具类</span></span><br><span class="line"><span class="comment"> * 1、使用方法在实体类上加上 &#123;<span class="doctag">@link</span> JsonLogIgnore&#125; 注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songshuiyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 11:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonLogUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(JsonLogUtils.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper ignoreNullMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleFilterProvider filterProvider = <span class="keyword">new</span> SimpleFilterProvider();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;String[]&gt; ignoreFieldThreadLocal = <span class="keyword">new</span> InheritableThreadLocal();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonLogUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        recreateInnerObjectMapper(<span class="keyword">new</span> HashMap());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initObjectMapper</span><span class="params">(ObjectMapper objectMapper, Map&lt;String, Object&gt; jsonProperties)</span> </span>&#123;</span><br><span class="line">        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line">        Boolean ignoreNull = (Boolean)jsonProperties.get(<span class="string">"ignoreNull"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ignoreNull != <span class="keyword">null</span> &amp;&amp; ignoreNull) &#123;</span><br><span class="line">            objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SimpleBeanPropertyFilter simpleBeanPropertyFilter = <span class="keyword">new</span> CustomizeLogFilter();</span><br><span class="line">        filterProvider.addFilter(<span class="string">"customizeLogFilter"</span>, simpleBeanPropertyFilter);</span><br><span class="line">        ignoreNullMapper.setFilterProvider(filterProvider);</span><br><span class="line">        ignoreNullMapper.addMixIn(Map.class, CustomFilterMixIn.class);</span><br><span class="line">        AnnotationIntrospector annotationIntrospector = objectMapper.getSerializationConfig().getAnnotationIntrospector();</span><br><span class="line">        AnnotationIntrospector serAnnotationIntrospector = AnnotationIntrospectorPair.pair(annotationIntrospector, <span class="keyword">new</span> LogNopAnnotationIntrospector());</span><br><span class="line">        ignoreNullMapper.setAnnotationIntrospector(serAnnotationIntrospector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">recreateInnerObjectMapper</span><span class="params">(Map&lt;String, Object&gt; jsonProperties)</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        initObjectMapper(objectMapper, jsonProperties);</span><br><span class="line">        mapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">serializable</span><span class="params">(String json, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mapper.readValue(json, clazz);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var3) &#123;</span><br><span class="line">                LOGGER.error(var3.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">serializable</span><span class="params">(String json, TypeReference reference)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mapper.readValue(json, reference);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var3) &#123;</span><br><span class="line">                LOGGER.error(var3.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">deserializer</span><span class="params">(Object json)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ignoreNullMapper.writeValueAsString(json);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException var2) &#123;</span><br><span class="line">                LOGGER.error(var2.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">deserializer</span><span class="params">(Object json, String... ignoreField)</span> </span>&#123;</span><br><span class="line">        String jsonStr = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Objects.isNull(ignoreField)) &#123;</span><br><span class="line">                ignoreFieldThreadLocal.set(ignoreField);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            jsonStr = deserializer(json);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ignoreFieldThreadLocal.remove();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ignoreNullObjectToJson</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> object == <span class="keyword">null</span> ? <span class="keyword">null</span> : ignoreNullMapper.writeValueAsString(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper <span class="title">getMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">deserializerDebugModel</span><span class="params">(Object json, String... ignoreField)</span> </span>&#123;</span><br><span class="line">        String jsonStr = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Objects.isNull(ignoreField)) &#123;</span><br><span class="line">                ignoreFieldThreadLocal.set(ignoreField);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            jsonStr = deserializerDebug(json);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ignoreFieldThreadLocal.remove();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">deserializerDebugModel</span><span class="params">(Object json)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ignoreNullMapper.writeValueAsString(json);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var2) &#123;</span><br><span class="line">                LOGGER.error(var2.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">deserializerDebug</span><span class="params">(Object json)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ignoreNullMapper.writeValueAsString(json);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var2) &#123;</span><br><span class="line">                LOGGER.error(var2.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>工具类其它代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songsy.springboot.test.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songshuiyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 11:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonFilter</span>(<span class="string">"customizeLogFilter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilterMixIn</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomFilterMixIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songsy.springboot.test.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.PropertyWriter;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.MapProperty;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songshuiyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 11:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizeLogFilter</span> <span class="keyword">extends</span> <span class="title">SimpleBeanPropertyFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomizeLogFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">include</span><span class="params">(PropertyWriter writer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (writer <span class="keyword">instanceof</span> MapProperty) &#123;</span><br><span class="line">            MapProperty mapProperty = (MapProperty)writer;</span><br><span class="line">            String name = mapProperty.getName();</span><br><span class="line">            String[] ignoreFields = (String[])JsonLogUtils.ignoreFieldThreadLocal.get();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.equalsAnyIgnoreCase(name, ignoreFields)) &#123;</span><br><span class="line">                mapProperty.setValue(<span class="string">"Mask*****"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.include(writer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songsy.springboot.test.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.introspect.Annotated;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songshuiyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 11:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogNopAnnotationIntrospector</span> <span class="keyword">extends</span> <span class="title">NopAnnotationIntrospector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GET = <span class="string">"get"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogNopAnnotationIntrospector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">findSerializer</span><span class="params">(Annotated am)</span> </span>&#123;</span><br><span class="line">        String[] ignoreFields = (String[])JsonLogUtils.ignoreFieldThreadLocal.get();</span><br><span class="line">        String name = am.getName();</span><br><span class="line">        <span class="keyword">if</span> (ignoreFields != <span class="keyword">null</span> &amp;&amp; !StringUtils.isEmpty(name)) &#123;</span><br><span class="line">            name = name.replace(<span class="string">"get"</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JsonLogIgnore jsonLogIgnore = (JsonLogIgnore)am.getAnnotation(JsonLogIgnore.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.extracted(jsonLogIgnore) &amp;&amp; !StringUtils.equalsAnyIgnoreCase(name, ignoreFields) ? <span class="keyword">null</span> : MaskStdSerializer.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">extracted</span><span class="params">(JsonLogIgnore jsonLogIgnore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jsonLogIgnore == <span class="keyword">null</span> || !jsonLogIgnore.value();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songsy.springboot.test.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationContext;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.deser.std.StdDeserializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songshuiyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 11:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaskStdDeserializer</span> <span class="keyword">extends</span> <span class="title">StdDeserializer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">MaskStdDeserializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mask*****"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songsy.springboot.test.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.StdSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songshuiyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 11:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaskStdSerializer</span> <span class="keyword">extends</span> <span class="title">StdSerializer</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaskStdSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Object.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        jsonGenerator.writeString(<span class="string">"Mask*****"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songshuiyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/3 11:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonLogUtilsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(JsonLogUtilsTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        LogTest user = <span class="keyword">new</span> LogTest();</span><br><span class="line">        user.setId(<span class="string">"1"</span>);</span><br><span class="line">        user.setName(<span class="string">"小刘"</span>);</span><br><span class="line">        user.setMobile(<span class="string">"13145671452"</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.debug(<span class="string">"用户信息：&#123;&#125;"</span>, JsonLogUtils.deserializer(user));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">56</span>:<span class="number">38.553</span> [main] DEBUG com.songsy.springboot.test.JsonLogUtilsTest - 用户信息：&#123;<span class="string">"name"</span>:<span class="string">"小刘"</span>,<span class="string">"id"</span>:<span class="string">"1"</span>,<span class="string">"mobile"</span>:<span class="string">"Mask*****"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/kuangdaoyizhimei/p/15472352.html" target="_blank" rel="noopener">https://www.cnblogs.com/kuangdaoyizhimei/p/15472352.html</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因为线上环境日志跑的都是真实数据，有些手机号及姓名都是用户敏感数据，所以需要对日志进行脱敏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
      <category term="开发工具" scheme="http://www.songshuiyang.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Java" scheme="http://www.songshuiyang.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>动态获取代理对象及实例对象工具类</title>
    <link href="http://www.songshuiyang.com/2022/02/21/backend/framework/tools/%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://www.songshuiyang.com/2022/02/21/backend/framework/tools/动态获取代理对象及实例对象工具类/</id>
    <published>2022-02-21T13:30:44.000Z</published>
    <updated>2023-05-02T08:59:39.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>在<code>Spring</code>实际项目中是不是经常要用<code>SpringUtils.getBean(xxx.getClass())</code>来获取代理对象，有的时候又不想走代理对象，那么这种情况要怎么处理呢</li><li>其实<code>Spring</code>提供了<code>RawTargetAccess</code>类来处理这个问题</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可代理BEAN访问者接口（支持获取代理的真实对象、获取代理对象）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProxyableBeanAccessor</span> &lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">ProxyableBeanAccessor</span>&gt; <span class="keyword">extends</span> <span class="title">RawTargetAccess</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取代理的真实对象（即：未被代理的对象）</span></span><br><span class="line"><span class="comment">     * 注：若调用未被代理的bean的公开方法，则均不会再走AOP切面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 未被代理的对象Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">getReal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前类的代理对象（即：已被代理的对象）</span></span><br><span class="line"><span class="comment">     * 注：若调用已被代理的对象Bean的公开方法，则相关AOP切面均可正常拦截与执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 已被代理的对象Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) SpringUtils.getBean(<span class="keyword">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>使用方法：只需将原来<code>Service</code>的子类或其它可能被切面代理的类 加上实现自<code>ProxyableBeanAccessor</code>即可，然后在这个类里面或外部调用均可通过<code>getReal</code>获得原生对象、<code>getProxy</code>获得代理对象</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/zuowj/p/17279141.html" target="_blank" rel="noopener">https://www.cnblogs.com/zuowj/p/17279141.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;Spring&lt;/code&gt;实际项目中是不是经常要用&lt;code&gt;SpringUtils.getBean(xxx.ge
      
    
    </summary>
    
      <category term="开发工具" scheme="http://www.songshuiyang.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Java" scheme="http://www.songshuiyang.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>进程级事件发布订阅工具类</title>
    <link href="http://www.songshuiyang.com/2022/02/16/backend/framework/tools/%E8%BF%9B%E7%A8%8B%E7%BA%A7%E4%BA%8B%E4%BB%B6%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://www.songshuiyang.com/2022/02/16/backend/framework/tools/进程级事件发布订阅工具类/</id>
    <published>2022-02-16T13:30:44.000Z</published>
    <updated>2023-05-02T08:59:39.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li><code>Jdk1.8</code>推出了函数式接口，函数式接口最大的特点是可以通过<code>Lambda</code>实例化它们，借助<code>Lambda</code>表达式可以将一个函数方法作为一个方法参数进行传递，所以我们可以将一个或多个逻辑放到一个集合里，然后通过调用调用接口暴露的方法来触发对应的逻辑</li></ul><h2 id="饭前小吃"><a href="#饭前小吃" class="headerlink" title="饭前小吃"></a>饭前小吃</h2><ul><li><p>函数式接口（<code>Functional Interface</code>）</p><ul><li>一个接口有且只有一个未实现的方法</li><li>引入了一个新的注解：<code>@FunctionalInterface</code>，表明这个接口是一个函数式接口，编译器会检查是否只有一个未实现的方法，否则报错</li></ul></li><li><p>常用函数式接口</p><ul><li><code>Function&lt;T, R&gt;</code>: 接受一个参数、返回<code>R apply(T t)</code></li><li><code>Consumer</code> ：有输入无输出的<code>void accept(T t)</code>方法</li><li><code>Supplier</code>：有输出无输入的<code>T get()</code>方法</li><li><code>Predicate</code>：返回boolean值的 <code>boolean test(T t)</code> 方法</li><li><code>BiFunction</code>：<code>R apply(T t, U u)</code>2个入参，最后也跟Function一样返回一个结果</li><li><code>其它...</code>：使用基本数据类型（Int,Long,Double,Boolean)情况做了扩展：DoubleConsumer 只消费double数据</li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li>下面代码是利用函数式接口实现事件的发布订阅，从而达到业务解耦、关注点分离的目的</li><li><p>使用场景：</p><ul><li>比如用户下完单后有一系列操作发优惠券，累加积分，常规操作是不是一个接一个方法的逻辑，这样的话我们是不是可以抓住两个地方：<ul><li>1、用户下完单后有个通知操作，达到一个触发的目的</li><li>2、下完单后做什么，我们需要在一个地方将这些逻辑存起来，利用函数式接口就可以将此逻辑存储起来</li></ul></li></ul></li><li><p>带着上面的思路，可以设计一个<code>Map&lt;Class&lt;?&gt;, LinkedList&lt;Consumer&lt;Object&gt;&gt;&gt; eventConsumers</code>集合，<code>key</code>是用于区分是那个事件类型，<code>LinkedList</code>用于存放具体的业务逻辑，我们先把要做的逻辑先put进去，然后再依次执行<code>accept</code>方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songsy.springboot.test.service.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.songsy.springboot.test.service.SpringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义事件发布订阅回调工具类（业务解藕、关注点分离，避免互相依赖）</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * 支持两种模式</span></span><br><span class="line"><span class="comment"> * 1.无返回值：订阅事件消费（register）+ 发布事件消息（publishEvent/publishEventAsync）</span></span><br><span class="line"><span class="comment"> * 2.有返回值：监听回调通知处理（listenCallback）+通知回调（notifyCallback）,通过notifyMessageType+MessageChannel 即可标识唯一的一组通知回调与监听回调处理</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EventPublishSubscribeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(EventPublishSubscribeUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事件消费者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, LinkedList&lt;Consumer&lt;Object&gt;&gt;&gt; eventConsumers = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有返回值的事件消费者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, ConcurrentHashMap&lt;MessageChannel, Function&lt;Object, Object&gt;&gt;&gt; callbackFunction = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EventPublishSubscribeUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册事件回调消费者</span></span><br><span class="line"><span class="comment">     * 用法：EventSubscribeConsumeUtils.register(this::xxxx方法） 或lambda表达式</span></span><br><span class="line"><span class="comment">     * 注意：若回调方法添加了事务注解，则应指派其代理对象的方法来完成回调，如：</span></span><br><span class="line"><span class="comment">     * EventSubscribeConsumeUtils.register((xxxService)SpringUtils.getBean(this.class)::xxxx方法）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eventConsumer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Class&lt;?&gt; eventMessageType, Consumer&lt;Object&gt; eventConsumer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (eventConsumer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Consumer&lt;Object&gt;&gt; eventConsumerItems = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!eventConsumers.containsKey(eventMessageType)) &#123;</span><br><span class="line">            eventConsumers.putIfAbsent(eventMessageType, <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        eventConsumerItems = eventConsumers.get(eventMessageType);</span><br><span class="line"></span><br><span class="line">        eventConsumerItems.add(eventConsumer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消订阅回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eventMessageType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eventConsumer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unRegister</span><span class="params">(Class&lt;?&gt; eventMessageType, Consumer&lt;Object&gt; eventConsumer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!eventConsumers.containsKey(eventMessageType)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Consumer&lt;Object&gt;&gt; eventConsumerItems = eventConsumers.get(eventMessageType);</span><br><span class="line">        <span class="keyword">int</span> eventConsumerIndex = eventConsumerItems.indexOf(eventConsumer);</span><br><span class="line">        <span class="keyword">if</span> (eventConsumerIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        eventConsumerItems.remove(eventConsumerIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布事件，同步触发执行回调事件消费者方法（存在阻塞等待），即事件消息生产者</span></span><br><span class="line"><span class="comment">     * 用法：在需要触发事件消息回调时调用，如：publishEvent(eventMessage);</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eventMessage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(T eventMessage)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; eventMessageType = eventMessage.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!eventConsumers.containsKey(eventMessageType)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Consumer&lt;Object&gt; eventConsumer : eventConsumers.get(eventMessageType)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                eventConsumer.accept(eventMessage);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="comment">// 各个逻辑相互独立</span></span><br><span class="line">                LOGGER.error(<span class="string">"eventConsumer.accept error:&#123;&#125;,eventMessageType:&#123;&#125;,eventMessage:&#123;&#125;"</span>,</span><br><span class="line">                        ex, eventMessageType, eventMessage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布事件，异步触发执行回调事件消费者方法（异步非阻塞），即事件消息生产者</span></span><br><span class="line"><span class="comment">     * 用法：在需要触发事件消息回调时调用，如：publishEventAsync(eventMessage);</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eventMessage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">publishEventAsync</span><span class="params">(<span class="keyword">final</span> T eventMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Executor asyncTaskExecutor = (Executor) SpringUtils.getBean(<span class="string">"asyncTaskExecutor"</span>);</span><br><span class="line">            asyncTaskExecutor.execute(() -&gt; &#123;</span><br><span class="line">                publishEvent(eventMessage);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听回调处理（需要有返回值），即有返回值的回调消费者</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> notifyMessageType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageChannel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callbackFunc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listenCallback</span><span class="params">(Class&lt;?&gt; notifyMessageType, MessageChannel messageChannel, Function&lt;Object, Object&gt; callbackFunc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!callbackFunction.containsKey(notifyMessageType)) &#123;</span><br><span class="line">            callbackFunction.putIfAbsent(notifyMessageType, <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;MessageChannel, Function&lt;Object, Object&gt;&gt; functionMap = callbackFunction.get(notifyMessageType);</span><br><span class="line">        <span class="keyword">if</span> (!functionMap.containsKey(messageChannel)) &#123;</span><br><span class="line">            functionMap.putIfAbsent(messageChannel, callbackFunc);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"该通知消息类型：&#123;&#125;+消息通道：&#123;&#125;，已被订阅监听，重复订阅监听无效！"</span>, notifyMessageType.getSimpleName(), messageChannel.getDescription());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知回调（同步等待获取监听回调的处理结果），即生产者</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> notifyMessage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageChannel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; <span class="function">R <span class="title">notifyCallback</span><span class="params">(Object notifyMessage, MessageChannel messageChannel)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; notifyMessageType = notifyMessage.getClass();</span><br><span class="line"></span><br><span class="line">        Map&lt;MessageChannel, Function&lt;Object, Object&gt;&gt; functionMap = callbackFunction.getOrDefault(notifyMessageType, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (functionMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Function&lt;Object, Object&gt; callbackFunction = functionMap.getOrDefault(messageChannel, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (callbackFunction != <span class="keyword">null</span>) &#123;</span><br><span class="line">                LOGGER.info(<span class="string">"通知回调消息已发布，正在执行回调处理:&#123;&#125;,messageChannel:[&#123;&#125;]"</span>, notifyMessage, messageChannel.getDescription());</span><br><span class="line">                Object result = callbackFunction.apply(notifyMessage);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> (R) result;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassCastException castEx) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(String.format(<span class="string">"监听回调处理后返回值实际类型与发布通知回调待接收的值预期类型不一致，导致类型转换失败：%s,"</span> +</span><br><span class="line">                                    <span class="string">"请确保notifyCallback与listenCallback针对通知消息类型：%s+消息通道：%s返回值类型必需一致。"</span>,</span><br><span class="line">                            castEx.getMessage(), notifyMessageType.getSimpleName(), messageChannel.getDescription()));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义事件发布订阅回调工具类测试类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EventPublishSubscribeUtilsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(EventPublishSubscribeUtilsTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无返回值：订阅事件消费（register）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注册事件回调消费者</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 下单完成了，给用户发优惠券</span></span><br><span class="line">        EventPublishSubscribeUtils.register(OrderEvent.class, (obj) -&gt; &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"给用户发优惠券"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 下单完成了，给用户累加积分</span></span><br><span class="line">        EventPublishSubscribeUtils.register(OrderEvent.class, (obj) -&gt; &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"给用户累加积分"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果在Spring容器中可以使用 @PostConstruct 注册</span></span><br><span class="line"><span class="comment">//        @PostConstruct</span></span><br><span class="line"><span class="comment">//        public void listerEvent()&#123;</span></span><br><span class="line"><span class="comment">//            EventPublishSubscribeUtils.register(OrderEvent.class, (obj) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                // 下单完成了，给用户累加积分</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 发布事件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        EventPublishSubscribeUtils.publishEvent(<span class="keyword">new</span> OrderEvent(<span class="number">1L</span>, <span class="string">"下单已完成"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册事件回调消费者</span></span><br><span class="line">        EventPublishSubscribeUtils.listenCallback(OrderEvent.class,MessageChannel.ORDER, o -&gt; &#123;</span><br><span class="line">            OrderEvent msg=(OrderEvent)o;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下单处理</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回调处理</span></span><br><span class="line">        <span class="keyword">int</span> result = EventPublishSubscribeUtils.notifyCallback(<span class="keyword">new</span> OrderEvent(), MessageChannel.ORDER);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 下单成功</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>通过上面的测试类我们可以发现下单的后续逻辑单独提取处理了且相互独立，下单主流程只要发布一个事件<code>publishEvent</code>即可完成对应的后续业务操作</li><li>备注：<ul><li>上面的<code>event</code>的异常都被吃掉了，需注意在方法体内自己做补偿或者操作日志追踪</li><li><code>MessageChannel</code>可以自定义消息通道，但只能定义一对一的消费模式，因为这种模式下它是有带返回值的</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/liu_shi_jun/article/details/128562977" target="_blank" rel="noopener">https://blog.csdn.net/liu_shi_jun/article/details/128562977</a></li><li><a href="https://www.cnblogs.com/zuowj/p/12810016.html" target="_blank" rel="noopener">https://www.cnblogs.com/zuowj/p/12810016.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Jdk1.8&lt;/code&gt;推出了函数式接口，函数式接口最大的特点是可以通过&lt;code&gt;Lambda&lt;/code&gt;实例
      
    
    </summary>
    
      <category term="开发工具" scheme="http://www.songshuiyang.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Java" scheme="http://www.songshuiyang.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>阿里QLExpress动态脚本引擎解析工具</title>
    <link href="http://www.songshuiyang.com/2022/01/16/backend/framework/tools/%E9%98%BF%E9%87%8CQLExpress%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E5%BC%95%E6%93%8E%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.songshuiyang.com/2022/01/16/backend/framework/tools/阿里QLExpress动态脚本引擎解析工具/</id>
    <published>2022-01-16T13:30:44.000Z</published>
    <updated>2023-04-16T09:31:13.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QLExpress基本语法"><a href="#QLExpress基本语法" class="headerlink" title="QLExpress基本语法"></a>QLExpress基本语法</h1><h1 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h1><p>由阿里的电商业务规则、表达式（布尔组合）、特殊数学公式计算（高精度）、语法分析、脚本二次定制等强需求而设计的一门动态脚本引擎解析工具。<br>在阿里集团有很强的影响力，同时为了自身不断优化、发扬开源贡献精神，于2012年开源。</p><p>QLExpress脚本引擎被广泛应用在阿里的电商业务场景，具有以下的一些特性:</p><ul><li>1、线程安全，引擎运算过程中的产生的临时变量都是threadlocal类型。</li><li>2、高效执行，比较耗时的脚本编译过程可以缓存在本地机器，运行时的临时变量创建采用了缓冲池的技术，和groovy性能相当。</li><li>3、弱类型脚本语言，和groovy，javascript语法类似，虽然比强类型脚本语言要慢一些，但是使业务的灵活度大大增强。</li><li>4、安全控制,可以通过设置相关运行参数，预防死循环、高危系统api调用等情况。</li><li>5、代码精简，依赖最小，250k的jar包适合所有java的运行环境，在android系统的低端pos机也得到广泛运用。</li></ul><h1 id="二、依赖和调用说明"><a href="#二、依赖和调用说明" class="headerlink" title="二、依赖和调用说明"></a>二、依赖和调用说明</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>QLExpress<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>Valine</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ExpressRunner runner = <span class="keyword">new</span> ExpressRunner();</span><br><span class="line">DefaultContext&lt;String, Object&gt; context = <span class="keyword">new</span> DefaultContext&lt;String, Object&gt;();</span><br><span class="line">context.put(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">context.put(<span class="string">"b"</span>, <span class="number">2</span>);</span><br><span class="line">context.put(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line">String express = <span class="string">"a + b * c"</span>;</span><br><span class="line">Object r = runner.execute(express, context, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">System.out.println(r);</span><br></pre></td></tr></table></figure><h1 id="三、项目使用"><a href="#三、项目使用" class="headerlink" title="三、项目使用"></a>三、项目使用</h1><h4 id="ExpressService"><a href="#ExpressService" class="headerlink" title="ExpressService"></a>ExpressService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExpressService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行表达式计算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expressString 表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 计算上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 计算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">execute</span><span class="params">(String expressString, Map&lt;String, Object&gt; context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行表达式计算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expressString 表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valueParam 用以填充的值对象,只支持对象,不能是集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 计算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">execute</span><span class="params">(String expressString, Object valueParam)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressServiceImpl</span> <span class="keyword">implements</span> <span class="title">ExpressService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(ExpressServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ExpressRunner expressRunner;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DynamicParamsUtil.supportDynamicParams = <span class="keyword">true</span>;</span><br><span class="line">        ExpressRunner runner = <span class="keyword">new</span> ExpressRunner(<span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//        Class[] cls = new Class[]&#123;String.class,Integer.class,Integer.class&#125;;</span></span><br><span class="line"><span class="comment">//        runner.addFunctionOfClassMethod(ExpressOperationConstants.SUB_STRING,</span></span><br><span class="line"><span class="comment">//                ExpressStringUtils.class.getName(),</span></span><br><span class="line"><span class="comment">//                ExpressOperationConstants.CUSTOM_SUB_STRING,</span></span><br><span class="line"><span class="comment">//                cls,"substring method error");</span></span><br><span class="line">        expressRunner =  runner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行表达式计算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expressString 表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 计算上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 计算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(String expressString, Map&lt;String, Object&gt; context)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(context,<span class="string">"method execute param context is null"</span>);</span><br><span class="line">        Object value = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(expressString))&#123;</span><br><span class="line">            DefaultContext&lt;String, Object&gt; contextMap = <span class="keyword">new</span> DefaultContext&lt;String, Object&gt;();</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;String,Object&gt; entry : context.entrySet())&#123;</span><br><span class="line">                contextMap.put(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                value = expressRunner.execute(expressString, contextMap, <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                LOGGER.error(<span class="string">"call expressRunner error expressString is : &#123;&#125;, context :&#123;&#125;"</span>, expressString, context, e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">"表达式&#123;%s&#125;计算错误"</span>, expressString));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行表达式计算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expressString 表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valueParam 用以填充的值对象,只支持对象,不能是集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 计算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(String expressString, Object valueParam)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(valueParam,<span class="string">"method execute context valueParam is null"</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> ObjectMapper().convertValue(valueParam, <span class="keyword">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;&#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.execute(expressString,map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(ExpressServiceTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExpressService expressService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecute0</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String express = <span class="string">"3452"</span>;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">"amount1"</span>,<span class="number">0.01</span>);</span><br><span class="line">        map.put(<span class="string">"amount2"</span>,<span class="number">1.10</span>);</span><br><span class="line"></span><br><span class="line">        Object value = <span class="keyword">this</span>.expressService.execute(express, map);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"输出类型:&#123;&#125; 结果:&#123;&#125;"</span>, value.getClass(), value);</span><br><span class="line"></span><br><span class="line">        value = <span class="keyword">this</span>.expressService.execute(express, map);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"输出类型:&#123;&#125; 结果:&#123;&#125;"</span>, value.getClass(), value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecute1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String express = <span class="string">"(amount1+amount2)*100"</span>;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">"amount1"</span>,<span class="number">0.01</span>);</span><br><span class="line">        map.put(<span class="string">"amount2"</span>,<span class="number">1.10</span>);</span><br><span class="line"></span><br><span class="line">        Object value = <span class="keyword">this</span>.expressService.execute(express, map);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"输出类型:&#123;&#125; 结果:&#123;&#125;"</span>, value.getClass(), value);</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="keyword">new</span> BigDecimal(<span class="string">"111.00"</span>), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>详情查看<a href="https://github.com/alibaba/QLExpress#readme" target="_blank" rel="noopener">官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;QLExpress基本语法&quot;&gt;&lt;a href=&quot;#QLExpress基本语法&quot; class=&quot;headerlink&quot; title=&quot;QLExpress基本语法&quot;&gt;&lt;/a&gt;QLExpress基本语法&lt;/h1&gt;&lt;h1 id=&quot;一、背景介绍&quot;&gt;&lt;a href=&quot;#一、背
      
    
    </summary>
    
      <category term="开发工具" scheme="http://www.songshuiyang.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="java" scheme="http://www.songshuiyang.com/tags/java/"/>
    
      <category term="阿里" scheme="http://www.songshuiyang.com/tags/%E9%98%BF%E9%87%8C/"/>
    
      <category term="QLExpress" scheme="http://www.songshuiyang.com/tags/QLExpress/"/>
    
  </entry>
  
  <entry>
    <title>Spring系列(七五)Spring事务之注册执行后处理逻辑</title>
    <link href="http://www.songshuiyang.com/2022/01/02/backend/framework/spring/analysis/Spring%E7%B3%BB%E5%88%97(%E4%B8%83%E4%BA%94)Spring%E4%BA%8B%E5%8A%A1%E4%B9%8B%E6%B3%A8%E5%86%8C%E6%89%A7%E8%A1%8C%E5%90%8E%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91/"/>
    <id>http://www.songshuiyang.com/2022/01/02/backend/framework/spring/analysis/Spring系列(七五)Spring事务之注册执行后处理逻辑/</id>
    <published>2022-01-02T07:04:00.000Z</published>
    <updated>2023-04-29T10:30:13.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>在实际项目开发过程中经常会遇到需要事务提交后处理逻辑，比如保存后执行发消息逻辑，或者通知下游，针对此类情况<code>Spring</code>提供了<code>TransactionSynchronizationManager</code>来帮我们实现这个功能</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="场景使用"><a href="#场景使用" class="headerlink" title="场景使用"></a>场景使用</h3><blockquote><p>1、下面可以可以看到<code>TransactionSynchronizationManager</code>提供了注册同步代码逻辑方法，重写afterCommit即可完成方法逻辑的实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TransactionSynchronizationManager.registerSynchronization(<span class="keyword">new</span> TransactionSynchronization() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         LOGGER.warn(<span class="string">"事务后执行逻辑"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>2、既然知道怎么用了，我们也可以举一反三，如果是事务提交前要额外处理某些事呢，我们来看看这个<code>TransactionSynchronization</code>对象的接口定义，可以看到也提供了很多方法定义，从方法名可以看出来如果你想在事务执行周期节点上做一些自己的额外逻辑，只要实现对应方法即可</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/analysis/tx/TransactionSynchronization.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><ul><li><p>上面是知道怎么用，那具体逻辑是怎么实现的呢，通过对<code>spring</code>源码的通用套路，我们可以猜测其实就是在事务的各个节点中进行埋雷，当程序执行到某个逻辑就会触发想要的逻辑</p></li><li><p>我们进入到<code>TransactionSynchronizationManager.registerSynchronization</code>，可以看到其实就是内部类立马定义了一个线程本地变量，里面有个<code>Set</code>集合来存放我们的额外逻辑</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt; synchronizations =</span><br><span class="line">        <span class="keyword">new</span> NamedThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt;(<span class="string">"Transaction synchronizations"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a new transaction synchronization for the current thread.</span></span><br><span class="line"><span class="comment"> * Typically called by resource management code.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that synchronizations can implement the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.core.Ordered&#125; interface.</span></span><br><span class="line"><span class="comment"> * They will be executed in an order according to their order value (if any).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> synchronization the synchronization object to register</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if transaction synchronization is not active</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.core.Ordered</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerSynchronization</span><span class="params">(TransactionSynchronization synchronization)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(synchronization, <span class="string">"TransactionSynchronization must not be null"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isSynchronizationActive()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Transaction synchronization is not active"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    synchronizations.get().add(synchronization);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对这个<code>synchronizations</code>变量进行方法调用引用，可以看到再包装了一下<code>Collections.unmodifiableList</code>，哈哈防止被别人替换了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an unmodifiable snapshot list of all registered synchronizations</span></span><br><span class="line"><span class="comment"> * for the current thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> unmodifiable List of TransactionSynchronization instances</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if synchronization is not active</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> TransactionSynchronization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;TransactionSynchronization&gt; <span class="title">getSynchronizations</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">    Set&lt;TransactionSynchronization&gt; synchs = synchronizations.get();</span><br><span class="line">    <span class="keyword">if</span> (synchs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Transaction synchronization is not active"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Return unmodifiable snapshot, to avoid ConcurrentModificationExceptions</span></span><br><span class="line">    <span class="comment">// while iterating and invoking synchronization callbacks that in turn</span></span><br><span class="line">    <span class="comment">// might register further synchronizations.</span></span><br><span class="line">    <span class="keyword">if</span> (synchs.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Sort lazily here, not in registerSynchronization.</span></span><br><span class="line">        List&lt;TransactionSynchronization&gt; sortedSynchs = <span class="keyword">new</span> ArrayList&lt;TransactionSynchronization&gt;(synchs);</span><br><span class="line">        AnnotationAwareOrderComparator.sort(sortedSynchs);</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(sortedSynchs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>getSynchronizations()</code> 调用引用可以看到<code>trigger</code>雷的节点</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/analysis/tx/Ts2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><code>org.springframework.transaction.support.TransactionSynchronizationUtils#invokeAfterCommit</code>，逻辑很简单就是拿到雷后依次踩一下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Actually invoke the &#123;<span class="doctag">@code</span> afterCommit&#125; methods of the</span></span><br><span class="line"><span class="comment"> * given Spring TransactionSynchronization objects.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> synchronizations List of TransactionSynchronization objects</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> TransactionSynchronization#afterCommit()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeAfterCommit</span><span class="params">(List&lt;TransactionSynchronization&gt; synchronizations)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (synchronizations != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (TransactionSynchronization synchronization : synchronizations) &#123;</span><br><span class="line">            synchronization.afterCommit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面是<code>org.springframework.transaction.support.AbstractPlatformTransactionManager#processCommit</code>执行事务的过程，注意<code>trigger</code>方法开头的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process an actual commit.</span></span><br><span class="line"><span class="comment"> * Rollback-only flags have already been checked and applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status object representing the transaction</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> TransactionException in case of commit failure</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processCommit</span><span class="params">(DefaultTransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> beforeCompletionInvoked = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            prepareForCommit(status);</span><br><span class="line">            triggerBeforeCommit(status);</span><br><span class="line">            triggerBeforeCompletion(status);</span><br><span class="line">            beforeCompletionInvoked = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">boolean</span> globalRollbackOnly = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (status.isNewTransaction() || isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">                globalRollbackOnly = status.isGlobalRollbackOnly();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">"Releasing transaction savepoint"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                status.releaseHeldSavepoint();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">"Initiating transaction commit"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                doCommit(status);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Throw UnexpectedRollbackException if we have a global rollback-only</span></span><br><span class="line">            <span class="comment">// marker but still didn't get a corresponding exception from commit.</span></span><br><span class="line">            <span class="keyword">if</span> (globalRollbackOnly) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line">                        <span class="string">"Transaction silently rolled back because it has been marked as rollback-only"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (UnexpectedRollbackException ex) &#123;</span><br><span class="line">            <span class="comment">// can only be caused by doCommit</span></span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TransactionException ex) &#123;</span><br><span class="line">            <span class="comment">// can only be caused by doCommit</span></span><br><span class="line">            <span class="keyword">if</span> (isRollbackOnCommitFailure()) &#123;</span><br><span class="line">                doRollbackOnCommitException(status, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class="line">                triggerBeforeCompletion(status);</span><br><span class="line">            &#125;</span><br><span class="line">            doRollbackOnCommitException(status, ex);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class="line">                triggerBeforeCompletion(status);</span><br><span class="line">            &#125;</span><br><span class="line">            doRollbackOnCommitException(status, err);</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Trigger afterCommit callbacks, with an exception thrown there</span></span><br><span class="line">        <span class="comment">// propagated to callers but the transaction still considered as committed.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 事务执行后</span></span><br><span class="line">            triggerAfterCommit(status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        cleanupAfterCompletion(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常场景"><a href="#异常场景" class="headerlink" title="异常场景"></a>异常场景</h3><h4 id="在实际项目中还会遇到这样一种场景就是事务提交后触发额外逻辑，但这个额外逻辑又开启了一个新事务，新事务里面再次registerSynchronization会无效"><a href="#在实际项目中还会遇到这样一种场景就是事务提交后触发额外逻辑，但这个额外逻辑又开启了一个新事务，新事务里面再次registerSynchronization会无效" class="headerlink" title="在实际项目中还会遇到这样一种场景就是事务提交后触发额外逻辑，但这个额外逻辑又开启了一个新事务，新事务里面再次registerSynchronization会无效"></a>在实际项目中还会遇到这样一种场景就是事务提交后触发额外逻辑，但这个额外逻辑又开启了一个新事务，新事务里面再次<code>registerSynchronization</code>会无效</h4><ul><li>我们来看看里面的代码逻辑，里面有这样一个判断<code>status.isNewSynchronization()</code>，里面有个逻辑是就是判断一个<code>boolean</code>值，是否是新的同步</li></ul><blockquote><p>org.springframework.transaction.support.AbstractPlatformTransactionManager#triggerAfterCommit</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> newSynchronization;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Return if a new transaction synchronization has been opened</span></span><br><span class="line"><span class="comment">* for this transaction.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNewSynchronization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.newSynchronization;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Trigger &#123;<span class="doctag">@code</span> afterCommit&#125; callbacks.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status object representing the transaction</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">triggerAfterCommit</span><span class="params">(DefaultTransactionStatus status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status.isNewSynchronization()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Triggering afterCommit synchronization"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        TransactionSynchronizationUtils.triggerAfterCommit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继续跟踪这个变量的取值，这里第一个事务进来的时候<code>synchronizations.get()</code>是为空的，那么<code>newSynchronization</code>则为<code>true</code>，当第二个事务进来的时候<code>synchronizations.get()</code>是不为空的，所以这里<code>isNewSynchronization</code>则为<code>false</code>，所以就不会执行<code>trigger</code>方法了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a TransactionStatus instance for the given arguments.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> DefaultTransactionStatus <span class="title">newTransactionStatus</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        TransactionDefinition definition, Object transaction, <span class="keyword">boolean</span> newTransaction,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> newSynchronization, <span class="keyword">boolean</span> debug, Object suspendedResources)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> actualNewSynchronization = newSynchronization &amp;&amp;</span><br><span class="line">            !TransactionSynchronizationManager.isSynchronizationActive();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultTransactionStatus(</span><br><span class="line">            transaction, newTransaction, actualNewSynchronization,</span><br><span class="line">            definition.isReadOnly(), debug, suspendedResources);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return if transaction synchronization is active for the current thread.</span></span><br><span class="line"><span class="comment"> * Can be called before register to avoid unnecessary instance creation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #registerSynchronization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSynchronizationActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (synchronizations.get() != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h4><ul><li>虽然<code>synchronizations</code>集合会累加同一个线程不同事务的回调对象，但是当第一个事务未回调完成前，这里<code>synchronizations</code>集合还是没被清空的，开启第二个事务时<code>status.isNewSynchronization()</code>都是<code>false</code></li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>将当前的回调方法都添加到本地线程集合中，后续回调均按此集合顺序执行回调逻辑，<code>TransactionCommitExecutor</code>为单例<code>Bean</code>，这样不论注册多少次，均为一个实例对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务提交后逻辑</span></span><br><span class="line"><span class="comment"> * 1、关于在第一个事务的afterCommit回调方法中开启新事务并再次registerSynchronization无效原因</span></span><br><span class="line"><span class="comment"> * 2、old:</span></span><br><span class="line"><span class="comment"> * TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter() &#123;</span></span><br><span class="line"><span class="comment"> *      <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *      public void afterCommit() &#123;</span></span><br><span class="line"><span class="comment"> *          LOGGER.warn("doInsert.afterCommit回调完成");</span></span><br><span class="line"><span class="comment"> *      &#125;</span></span><br><span class="line"><span class="comment"> * &#125;);</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songshuiyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/12/16 11:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionCommitExecutor</span> <span class="keyword">extends</span> <span class="title">TransactionSynchronizationAdapter</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TransactionCommitExecutor.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;List&lt;Runnable&gt;&gt; THREAD_LOCAL_RUNNABLE = <span class="keyword">new</span> ThreadLocal&lt;List&lt;Runnable&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line">            runnable.run();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Runnable&gt; threadRunnables = THREAD_LOCAL_RUNNABLE.get();</span><br><span class="line">        <span class="keyword">if</span> (threadRunnables == <span class="keyword">null</span>) &#123;</span><br><span class="line">            threadRunnables = <span class="keyword">new</span> ArrayList&lt;Runnable&gt;();</span><br><span class="line">            THREAD_LOCAL_RUNNABLE.set(threadRunnables);</span><br><span class="line">            TransactionSynchronizationManager.registerSynchronization(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        threadRunnables.add(runnable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Runnable&gt; threadRunnables = THREAD_LOCAL_RUNNABLE.get();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadRunnables.size(); i++) &#123;</span><br><span class="line">            Runnable runnable = threadRunnables.get(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                runnable.run();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">"AfterCommit to execute runnable fail "</span> + runnable, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        THREAD_LOCAL_RUNNABLE.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在实际项目开发过程中经常会遇到需要事务提交后处理逻辑，比如保存后执行发消息逻辑，或者通知下游，针对此类情况&lt;code&gt;Sprin
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.songshuiyang.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-章节</title>
    <link href="http://www.songshuiyang.com/2021/03/01/backend/database/mysql/45chapter/Mysql-%E7%AB%A0%E8%8A%82/"/>
    <id>http://www.songshuiyang.com/2021/03/01/backend/database/mysql/45chapter/Mysql-章节/</id>
    <published>2021-02-28T16:00:01.000Z</published>
    <updated>2022-02-20T06:23:35.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、索引"><a href="#一、索引" class="headerlink" title="一、索引"></a>一、索引</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、索引&quot;&gt;&lt;a href=&quot;#一、索引&quot; class=&quot;headerlink&quot; title=&quot;一、索引&quot;&gt;&lt;/a&gt;一、索引&lt;/h3&gt;&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h
      
    
    </summary>
    
      <category term="数据库" scheme="http://www.songshuiyang.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Elasticsearch" scheme="http://www.songshuiyang.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch查询笔记</title>
    <link href="http://www.songshuiyang.com/2021/02/01/backend/search/Elasticsearch%E6%9F%A5%E8%AF%A2%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.songshuiyang.com/2021/02/01/backend/search/Elasticsearch查询笔记/</id>
    <published>2021-01-31T16:00:01.000Z</published>
    <updated>2022-02-20T05:30:10.420Z</updated>
    
    <content type="html"><![CDATA[<ul><li>基本查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"bool"</span>: &#123;</span><br><span class="line">            <span class="attr">"must"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"match"</span>: &#123;</span><br><span class="line">                       <span class="attr">"accountingMonth"</span>: <span class="string">"2021-09"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"match"</span>: &#123;</span><br><span class="line">                        <span class="attr">"internalTransactions"</span>:<span class="string">"F"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据时间范围查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"bool"</span>: &#123;</span><br><span class="line">            <span class="attr">"filter"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">                        <span class="attr">"must"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"bool"</span>: &#123;</span><br><span class="line">                                    <span class="attr">"must"</span>: [</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="attr">"range"</span>: &#123;</span><br><span class="line">                                                <span class="attr">"creationDate"</span>: &#123;</span><br><span class="line">                                                    <span class="attr">"from"</span>: <span class="string">"1601481600000"</span>,</span><br><span class="line">                                                    <span class="attr">"to"</span>: <span class="string">"1604159999000"</span>,</span><br><span class="line">                                                    <span class="attr">"include_lower"</span>: <span class="literal">true</span>,</span><br><span class="line">                                                    <span class="attr">"include_upper"</span>: <span class="literal">true</span>,</span><br><span class="line">                                                    <span class="attr">"boost"</span>: <span class="number">1.0</span></span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    ]</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sort"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: &#123;</span><br><span class="line">                <span class="attr">"order"</span>: <span class="string">"asc"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>范围查询(range)</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"age"</span>: &#123;</span><br><span class="line">        <span class="attr">"gte"</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">"lte"</span>: <span class="number">30</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>wildcard 关键字: 通配符查询 ? 用来匹配一个任意字符 * 用来匹配多个任意字符</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"wildcard"</span>: &#123;</span><br><span class="line">      <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"re*"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>布尔查询(bool)</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool 关键字: 用来组合多个条件实现复杂查询 boolb表达式查询</span><br><span class="line">must: 相当于&amp;&amp; 同时成立</span><br><span class="line">should: 相当于|| 成立一个就行</span><br><span class="line">must_not: 相当于! 不能满足任何一个</span><br></pre></td></tr></table></figure><ul><li>排序</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line"><span class="attr">"match"</span>: &#123;</span><br><span class="line"><span class="attr">"mobile"</span>: <span class="string">"13122223333"</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sort"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: &#123;</span><br><span class="line">                <span class="attr">"order"</span>: <span class="string">"asc"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分页</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">20</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查询字段存在</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"bool"</span>: &#123;</span><br><span class="line">            <span class="attr">"must"</span>: &#123;</span><br><span class="line">                <span class="attr">"exists"</span>: &#123;</span><br><span class="line">                    <span class="attr">"field"</span>: <span class="string">"payClassifyCode"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查询字段不存在:包含两种意思<ul><li>1、这条数据根本就没有这个字段</li><li>2、这条数据的字段的值为null</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"bool"</span>: &#123;</span><br><span class="line">            <span class="attr">"must_not"</span>: &#123;</span><br><span class="line">                <span class="attr">"exists"</span>: &#123;</span><br><span class="line">                    <span class="attr">"field"</span>: <span class="string">"payClassifyCode"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查询结果返回指定字段</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">"query"</span>: &#123; <span class="attr">"match_all"</span>: &#123;&#125; &#125;,</span><br><span class="line">      <span class="attr">"_source"</span>: [<span class="string">"name"</span>, <span class="string">"age"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>term 、 terms <ul><li>term用于精确匹配</li><li>terms用于多词条匹配，过滤上使用没有很大区别</li></ul></li></ul><ul><li>聚合查询</li></ul><blockquote><p>avg平均值</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"avg_salary"</span>: &#123;</span><br><span class="line">      <span class="attr">"avg"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>sum 求和</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"sum_salary"</span>: &#123;</span><br><span class="line">      <span class="attr">"sum"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>min, max关键字</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"min_salary"</span>: &#123;</span><br><span class="line">      <span class="attr">"min"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"max_salary"</span>:&#123;</span><br><span class="line">      <span class="attr">"max"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"salary"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;基本查询&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="数据库" scheme="http://www.songshuiyang.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Elasticsearch" scheme="http://www.songshuiyang.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch基本使用</title>
    <link href="http://www.songshuiyang.com/2021/02/01/backend/search/Elasticsearch%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.songshuiyang.com/2021/02/01/backend/search/Elasticsearch基本使用/</id>
    <published>2021-01-31T16:00:01.000Z</published>
    <updated>2023-04-16T09:11:59.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、索引"><a href="#一、索引" class="headerlink" title="一、索引"></a>一、索引</h3><ul><li>创建索引</li></ul><p><code>PUT http://127.0.0.1:9200/book1</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"settings"</span>: &#123;</span><br><span class="line"><span class="attr">"max_inner_result_window"</span>: <span class="string">"50000"</span>,</span><br><span class="line">        <span class="attr">"max_result_window"</span>: <span class="string">"50000"</span>,</span><br><span class="line"><span class="attr">"analysis"</span>: &#123;</span><br><span class="line"><span class="attr">"analyzer"</span>: &#123;</span><br><span class="line"><span class="attr">"ngram_analyzer"</span>: &#123;</span><br><span class="line"><span class="attr">"tokenizer"</span>: <span class="string">"ngram_tokenizer"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"tokenizer"</span>: &#123;</span><br><span class="line"><span class="attr">"ngram_tokenizer"</span>: &#123;</span><br><span class="line"><span class="attr">"token_chars"</span>: [</span><br><span class="line"><span class="string">"letter"</span>,</span><br><span class="line"><span class="string">"digit"</span>,</span><br><span class="line"><span class="string">"punctuation"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"ngram"</span>,</span><br><span class="line"><span class="attr">"max_gram"</span>: <span class="string">"1"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置别名</li></ul><p><code>POST http://127.0.0.1:9200/_aliases</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"actions"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"add"</span>: &#123;</span><br><span class="line"><span class="attr">"index"</span>: <span class="string">"book1"</span>,</span><br><span class="line"><span class="attr">"alias"</span>: <span class="string">"book"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建映射</li></ul><p><code>POST http://127.0.0.1:9200/book1/_mapping/book</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"dynamic"</span>: <span class="string">"false"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"inMonth"</span>: &#123;</span><br><span class="line">            <span class="attr">"null_value"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"number"</span>: &#123;</span><br><span class="line">            <span class="attr">"null_value"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"amount"</span>: &#123;</span><br><span class="line">            <span class="attr">"null_value"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"double"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"accountMonth"</span>: &#123;</span><br><span class="line">            <span class="attr">"null_value"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"accountDate"</span>: &#123;</span><br><span class="line">            <span class="attr">"format"</span>: <span class="string">"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span>,</span><br><span class="line">            <span class="attr">"null_value"</span>: <span class="string">"-62167420800000"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、修改数据"><a href="#二、修改数据" class="headerlink" title="二、修改数据"></a>二、修改数据</h3><ul><li>先创建数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT twitter/doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"jack"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改这个文档，有两种方式，一种是完全替换，使用相同的路径即可，我们修改 age 为 35</li></ul><p><code>PUT index/type/id</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT twitter/doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"jack"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">35</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>还一种更新叫做部分更新，你只需指定要更新的字段和该字段的值即可，不用准备完整的 JSON 文档（注意有<code>doc</code>属性包裹），如下：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST twitter/doc/1/_update</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"doc"</span> : &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"mark"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>删除数据 <code>DELETE twitter/doc/1</code></li></ul><h3 id="三、修改配置"><a href="#三、修改配置" class="headerlink" title="三、修改配置"></a>三、修改配置</h3><p><code>PUT http://127.0.0.1:9200/_settings</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"index"</span>: &#123;</span><br><span class="line">        <span class="attr">"max_result_window"</span>: <span class="number">50000</span>,</span><br><span class="line">        <span class="attr">"max_inner_result_window"</span> : <span class="number">50000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、其它设置"><a href="#四、其它设置" class="headerlink" title="四、其它设置"></a>四、其它设置</h3><ul><li>索引统计 ‘GET /index/_stats’</li></ul><h3 id="五、删除数据"><a href="#五、删除数据" class="headerlink" title="五、删除数据"></a>五、删除数据</h3><p>POST twitter/_delete_by_query</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://elastic-search-in-action.medcl.com/2.basic/elasticsearch_quick_start/" target="_blank" rel="noopener">https://elastic-search-in-action.medcl.com/2.basic/elasticsearch_quick_start/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、索引&quot;&gt;&lt;a href=&quot;#一、索引&quot; class=&quot;headerlink&quot; title=&quot;一、索引&quot;&gt;&lt;/a&gt;一、索引&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;PUT http://127.0.0.1:9200/book1
      
    
    </summary>
    
      <category term="数据库" scheme="http://www.songshuiyang.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Elasticsearch" scheme="http://www.songshuiyang.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch基础概念</title>
    <link href="http://www.songshuiyang.com/2021/02/01/backend/search/Elasticsearch%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>http://www.songshuiyang.com/2021/02/01/backend/search/Elasticsearch基础概念/</id>
    <published>2021-01-31T16:00:00.000Z</published>
    <updated>2022-02-19T10:08:04.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Elasticsearch-是什么"><a href="#Elasticsearch-是什么" class="headerlink" title="Elasticsearch 是什么"></a>Elasticsearch 是什么</h3><ul><li>Elasticsearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的</li></ul><ul><li>对于程序员来说，比较有名的案例是Github，它的搜索就是基于<code>Elasticsearch</code>构建的，在search页面，你可以搜索项目、用户、issue还有代码，可以想象这里面有各种各样的数据且数据量庞大</li></ul><h3 id="Elasticsearch-魅力"><a href="#Elasticsearch-魅力" class="headerlink" title="Elasticsearch 魅力"></a>Elasticsearch 魅力</h3><ul><li>ES在设计时就是为大数据而生的。因此在需要使用集群服务器来索引海量数据时会变得比较容易。扩展性也得到了很大的提升</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a></li><li>《Elasticsearch技术解析与实战》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Elasticsearch-是什么&quot;&gt;&lt;a href=&quot;#Elasticsearch-是什么&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 是什么&quot;&gt;&lt;/a&gt;Elasticsearch 是什么&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Elas
      
    
    </summary>
    
      <category term="数据库" scheme="http://www.songshuiyang.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Elasticsearch" scheme="http://www.songshuiyang.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Spring系列(二六)BeanDefinitionRegistryPostProcessor接口分析</title>
    <link href="http://www.songshuiyang.com/2021/01/15/backend/framework/spring/analysis/Spring%E7%B3%BB%E5%88%97(%E4%BA%8C%E5%85%AD)BeanDefinitionRegistryPostProcessor%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90/"/>
    <id>http://www.songshuiyang.com/2021/01/15/backend/framework/spring/analysis/Spring系列(二六)BeanDefinitionRegistryPostProcessor接口分析/</id>
    <published>2021-01-15T15:01:46.000Z</published>
    <updated>2022-02-19T05:57:07.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><code>BeanDefinitionRegistryPostProcessor</code>继承了<code>BeanFactoryPostProcessor</code>，从前面的文章可以知道 <code>BeanFactoryPostProcessor</code> 是与 <code>BeanDefinition</code> 打交道的，所以通过此类的后置处理方式可以去手动地添加或者删除<code>BeanDefinition</code>，达到偷天换日的目的</li></ul><h2 id="场景应用"><a href="#场景应用" class="headerlink" title="场景应用"></a>场景应用</h2><ul><li>现在有这么一种场景就是需要重构一个<code>Service</code>，但重写这个<code>Service</code>代价比较高，有没有在不改原<code>Service</code>代码的情况下去重构里面的逻辑呢，那边<code>Spring</code>提供的这个接口就可以实现</li></ul><h3 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h3><ul><li>下面是老的<code>Service</code>代码，为了方便举例，所以只简单定义一个<code>Service</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span> <span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"oldName"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在不改原有代码的基础上我们要重写上面的<code>getName</code>方法，就需要新建一个类来写新的逻辑，这里定义了一个新的适配器类，注意这里没有标注<code>@Service</code>，在不更改原有逻辑的基础上将<code>UserService</code> BEAN 替换为 <code>UserServiceAdapter</code> BEAN，实现新逻辑的替换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceAdapter</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"newName"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的类定义新逻辑，下面这个类<code>UserServiceAdapterBeanDefinitionRegistry</code>将实现偷天换日的逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(UserServiceAdapter.class)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(&#123;UserService.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceAdapterBeanDefinitionRegistry</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(UserServiceAdapterBeanDefinitionRegistry.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取老的UserService BeanDefinition</span></span><br><span class="line">        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(UserService.class);</span><br><span class="line">        AbstractBeanDefinition beanDefinition= beanDefinitionBuilder.getBeanDefinition();</span><br><span class="line">        String beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, registry);</span><br><span class="line">        <span class="comment">// 构建新的UserService BeanDefinition</span></span><br><span class="line">        beanDefinitionBuilder =  BeanDefinitionBuilder.genericBeanDefinition(UserServiceAdapter.class);</span><br><span class="line">        beanDefinition = beanDefinitionBuilder.getBeanDefinition();</span><br><span class="line">        beanDefinition.setPrimary(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 注册新bean</span></span><br><span class="line">        registry.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">        LOGGER.info(<span class="string">"UserServiceAdapterBeanDefinitionRegistry.postProcessBeanDefinitionRegistry... UserService -&gt; UserServiceAdapter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动服务后观察日志输出，就可以发现<code>Spring</code>容器会执行上面的后置处理方法，当然执行<code>UserService</code>的<code>getName</code>方法会走到我们的新逻辑上</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>实现<code>BeanDefinitionRegistryPostProcessor</code>接口可以对已有的<code>Bean</code>进行修改，也可以自己添加新的<code>Bean</code></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BeanDefinitionRegistryPostProcessor&lt;/code&gt;继承了&lt;code&gt;BeanFac
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.songshuiyang.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Archaius)动态配置</title>
    <link href="http://www.songshuiyang.com/2021/01/02/backend/framework/spring/spring-cloud/analysis/SpringCloud(Archaius)%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.songshuiyang.com/2021/01/02/backend/framework/spring/spring-cloud/analysis/SpringCloud(Archaius)动态配置/</id>
    <published>2021-01-01T16:05:00.000Z</published>
    <updated>2022-02-17T13:08:52.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Archaius动态配置的实现是启动一个轮询线程去检查配置是否有修改，有修改则更新配置</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(DynamicConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DynamicStringProperty key1 = DynamicPropertyFactory.getInstance().getStringProperty(<span class="string">"key1"</span>, <span class="string">"null"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DynamicIntProperty key2 = DynamicPropertyFactory.getInstance().getIntProperty(<span class="string">"key2"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 随着类的加载而执行，而且只执行一次（注意应用启动不会触发此块逻辑）</span></span><br><span class="line">        LOGGER.info(<span class="string">"DynamicConfig init..."</span>);</span><br><span class="line">        <span class="comment">// 会初始化一个线程的定时线程池去拉取数据</span></span><br><span class="line">        DynamicConfiguration dynamicConfiguration = <span class="keyword">new</span> DynamicConfiguration(<span class="keyword">new</span> DynamicConfig.SystemParameterPolledSource(),</span><br><span class="line">                <span class="keyword">new</span> FixedDelayPollingScheduler(<span class="number">2000</span>, <span class="number">2000</span>, <span class="keyword">false</span>));</span><br><span class="line">        ConfigurationManager.loadPropertiesFromConfiguration(dynamicConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义获取配置源逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemParameterPolledSource</span> <span class="keyword">implements</span> <span class="title">PolledConfigurationSource</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PollResult <span class="title">poll</span><span class="params">(<span class="keyword">boolean</span> b, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用外部查询接口</span></span><br><span class="line">            LOGGER.info(<span class="string">"开始拉取最新配置数据..."</span>);</span><br><span class="line">            map.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">            map.put(<span class="string">"key2"</span>, <span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            PollResult pollResult = PollResult.createIncremental(<span class="keyword">null</span>, map, <span class="keyword">null</span>, System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">return</span> pollResult;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Archaius动态配置的实现是启动一个轮询线程去检查配置是否有修改，有修改则更新配置&lt;/p&gt;
&lt;h4 id=&quot;示例代码&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.songshuiyang.com/categories/SpringCloud/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Archaius" scheme="http://www.songshuiyang.com/tags/Spring-Archaius/"/>
    
  </entry>
  
  <entry>
    <title>Spring系列(七十)Spring事务传播行为</title>
    <link href="http://www.songshuiyang.com/2020/08/02/backend/framework/spring/analysis/Spring%E7%B3%BB%E5%88%97(%E4%B8%83%E5%8D%81)Spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/"/>
    <id>http://www.songshuiyang.com/2020/08/02/backend/framework/spring/analysis/Spring系列(七十)Spring事务传播行为/</id>
    <published>2020-08-01T16:00:00.000Z</published>
    <updated>2020-09-08T13:51:57.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>Spring <code>@Transactional</code> 的注解在日常开发中经常用到，日常都是通过这种形式<code>@Transactional(rollbackFor = Exception.class)</code>来使用，如果遇到一个事务方法内部调用了另一个事务方法，这种情况<code>Spring</code>事务是如何处理的呢？所以就有了事务传播的处理</p></li><li><p>针对上面这种情况，Spring定义了7种事务传播行为：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REQUIRED</span><br><span class="line">SUPPORTS</span><br><span class="line">MANDATORY</span><br><span class="line">REQUIRES_NEW</span><br><span class="line">NOT_SUPPORTED</span><br><span class="line">NEVER</span><br><span class="line">NESTED</span><br></pre></td></tr></table></figure><ul><li>源码定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Propagation &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Support a current transaction, create a new one if none exists.</span></span><br><span class="line"><span class="comment"> * Analogous to EJB transaction attribute of the same name.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is the default setting of a transaction annotation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Support a current transaction, execute non-transactionally if none exists.</span></span><br><span class="line"><span class="comment"> * Analogous to EJB transaction attribute of the same name.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note: For transaction managers with transaction synchronization,</span></span><br><span class="line"><span class="comment"> * PROPAGATION_SUPPORTS is slightly different from no transaction at all,</span></span><br><span class="line"><span class="comment"> * as it defines a transaction scope that synchronization will apply for.</span></span><br><span class="line"><span class="comment"> * As a consequence, the same resources (JDBC Connection, Hibernate Session, etc)</span></span><br><span class="line"><span class="comment"> * will be shared for the entire specified scope. Note that this depends on</span></span><br><span class="line"><span class="comment"> * the actual synchronization configuration of the transaction manager.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.transaction.support.AbstractPlatformTransactionManager#setTransactionSynchronization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Support a current transaction, throw an exception if none exists.</span></span><br><span class="line"><span class="comment"> * Analogous to EJB transaction attribute of the same name.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new transaction, and suspend the current transaction if one exists.</span></span><br><span class="line"><span class="comment"> * Analogous to the EJB transaction attribute of the same name.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; Actual transaction suspension will not work out-of-the-box</span></span><br><span class="line"><span class="comment"> * on all transaction managers. This in particular applies to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.transaction.jta.JtaTransactionManager&#125;,</span></span><br><span class="line"><span class="comment"> * which requires the &#123;<span class="doctag">@code</span> javax.transaction.TransactionManager&#125; to be</span></span><br><span class="line"><span class="comment"> * made available it to it (which is server-specific in standard Java EE).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.transaction.jta.JtaTransactionManager#setTransactionManager</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute non-transactionally, suspend the current transaction if one exists.</span></span><br><span class="line"><span class="comment"> * Analogous to EJB transaction attribute of the same name.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; Actual transaction suspension will not work out-of-the-box</span></span><br><span class="line"><span class="comment"> * on all transaction managers. This in particular applies to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.transaction.jta.JtaTransactionManager&#125;,</span></span><br><span class="line"><span class="comment"> * which requires the &#123;<span class="doctag">@code</span> javax.transaction.TransactionManager&#125; to be</span></span><br><span class="line"><span class="comment"> * made available it to it (which is server-specific in standard Java EE).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.transaction.jta.JtaTransactionManager#setTransactionManager</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute non-transactionally, throw an exception if a transaction exists.</span></span><br><span class="line"><span class="comment"> * Analogous to EJB transaction attribute of the same name.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NEVER(TransactionDefinition.PROPAGATION_NEVER),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute within a nested transaction if a current transaction exists,</span></span><br><span class="line"><span class="comment"> * behave like PROPAGATION_REQUIRED else. There is no analogous feature in EJB.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note: Actual creation of a nested transaction will only work on specific</span></span><br><span class="line"><span class="comment"> * transaction managers. Out of the box, this only applies to the JDBC</span></span><br><span class="line"><span class="comment"> * DataSourceTransactionManager when working on a JDBC 3.0 driver.</span></span><br><span class="line"><span class="comment"> * Some JTA providers might support nested transactions as well.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.jdbc.datasource.DataSourceTransactionManager</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NESTED(TransactionDefinition.PROPAGATION_NESTED);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Propagation(<span class="keyword">int</span> value) &#123; <span class="keyword">this</span>.value = value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.value; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Transactional</code> 的注解使用的是默认的事务传播形式 <code>Propagation propagation() default Propagation.REQUIRED</code></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li><p>现在通过实际例子来看下这些场景，毕竟实践才是检验真理的唯一标准，我们先准备下</p></li><li><p><code>sys_user</code>表</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `sys_user`;</span><br><span class="line">CREATE TABLE `sys_user`  (</span><br><span class="line">  `id` <span class="keyword">int</span>(<span class="number">11</span>) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'id'</span>,</span><br><span class="line">  `username` varchar(<span class="number">30</span>) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT <span class="string">'用户名'</span>,</span><br><span class="line">  `password` varchar(<span class="number">50</span>) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT <span class="string">'密码'</span>,</span><br><span class="line">  `age` <span class="keyword">int</span>(<span class="number">11</span>) NULL DEFAULT NULL,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span> USING BTREE</span></span><br><span class="line"><span class="function">) ENGINE </span>= InnoDB AUTO_INCREMENT = <span class="number">7</span> CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = <span class="string">'用户表'</span> ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>Mybatis定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span> <span class="params">(IUser iUser)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">parameterType</span>=<span class="string">"org.springframework.iframe.entity.IUser"</span>&gt;</span></span><br><span class="line">    insert into sys_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">            id,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">            username,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">            password,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age != null"</span>&gt;</span></span><br><span class="line">            age,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"values ("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">            #&#123;id,jdbcType=INTEGER&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">            #&#123;username,jdbcType=VARCHAR&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">            #&#123;password,jdbcType=VARCHAR&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age != null"</span>&gt;</span></span><br><span class="line">            #&#123;age,jdbcType=INTEGER&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="REQUIRED"><a href="#REQUIRED" class="headerlink" title="REQUIRED"></a>REQUIRED</h3><ul><li>此模式是 <code>@Transactional</code> 的注解的默认的事务传播形式，此模式是如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。</li></ul><h4 id="场景一："><a href="#场景一：" class="headerlink" title="场景一："></a>场景一：</h4><ul><li>测试外层方法没有加事务注解的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IUser iUser1 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser1.setUsername(<span class="string">"小宋1"</span>);</span><br><span class="line">        userService.insert(iUser1);</span><br><span class="line"></span><br><span class="line">        IUser iUser2 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser2.setUsername(<span class="string">"小宋2"</span>);</span><br><span class="line">        userService.insertByException(iUser2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertByException</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassPathXmlApplicationContext xmlApplicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans/applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UserService userService = xmlApplicationContext.getBean(UserService.class);</span><br><span class="line">        userService.insertAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/analysis/tx/tr1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>运行分析<ul><li><code>insertAll()</code>外层方法没有加<code>@Transactional</code>，<code>insert(IUser user)</code>方法和<code>insertByException(IUser user)</code>都加了事务注解</li><li>从上面结果可以看到里层方法都是在自己的事务里运行的，第一个方法插入成功，第二个方法插入失败</li></ul></li></ul><h4 id="场景二："><a href="#场景二：" class="headerlink" title="场景二："></a>场景二：</h4><ul><li>测试外层方法加了事务注解的情况，删除上面新增的sql数据，然后在<code>insertAll()</code>外层方法加<code>@Transactional</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IUser iUser1 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser1.setUsername(<span class="string">"小宋1"</span>);</span><br><span class="line">        userService.insert(iUser1);</span><br><span class="line"></span><br><span class="line">        IUser iUser2 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser2.setUsername(<span class="string">"小宋2"</span>);</span><br><span class="line">        userService.insertByException(iUser2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertByException</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/analysis/tx/tr2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>运行分析<ul><li>可以看到是都没有插入成功，就是里层的事务是和外层的事务绑在一起了</li></ul></li></ul><h4 id="场景三："><a href="#场景三：" class="headerlink" title="场景三："></a>场景三：</h4><ul><li>下面这种场景是<code>userService.insertByException(iUser2)</code>代码块被<code>catch</code>了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IUser iUser1 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser1.setUsername(<span class="string">"小宋1"</span>);</span><br><span class="line">        userService.insert(iUser1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IUser iUser2 = <span class="keyword">new</span> IUser();</span><br><span class="line">            iUser2.setUsername(<span class="string">"小宋2"</span>);</span><br><span class="line">            userService.insertByException(iUser2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"回滚拉"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertByException</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/analysis/tx/tr2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>运行分析<ul><li>可以看到里层事务方法将异常抛出来如果在外层方法里将调用方法catch住，也会触发回滚</li></ul></li></ul><h3 id="REQUIRES-NEW"><a href="#REQUIRES-NEW" class="headerlink" title="REQUIRES_NEW"></a>REQUIRES_NEW</h3><ul><li>这种模式下方法会自己独立开启自己的事务（自己new），不会像<code>REQUIRED</code>模式那样加入到外层事务中，所以外层方法事务和里层方法事务是独立的，互不干扰</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRequiresNewService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRequiresNewService userRequiresNewService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IUser iUser1 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser1.setUsername(<span class="string">"小宋1"</span>);</span><br><span class="line">        userRequiresNewService.insert(iUser1);</span><br><span class="line"></span><br><span class="line">        IUser iUser2 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser2.setUsername(<span class="string">"小宋2"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userRequiresNewService.insertByException(iUser2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"回滚拉"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        IUser iUser3 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser3.setUsername(<span class="string">"小宋3"</span>);</span><br><span class="line">        userRequiresNewService.insert(iUser3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertByException</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/analysis/tx/tr3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>运行分析<ul><li>可以看到外层方法事务和里层方法事务是独立的，互不干扰</li></ul></li></ul><h3 id="NESTED"><a href="#NESTED" class="headerlink" title="NESTED"></a>NESTED</h3><ul><li>这种是嵌套事务，外层方法事务会影响里层嵌套事务</li></ul><h4 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRequiresNestedService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRequiresNestedService userRequiresNewService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IUser iUser1 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser1.setUsername(<span class="string">"小宋1"</span>);</span><br><span class="line">        userRequiresNewService.insert(iUser1);</span><br><span class="line"></span><br><span class="line">        IUser iUser2 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser2.setUsername(<span class="string">"小宋2"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userRequiresNewService.insertByException(iUser2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"回滚拉"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        IUser iUser3 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser3.setUsername(<span class="string">"小宋3"</span>);</span><br><span class="line">        userRequiresNewService.insert(iUser3);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertByException</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/analysis/tx/tr2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>运行分析<ul><li>可以看到外层方法抛出了一个空指针异常，导致里层方法也没有插入成功，就是说外层方法事务会影响里层嵌套事务</li><li></li></ul></li></ul><h4 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h4><ul><li>把上面那种场景将外层方法的空指针异常去掉</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAll1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IUser iUser1 = <span class="keyword">new</span> IUser();</span><br><span class="line">    iUser1.setUsername(<span class="string">"小宋1"</span>);</span><br><span class="line">    userService.insert(iUser1);</span><br><span class="line"></span><br><span class="line">    IUser iUser2 = <span class="keyword">new</span> IUser();</span><br><span class="line">    iUser2.setUsername(<span class="string">"小宋2"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        userService.insertByException(iUser2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"回滚拉"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    IUser iUser3 = <span class="keyword">new</span> IUser();</span><br><span class="line">    iUser3.setUsername(<span class="string">"小宋3"</span>);</span><br><span class="line">    userService.insert(iUser3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">    userMapper.insertSelective(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NESTED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertByException</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">    userMapper.insertSelective(user);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/analysis/tx/tr4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>运行分析<ul><li>可以看到插入了两条语句</li></ul></li></ul><h3 id="NEVER"><a href="#NEVER" class="headerlink" title="NEVER"></a>NEVER</h3><ul><li>以非事务方式执行，如果当前存在事务，则抛出异常</li></ul><h4 id="场景一-1"><a href="#场景一-1" class="headerlink" title="场景一"></a>场景一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRequiresNeverService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRequiresNeverService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IUser iUser1 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser1.setUsername(<span class="string">"小宋1"</span>);</span><br><span class="line">        userService.insert(iUser1);</span><br><span class="line"></span><br><span class="line">        IUser iUser3 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser3.setUsername(<span class="string">"小宋3"</span>);</span><br><span class="line">        userService.insert(iUser3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.NEVER)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.transaction.IllegalTransactionStateException: Existing transaction found for transaction marked with propagation 'never'</span><br><span class="line"></span><br><span class="line">at org.springframework.transaction.support.AbstractPlatformTransactionManager.handleExistingTransaction(AbstractPlatformTransactionManager.java:414)</span><br><span class="line">at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:351)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:459)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:183)</span><br></pre></td></tr></table></figure><ul><li>运行分析<ul><li>可以看到直接抛异常了</li></ul></li></ul><h3 id="MANDATORY"><a href="#MANDATORY" class="headerlink" title="MANDATORY"></a>MANDATORY</h3><ul><li>使用当前的事务，如果当前没有事务，就抛出异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRequiresMandatoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRequiresMandatoryService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IUser iUser1 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser1.setUsername(<span class="string">"小宋1"</span>);</span><br><span class="line">        userService.insert(iUser1);</span><br><span class="line"></span><br><span class="line">        IUser iUser3 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser3.setUsername(<span class="string">"小宋3"</span>);</span><br><span class="line">        userService.insert(iUser3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.MANDATORY)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">org.springframework.transaction.IllegalTransactionStateException: No existing transaction found <span class="keyword">for</span> transaction marked with propagation <span class="string">'mandatory'</span></span><br><span class="line"></span><br><span class="line">at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:<span class="number">363</span>)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:<span class="number">459</span>)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:<span class="number">282</span>)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:<span class="number">98</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">183</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">677</span>)</span><br><span class="line">at org.springframework.iframe.test.transaction.v1.UserRequiresMandatoryService$$EnhancerBySpringCGLIB$$<span class="number">4</span>b2b881a.insert(&lt;generated&gt;)</span><br></pre></td></tr></table></figure><ul><li>运行分析<ul><li>可以看到直接抛异常了</li></ul></li></ul><h3 id="SUPPORTS"><a href="#SUPPORTS" class="headerlink" title="SUPPORTS"></a>SUPPORTS</h3><ul><li>支持当前事务，如果当前没有事务，就以非事务方式执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRequiresSupportsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRequiresSupportsService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IUser iUser1 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser1.setUsername(<span class="string">"小宋1"</span>);</span><br><span class="line">        userService.insert(iUser1);</span><br><span class="line"></span><br><span class="line">        IUser iUser2 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser2.setUsername(<span class="string">"小宋2"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.insertByException(iUser2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"回滚拉"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        IUser iUser3 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser3.setUsername(<span class="string">"小宋3"</span>);</span><br><span class="line">        userService.insert(iUser3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertByException</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</span><br><span class="line"></span><br><span class="line">at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:<span class="number">735</span>)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:<span class="number">518</span>)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:<span class="number">301</span>)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:<span class="number">98</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">183</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">677</span>)</span><br><span class="line">at org.springframework.iframe.test.transaction.v1.UserRequiresSupportsService$$EnhancerBySpringCGLIB$$<span class="number">2</span>a6bf39.insertAll(&lt;generated&gt;)</span><br><span class="line">at org.springframework.iframe.test.transaction.UserRequiredServiceTest.test7(UserRequiredServiceTest.java:<span class="number">59</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod$<span class="number">1</span>.runReflectiveCall(FrameworkMethod.java:<span class="number">50</span>)</span><br><span class="line">at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:<span class="number">12</span>)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:<span class="number">47</span>)</span><br><span class="line">at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:<span class="number">17</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:<span class="number">325</span>)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:<span class="number">78</span>)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:<span class="number">57</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">3</span>.run(ParentRunner.java:<span class="number">290</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">1</span>.schedule(ParentRunner.java:<span class="number">71</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:<span class="number">288</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.access$<span class="number">000</span>(ParentRunner.java:<span class="number">58</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">2</span>.evaluate(ParentRunner.java:<span class="number">268</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.run(ParentRunner.java:<span class="number">363</span>)</span><br><span class="line">at org.junit.runner.JUnitCore.run(JUnitCore.java:<span class="number">137</span>)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:<span class="number">68</span>)</span><br><span class="line">at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:<span class="number">47</span>)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:<span class="number">242</span>)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:<span class="number">70</span>)</span><br></pre></td></tr></table></figure><ul><li>运行分析<ul><li>可以看到是直接回滚了，和REQUIRED区别的话就是不会另外新开事务</li></ul></li></ul><h3 id="NOT-SUPPORTED"><a href="#NOT-SUPPORTED" class="headerlink" title="NOT_SUPPORTED"></a>NOT_SUPPORTED</h3><ul><li>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRequiresNotSupportsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRequiresNotSupportsService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IUser iUser1 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser1.setUsername(<span class="string">"小宋1"</span>);</span><br><span class="line">        userService.insert(iUser1);</span><br><span class="line"></span><br><span class="line">        IUser iUser2 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser2.setUsername(<span class="string">"小宋2"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.insertByException(iUser2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"回滚拉"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        IUser iUser3 = <span class="keyword">new</span> IUser();</span><br><span class="line">        iUser3.setUsername(<span class="string">"小宋3"</span>);</span><br><span class="line">        userService.insert(iUser3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.NOT_SUPPORTED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertByException</span><span class="params">(IUser user)</span></span>&#123;</span><br><span class="line">        userMapper.insertSelective(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/analysis/tx/tr5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>运行分析<ul><li>可以看到<code>insertByException()</code>是没有开启事务，数据都插入进去了</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Spring定义了7种事务传播行为供我们选择，我们可以根据实际业务场景自定义</li></ul><h4 id="REQUIRED-一条绳上的蚂蚱"><a href="#REQUIRED-一条绳上的蚂蚱" class="headerlink" title="REQUIRED 一条绳上的蚂蚱"></a>REQUIRED 一条绳上的蚂蚱</h4><ul><li><p>意思是必须，必须在事务环境中，如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中，这种是默认的传播策略</p></li><li><p>外层事务方法如果调用了其他事务方法，里层方法就会加入到这个外层方法的事务中去，如果里层方法抛出了异常会影响到整个事务</p></li><li><p>外层非事务方法如果调用了其他事务方法，当前没有事务那么这个里层方法会自己新开事务</p></li></ul><h4 id="REQUIRES-NEW-另起炉灶"><a href="#REQUIRES-NEW-另起炉灶" class="headerlink" title="REQUIRES_NEW 另起炉灶"></a>REQUIRES_NEW 另起炉灶</h4><ul><li><p>这种是新建一个事务，管你有没有，都自己搞，里层事务和外层事务独立互不干扰</p></li><li><p>如果有一个现有事务正在运行的话，则它将在当前方法运行期间被挂起</p></li></ul><h4 id="NESTED-国与省的关系"><a href="#NESTED-国与省的关系" class="headerlink" title="NESTED 国与省的关系"></a>NESTED 国与省的关系</h4><ul><li>这种是嵌套事务</li><li>里层事务可以独立回滚</li><li>因为是嵌入模式所以会受到外层方法事务的影响，如果外层方法抛出了异常会影响到里层方法事务</li></ul><h4 id="NEVER-不能有，拒绝"><a href="#NEVER-不能有，拒绝" class="headerlink" title="NEVER 不能有，拒绝"></a>NEVER 不能有，拒绝</h4><ul><li>以非事务方式执行，如果当前有事务，则抛出异常</li></ul><h4 id="MANDATORY-不能没有，强制"><a href="#MANDATORY-不能没有，强制" class="headerlink" title="MANDATORY 不能没有，强制"></a>MANDATORY 不能没有，强制</h4><ul><li>意思是强制，表示该方法必须运行在一个事务中，会使用当前的事务，如果当前没有事务，就抛出异常</li></ul><h4 id="SUPPORTS-墙头草"><a href="#SUPPORTS-墙头草" class="headerlink" title="SUPPORTS 墙头草"></a>SUPPORTS 墙头草</h4><ul><li><p>支持当前事务，如果当前没有事务，就以非事务方式执行</p></li><li><p>和REQUIRED区别的话就是不会另外新开事务</p></li></ul><h4 id="NOT-SUPPORTED-无所谓"><a href="#NOT-SUPPORTED-无所谓" class="headerlink" title="NOT_SUPPORTED 无所谓"></a>NOT_SUPPORTED 无所谓</h4><ul><li><p>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</p></li><li><p>和NEVER区别就是不会抛异常</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Spring &lt;code&gt;@Transactional&lt;/code&gt; 的注解在日常开发中经常用到，日常都是通过这种形式&lt;c
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.songshuiyang.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring系列(七十)Spring声明式事务无效的场景</title>
    <link href="http://www.songshuiyang.com/2020/08/02/backend/framework/spring/analysis/Spring%E7%B3%BB%E5%88%97(%E4%B8%83%E5%8D%81)Spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%97%A0%E6%95%88%E7%9A%84%E5%9C%BA%E6%99%AF/"/>
    <id>http://www.songshuiyang.com/2020/08/02/backend/framework/spring/analysis/Spring系列(七十)Spring声明式事务无效的场景/</id>
    <published>2020-08-01T16:00:00.000Z</published>
    <updated>2020-09-03T13:26:59.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>在开发过程中，可能会遇到使用 <code>@Transactional</code> 进行事务管理时出现失效的情况，这里梳理下失效场景</li></ul><h2 id="梳理"><a href="#梳理" class="headerlink" title="梳理"></a>梳理</h2><ul><li>数据库存储引擎问题<ul><li>MyISAM 不支持事务，改成 InnoDB 引擎则支持事务</li></ul></li><li><p>方法访问修饰符问题</p><ul><li>注解 @Trasactional 只能加在 public 修饰的方法上事务才起效。如果加在 protect、private 等非 public 修饰的方法上，事务将失效。</li><li>因为Spring声明式事务是通过动态代理来实现的，private方法不能被继承，final方法不能被重写，static方法和继承不相干，所以它们3个的事务不起作用</li><li>public方法，protected方法可以被重写以添加事务代码</li></ul></li><li><p>方法异常处理问题</p><ul><li>如果在开启了事务的方法内，使用了 try-catch 语句块对异常进行了捕获，而没有将异常抛到外层，事务将不起效。</li><li>@Trasactional 只对运行时异常处理，不会对编译型异常回滚，所以一般在项目中需要加上这个<code>@Transactional(rollbackFor = Exception.class)</code></li></ul></li><li><p>一个类中的方法调用</p><ul><li>是否发生了自调用，只有当事务方法被当前类以外的代码调用时，才会由 spring 生成代理对象管理事务；（在当前类中调用事务方法，因为没有经过spring的代理类，默认只有在外部调用才会生效）</li><li>同一个类中，methodA 没有设置事务，methodB 设置了事务，methodA 调用 methodB 时，事务失效；</li><li>事务无效示例1:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        updateOrder(order);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// update order</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Spring 团队建议在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。在接口上使用 @Transactional 注解，只能当你设置了基于接口的代理时它才生效。因为注解是不能继承的，这就意味着如果正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/98357492" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/98357492</a></li><li><a href="https://blog.csdn.net/qq_36204764/article/details/105807023" target="_blank" rel="noopener">https://blog.csdn.net/qq_36204764/article/details/105807023</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在开发过程中，可能会遇到使用 &lt;code&gt;@Transactional&lt;/code&gt; 进行事务管理时出现失效的情况，这里梳理下失
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.songshuiyang.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Feign)工作原理及源码分析</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Feign)%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Feign)工作原理及源码分析/</id>
    <published>2019-08-06T16:06:01.000Z</published>
    <updated>2019-09-16T13:11:05.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>上一章节我们知道<code>SpringCloudFeign</code>基于接口来实现调用，那我们要知道它是怎么实现的，我们可以通过断点来一步步跟进，因为接口是不能具体执行任务，所以我们可以猜测是采用动态代理来实现的，应该和<code>Mybatis</code>的<code>Mapper</code>接口的工作原理差不多</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>我们先在<code>AuthenticationFilter</code>的下面这行打好断点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用sso服务鉴权</span></span><br><span class="line">resModel = ssoClient.checkToken(<span class="keyword">new</span> TokenMO(token));</span><br></pre></td></tr></table></figure><ul><li>然后进入方法体<code>feign.ReflectiveFeign.FeignInvocationHandler#invoke()</code>，果不其然，看见<code>FeignInvocationHandler</code>这个类实现了<code>InvocationHandler</code>接口就可以知道是使用了<code>JDK</code>的动态代理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Target target;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MethodHandler&gt; dispatch;</span><br><span class="line"></span><br><span class="line">FeignInvocationHandler(Target target, Map&lt;Method, MethodHandler&gt; dispatch) &#123;</span><br><span class="line">  <span class="keyword">this</span>.target = checkNotNull(target, <span class="string">"target"</span>);</span><br><span class="line">  <span class="keyword">this</span>.dispatch = checkNotNull(dispatch, <span class="string">"dispatch for %s"</span>, target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="comment">// 执行equals()方法</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"equals"</span>.equals(method.getName())) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Object</span><br><span class="line">          otherHandler =</span><br><span class="line">          args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] != <span class="keyword">null</span> ? Proxy.getInvocationHandler(args[<span class="number">0</span>]) : <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">return</span> equals(otherHandler);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"hashCode"</span>.equals(method.getName())) &#123;</span><br><span class="line">    <span class="comment">// 执行hashCode()方法</span></span><br><span class="line">    <span class="keyword">return</span> hashCode();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"toString"</span>.equals(method.getName())) &#123;</span><br><span class="line">    <span class="comment">// 执行toString()方法</span></span><br><span class="line">    <span class="keyword">return</span> toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dispatch.get(method).invoke(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> FeignInvocationHandler) &#123;</span><br><span class="line">    FeignInvocationHandler other = (FeignInvocationHandler) obj;</span><br><span class="line">    <span class="keyword">return</span> target.equals(other.target);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> target.hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> target.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到实际上调用了<code>dispatch.get(method).invoke(args);</code>方法，<code>dispatch</code>是个<code>Map</code>里面存的两个<code>MethodHandler</code>就是对应我们上一章节定义的<code>SsoClient</code>的两个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MethodHandler&gt; dispatch;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/feign/feign-method.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>继续跳入，我们来到<code>feign.SynchronousMethodHandler#invoke()</code>方法，可以看到根据方法参数构造了一个<code>RequestTemplate</code>对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    RequestTemplate template = buildTemplateFromArgs.create(argv);</span><br><span class="line">    Retryer retryer = <span class="keyword">this</span>.retryer.clone();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executeAndDecode(template);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">        retryer.continueOrPropagate(e);</span><br><span class="line">        <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">          logger.logRetry(metadata.configKey(), logLevel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继续跳入<code>executeAndDecode(template);</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">executeAndDecode</span><span class="params">(RequestTemplate template)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="comment">// 请求Request对象</span></span><br><span class="line">  Request request = targetRequest(template);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">    logger.logRequest(metadata.configKey(), logLevel, request);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 结果Response对象</span></span><br><span class="line">  Response response;</span><br><span class="line">  <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    response = client.execute(request, options);</span><br><span class="line">    <span class="comment">// ensure the request is set. <span class="doctag">TODO:</span> remove in Feign 10</span></span><br><span class="line">    response.toBuilder().request(request).build();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime(start));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> errorExecuting(request, e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> elapsedTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> shouldClose = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      response =</span><br><span class="line">          logger.logAndRebufferResponse(metadata.configKey(), logLevel, response, elapsedTime);</span><br><span class="line">      <span class="comment">// ensure the request is set. <span class="doctag">TODO:</span> remove in Feign 10</span></span><br><span class="line">      response.toBuilder().request(request).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Response.class == metadata.returnType()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.body() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (response.body().length() == <span class="keyword">null</span> ||</span><br><span class="line">              response.body().length() &gt; MAX_RESPONSE_BUFFER_SIZE) &#123;</span><br><span class="line">        shouldClose = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Ensure the response body is disconnected</span></span><br><span class="line">      <span class="keyword">byte</span>[] bodyData = Util.toByteArray(response.body().asInputStream());</span><br><span class="line">      <span class="keyword">return</span> response.toBuilder().body(bodyData).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (response.status() &gt;= <span class="number">200</span> &amp;&amp; response.status() &lt; <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">void</span>.class == metadata.returnType()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decode(response);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (decode404 &amp;&amp; response.status() == <span class="number">404</span> &amp;&amp; <span class="keyword">void</span>.class != metadata.returnType()) &#123;</span><br><span class="line">      <span class="keyword">return</span> decode(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> errorDecoder.decode(metadata.configKey(), response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> errorReading(request, response, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldClose) &#123;</span><br><span class="line">      ensureClosed(response.body());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/feign/feign-loadBalancer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>我们关注<code>response = client.execute(request, options);</code>方法，这里<code>client</code>我们由上一张图可以看到是<code>LoadBalancerFeignClient</code>，这里的设计和之前的<code>Ribbon</code>的<code>IClient</code>类似</p></li><li><p>这个方法位于<code>org.springframework.cloud.netflix.feign.ribbon.LoadBalancerFeignClient</code>，见方法名可以知道是要实现负载均衡</p></li><li><p>下面的方法我们可以知道主体逻辑是调用<code>com.netflix.client.AbstractLoadBalancerAwareClient#executeWithLoadBalancer(S, com.netflix.client.config.IClientConfig)</code>，这个类及方法是不是有点熟悉，没错和我们之前分析<code>Ribbon</code>实现负载均衡的执行的方法是一样的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>   </span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        URI asUri = URI.create(request.url());</span><br><span class="line">        String clientName = asUri.getHost();</span><br><span class="line">        URI uriWithoutHost = cleanUrl(request.url(), clientName);</span><br><span class="line">        FeignLoadBalancer.RibbonRequest ribbonRequest = <span class="keyword">new</span> FeignLoadBalancer.RibbonRequest(</span><br><span class="line">                <span class="keyword">this</span>.delegate, request, uriWithoutHost);</span><br><span class="line"></span><br><span class="line">        IClientConfig requestConfig = getClientConfig(options, clientName);</span><br><span class="line">        <span class="comment">// 开始负载均衡处理了</span></span><br><span class="line">        <span class="keyword">return</span> lbClient(clientName).executeWithLoadBalancer(ribbonRequest,</span><br><span class="line">                requestConfig).toResponse();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">        IOException io = findIOException(e);</span><br><span class="line">        <span class="keyword">if</span> (io != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> io;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们这里关注<code>lbClient(clientName)</code>方法，这个方法是构造<code>FeignLoadBalancer</code>，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> FeignLoadBalancer <span class="title">lbClient</span><span class="params">(String clientName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.lbClientFactory.create(clientName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>FeignLoadBalancer</code></p><ul><li><p>类成员变量及主要方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignLoadBalancer</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">        <span class="title">AbstractLoadBalancerAwareClient</span>&lt;<span class="title">FeignLoadBalancer</span>.<span class="title">RibbonRequest</span>, <span class="title">FeignLoadBalancer</span>.<span class="title">RibbonResponse</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> connectTimeout;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> readTimeout;</span><br><span class="line">    <span class="keyword">protected</span> IClientConfig clientConfig;</span><br><span class="line">    <span class="keyword">protected</span> ServerIntrospector serverIntrospector;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FeignLoadBalancer</span><span class="params">(ILoadBalancer lb, IClientConfig clientConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ServerIntrospector serverIntrospector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(lb, clientConfig);</span><br><span class="line">        <span class="keyword">this</span>.setRetryHandler(RetryHandler.DEFAULT);</span><br><span class="line">        <span class="keyword">this</span>.clientConfig = clientConfig;</span><br><span class="line">        <span class="keyword">this</span>.connectTimeout = clientConfig.get(CommonClientConfigKey.ConnectTimeout);</span><br><span class="line">        <span class="keyword">this</span>.readTimeout = clientConfig.get(CommonClientConfigKey.ReadTimeout);</span><br><span class="line">        <span class="keyword">this</span>.serverIntrospector = serverIntrospector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RibbonResponse <span class="title">execute</span><span class="params">(RibbonRequest request, IClientConfig configOverride)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request.Options options;</span><br><span class="line">        <span class="keyword">if</span> (configOverride != <span class="keyword">null</span>) &#123;</span><br><span class="line">            options = <span class="keyword">new</span> Request.Options(</span><br><span class="line">                    configOverride.get(CommonClientConfigKey.ConnectTimeout,</span><br><span class="line">                            <span class="keyword">this</span>.connectTimeout),</span><br><span class="line">                    (configOverride.get(CommonClientConfigKey.ReadTimeout,</span><br><span class="line">                            <span class="keyword">this</span>.readTimeout)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            options = <span class="keyword">new</span> Request.Options(<span class="keyword">this</span>.connectTimeout, <span class="keyword">this</span>.readTimeout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行请求</span></span><br><span class="line">        Response response = request.client().execute(request.toRequest(), options);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RibbonResponse(request.getUri(), response);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>类继承关系图<br><img src="/images/server/spring/spring-cloud/feign/FeignLoadBalancer.png" alt=""></p></li></ul></li></ul><ul><li><p>由上图我们看到<code>FeignLoadBalancer</code>继承了<code>Ribbon</code>的<code>AbstractLoadBalancerAwareClient</code>， 这个类是<code>Ribbon</code>执行请求客户端</p></li><li><p>我们现在来看是怎么构建<code>FeignLoadBalancer</code>的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FeignLoadBalancer <span class="title">create</span><span class="params">(String clientName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里做了缓存处理</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cache.containsKey(clientName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.cache.get(clientName);</span><br><span class="line">    &#125;</span><br><span class="line">    IClientConfig config = <span class="keyword">this</span>.factory.getClientConfig(clientName);</span><br><span class="line">    ILoadBalancer lb = <span class="keyword">this</span>.factory.getLoadBalancer(clientName);</span><br><span class="line">    ServerIntrospector serverIntrospector = <span class="keyword">this</span>.factory.getInstance(clientName, ServerIntrospector.class);</span><br><span class="line">    FeignLoadBalancer client = enableRetry ? <span class="keyword">new</span> RetryableFeignLoadBalancer(lb, config, serverIntrospector,</span><br><span class="line">        loadBalancedRetryPolicyFactory, loadBalancedBackOffPolicyFactory, loadBalancedRetryListenerFactory) : <span class="keyword">new</span> FeignLoadBalancer(lb, config, serverIntrospector);</span><br><span class="line">    <span class="keyword">this</span>.cache.put(clientName, client);</span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/feign/feign-feignLoadBalancer.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>由上图我们可以看到之前设置的连接超时时间及读取超时时间及重试参数，同时还构造了<code>Ribbon</code>的<code>IClientConfig客户端配置</code>及<code>ILoadBalancer负载均衡器</code>对象，<code>I</code>字母开头</li></ul><ul><li>继续跳入<code>executeWithLoadBalancer</code>方法，进入到<code>com.netflix.client.AbstractLoadBalancerAwareClient</code>类中，到这里<code>Feign</code>就把负载均衡及重试工作给<code>Ribbon</code>了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">executeWithLoadBalancer</span><span class="params">(<span class="keyword">final</span> S request, <span class="keyword">final</span> IClientConfig requestConfig)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">    LoadBalancerCommand&lt;T&gt; command = buildLoadBalancerCommand(request, requestConfig);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> command.submit(</span><br><span class="line">            <span class="keyword">new</span> ServerOperation&lt;T&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Server server)</span> </span>&#123;</span><br><span class="line">                    URI finalUri = reconstructURIWithServer(server, request.getUri());</span><br><span class="line">                    S requestForServer = (S) request.replaceUri(finalUri);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> Observable.just(AbstractLoadBalancerAwareClient.<span class="keyword">this</span>.execute(requestForServer, requestConfig));</span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .toBlocking()</span><br><span class="line">            .single();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Throwable t = e.getCause();</span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> ClientException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (ClientException) t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的<code>return Observable.just(AbstractLoadBalancerAwareClient.this.execute(requestForServer, requestConfig));</code>会调用我们的<code>FeignLoadBalancer</code>的<code>execute()</code>方法，这里完成请求处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RibbonResponse <span class="title">execute</span><span class="params">(RibbonRequest request, IClientConfig configOverride)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Request.Options options;</span><br><span class="line">    <span class="keyword">if</span> (configOverride != <span class="keyword">null</span>) &#123;</span><br><span class="line">        options = <span class="keyword">new</span> Request.Options(</span><br><span class="line">                configOverride.get(CommonClientConfigKey.ConnectTimeout,</span><br><span class="line">                        <span class="keyword">this</span>.connectTimeout),</span><br><span class="line">                (configOverride.get(CommonClientConfigKey.ReadTimeout,</span><br><span class="line">                        <span class="keyword">this</span>.readTimeout)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        options = <span class="keyword">new</span> Request.Options(<span class="keyword">this</span>.connectTimeout, <span class="keyword">this</span>.readTimeout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    Response response = request.client().execute(request.toRequest(), options);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RibbonResponse(request.getUri(), response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>feign.Client.Default#execute()</code>方法，可以看到使用了<code>java.net.HttpURLConnection</code>发送请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">(Request request, Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">// 包装参数及发送请求</span></span><br><span class="line">  HttpURLConnection connection = convertAndSend(request, options);</span><br><span class="line">  <span class="keyword">return</span> convertResponse(connection).toBuilder().request(request).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HttpURLConnection <span class="title">convertAndSend</span><span class="params">(Request request, Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> HttpURLConnection</span><br><span class="line">      connection =</span><br><span class="line">      (HttpURLConnection) <span class="keyword">new</span> URL(request.url()).openConnection();</span><br><span class="line">  <span class="keyword">if</span> (connection <span class="keyword">instanceof</span> HttpsURLConnection) &#123;</span><br><span class="line">    HttpsURLConnection sslCon = (HttpsURLConnection) connection;</span><br><span class="line">    <span class="keyword">if</span> (sslContextFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">      sslCon.setSSLSocketFactory(sslContextFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hostnameVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">      sslCon.setHostnameVerifier(hostnameVerifier);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  connection.setConnectTimeout(options.connectTimeoutMillis());</span><br><span class="line">  connection.setReadTimeout(options.readTimeoutMillis());</span><br><span class="line">  connection.setAllowUserInteraction(<span class="keyword">false</span>);</span><br><span class="line">  connection.setInstanceFollowRedirects(<span class="keyword">true</span>);</span><br><span class="line">  connection.setRequestMethod(request.method());</span><br><span class="line"></span><br><span class="line">  Collection&lt;String&gt; contentEncodingValues = request.headers().get(CONTENT_ENCODING);</span><br><span class="line">  <span class="keyword">boolean</span></span><br><span class="line">      gzipEncodedRequest =</span><br><span class="line">      contentEncodingValues != <span class="keyword">null</span> &amp;&amp; contentEncodingValues.contains(ENCODING_GZIP);</span><br><span class="line">  <span class="keyword">boolean</span></span><br><span class="line">      deflateEncodedRequest =</span><br><span class="line">      contentEncodingValues != <span class="keyword">null</span> &amp;&amp; contentEncodingValues.contains(ENCODING_DEFLATE);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> hasAcceptHeader = <span class="keyword">false</span>;</span><br><span class="line">  Integer contentLength = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (String field : request.headers().keySet()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (field.equalsIgnoreCase(<span class="string">"Accept"</span>)) &#123;</span><br><span class="line">      hasAcceptHeader = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String value : request.headers().get(field)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (field.equals(CONTENT_LENGTH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!gzipEncodedRequest &amp;&amp; !deflateEncodedRequest) &#123;</span><br><span class="line">          contentLength = Integer.valueOf(value);</span><br><span class="line">          connection.addRequestProperty(field, value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        connection.addRequestProperty(field, value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Some servers choke on the default accept string.</span></span><br><span class="line">  <span class="keyword">if</span> (!hasAcceptHeader) &#123;</span><br><span class="line">    connection.addRequestProperty(<span class="string">"Accept"</span>, <span class="string">"*/*"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.body() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (contentLength != <span class="keyword">null</span>) &#123;</span><br><span class="line">      connection.setFixedLengthStreamingMode(contentLength);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      connection.setChunkedStreamingMode(<span class="number">8196</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    connection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">    OutputStream out = connection.getOutputStream();</span><br><span class="line">    <span class="keyword">if</span> (gzipEncodedRequest) &#123;</span><br><span class="line">      out = <span class="keyword">new</span> GZIPOutputStream(out);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deflateEncodedRequest) &#123;</span><br><span class="line">      out = <span class="keyword">new</span> DeflaterOutputStream(out);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      out.write(request.body());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        out.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException suppressed) &#123; <span class="comment">// NOPMD</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>由上面<code>convertAndSend(request, options)</code>方法只看到了组装参数，但是发现并没有执行发送请求，而且<code>responseCode = -1</code>，那么是在哪里调用的，查看<a href="https://blog.csdn.net/w690333243/article/details/53097485/" target="_blank" rel="noopener">网上资料</a>发现<code>HttpURLConnection</code>的使用有点特殊</p><ul><li>关于要不要显示调用<code>connect()</code>方法的问题： <ul><li>1、不需要显示调用<code>connect</code>方法 </li><li>2、必须调用<code>getResponseCode()</code>方法<ul><li>试了一下在不调用<code>getResponseCode()</code>方法的时候，无论是否调用<code>connect()</code>方法，请求都是不能成功的，调用<code>connect()</code>方法只是建立连接，并不会向服务器传递数据</li><li>只有调用<code>getRespconseCode()</code>方法时，才会向服务器传递数据(有博文说是<code>getInputStream()</code>才会向服务器传递数据，<code>getResponseCode</code>中会调用<code>getInputStream</code>方法)。跟着<code>getResponseCode()</code>源码发现里面调用了<code>getInputStream()</code>方法，在<code>getInputStream()</code>方法中会判断当前是否连接，如果没有连接，则调用<code>connect()</code>方法建立连接。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResponseCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * We're got the response code already</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (responseCode != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> responseCode;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Ensure that we have connected to the server. Record</span></span><br><span class="line"><span class="comment">     * exception as we need to re-throw it if there isn't</span></span><br><span class="line"><span class="comment">     * a status line.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Exception exc = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里面会建立连接并发送请求</span></span><br><span class="line">        getInputStream();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        exc = e;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If we can't a status-line then re-throw any exception</span></span><br><span class="line"><span class="comment">     * that getInputStream threw.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String statusLine = getHeaderField(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (statusLine == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exc != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exc <span class="keyword">instanceof</span> RuntimeException)</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException)exc;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">throw</span> (IOException)exc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Examine the status-line - should be formatted as per</span></span><br><span class="line"><span class="comment">     * section 6.1 of RFC 2616 :-</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If status line can't be parsed return -1.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (statusLine.startsWith(<span class="string">"HTTP/1."</span>)) &#123;</span><br><span class="line">        <span class="keyword">int</span> codePos = statusLine.indexOf(<span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">if</span> (codePos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">int</span> phrasePos = statusLine.indexOf(<span class="string">' '</span>, codePos+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (phrasePos &gt; <span class="number">0</span> &amp;&amp; phrasePos &lt; statusLine.length()) &#123;</span><br><span class="line">                responseMessage = statusLine.substring(phrasePos+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// deviation from RFC 2616 - don't reject status line</span></span><br><span class="line">            <span class="comment">// if SP Reason-Phrase is not included.</span></span><br><span class="line">            <span class="keyword">if</span> (phrasePos &lt; <span class="number">0</span>)</span><br><span class="line">                phrasePos = statusLine.length();</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                responseCode = Integer.parseInt</span><br><span class="line">                        (statusLine.substring(codePos+<span class="number">1</span>, phrasePos));</span><br><span class="line">                <span class="keyword">return</span> responseCode;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>执行完成<code>convertAndSend(request, options)</code>方法之后进入<code>convertResponse(connection)</code>方法，可以看到这里调用了<code>connection.getResponseCode();</code>方法，执行完成之后就得到了<code>200</code>的返回码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Response <span class="title">convertResponse</span><span class="params">(HttpURLConnection connection)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">// 这里会触发请求</span></span><br><span class="line">  <span class="keyword">int</span> status = connection.getResponseCode();</span><br><span class="line">  String reason = connection.getResponseMessage();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(format(<span class="string">"Invalid status(%s) executing %s %s"</span>, status,</span><br><span class="line">        connection.getRequestMethod(), connection.getURL()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Map&lt;String, Collection&lt;String&gt;&gt; headers = <span class="keyword">new</span> LinkedHashMap&lt;String, Collection&lt;String&gt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; field : connection.getHeaderFields().entrySet()) &#123;</span><br><span class="line">    <span class="comment">// response message</span></span><br><span class="line">    <span class="keyword">if</span> (field.getKey() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      headers.put(field.getKey(), field.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Integer length = connection.getContentLength();</span><br><span class="line">  <span class="keyword">if</span> (length == -<span class="number">1</span>) &#123;</span><br><span class="line">    length = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  InputStream stream;</span><br><span class="line">  <span class="keyword">if</span> (status &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">    stream = connection.getErrorStream();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    stream = connection.getInputStream();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Response.builder()</span><br><span class="line">          .status(status)</span><br><span class="line">          .reason(reason)</span><br><span class="line">          .headers(headers)</span><br><span class="line">          .body(stream, length)</span><br><span class="line">          .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行完请求之后就是根据 <code>status</code>、<code>reason</code>、<code>headers</code>、<code>InputStream</code>请求构造了<code>Response</code>对象，这里使用了建造者设计模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">toBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Builder(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  String reason;</span><br><span class="line">  Map&lt;String, Collection&lt;String&gt;&gt; headers;</span><br><span class="line">  Body body;</span><br><span class="line">  Request request;</span><br><span class="line"></span><br><span class="line">  Builder() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Builder(Response source) &#123;</span><br><span class="line">    <span class="keyword">this</span>.status = source.status;</span><br><span class="line">    <span class="keyword">this</span>.reason = source.reason;</span><br><span class="line">    <span class="keyword">this</span>.headers = source.headers;</span><br><span class="line">    <span class="keyword">this</span>.body = source.body;</span><br><span class="line">    <span class="keyword">this</span>.request = source.request;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@see</span> Response#status*/</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Builder <span class="title">status</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.status = status;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@see</span> Response#reason */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Builder <span class="title">reason</span><span class="params">(String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.reason = reason;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@see</span> Response#headers */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Builder <span class="title">headers</span><span class="params">(Map&lt;String, Collection&lt;String&gt;&gt; headers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.headers = headers;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@see</span> Response#body */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Builder <span class="title">body</span><span class="params">(Body body)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.body = body;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@see</span> Response#body */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Builder <span class="title">body</span><span class="params">(InputStream inputStream, Integer length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.body = InputStreamBody.orNull(inputStream, length);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@see</span> Response#body */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Builder <span class="title">body</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.body = ByteArrayBody.orNull(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@see</span> Response#body */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Builder <span class="title">body</span><span class="params">(String text, Charset charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.body = ByteArrayBody.orNull(text, charset);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** <span class="doctag">@see</span> Response#request</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">NOTE:</span> will add null check in version 10 which may require changes</span></span><br><span class="line"><span class="comment">  * to custom feign.Client or loggers</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Builder <span class="title">request</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.request = request;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Response <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>现在我们得到了<code>Response</code>对象，现在回到<code>feign.SynchronousMethodHandler#executeAndDecode()</code>方法，得到结果之后就是要将<code>Http</code>的响应流转化成实体类对象了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">executeAndDecode</span><span class="params">(RequestTemplate template)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="comment">// 请求Request对象</span></span><br><span class="line">  Request request = targetRequest(template);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">    logger.logRequest(metadata.configKey(), logLevel, request);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 结果Response对象</span></span><br><span class="line">  Response response;</span><br><span class="line">  <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    response = client.execute(request, options);</span><br><span class="line">    <span class="comment">// ensure the request is set. <span class="doctag">TODO:</span> remove in Feign 10</span></span><br><span class="line">    response.toBuilder().request(request).build();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime(start));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> errorExecuting(request, e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> elapsedTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> shouldClose = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      response =</span><br><span class="line">          logger.logAndRebufferResponse(metadata.configKey(), logLevel, response, elapsedTime);</span><br><span class="line">      <span class="comment">// ensure the request is set. <span class="doctag">TODO:</span> remove in Feign 10</span></span><br><span class="line">      response.toBuilder().request(request).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Response.class == metadata.returnType()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.body() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (response.body().length() == <span class="keyword">null</span> ||</span><br><span class="line">              response.body().length() &gt; MAX_RESPONSE_BUFFER_SIZE) &#123;</span><br><span class="line">        shouldClose = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Ensure the response body is disconnected</span></span><br><span class="line">      <span class="keyword">byte</span>[] bodyData = Util.toByteArray(response.body().asInputStream());</span><br><span class="line">      <span class="keyword">return</span> response.toBuilder().body(bodyData).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (response.status() &gt;= <span class="number">200</span> &amp;&amp; response.status() &lt; <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">void</span>.class == metadata.returnType()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 解析结果</span></span><br><span class="line">        <span class="keyword">return</span> decode(response);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (decode404 &amp;&amp; response.status() == <span class="number">404</span> &amp;&amp; <span class="keyword">void</span>.class != metadata.returnType()) &#123;</span><br><span class="line">      <span class="keyword">return</span> decode(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> errorDecoder.decode(metadata.configKey(), response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> errorReading(request, response, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldClose) &#123;</span><br><span class="line">      ensureClosed(response.body());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关注下面这块代码可以看到是对返回码<code>200-300</code>进行了处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (response.status() &gt;= <span class="number">200</span> &amp;&amp; response.status() &lt; <span class="number">300</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">void</span>.class == metadata.returnType()) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// 解析结果</span></span><br><span class="line">     <span class="keyword">return</span> decode(response);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>继续跳入 <code>decode(response)</code>方法直到进入<code>org.springframework.cloud.netflix.feign.support.SpringDecoder#decode(final Response response, Type type)</code>方法，可以看到和<code>Spring MVC</code>解析输入参数及输出结果一样使用了<code>HttpMessageConverter</code>进行转化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(<span class="keyword">final</span> Response response, Type type)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, FeignException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type <span class="keyword">instanceof</span> Class || type <span class="keyword">instanceof</span> ParameterizedType</span><br><span class="line">            || type <span class="keyword">instanceof</span> WildcardType) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line">        HttpMessageConverterExtractor&lt;?&gt; extractor = <span class="keyword">new</span> HttpMessageConverterExtractor(</span><br><span class="line">                type, <span class="keyword">this</span>.messageConverters.getObject().getConverters());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> extractor.extractData(<span class="keyword">new</span> FeignResponseAdapter(response));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> DecodeException(</span><br><span class="line">            <span class="string">"type is not an instance of Class or ParameterizedType: "</span> + type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/feign/decode.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>到这里<code>Feign</code>请求就执行完成了</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>SpringCloudFeign</code>采用<code>JDK</code>动态代理基于接口来实现调用，<code>SpringCloudFeign</code>主要做的就是解析<code>@FeignClient</code>注解及其方法定义信息，一个方法封装成一个<code>MethodHandler</code>，由此对象来完成方法执行逻辑 ，同时集成了<code>Ribbon</code>来实现负载均衡处理，专人做专事，具体发送请求是由自身<code>FeignLoadBalancer</code>的<code>execute()</code>方法来执行的，这里涉及到请求参数及响应参数的解析</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;上一章节我们知道&lt;code&gt;SpringCloudFeign&lt;/code&gt;基于接口来实现调用，那我们要知道它是怎么实现的，我们可
      
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.songshuiyang.com/categories/SpringCloud/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Feign)声明式服务调用介绍</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Feign)%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Feign)声明式服务调用介绍/</id>
    <published>2019-08-06T16:06:00.000Z</published>
    <updated>2019-09-16T13:11:05.881Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Feign-简介"><a href="#Feign-简介" class="headerlink" title="Feign 简介"></a>Feign 简介</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><ul><li><p><code>Feign</code>是一个声明式的<code>Web Service</code>客户端，它的出现让微服务之间的调用变得更简单了</p></li><li><p><code>SpringCloudFeign</code>在<code>Netfix Feign</code>的基础上扩展了对<code>SpringMVC</code>的注解支持，所以通过这些注解可以很方便的定义一些服务接口，服务调服务通过接口来调用十分方便，同时<code>SpringCloudFeign</code>整合了<code>Spring Cloud Ribbon</code>与<code>Spring Cloud Hystrix</code>，具有负载均衡及服务容错保护功能</p></li></ul><h4 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h4><ul><li>只需创建一个接口并用注解的方式来配置它，即可完成服务提供方的接口绑定</li><li>在使用过程中与<code>Spring MVC</code>完美衔接</li><li>整合了<code>Spring Cloud Ribbon</code>，可实现负载均衡，实现服务高可用</li><li>整合了<code>Spring Cloud Hystrix</code>，可实现服务断路及服务降级</li></ul><h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><ul><li>下面通过一个简单示例来展示<code>SpringCloudFeign</code>在服务客户端定义上所带来的便利</li></ul><blockquote><p>1、pom.xml 添加依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、启动类添加开关注解 <code>@EnableFeignClients</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、新增cloudSso服务接口类，下面可以看到使用了<code>Spring MVC</code>的注解，<code>@FeignClient(value = &quot;cloudSso&quot;)</code>的<code>value</code>是具体调用服务的服务名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"cloudSso"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SsoClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/sso/createToken"</span>)</span><br><span class="line">    <span class="function">ResponseMO <span class="title">createToken</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/sso/checkToken"</span>)</span><br><span class="line">    <span class="function">ResponseMO <span class="title">checkToken</span><span class="params">(@RequestBody TokenMO tokenMO)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这么使用，通过url来访问接口</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"cloudOther"</span>, url = <span class="string">"https://www.baidu.com"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaiduClient</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/baidu"</span>)</span><br><span class="line">    <span class="function">ResponseMO <span class="title">baidu</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SsoController.java 是cloudSso服务下的接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sso"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SsoController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/createToken"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseMO <span class="title">createToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseUtil.successWithData(<span class="string">"EADF89QWJ0IFJWEJFQHWEFU9QEWH9FH0Q9EW"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/checkToken"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseMO <span class="title">checkToken</span><span class="params">(@RequestBody TokenMO tokenMO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseUtil.successWithData(tokenMO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4、有了上面的准备之后就可以使用<code>SsoClient</code>的接口了，前面学习<code>Zuul</code>的文章有介绍，如果要对网关服务进行鉴权校验，我们这里添加了一个<code>鉴权Filter</code>,通过调用<code>SsoClient</code>接口的<code>checkToken()</code>方法来校验<code>Token</code>是否有效</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SsoClient ssoClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pattern p = Pattern.compile(<span class="string">"/*/pub/*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseMO resMO = <span class="keyword">new</span> ResponseMO();</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line"></span><br><span class="line">        String relativeURL = extractRelativePath(request);</span><br><span class="line">        String token = request.getHeader(WebConstants.TOKEN_HEADER);</span><br><span class="line">        <span class="keyword">if</span> (p.matcher(relativeURL).find()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"&gt;&gt; 鉴权开始[&#123;&#125;]"</span>,relativeURL);</span><br><span class="line">        ResponseMO resModel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (relativeURL.startsWith(ApplicationConstants.APPLICATION_ZUUL) ||</span><br><span class="line">                relativeURL.startsWith(ApplicationConstants.APPLICATION_USER) ||</span><br><span class="line">                relativeURL.startsWith(ApplicationConstants.APPLICATION_SSO)) &#123;</span><br><span class="line">            <span class="comment">// 调用sso服务鉴权</span></span><br><span class="line">            resModel = ssoClient.checkToken(<span class="keyword">new</span> TokenMO(token));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其他服务不对其进行路由</span></span><br><span class="line">            authorizationFailed(relativeURL, ctx, resMO);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resModel.getCode() != ResponseMO.RESPONSE_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="comment">// 鉴权失败不对其进行路由</span></span><br><span class="line">            authorizationFailed(relativeURL, ctx, resMO);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从jwt解析后的userId</span></span><br><span class="line">        ctx.addZuulRequestHeader(<span class="string">"userId"</span>, <span class="string">"reUserId"</span>);</span><br><span class="line">        log.info(<span class="string">"&lt;&lt; 鉴权通过[&#123;&#125;]] "</span>, relativeURL);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个boolean值来判断该过滤器是否要执行，true表示执行，false表示不执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * gives the order in which this filter will be executed, relative to other</span></span><br><span class="line"><span class="comment">     * filters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鉴权失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeURL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resMO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">authorizationFailed</span> <span class="params">(String relativeURL, RequestContext ctx, ResponseMO resMO)</span> </span>&#123;</span><br><span class="line">        ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">        ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        resMO.setAnonymous();</span><br><span class="line">        String resBody = convertToString(resMO);</span><br><span class="line">        ctx.setResponseBody(resBody);</span><br><span class="line">        log.info(<span class="string">"&lt;&lt; 鉴权失败[&#123;&#125;]"</span>,relativeURL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">convertToString</span><span class="params">(ResponseMO resMO)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = mapper.writeValueAsString(resMO);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取相对访问路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">extractRelativePath</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        <span class="keyword">return</span> requestURI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>SpringCloudFeign</code>基于接口来实现调用，<code>Spring Cloud</code> 给<code>Feign</code> 添加了支持 <code>Spring MVC</code>  注解，这对应我们平常开发来说是很容易上手的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Feign-简介&quot;&gt;&lt;a href=&quot;#Feign-简介&quot; class=&quot;headerlink&quot; title=&quot;Feign 简介&quot;&gt;&lt;/a&gt;Feign 简介&lt;/h3&gt;&lt;h4 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.songshuiyang.com/categories/SpringCloud/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Zuul)服务路由转发RibbonRoutingFilter</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Zuul)%E6%9C%8D%E5%8A%A1%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91RibbonRoutingFilter/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Zuul)服务路由转发RibbonRoutingFilter/</id>
    <published>2019-08-06T16:05:03.000Z</published>
    <updated>2019-09-16T13:11:06.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>当我们为<code>Spring Cloud Zuul</code>构建的<code>API</code>网关服务引入<code>Spring Cloud Consul</code>之后，它会为<code>Consul</code>中的每个服务都自动创建一个默认路由规则，这些默认规则的<code>path</code>会使用<code>ServiceId</code>配置的服务名作为请求前缀</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/consul-dc1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>比如上图我们在<code>consul</code>注册了<code>cloudZuul</code>，<code>cloudSso</code>，<code>cloudUser</code>三个服务，那么就可以通过服务名作为请求前缀将请求转发到不同服务上，这里我们<code>cloudZuul</code>服务地址为<code>http://127.0.0.1:2000</code></p><ul><li>访问<code>cloudUser</code>服务接口，举例:<code>http://127.0.0.1:2000/cloudUser/user/getById/1</code></li><li>访问<code>cloudSso</code>服务接口，举例:<code>http://127.0.0.1:2000/cloudSso/sso/createToken</code></li></ul></li><li><p>上面这个服务路由转发是怎么实现的呢，通过上面几章我们可以知道<code>zuul</code>内部工作是通过一系列的<code>ZuulFilter</code>来实现的，通过调试断点可以定位到这个<code>RibbonRoutingFilter</code>，这个<code>ZuulFilter</code>的<code>filterType</code>是<code>route</code></p></li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>查看<code>RibbonRoutingFilter.java</code>，查看注释可以看到是使用了<code>Ribbon</code>及<code>Hystrix</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Route &#123;<span class="doctag">@link</span> ZuulFilter&#125; that uses Ribbon, Hystrix and pluggable http clients to send requests.</span></span><br><span class="line"><span class="comment"> * ServiceIds are found in the &#123;<span class="doctag">@link</span> RequestContext&#125; attribute &#123;<span class="doctag">@link</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants#SERVICE_ID_KEY&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ryan Baxter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonRoutingFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(RibbonRoutingFilter.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> ProxyRequestHelper helper;</span><br><span class="line"><span class="keyword">protected</span> RibbonCommandFactory&lt;?&gt; ribbonCommandFactory;</span><br><span class="line"><span class="keyword">protected</span> List&lt;RibbonRequestCustomizer&gt; requestCustomizers;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> useServlet31 = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RibbonRoutingFilter</span><span class="params">(ProxyRequestHelper helper,</span></span></span><br><span class="line"><span class="function"><span class="params">   RibbonCommandFactory&lt;?&gt; ribbonCommandFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">   List&lt;RibbonRequestCustomizer&gt; requestCustomizers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.helper = helper;</span><br><span class="line"><span class="keyword">this</span>.ribbonCommandFactory = ribbonCommandFactory;</span><br><span class="line"><span class="keyword">this</span>.requestCustomizers = requestCustomizers;</span><br><span class="line"><span class="comment">// To support Servlet API 3.1 we need to check if getContentLengthLong exists</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> remove in 2.0</span></span><br><span class="line">HttpServletRequest.class.getMethod(<span class="string">"getContentLengthLong"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(NoSuchMethodException e) &#123;</span><br><span class="line">useServlet31 = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RibbonRoutingFilter</span><span class="params">(RibbonCommandFactory&lt;?&gt; ribbonCommandFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="keyword">new</span> ProxyRequestHelper(), ribbonCommandFactory, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* for testing */</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isUseServlet31</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> useServlet31;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ROUTE_TYPE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> RIBBON_ROUTING_FILTER_ORDER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line"><span class="keyword">return</span> (ctx.getRouteHost() == <span class="keyword">null</span> &amp;&amp; ctx.get(SERVICE_ID_KEY) != <span class="keyword">null</span></span><br><span class="line">&amp;&amp; ctx.sendZuulResponse());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line"><span class="keyword">this</span>.helper.addIgnoredHeaders();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">RibbonCommandContext commandContext = buildCommandContext(context);</span><br><span class="line">ClientHttpResponse response = forward(commandContext);</span><br><span class="line">setResponse(response);</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ZuulException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RibbonCommandContext <span class="title">buildCommandContext</span><span class="params">(RequestContext context)</span> </span>&#123;</span><br><span class="line">HttpServletRequest request = context.getRequest();</span><br><span class="line"></span><br><span class="line">MultiValueMap&lt;String, String&gt; headers = <span class="keyword">this</span>.helper</span><br><span class="line">.buildZuulRequestHeaders(request);</span><br><span class="line">MultiValueMap&lt;String, String&gt; params = <span class="keyword">this</span>.helper</span><br><span class="line">.buildZuulRequestQueryParams(request);</span><br><span class="line">String verb = getVerb(request);</span><br><span class="line">InputStream requestEntity = getRequestBody(request);</span><br><span class="line"><span class="keyword">if</span> (request.getContentLength() &lt; <span class="number">0</span> &amp;&amp; !verb.equalsIgnoreCase(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">context.setChunkedRequestBody();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String serviceId = (String) context.get(SERVICE_ID_KEY);</span><br><span class="line">Boolean retryable = (Boolean) context.get(RETRYABLE_KEY);</span><br><span class="line">Object loadBalancerKey = context.get(LOAD_BALANCER_KEY);</span><br><span class="line"></span><br><span class="line">String uri = <span class="keyword">this</span>.helper.buildZuulRequestURI(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove double slashes</span></span><br><span class="line">uri = uri.replace(<span class="string">"//"</span>, <span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> contentLength = useServlet31 ? request.getContentLengthLong(): request.getContentLength();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RibbonCommandContext(serviceId, verb, uri, retryable, headers, params,</span><br><span class="line">requestEntity, <span class="keyword">this</span>.requestCustomizers, contentLength, loadBalancerKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ClientHttpResponse <span class="title">forward</span><span class="params">(RibbonCommandContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; info = <span class="keyword">this</span>.helper.debug(context.getMethod(),</span><br><span class="line">context.getUri(), context.getHeaders(), context.getParams(),</span><br><span class="line">context.getRequestEntity());</span><br><span class="line"></span><br><span class="line">RibbonCommand command = <span class="keyword">this</span>.ribbonCommandFactory.create(context);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ClientHttpResponse response = command.execute();</span><br><span class="line"><span class="keyword">this</span>.helper.appendDebug(info, response.getRawStatusCode(), response.getHeaders());</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (HystrixRuntimeException ex) &#123;</span><br><span class="line"><span class="keyword">return</span> handleException(info, ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ClientHttpResponse <span class="title">handleException</span><span class="params">(Map&lt;String, Object&gt; info,</span></span></span><br><span class="line"><span class="function"><span class="params">HystrixRuntimeException ex)</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> statusCode = HttpStatus.INTERNAL_SERVER_ERROR.value();</span><br><span class="line">Throwable cause = ex;</span><br><span class="line">String message = ex.getFailureType().toString();</span><br><span class="line"></span><br><span class="line">ClientException clientException = findClientException(ex);</span><br><span class="line"><span class="keyword">if</span> (clientException == <span class="keyword">null</span>) &#123;</span><br><span class="line">clientException = findClientException(ex.getFallbackException());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clientException != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (clientException</span><br><span class="line">.getErrorType() == ClientException.ErrorType.SERVER_THROTTLED) &#123;</span><br><span class="line">statusCode = HttpStatus.SERVICE_UNAVAILABLE.value();</span><br><span class="line">&#125;</span><br><span class="line">cause = clientException;</span><br><span class="line">message = clientException.getErrorType().toString();</span><br><span class="line">&#125;</span><br><span class="line">info.put(<span class="string">"status"</span>, String.valueOf(statusCode));</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZuulException(cause, <span class="string">"Forwarding error"</span>, statusCode, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ClientException <span class="title">findClientException</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t <span class="keyword">instanceof</span> ClientException) &#123;</span><br><span class="line"><span class="keyword">return</span> (ClientException) t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> findClientException(t.getCause());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> InputStream <span class="title">getRequestBody</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">InputStream requestEntity = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">requestEntity = (InputStream) RequestContext.getCurrentContext()</span><br><span class="line">.get(REQUEST_ENTITY_KEY);</span><br><span class="line"><span class="keyword">if</span> (requestEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">requestEntity = request.getInputStream();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">log.error(<span class="string">"Error during getRequestBody"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> requestEntity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getVerb</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String method = request.getMethod();</span><br><span class="line"><span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"GET"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setResponse</span><span class="params">(ClientHttpResponse resp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ClientException, IOException </span>&#123;</span><br><span class="line">RequestContext.getCurrentContext().set(<span class="string">"zuulResponse"</span>, resp);</span><br><span class="line"><span class="keyword">this</span>.helper.setResponse(resp.getRawStatusCode(),</span><br><span class="line">resp.getBody() == <span class="keyword">null</span> ? <span class="keyword">null</span> : resp.getBody(), resp.getHeaders());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们关注<code>run()方法</code>，可以发现可以划分为三个步骤</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取RequestContext</span></span><br><span class="line">    RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">    <span class="keyword">this</span>.helper.addIgnoredHeaders();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 构建执行Ribbon命令的参数</span></span><br><span class="line">        RibbonCommandContext commandContext = buildCommandContext(context);</span><br><span class="line">        <span class="comment">// 执行请求(核心)</span></span><br><span class="line">        ClientHttpResponse response = forward(commandContext);</span><br><span class="line">        <span class="comment">// 设置返回体</span></span><br><span class="line">        setResponse(response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ZuulException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1、构建执行Ribbon命令的参数"><a href="#1、构建执行Ribbon命令的参数" class="headerlink" title="1、构建执行Ribbon命令的参数"></a>1、构建执行Ribbon命令的参数</h5><ul><li>下图是<code>http://127.0.0.1:2000/cloudSso/sso/createToken</code>链接构造的<code>RibbonCommandContext</code>，可以看到获取到了<code>serviceId</code>、请求链接及方式、请求头的一些信息</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/commandContext.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><code>buildCommandContext()</code>方法就是通过<code>RequestContext</code>来构造<code>RibbonCommandContext</code>，<code>RequestContext</code>通过之前的<code>ZuulFilter</code>已经设置了一些属性，那么<code>buildCommandContext()</code>方法就可以很方便的获取一些参数信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RibbonCommandContext <span class="title">buildCommandContext</span><span class="params">(RequestContext context)</span> </span>&#123;</span><br><span class="line">    HttpServletRequest request = context.getRequest();</span><br><span class="line"></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">this</span>.helper</span><br><span class="line">            .buildZuulRequestHeaders(request);</span><br><span class="line">    MultiValueMap&lt;String, String&gt; params = <span class="keyword">this</span>.helper</span><br><span class="line">            .buildZuulRequestQueryParams(request);</span><br><span class="line">    String verb = getVerb(request);</span><br><span class="line">    InputStream requestEntity = getRequestBody(request);</span><br><span class="line">    <span class="keyword">if</span> (request.getContentLength() &lt; <span class="number">0</span> &amp;&amp; !verb.equalsIgnoreCase(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">        context.setChunkedRequestBody();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取serviceId</span></span><br><span class="line">    String serviceId = (String) context.get(SERVICE_ID_KEY);</span><br><span class="line">    <span class="comment">// 是否重试</span></span><br><span class="line">    Boolean retryable = (Boolean) context.get(RETRYABLE_KEY);</span><br><span class="line">    <span class="comment">// 负载均衡key</span></span><br><span class="line">    Object loadBalancerKey = context.get(LOAD_BALANCER_KEY);</span><br><span class="line"></span><br><span class="line">    String uri = <span class="keyword">this</span>.helper.buildZuulRequestURI(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove double slashes</span></span><br><span class="line">    uri = uri.replace(<span class="string">"//"</span>, <span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> contentLength = useServlet31 ? request.getContentLengthLong(): request.getContentLength();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RibbonCommandContext(serviceId, verb, uri, retryable, headers, params,</span><br><span class="line">            requestEntity, <span class="keyword">this</span>.requestCustomizers, contentLength, loadBalancerKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、执行请求-核心"><a href="#2、执行请求-核心" class="headerlink" title="2、执行请求(核心)"></a>2、执行请求(核心)</h5><ul><li><code>forward()</code>方法是执行的主体逻辑，可以看到主要逻辑是构建<code>RibbonCommand</code>然后执行<code>command.execute()</code>方法，由<code>RibbonCommand</code>完成<code>HTTP</code>请求的发送并的得到响应结果<code>ClientHttpResponse</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ClientHttpResponse <span class="title">forward</span><span class="params">(RibbonCommandContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; info = <span class="keyword">this</span>.helper.debug(context.getMethod(),</span><br><span class="line">            context.getUri(), context.getHeaders(), context.getParams(),</span><br><span class="line">            context.getRequestEntity());</span><br><span class="line">    RibbonCommand command = <span class="keyword">this</span>.ribbonCommandFactory.create(context);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ClientHttpResponse response = command.execute();</span><br><span class="line">        <span class="keyword">this</span>.helper.appendDebug(info, response.getRawStatusCode(), response.getHeaders());</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (HystrixRuntimeException ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> handleException(info, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>command.execute();</code> 方法，可以看到注释这个方法是同步执行方法，但里面又调用了<code>queue().get()</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Used for synchronous execution of command.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> R</span></span><br><span class="line"><span class="comment"> *         Result of &#123;<span class="doctag">@link</span> #run()&#125; execution or a fallback from &#123;<span class="doctag">@link</span> #getFallback()&#125; if the command fails for any reason.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HystrixRuntimeException</span></span><br><span class="line"><span class="comment"> *             if a failure occurs and a fallback cannot be retrieved</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HystrixBadRequestException</span></span><br><span class="line"><span class="comment"> *             if invalid arguments or state were used representing a user failure, not a system failure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException</span></span><br><span class="line"><span class="comment"> *             if invoked more than once</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue().get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exceptions.sneakyThrow(decomposeException(e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Used for asynchronous execution of command.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This will queue up the command on the thread pool and return an &#123;<span class="doctag">@link</span> Future&#125; to get the result once it completes.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> If configured to not run in a separate thread, this will have the same effect as &#123;<span class="doctag">@link</span> #execute()&#125; and will block.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * We don't throw an exception but just flip to synchronous execution so code doesn't need to change in order to switch a command from running on a separate thread to the calling thread.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Future&lt;R&gt;&#125; Result of &#123;<span class="doctag">@link</span> #run()&#125; execution or a fallback from &#123;<span class="doctag">@link</span> #getFallback()&#125; if the command fails for any reason.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HystrixRuntimeException</span></span><br><span class="line"><span class="comment"> *             if a fallback does not exist</span></span><br><span class="line"><span class="comment"> *             &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;li&gt;via &#123;<span class="doctag">@code</span> Future.get()&#125; in &#123;<span class="doctag">@link</span> ExecutionException#getCause()&#125; if a failure occurs&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;li&gt;or immediately if the command can not be queued (such as short-circuited, thread-pool/semaphore rejected)&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *             &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HystrixBadRequestException</span></span><br><span class="line"><span class="comment"> *             via &#123;<span class="doctag">@code</span> Future.get()&#125; in &#123;<span class="doctag">@link</span> ExecutionException#getCause()&#125; if invalid arguments or state were used representing a user failure, not a system failure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException</span></span><br><span class="line"><span class="comment"> *             if invoked more than once</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;R&gt; <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * The Future returned by Observable.toBlocking().toFuture() does not implement the</span></span><br><span class="line"><span class="comment">     * interruption of the execution thread when the "mayInterrupt" flag of Future.cancel(boolean) is set to true;</span></span><br><span class="line"><span class="comment">     * thus, to comply with the contract of Future, we must wrap around it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Future&lt;R&gt; delegate = toObservable().toBlocking().toFuture();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> Future&lt;R&gt; f = <span class="keyword">new</span> Future&lt;R&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (delegate.isCancelled()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (HystrixCommand.<span class="keyword">this</span>.getProperties().executionIsolationThreadInterruptOnFutureCancel().get()) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * The only valid transition here is false -&gt; true. If there are two futures, say f1 and f2, created by this command</span></span><br><span class="line"><span class="comment">                 * (which is super-weird, but has never been prohibited), and calls to f1.cancel(true) and to f2.cancel(false) are</span></span><br><span class="line"><span class="comment">                 * issued by different threads, it's unclear about what value would be used by the time mayInterruptOnCancel is checked.</span></span><br><span class="line"><span class="comment">                 * The most consistent way to deal with this scenario is to say that if *any* cancellation is invoked with interruption,</span></span><br><span class="line"><span class="comment">                 * than that interruption request cannot be taken back.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                interruptOnFutureCancel.compareAndSet(<span class="keyword">false</span>, mayInterruptIfRunning);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> res = delegate.cancel(interruptOnFutureCancel.get());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isExecutionComplete() &amp;&amp; interruptOnFutureCancel.get()) &#123;</span><br><span class="line">                <span class="keyword">final</span> Thread t = executionThread.get();</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; !t.equals(Thread.currentThread())) &#123;</span><br><span class="line">                    t.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.isCancelled();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.isDone();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> R <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> R <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.get(timeout, unit);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特殊处理立即抛出的错误状态</span></span><br><span class="line">    <span class="comment">/* special handling of error states that throw immediately */</span></span><br><span class="line">    <span class="keyword">if</span> (f.isDone()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f.get();</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Throwable t = decomposeException(e);</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> HystrixBadRequestException) &#123;</span><br><span class="line">                <span class="keyword">return</span> f;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class="line">                HystrixRuntimeException hre = (HystrixRuntimeException) t;</span><br><span class="line">                <span class="keyword">switch</span> (hre.getFailureType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> COMMAND_EXCEPTION:</span><br><span class="line">                <span class="keyword">case</span> TIMEOUT:</span><br><span class="line">                    <span class="comment">// we don't throw these types from queue() only from queue().get() as they are execution errors</span></span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">// these are errors we throw from queue() as they as rejection type errors</span></span><br><span class="line">                    <span class="keyword">throw</span> hre;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> Exceptions.sneakyThrow(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这个<code>queue()</code>方法</p><ul><li>查看注释可以知道这里采用了异步执行命令，这将在线程池上排队命令并返回<code>{@link Future}</code>以在结果完成后获得结果。</li><li>可以看到<code>final Future&lt;R&gt; delegate = toObservable().toBlocking().toFuture();</code>，这里使用了<code>Future</code>来执行处理，这个在多线程中可以经常看见，使用这个类可以得到线程的执行结果、什么<code>Observable</code> 观察者模式、<code>toBlocking</code> 队列形式</li><li><code>toObservable()</code>方法，这里使用了<code>ReactiveX</code>，这块感觉比较复杂，加个<code>TODO</code></li></ul></li><li><p><code>ReactiveX</code>这里简单百度了下</p><ul><li><code>RxJava</code>是 <code>ReactiveX</code> 在<code>JVM</code>上的一个实现，<code>ReactiveX</code>使用<code>Observable</code>序列组合异步和基于事件的程序。</li><li>相关链接:<a href="http://reactivex.io" target="_blank" rel="noopener">官网</a> <a href="https://mcxiaoke.gitbooks.io/rxdocs/content/topics/Getting-Started.html" target="_blank" rel="noopener">中文文档</a></li></ul></li></ul><ul><li><p>经过上面异步和基于事件的处理，我们可以来到下面这个方法</p></li><li><p>进入<code>com.netflix.loadbalancer.reactive.LoadBalancerCommand#selectServer()</code>方法，这个方法是根据负载均衡器返回一个<code>Server</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an Observable that either emits only the single requested server</span></span><br><span class="line"><span class="comment"> * or queries the load balancer for the next server on each subscription</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Observable&lt;Server&gt; <span class="title">selectServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Server&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Server&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Server server = loadBalancerContext.getServerFromLoadBalancer(loadBalancerURI, loadBalancerKey);   </span><br><span class="line">                next.onNext(server);</span><br><span class="line">                next.onCompleted();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                next.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>com.netflix.loadbalancer.LoadBalancerContext#getServerFromLoadBalancer()</code>方法，可以看到主要逻辑是从请求中的部分<code>URI</code>计算最终<code>URI</code>，下面有好几种情况<ul><li>如果主机丢失并且有负载均衡器，那么是从负载均衡器中选择的服务器获取主机/端口</li><li>如果主机丢失且没有负载均衡器，请尝试从客户端设置的虚拟地址派生主机/端口</li><li>如果主机存在并且<code>URI</code>的权限部分是为客户端设置的虚拟地址，并且存在负载均衡器，则从负载均衡器中选择的服务器获取主机/端口</li><li>如果主机存在但上述情况均不适用，则将主机解释为实际物理地址</li><li>如果主机丢失但以上都不适用，则抛出<code>ClientException</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compute the final URI from a partial URI in the request. The following steps are performed:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; if host is missing and there is a load balancer, get the host/port from server chosen from load balancer</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; if host is missing and there is no load balancer, try to derive host/port from virtual address set with the client</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; if host is present and the authority part of the URI is a virtual address set for the client, </span></span><br><span class="line"><span class="comment"> * and there is a load balancer, get the host/port from server chosen from load balancer</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; if host is present but none of the above applies, interpret the host as the actual physical address</span></span><br><span class="line"><span class="comment"> * &lt;li&gt; if host is missing but none of the above applies, throws ClientException</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> original Original URI passed from caller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">getServerFromLoadBalancer</span><span class="params">(@Nullable URI original, @Nullable Object loadBalancerKey)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">    String host = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> port = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (original != <span class="keyword">null</span>) &#123;</span><br><span class="line">        host = original.getHost();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (original != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Pair&lt;String, Integer&gt; schemeAndPort = deriveSchemeAndPortFromPartialUri(original);        </span><br><span class="line">        port = schemeAndPort.second();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Various Supported Cases</span></span><br><span class="line">    <span class="comment">// The loadbalancer to use and the instances it has is based on how it was registered</span></span><br><span class="line">    <span class="comment">// In each of these cases, the client might come in using Full Url or Partial URL</span></span><br><span class="line">    ILoadBalancer lb = getLoadBalancer();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Partial URI or no URI Case</span></span><br><span class="line">        <span class="comment">// well we have to just get the right instances from lb - or we fall back</span></span><br><span class="line">        <span class="keyword">if</span> (lb != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 选择服务实例</span></span><br><span class="line">            Server svc = lb.chooseServer(loadBalancerKey);</span><br><span class="line">            <span class="keyword">if</span> (svc == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(ClientException.ErrorType.GENERAL,</span><br><span class="line">                        <span class="string">"Load balancer does not have available server for client: "</span></span><br><span class="line">                                + clientName);</span><br><span class="line">            &#125;</span><br><span class="line">            host = svc.getHost();</span><br><span class="line">            <span class="keyword">if</span> (host == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(ClientException.ErrorType.GENERAL,</span><br><span class="line">                        <span class="string">"Invalid Server for :"</span> + svc);</span><br><span class="line">            &#125;</span><br><span class="line">            logger.debug(<span class="string">"&#123;&#125; using LB returned Server: &#123;&#125; for request &#123;&#125;"</span>, <span class="keyword">new</span> Object[]&#123;clientName, svc, original&#125;);</span><br><span class="line">            <span class="keyword">return</span> svc;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No Full URL - and we dont have a LoadBalancer registered to</span></span><br><span class="line">            <span class="comment">// obtain a server</span></span><br><span class="line">            <span class="comment">// if we have a vipAddress that came with the registration, we</span></span><br><span class="line">            <span class="comment">// can use that else we</span></span><br><span class="line">            <span class="comment">// bail out</span></span><br><span class="line">            <span class="keyword">if</span> (vipAddresses != <span class="keyword">null</span> &amp;&amp; vipAddresses.contains(<span class="string">","</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(</span><br><span class="line">                        ClientException.ErrorType.GENERAL,</span><br><span class="line">                        <span class="string">"Method is invoked for client "</span> + clientName + <span class="string">" with partial URI of ("</span></span><br><span class="line">                        + original</span><br><span class="line">                        + <span class="string">") with no load balancer configured."</span></span><br><span class="line">                        + <span class="string">" Also, there are multiple vipAddresses and hence no vip address can be chosen"</span></span><br><span class="line">                        + <span class="string">" to complete this partial uri"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vipAddresses != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Pair&lt;String,Integer&gt; hostAndPort = deriveHostAndPortFromVipAddress(vipAddresses);</span><br><span class="line">                    host = hostAndPort.first();</span><br><span class="line">                    port = hostAndPort.second();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(</span><br><span class="line">                            ClientException.ErrorType.GENERAL,</span><br><span class="line">                            <span class="string">"Method is invoked for client "</span> + clientName + <span class="string">" with partial URI of ("</span></span><br><span class="line">                            + original</span><br><span class="line">                            + <span class="string">") with no load balancer configured. "</span></span><br><span class="line">                            + <span class="string">" Also, the configured/registered vipAddress is unparseable (to determine host and port)"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(</span><br><span class="line">                        ClientException.ErrorType.GENERAL,</span><br><span class="line">                        <span class="keyword">this</span>.clientName</span><br><span class="line">                        + <span class="string">" has no LoadBalancer registered and passed in a partial URL request (with no host:port)."</span></span><br><span class="line">                        + <span class="string">" Also has no vipAddress registered"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Full URL Case</span></span><br><span class="line">        <span class="comment">// This could either be a vipAddress or a hostAndPort or a real DNS</span></span><br><span class="line">        <span class="comment">// if vipAddress or hostAndPort, we just have to consult the loadbalancer</span></span><br><span class="line">        <span class="comment">// but if it does not return a server, we should just proceed anyways</span></span><br><span class="line">        <span class="comment">// and assume its a DNS</span></span><br><span class="line">        <span class="comment">// For restClients registered using a vipAddress AND executing a request</span></span><br><span class="line">        <span class="comment">// by passing in the full URL (including host and port), we should only</span></span><br><span class="line">        <span class="comment">// consult lb IFF the URL passed is registered as vipAddress in Discovery</span></span><br><span class="line">        <span class="keyword">boolean</span> shouldInterpretAsVip = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lb != <span class="keyword">null</span>) &#123;</span><br><span class="line">            shouldInterpretAsVip = isVipRecognized(original.getAuthority());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shouldInterpretAsVip) &#123;</span><br><span class="line">            Server svc = lb.chooseServer(loadBalancerKey);</span><br><span class="line">            <span class="keyword">if</span> (svc != <span class="keyword">null</span>)&#123;</span><br><span class="line">                host = svc.getHost();</span><br><span class="line">                <span class="keyword">if</span> (host == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(ClientException.ErrorType.GENERAL,</span><br><span class="line">                            <span class="string">"Invalid Server for :"</span> + svc);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.debug(<span class="string">"using LB returned Server: &#123;&#125; for request: &#123;&#125;"</span>, svc, original);</span><br><span class="line">                <span class="keyword">return</span> svc;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// just fall back as real DNS</span></span><br><span class="line">                logger.debug(<span class="string">"&#123;&#125;:&#123;&#125; assumed to be a valid VIP address or exists in the DNS"</span>, host, port);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// consult LB to obtain vipAddress backed instance given full URL</span></span><br><span class="line">            <span class="comment">//Full URL execute request - where url!=vipAddress</span></span><br><span class="line">            logger.debug(<span class="string">"Using full URL passed in by caller (not using load balancer): &#123;&#125;"</span>, original);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// end of creating final URL</span></span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(ClientException.ErrorType.GENERAL,<span class="string">"Request contains no HOST to talk to"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// just verify that at this point we have a full URL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Server(host, port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>我们这里进入<code>Server svc = lb.chooseServer(loadBalancerKey);</code>方法</p></li><li><p>进入<code>com.netflix.loadbalancer.AbstractServerPredicate#chooseRoundRobinAfterFiltering()</code>方法，我这里可以看到是有两个服务实例，那么就是需要从这两个中选择一个</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/chooseRoundRobin.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Choose a server in a round robin fashion after the predicate filters a given list of servers and load balancer key. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;Server&gt; <span class="title">chooseRoundRobinAfterFiltering</span><span class="params">(List&lt;Server&gt; servers, Object loadBalancerKey)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从服务实例列表中筛选一下符合条件的服务</span></span><br><span class="line">    List&lt;Server&gt; eligible = getEligibleServers(servers, loadBalancerKey);</span><br><span class="line">    <span class="keyword">if</span> (eligible.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.absent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Optional.of(eligible.get(incrementAndGetModulo(eligible.size())));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Referenced from RoundRobinRule</span></span><br><span class="line"><span class="comment"> * Inspired by the implementation of &#123;<span class="doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> modulo The modulo to bound the value of the counter.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The next value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> current = nextIndex.get();</span><br><span class="line">        <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">        <span class="keyword">if</span> (nextIndex.compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>incrementAndGetModulo()</code>这里默认是采用了简单轮询负载均衡<code>（RoundRobin）</code>策略，看注释这里是<code>copy</code>了<code>JDK里的{@link AtomicInteger#incrementAndGet()}</code></p><ul><li>我们可以测试下这个方法</li><li><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncrementAndGetModuloTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger nextIndex = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IncrementAndGetModuloTest incrementAndGetModuloTest = <span class="keyword">new</span> IncrementAndGetModuloTest();</span><br><span class="line">        List&lt;String&gt; eligible = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        eligible.add(<span class="string">"服务1"</span>);</span><br><span class="line">        eligible.add(<span class="string">"服务2"</span>);</span><br><span class="line">        eligible.add(<span class="string">"服务3"</span>);</span><br><span class="line">        eligible.add(<span class="string">"服务4"</span>);</span><br><span class="line">        eligible.add(<span class="string">"服务5"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(incrementAndGetModuloTest.getServer(eligible));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getServer</span><span class="params">(List&lt;String&gt; eligible)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> eligible.get(incrementAndGetModulo(eligible.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">int</span> current = nextIndex.get();</span><br><span class="line">            <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">            <span class="keyword">if</span> (nextIndex.compareAndSet(current, next))</span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">服务1</span><br><span class="line">服务2</span><br><span class="line">服务3</span><br><span class="line">服务4</span><br><span class="line">服务5</span><br><span class="line">服务1</span><br><span class="line">服务2</span><br><span class="line">服务3</span><br><span class="line">服务4</span><br><span class="line">服务5</span><br><span class="line">服务1</span><br><span class="line">服务2</span><br><span class="line">服务3</span><br><span class="line">服务4</span><br><span class="line">服务5</span><br><span class="line">服务1</span><br><span class="line">服务2</span><br><span class="line">服务3</span><br><span class="line">服务4</span><br><span class="line">服务5</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="3、设置返回体"><a href="#3、设置返回体" class="headerlink" title="3、设置返回体"></a>3、设置返回体</h5><ul><li>执行完请求之后的得到结果， 可以看到是直接将<code>ClientHttpResponse</code>赋值到了<code>RequestContext</code>中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setResponse</span><span class="params">(ClientHttpResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ClientException, IOException </span>&#123;</span><br><span class="line">    RequestContext.getCurrentContext().set(<span class="string">"zuulResponse"</span>, resp);</span><br><span class="line">    <span class="keyword">this</span>.helper.setResponse(resp.getRawStatusCode(),</span><br><span class="line">            resp.getBody() == <span class="keyword">null</span> ? <span class="keyword">null</span> : resp.getBody(), resp.getHeaders());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p><code>RibbonRoutingFilter</code>这个类会为<code>Consul</code>中的每个服务都自动创建一个默认路由规则，然后根据这个规则将请求转发到不同的服务实例上，这些默认规则的<code>path</code>会使用<code>ServiceId</code>配置的服务名作为请求前缀</p></li><li><p><code>RibbonRoutingFilter</code>的类的主要功能</p><ul><li>1、先要挑选出具体调那个服务实例，如果是有多个服务具体选用的是哪种负载均衡策略，默认采用的是简单轮询负载均衡<code>（RoundRobin）</code>策略</li><li>2、获取到实例之后就是就是拼接<code>HTTP</code>请求，涉及请求<code>host</code>及<code>port</code>，组装完成之后就是执行请求了</li><li>3、执行请求之后就是把结果赋值到了<code>RequestContext</code>中，然后执行下一步<code>ZuulFilter</code></li></ul></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当我们为&lt;code&gt;Spring Cloud Zuul&lt;/code&gt;构建的&lt;code&gt;API&lt;/code&gt;网关服务引入&lt;code
      
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.songshuiyang.com/categories/SpringCloud/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Zuul)工作原理及源码分析之执行流程</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Zuul)%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Zuul)工作原理及源码分析之执行流程/</id>
    <published>2019-08-06T16:05:02.000Z</published>
    <updated>2019-09-16T13:11:06.057Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p>上一章节已经介绍了使用<code>@EnableZuulServer</code>注解会开启 <code>ZuulProxyAutoConfiguration</code>自动注册功能，这个类会自动注册<code>Zuul</code>服务启动所需要的<code>Bean</code>，因为我们这里是网关服务，所以是需要接受外部应用的<code>Http</code>请求的</p></li><li><p>回顾<code>ZuulProxyAutoConfiguration</code> 的父类<code>ZuulServerAutoConfiguration</code>，从下面可以看到是注册了<code>ZuulController</code>，<code>ZuulHandlerMapping</code>，<code>ZuulServlet</code>三个<code>Bean</code>，所以我们可以猜测入口应该是<code>Spring MVC DispatcherServlet</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明是配置类</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123; ZuulProperties.class &#125;) <span class="comment">// 激活 zuul配置</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ZuulServlet.class) <span class="comment">// 条件1 存在ZuulServlet.class</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ZuulServerMarkerConfiguration.Marker.class) <span class="comment">// 条件2 存在ZuulServerMarkerConfiguration.Marker.class bean, 即应用使用@EnableZuulServer注解</span></span><br><span class="line"><span class="comment">// Make sure to get the ServerProperties from the same place as a normal web app would</span></span><br><span class="line"><span class="meta">@Import</span>(ServerPropertiesAutoConfiguration.class) <span class="comment">// 配置ServerProperties实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">protected</span> ZuulProperties zuulProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">protected</span> ServerProperties server;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> ErrorController errorController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HasFeatures <span class="title">zuulFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> HasFeatures.namedFeature(<span class="string">"Zuul (Simple)"</span>, ZuulServerAutoConfiguration.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompositeRouteLocator <span class="title">primaryRouteLocator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Collection&lt;RouteLocator&gt; routeLocators)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CompositeRouteLocator(routeLocators);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(SimpleRouteLocator.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleRouteLocator <span class="title">simpleRouteLocator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleRouteLocator(<span class="keyword">this</span>.server.getServletPrefix(),</span><br><span class="line"><span class="keyword">this</span>.zuulProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * zuulController, 包装了一个ZuulServlet类型的servlet, 实现对ZuulServlet类型的servlet的初始化.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulController <span class="title">zuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ZuulController();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulHandlerMapping <span class="title">zuulHandlerMapping</span><span class="params">(RouteLocator routes)</span> </span>&#123;</span><br><span class="line">ZuulHandlerMapping mapping = <span class="keyword">new</span> ZuulHandlerMapping(routes, zuulController());</span><br><span class="line">mapping.setErrorController(<span class="keyword">this</span>.errorController);</span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ApplicationListener&lt;ApplicationEvent&gt; <span class="title">zuulRefreshRoutesListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ZuulRefreshListener();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"zuulServlet"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">zuulServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ServletRegistrationBean servlet = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> ZuulServlet(),</span><br><span class="line"><span class="keyword">this</span>.zuulProperties.getServletPattern());</span><br><span class="line"><span class="comment">// The whole point of exposing this servlet is to provide a route that doesn't</span></span><br><span class="line"><span class="comment">// buffer requests.</span></span><br><span class="line">servlet.addInitParameter(<span class="string">"buffer-requests"</span>, <span class="string">"false"</span>);</span><br><span class="line"><span class="keyword">return</span> servlet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>查看源码是怎样执行调用的可以在代码里打好断点，观察其执行链，第六章节已经介绍了<code>Zuul</code>的一个简单例子，我们可以在自己定义的<code>Filter</code>的<code>run()</code>方法里打好断点，只要没配置错误，这里是一定会执行的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SsoClient ssoClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pattern p = Pattern.compile(<span class="string">"/*/pub/*"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseMO resMO = <span class="keyword">new</span> ResponseMO();</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line"></span><br><span class="line">        String relativeURL = extractRelativePath(request);</span><br><span class="line">        String token = request.getHeader(WebConstants.TOKEN_HEADER);</span><br><span class="line">        <span class="keyword">if</span> (p.matcher(relativeURL).find()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"&gt;&gt; 鉴权开始[&#123;&#125;]"</span>,relativeURL);</span><br><span class="line">        ResponseMO resModel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (relativeURL.startsWith(ApplicationConstants.APPLICATION_ZUUL) ||</span><br><span class="line">                relativeURL.startsWith(ApplicationConstants.APPLICATION_USER) ||</span><br><span class="line">                relativeURL.startsWith(ApplicationConstants.APPLICATION_SSO)) &#123;</span><br><span class="line">            <span class="comment">// 调用sso服务鉴权</span></span><br><span class="line">            resModel = ssoClient.checkToken(<span class="keyword">new</span> TokenMO(token));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其他服务不对其进行路由</span></span><br><span class="line">            authorizationFailed(relativeURL, ctx, resMO);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resModel.getCode() != ResponseMO.RESPONSE_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="comment">// 鉴权失败不对其进行路由</span></span><br><span class="line">            authorizationFailed(relativeURL, ctx, resMO);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从jwt解析后的userId</span></span><br><span class="line">        ctx.addZuulRequestHeader(<span class="string">"userId"</span>, <span class="string">"reUserId"</span>);</span><br><span class="line">        log.info(<span class="string">"&lt;&lt; 鉴权通过[&#123;&#125;]] "</span>, relativeURL);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个boolean值来判断该过滤器是否要执行，true表示执行，false表示不执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * gives the order in which this filter will be executed, relative to other</span></span><br><span class="line"><span class="comment">     * filters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鉴权失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeURL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resMO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">authorizationFailed</span> <span class="params">(String relativeURL, RequestContext ctx, ResponseMO resMO)</span> </span>&#123;</span><br><span class="line">        ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">        ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        resMO.setAnonymous();</span><br><span class="line">        String resBody = convertToString(resMO);</span><br><span class="line">        ctx.setResponseBody(resBody);</span><br><span class="line">        log.info(<span class="string">"&lt;&lt; 鉴权失败[&#123;&#125;]"</span>,relativeURL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">convertToString</span><span class="params">(ResponseMO resMO)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = mapper.writeValueAsString(resMO);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取相对访问路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">extractRelativePath</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        <span class="keyword">return</span> requestURI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下图是其方法调用链路图，可以看到入口是<code>Spring MVC</code>的<code>DispatcherServlet</code>，然后就是<code>doDispatch</code>到了<code>ZuulController</code>上，<code>ZuulController</code>又转发到了<code>ZuulServlet</code>的<code>service</code>方法</li></ul><p><img src="/images/server/spring/spring-cloud/ZuulController.jpg" alt=""></p><ul><li>根据上图可以梳理出大致的执行流程<ul><li>1、内置<code>tomcat</code>容器接受<code>Http</code>请求</li><li>2、进入<code>DispatcherServlet</code>进行<code>doDispatch</code>请求转发</li><li>3、转发到<code>ZuulController</code>上，执行其<code>handleRequest()</code>方法</li><li>4、然后转发到<code>ZuulServlet</code>上的<code>service()</code>方法上，这个是个<code>HttpServlet</code>，这里会执行一系列的拦截器</li></ul></li></ul><h4 id="1、ZuulController"><a href="#1、ZuulController" class="headerlink" title="1、ZuulController"></a>1、ZuulController</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ZuulController.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>我们平常开发使用 <code>Spring MVC</code>一般都是通过<code>@Controller</code>注解的形式来定义其执行方法，<code>Spring</code>也提供通过实现接口的形式来定义其执行方法，下面的<code>ZuulController</code>就是这个例子，可以看到这个类十分简单，就只有主体方法<code>handleRequest()</code>，此方法是定义在<code>Controller</code>接口上</p></li><li><p>那是<code>DispatcherServlet</code>是怎样找到<code>ZuulController</code>这个执行类的呢，可以看到<code>ZuulServerAutoConfiguration</code>是注册了<code>ZuulController</code>及<code>ZuulHandlerMapping</code>这两个<code>bean</code>，<code>ZuulHandlerMapping</code>和我们平常使用的<code>RequestMappingHandlerMapping</code>都是继承<code>HandlerMapping</code>接口，这个接口是定义请求与具体执行者的映射关系，所以<code>DispatcherServlet</code>就能发现<code>ZuulController</code>这个执行类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * zuulController, 包装了一个ZuulServlet类型的servlet, 实现对ZuulServlet类型的servlet的初始化.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulController <span class="title">zuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ZuulController();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulHandlerMapping <span class="title">zuulHandlerMapping</span><span class="params">(RouteLocator routes)</span> </span>&#123;</span><br><span class="line">    ZuulHandlerMapping mapping = <span class="keyword">new</span> ZuulHandlerMapping(routes, zuulController());</span><br><span class="line">    mapping.setErrorController(<span class="keyword">this</span>.errorController);</span><br><span class="line">    <span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>org.springframework.web.servlet.mvc.Controller#handleRequest</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the request and return a ModelAndView object which the DispatcherServlet</span></span><br><span class="line"><span class="comment"> * will render. A &#123;<span class="doctag">@code</span> null&#125; return value is not an error: it indicates that</span></span><br><span class="line"><span class="comment"> * this object completed request processing itself and that there is therefore no</span></span><br><span class="line"><span class="comment"> * ModelAndView to render.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a ModelAndView to render, or &#123;<span class="doctag">@code</span> null&#125; if handled directly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception in case of errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>org.springframework.cloud.netflix.zuul.web.ZuulController#handleRequest</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulController</span> <span class="keyword">extends</span> <span class="title">ServletWrappingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setServletClass(ZuulServlet.class);</span><br><span class="line">setServletName(<span class="string">"zuul"</span>);</span><br><span class="line">setSupportedMethods((String[]) <span class="keyword">null</span>); <span class="comment">// Allow all</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// We don't care about the other features of the base class, just want to</span></span><br><span class="line"><span class="comment">// handle the request</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.handleRequestInternal(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// @see com.netflix.zuul.context.ContextLifecycleFilter.doFilter</span></span><br><span class="line">RequestContext.getCurrentContext().unset();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>查看<code>ZuulController</code>的构造函数里面<code>setServletClass(ZuulServlet.class)</code>可以看到是设置了父类<code>ServletWrappingController</code>的<code>servletClass</code>为<code>ZuulServlet.class</code></p><ul><li><p>看看父类<code>ServletWrappingController</code></p><ul><li>代码如下，可以看到成员变量是记录了<code>Servlet</code>的<code>name</code>及<code>Class</code>对象，<code>Servlet servletInstance</code>是在<code>afterPropertiesSet()</code>赋值的，这个函数是<code>Spring</code>的钩子函数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWrappingController</span> <span class="keyword">extends</span> <span class="title">AbstractController</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;? extends Servlet&gt; servletClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String servletName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties initParameters = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Servlet servletInstance;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServletWrappingController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the class of the servlet to wrap.</span></span><br><span class="line"><span class="comment">     * Needs to implement &#123;<span class="doctag">@code</span> javax.servlet.Servlet&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> javax.servlet.Servlet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletClass</span><span class="params">(Class&lt;? extends Servlet&gt; servletClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servletClass = servletClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the name of the servlet to wrap.</span></span><br><span class="line"><span class="comment">     * Default is the bean name of this controller.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletName</span><span class="params">(String servletName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servletName = servletName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Specify init parameters for the servlet to wrap,</span></span><br><span class="line"><span class="comment">     * as name-value pairs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInitParameters</span><span class="params">(Properties initParameters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.initParameters = initParameters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the wrapped Servlet instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> javax.servlet.Servlet#init(javax.servlet.ServletConfig)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.servletClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"'servletClass' is required"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.servletName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.servletName = <span class="keyword">this</span>.beanName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.servletInstance = <span class="keyword">this</span>.servletClass.newInstance();</span><br><span class="line">        <span class="keyword">this</span>.servletInstance.init(<span class="keyword">new</span> DelegatingServletConfig());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoke the wrapped Servlet instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> javax.servlet.Servlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleRequestInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.servletInstance.service(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进入<code>ZuulController</code>的<code>handleRequest()</code>方法，可以看到就一个入口<code>super.handleRequestInternal(request, response);</code>，进入此方法，可以看到实际上就是执行了<code>ZuulServlet</code>的<code>service()</code>方法，<code>Spring</code>将一个<code>Servlet</code>包裹在一个<code>Controller</code>里面了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 执行被包裹的Servlet</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment"> * Invoke the wrapped Servlet instance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.servlet.Servlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleRequestInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.servletInstance.service(request, response);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2、ZuulServlet"><a href="#2、ZuulServlet" class="headerlink" title="2、ZuulServlet"></a>2、ZuulServlet</h4><ul><li>先看代码，可以看到<code>ZuulServlet</code>就是个<code>Servlet</code>，所以我们关心他的<code>service()</code>方法，注意这个类是属于<code>com.netflix.zuul</code>包下的，不是<code>Spring</code>的类，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Core Zuul servlet which intializes and orchestrates zuulFilter execution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mikey Cohen</span></span><br><span class="line"><span class="comment"> *         Date: 12/23/11</span></span><br><span class="line"><span class="comment"> *         Time: 10:44 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3374242278843351500L</span>;</span><br><span class="line">    <span class="keyword">private</span> ZuulRunner zuulRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(config);</span><br><span class="line"></span><br><span class="line">        String bufferReqsStr = config.getInitParameter(<span class="string">"buffer-requests"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> bufferReqs = bufferReqsStr != <span class="keyword">null</span> &amp;&amp; bufferReqsStr.equals(<span class="string">"true"</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        zuulRunner = <span class="keyword">new</span> ZuulRunner(bufferReqs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Marks this request as having passed through the "Zuul engine", as opposed to servlets</span></span><br><span class="line">            <span class="comment">// explicitly bound in web.xml, for which requests will not have the same data attached</span></span><br><span class="line">            RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">            context.setZuulEngineRan();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preRoute();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRoute();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                route();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRoute();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                postRoute();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            error(<span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNHANDLED_EXCEPTION_"</span> + e.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RequestContext.getCurrentContext().unset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * executes "post" ZuulFilters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        zuulRunner.postRoute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * executes "route" filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">route</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        zuulRunner.route();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * executes "pre" filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        zuulRunner.preRoute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * initializes request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(HttpServletRequest servletRequest, HttpServletResponse servletResponse)</span> </span>&#123;</span><br><span class="line">        zuulRunner.init(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sets error context info and executes "error" filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(ZuulException e)</span> </span>&#123;</span><br><span class="line">        RequestContext.getCurrentContext().setThrowable(e);</span><br><span class="line">        zuulRunner.error();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        HttpServletRequest servletRequest;</span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        HttpServletResponseWrapper servletResponse;</span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        FilterProcessor processor;</span><br><span class="line">        <span class="meta">@Mock</span></span><br><span class="line">        PrintWriter writer;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Before</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessZuulFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            ZuulServlet zuulServlet = <span class="keyword">new</span> ZuulServlet();</span><br><span class="line">            zuulServlet = spy(zuulServlet);</span><br><span class="line">            RequestContext context = spy(RequestContext.getCurrentContext());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FilterProcessor.setProcessor(processor);</span><br><span class="line">                RequestContext.testSetCurrentContext(context);</span><br><span class="line">                when(servletResponse.getWriter()).thenReturn(writer);</span><br><span class="line"></span><br><span class="line">                zuulServlet.init(servletRequest, servletResponse);</span><br><span class="line">                verify(zuulServlet, times(<span class="number">1</span>)).init(servletRequest, servletResponse);</span><br><span class="line">                assertTrue(RequestContext.getCurrentContext().getRequest() <span class="keyword">instanceof</span> HttpServletRequestWrapper);</span><br><span class="line">                assertTrue(RequestContext.getCurrentContext().getResponse() <span class="keyword">instanceof</span> HttpServletResponseWrapper);</span><br><span class="line"></span><br><span class="line">                zuulServlet.preRoute();</span><br><span class="line">                verify(processor, times(<span class="number">1</span>)).preRoute();</span><br><span class="line"></span><br><span class="line">                zuulServlet.postRoute();</span><br><span class="line">                verify(processor, times(<span class="number">1</span>)).postRoute();</span><br><span class="line"><span class="comment">//                verify(context, times(1)).unset();</span></span><br><span class="line"></span><br><span class="line">                zuulServlet.route();</span><br><span class="line">                verify(processor, times(<span class="number">1</span>)).route();</span><br><span class="line">                RequestContext.testSetCurrentContext(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关注<code>service()</code>方法，可以说这里是<code>zuul</code>的核心方法，看到这里的代码再来理解之前章节截的图就十分形象了，可以看到这里主要逻辑就是执行<code>filter</code>了，可以发现<code>preRoute()</code>及<code>route()</code>都是跳转到<code>ZuulRunner zuulRunner</code>里对应的方法执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.init((HttpServletRequest)servletRequest, (HttpServletResponse)servletResponse);</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        context.setZuulEngineRan();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行 pre filter</span></span><br><span class="line">            <span class="keyword">this</span>.preRoute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException var12) &#123;</span><br><span class="line">            <span class="comment">// 发生异常 执行error 及 post filter</span></span><br><span class="line">            <span class="keyword">this</span>.error(var12);</span><br><span class="line">            <span class="keyword">this</span>.postRoute();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行 routing filter</span></span><br><span class="line">            <span class="keyword">this</span>.route();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException var13) &#123;</span><br><span class="line">            <span class="comment">// 发生异常 执行error 及 post filter</span></span><br><span class="line">            <span class="keyword">this</span>.error(var13);</span><br><span class="line">            <span class="keyword">this</span>.postRoute();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行 post filter</span></span><br><span class="line">            <span class="keyword">this</span>.postRoute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException var11) &#123;</span><br><span class="line">            <span class="keyword">this</span>.error(var11);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var14) &#123;</span><br><span class="line">        <span class="keyword">this</span>.error(<span class="keyword">new</span> ZuulException(var14, <span class="number">500</span>, <span class="string">"UNHANDLED_EXCEPTION_"</span> + var14.getClass().getName()));</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        RequestContext.getCurrentContext().unset();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>我们现在来调试<code>service()</code>方法</p><ul><li><p>先来看第一行<code>this.init((HttpServletRequest)servletRequest, (HttpServletResponse)servletResponse);</code></p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(HttpServletRequest servletRequest, HttpServletResponse servletResponse)</span> </span>&#123;</span><br><span class="line">    zuulRunner.init(servletRequest, servletResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>跳转到<code>zuulRunner.init（）</code>方法，可以看到下面使用了构造了一个<code>RequestContext</code>，并设置<code>HttpServlet request and HttpResponse</code>，不出所外这个类就是<code>ThreadLocal</code>来实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sets HttpServlet request and HttpResponse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(HttpServletRequest servletRequest, HttpServletResponse servletResponse)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">    <span class="keyword">if</span> (bufferRequests) &#123;</span><br><span class="line">        ctx.setRequest(<span class="keyword">new</span> HttpServletRequestWrapper(servletRequest));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.setRequest(servletRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ctx.setResponse(<span class="keyword">new</span> HttpServletResponseWrapper(servletResponse));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看<code>RequestContext</code>类，查看本地变量可以发现<code>ThreadLocal&lt;? extends RequestContext&gt; threadLocal</code>，而且这个类继承了<code>ConcurrentHashMap</code>所以这个类应该是存放每次请求的各种参数的，使用<code>ThreadLocal</code>变量来达到线程隔离的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Request Context holds request, response,  state information and data for ZuulFilters to access and share.</span></span><br><span class="line"><span class="comment"> * The RequestContext lives for the duration of the request and is ThreadLocal.</span></span><br><span class="line"><span class="comment"> * extensions of RequestContext can be substituted by setting the contextClass.</span></span><br><span class="line"><span class="comment"> * Most methods here are convenience wrapper methods; the RequestContext is an extension of a ConcurrentHashMap</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mikey Cohen</span></span><br><span class="line"><span class="comment"> *         Date: 10/13/11</span></span><br><span class="line"><span class="comment"> *         Time: 10:21 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span> <span class="keyword">extends</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(RequestContext.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> Class&lt;? extends RequestContext&gt; contextClass = RequestContext.class;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RequestContext testContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;? extends RequestContext&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;RequestContext&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> RequestContext <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> contextClass.newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>看完第一行我们知道构造了一个<code>RequestContext</code>，再来回去看第二三行代码</p><ul><li>可以看到重新获取了一下<code>RequestContext</code>,<code>context.setZuulEngineRan();</code>用于标记这个请求是<code>Zuul engine</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Marks this request as having passed through the "Zuul engine", as opposed to servlets</span></span><br><span class="line"><span class="comment">// explicitly bound in web.xml, for which requests will not have the same data attached</span></span><br><span class="line">RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">context.setZuulEngineRan();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>下面就是执行各种<code>Route</code>了</p><h5 id="2-1、preRoute"><a href="#2-1、preRoute" class="headerlink" title="2.1、preRoute()"></a>2.1、preRoute()</h5></li></ul></li><li><p>先来看<code>preRoute()</code>，这个<code>filters</code>是最先执行的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    zuulRunner.preRoute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入<code>com.netflix.zuul.ZuulRunner#preRoute()</code>，可以看到又包装了一个<code>FilterProcessor</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    FilterProcessor.getInstance().preRoute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>查看<code>FilterProcessor</code>类，这个类是执行<code>filters</code>的核心类，可以看到这个类的使用是用了单例模式</p><ul><li>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This the the core class to execute filters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mikey Cohen</span></span><br><span class="line"><span class="comment"> *         Date: 10/24/11</span></span><br><span class="line"><span class="comment"> *         Time: 12:47 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> FilterProcessor INSTANCE = <span class="keyword">new</span> FilterProcessor();</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(FilterProcessor.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FilterUsageNotifier usageNotifier;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        usageNotifier = <span class="keyword">new</span> BasicFilterUsageNotifier();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the singleton FilterProcessor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FilterProcessor <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sets a singleton processor in case of a need to override default behavior</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> processor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setProcessor</span><span class="params">(FilterProcessor processor)</span> </span>&#123;</span><br><span class="line">        INSTANCE = processor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进入<code>com.netflix.zuul.FilterProcessor#preRoute()</code>，看注释可以看到本方法是在请求路由之前执行所有的<code>&quot;pre&quot; filters</code>，可以看到得到<code>List&lt;ZuulFilter&gt; list</code>然后<code>for</code>循环执行</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * runs all "pre" filters. These filters are run before routing to the orgin.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runFilters(<span class="string">"pre"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNCAUGHT_EXCEPTION_IN_PRE_FILTER_"</span> + e.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * runs all filters of the filterType sType/ Use this method within filters to run custom filters by type</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sType the filterType.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Throwable throws up an arbitrary exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">runFilters</span><span class="params">(String sType)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (RequestContext.getCurrentContext().debugRouting()) &#123;</span><br><span class="line">        Debug.addRoutingDebug(<span class="string">"Invoking &#123;"</span> + sType + <span class="string">"&#125; type filters"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> bResult = <span class="keyword">false</span>;</span><br><span class="line">    List&lt;ZuulFilter&gt; list = FilterLoader.getInstance().getFiltersByType(sType);</span><br><span class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            ZuulFilter zuulFilter = list.get(i);</span><br><span class="line">            <span class="comment">// 执行ZuulFilter</span></span><br><span class="line">            Object result = processZuulFilter(zuulFilter);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">                bResult |= ((Boolean) result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>List<zuulfilter> list 结果</zuulfilter></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/pre-filter.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>上面代码可以看到已经筛选出上图这些<code>&quot;pre&quot; filters</code></p><ul><li>这些<code>&quot;pre&quot; filters</code> 也有我们自己定义的<code>AuthenticationFilter</code></li><li>可以看到<code>ServletDetectionFilter</code>是最先执行的<code>filter</code>，因为<code>filterOrder()</code>是最小，这个<code>filter</code>用于标识请求是否是<code>DispatcherServletRequest</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDetectionFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServletDetectionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Must run before other filters that rely on the difference between </span></span><br><span class="line"><span class="comment">     * DispatcherServlet and ZuulServlet.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SERVLET_DETECTION_FILTER_ORDER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="keyword">if</span> (!(request <span class="keyword">instanceof</span> HttpServletRequestWrapper) </span><br><span class="line">                &amp;&amp; isDispatcherServletRequest(request)) &#123;</span><br><span class="line">            ctx.set(IS_DISPATCHER_SERVLET_REQUEST_KEY, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.set(IS_DISPATCHER_SERVLET_REQUEST_KEY, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isDispatcherServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE) != <span class="keyword">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进入<code>Object result = processZuulFilter(zuulFilter)</code> 查看<code>ZuulFilter</code>执行逻辑</p><ul><li><p><code>com.netflix.zuul.FilterProcessor#processZuulFilter</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Processes an individual ZuulFilter. This method adds Debug information. Any uncaught Thowables are caught by this method and converted to a ZuulException with a 500 status code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the return value for that filter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">processZuulFilter</span><span class="params">(ZuulFilter filter)</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">    <span class="keyword">boolean</span> bDebug = ctx.debugRouting();</span><br><span class="line">    <span class="keyword">final</span> String metricPrefix = <span class="string">"zuul.filter-"</span>;</span><br><span class="line">    <span class="keyword">long</span> execTime = <span class="number">0</span>;</span><br><span class="line">    String filterName = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> ltime = System.currentTimeMillis();</span><br><span class="line">        filterName = filter.getClass().getSimpleName();</span><br><span class="line">        </span><br><span class="line">        RequestContext copy = <span class="keyword">null</span>;</span><br><span class="line">        Object o = <span class="keyword">null</span>;</span><br><span class="line">        Throwable t = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (bDebug) &#123;</span><br><span class="line">            Debug.addRoutingDebug(<span class="string">"Filter "</span> + filter.filterType() + <span class="string">" "</span> + filter.filterOrder() + <span class="string">" "</span> + filterName);</span><br><span class="line">            copy = ctx.copy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        ZuulFilterResult result = filter.runFilter();</span><br><span class="line">        ExecutionStatus s = result.getStatus();</span><br><span class="line">        execTime = System.currentTimeMillis() - ltime;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">            <span class="keyword">case</span> FAILED:</span><br><span class="line">                t = result.getException();</span><br><span class="line">                ctx.addFilterExecutionSummary(filterName, ExecutionStatus.FAILED.name(), execTime);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SUCCESS:</span><br><span class="line">                o = result.getResult();</span><br><span class="line">                ctx.addFilterExecutionSummary(filterName, ExecutionStatus.SUCCESS.name(), execTime);</span><br><span class="line">                <span class="keyword">if</span> (bDebug) &#123;</span><br><span class="line">                    Debug.addRoutingDebug(<span class="string">"Filter &#123;"</span> + filterName + <span class="string">" TYPE:"</span> + filter.filterType() + <span class="string">" ORDER:"</span> + filter.filterOrder() + <span class="string">"&#125; Execution time = "</span> + execTime + <span class="string">"ms"</span>);</span><br><span class="line">                    Debug.compareContextState(filterName, copy);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">throw</span> t;</span><br><span class="line">    </span><br><span class="line">        usageNotifier.notify(filter, s);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bDebug) &#123;</span><br><span class="line">            Debug.addRoutingDebug(<span class="string">"Running Filter failed "</span> + filterName + <span class="string">" type:"</span> + filter.filterType() + <span class="string">" order:"</span> + filter.filterOrder() + <span class="string">" "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        usageNotifier.notify(filter, ExecutionStatus.FAILED);</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ZuulException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (ZuulException) e;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ZuulException ex = <span class="keyword">new</span> ZuulException(e, <span class="string">"Filter threw Exception"</span>, <span class="number">500</span>, filter.filterType() + <span class="string">":"</span> + filterName);</span><br><span class="line">            ctx.addFilterExecutionSummary(filterName, ExecutionStatus.FAILED.name(), execTime);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进入<code>ZuulFilterResult result = filter.runFilter();</code>可以看到是直接调用了<code>run()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ZuulFilterResult <span class="title">runFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ZuulFilterResult zr = <span class="keyword">new</span> ZuulFilterResult();</span><br><span class="line">    <span class="keyword">if</span> (!isFilterDisabled()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldFilter()) &#123;</span><br><span class="line">            Tracer t = TracerFactory.instance().startMicroTracer(<span class="string">"ZUUL::"</span> + <span class="keyword">this</span>.getClass().getSimpleName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行run方法</span></span><br><span class="line">                Object res = run();</span><br><span class="line">                zr = <span class="keyword">new</span> ZuulFilterResult(res, ExecutionStatus.SUCCESS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                t.setName(<span class="string">"ZUUL::"</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" failed"</span>);</span><br><span class="line">                zr = <span class="keyword">new</span> ZuulFilterResult(ExecutionStatus.FAILED);</span><br><span class="line">                zr.setException(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                t.stopAndLog();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            zr = <span class="keyword">new</span> ZuulFilterResult(ExecutionStatus.SKIPPED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> zr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="2-2、route"><a href="#2-2、route" class="headerlink" title="2.2、route()"></a>2.2、route()</h5><ul><li><code>preRoute()</code>执行完成之后就是执行<code>route()</code>了，我们进入<code>com.netflix.zuul.ZuulRunner#route()</code>，可以看到这里和<code>preRoute()</code>方法执行一样也是执行了<code>runFilters()</code>方法，只不过是用参数进行区分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * executes "route" filterType  ZuulFilters</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">route</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    FilterProcessor.getInstance().route();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.netflix.zuul.FilterProcessor#route </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">route</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runFilters(<span class="string">"route"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNCAUGHT_EXCEPTION_IN_ROUTE_FILTER_"</span> + e.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>List<zuulfilter> list</zuulfilter></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/route.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>查看上图可以发现默认是有三个<code>routing filter</code>，我们这里关注的是<code>RibbonRoutingFilter</code>，这里是进行负载均衡路由转发的操作</p><ul><li>进入<code>processZuulFilter(ZuulFilter filter)</code>方法，查看<code>RequestContext</code>变量已经发现有一些关键信息了，这些信息是<code>pre filter</code>添加上去的，为路由转发为准备<br><img src="/images/server/spring/spring-cloud/routing-filter.jpg" alt=""></li><li><p>进入<code>RibbonRoutingFilter</code>的<code>run()</code>方法，可以看到是封装了一个<code>Ribbon</code>请求，执行请求，设置请求结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line"><span class="keyword">this</span>.helper.addIgnoredHeaders();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 根据RequestContext封装为一个Ribbon请求命名对象，里面有请求链接及请求参数</span></span><br><span class="line">RibbonCommandContext commandContext = buildCommandContext(context);</span><br><span class="line"><span class="comment">// 执行请求</span></span><br><span class="line">ClientHttpResponse response = forward(commandContext);</span><br><span class="line"><span class="comment">// 设置请求结果</span></span><br><span class="line">setResponse(response);</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ZuulException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZuulRuntimeException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进入<code>forward(commandContext)</code>方法，<code>command.execute();</code>就是通过服务名来找出具体可以接受服务的<code>ip</code>及<code>port</code>，然后请求执行，这里涉及到从注册中心获取服务<code>ip</code>及<code>port</code>，负载均衡处理，断路器处理</p></li><li><p>最终结果会放在<code>ClientHttpResponse</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ClientHttpResponse <span class="title">forward</span><span class="params">(RibbonCommandContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; info = <span class="keyword">this</span>.helper.debug(context.getMethod(),</span><br><span class="line">context.getUri(), context.getHeaders(), context.getParams(),</span><br><span class="line">context.getRequestEntity());</span><br><span class="line">       <span class="comment">// 创建请求</span></span><br><span class="line">RibbonCommand command = <span class="keyword">this</span>.ribbonCommandFactory.create(context);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 执行请求</span></span><br><span class="line">ClientHttpResponse response = command.execute();</span><br><span class="line"><span class="keyword">this</span>.helper.appendDebug(info, response.getRawStatusCode(), response.getHeaders());</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (HystrixRuntimeException ex) &#123;</span><br><span class="line"><span class="keyword">return</span> handleException(info, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进入<code>this.ribbonCommandFactory.create(context);</code>，下图是获取了<code>RibbonLoadBalancingHttpClient</code>，查看参数可以看到一些关键信息，比如链接超时时间<br><img src="/images/server/spring/spring-cloud/ribbonCommand.jpg" alt=""></p></li></ul></li></ul><h5 id="2-3、postRoute"><a href="#2-3、postRoute" class="headerlink" title="2.3、postRoute()"></a>2.3、postRoute()</h5><ul><li>进入<code>com.netflix.zuul.ZuulRunner#postRoute()</code> 与上面同理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    FilterProcessor.getInstance().postRoute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.netflix.zuul.FilterProcessor#postRoute </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runFilters(<span class="string">"post"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNCAUGHT_EXCEPTION_IN_POST_FILTER_"</span> + e.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4、error"><a href="#2-4、error" class="headerlink" title="2.4、error()"></a>2.4、error()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runFilters(<span class="string">"error"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.netflix.zuul.FilterProcessor#error </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runFilters(<span class="string">"error"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>ZuulController</code>是<code>SpringCloud Zuul</code>的统一入口，因为要和<code>Spring</code>联系起来，所以这里遵循的<code>Spring MVC DispatcherServlet</code>的模式，这个<code>ZuulController</code>将<code>com.netflix.zuul</code>包下的<code>ZuulServlet</code>整合起来，实际请求是跳转到<code>ZuulServlet</code>来处理的</li><li><code>Zuul</code>组件的核心是一系列的过滤器<code>filters</code>，通过一系列的<code>filters</code>流式处理，按照阶段分为<code>pre</code>、<code>routing</code> 、<code>post</code>、<code>error</code>四种类型的<code>filter</code>，在流式处理过程中使用<code>RequestContext</code>保存整个请求需要的参数及结果</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上一章节已经介绍了使用&lt;code&gt;@EnableZuulServer&lt;/code&gt;注解会开启 &lt;code&gt;ZuulProx
      
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.songshuiyang.com/categories/SpringCloud/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Zuul)工作原理及源码分析之初始化</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Zuul)%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Zuul)工作原理及源码分析之初始化/</id>
    <published>2019-08-06T16:05:01.000Z</published>
    <updated>2019-09-16T13:11:06.030Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p>由上一章节可以知道要创建一个<code>zuul</code>应用，只需添加<code>spring-cloud-starter-zuul</code> <code>maven</code>依赖及启动类上添加<code>@EnableZuulProxy</code>就可创建一个<code>zuul</code>应用，那么要知道<code>Zuul</code>工作原理就需从这个两个地方作为入口进行研究</p></li><li><p>zuul版本: <code>1.4.3.RELEASE</code></p></li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="Zuul-初始化"><a href="#Zuul-初始化" class="headerlink" title="Zuul 初始化"></a>Zuul 初始化</h4><h5 id="spring-cloud-starter-zuul-starter"><a href="#spring-cloud-starter-zuul-starter" class="headerlink" title="spring-cloud-starter-zuul starter"></a>spring-cloud-starter-zuul starter</h5><ul><li>我们先查看<code>spring-cloud-starter-zuul starter</code>包下有什么，这里的重点就是<code>pom.xml</code>文件，<code>ZuulDeprecationWarningAutoConfiguration.java</code>此类已经被<code>@Deprecated</code></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul-starter.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>打开<code>org.springframework.cloud/spring-cloud-starter-zuul/pom.xml</code> ，可以看到是依赖了<code>spring-cloud-starter-netflix-zuul</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>..<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud Starter Zuul (deprecated, please use spring-cloud-starter-netflix-zuul)<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://projects.spring.io/spring-cloud<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main.basedir</span>&gt;</span>$&#123;basedir&#125;/../..<span class="tag">&lt;/<span class="name">main.basedir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们查看<code>spring-cloud-starter-netflix-zuul</code>包</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul-starter2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>这里关注<code>spring-cloud-starter-netflix-zuul/pom.xml</code>及<code>spring-cloud-starter-netflix-zuul-1.4.3.RELEASE.jar!/META-INF/spring.provides</code></p><ul><li><p>打开<code>/pom.xml</code>可以看到依赖了<code>com.netflix.zuul</code>，所以说<code>Spring Cloud Zuul</code>是基于<code>netflix</code>公司的<code>zuul</code>实现的，除此之外还添加了<code>hystrix</code>及<code>ribbon</code>依赖，所以<code>zuul</code>是自带这两个功能的，<code>spring-boot-starter-web</code>依赖可以使应用成为<code>web</code>应用，<code>spring-boot-starter-actuator</code>是监控依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Cloud Starter Netflix Zuul<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Cloud Starter Netflix Zuul<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://projects.spring.io/spring-cloud<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main.basedir</span>&gt;</span>$&#123;basedir&#125;/../../..<span class="tag">&lt;/<span class="name">main.basedir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-archaius<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.zuul<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zuul-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>/META-INF/spring.provides</code> 依赖<code>spring-platform-netflix-core</code>模块及<code>zuul-core</code>模块</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">provides: spring-platform-netflix-core, zuul-core</span><br></pre></td></tr></table></figure></li></ul></li><li><p>现在我们进入<code>spring-platform-netflix-core</code>，看看<code>Spring</code>是怎样集成<code>Netflix</code>的一系列框架了，下面是代码框架图</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/netflix-core.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>可以看到这个炸包也包含了<code>spring.factories</code>文件，所以<code>SpringBoot</code>项目启动的时候会检索此配置文件，此文件是<code>zuul</code>实现自动注册配置的关键，下面可以看到熟悉的<code>zuul</code>,<code>hystrix</code>,<code>feign</code>,<code>ribbon</code>的自动配置类</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.cloud.netflix.archaius.ArchaiusAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.feign.ribbon.FeignRibbonClientAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.feign.FeignAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.feign.encoding.FeignAcceptGzipEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.feign.encoding.FeignContentGzipEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.hystrix.HystrixAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.hystrix.security.HystrixSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.rx.RxJavaAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.metrics.servo.ServoMetricsAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.zuul.ZuulServerAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.netflix.zuul.ZuulProxyAutoConfiguration</span><br><span class="line"></span><br><span class="line">org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker=\</span><br><span class="line">org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration</span><br><span class="line"></span><br><span class="line">org.springframework.boot.env.EnvironmentPostProcessor=\</span><br><span class="line">org.springframework.cloud.netflix.metrics.ServoEnvironmentPostProcessor</span><br></pre></td></tr></table></figure><ul><li>我们现在关心<code>Zuul</code>的自动配置类，从上面<code>spring.factories</code>文件可以看到和<code>Zuul</code>相关的是自动配置了两个类，下图可以看到这两个有继承关系，<code>ZuulProxyAutoConfiguration</code>功能最为完全</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/ZuulProxyAutoConfiguration.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p><code>ZuulServerAutoConfiguration</code> 与  <code>ZuulProxyAutoConfiguration</code></p><ul><li><p><code>ZuulServerAutoConfiguration</code>自动配置类，启动类上如果有<code>@EnableZuulServer</code>则此类生效</p><ul><li>下面代码可以看到大量使用了<code>@Conditional</code>作为条件判断，注意这个<code>ZuulController</code>这个<code>Bean</code>，它是我们<code>Zuul</code>的请求入口，这个类实现了<code>Controller</code>了，说明这里也使用了<code>Spring MVC DispatcherServlet</code>，</li><li>同时此类注册了大量的<code>ZuulFilter</code></li><li>代码:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明是配置类</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123; ZuulProperties.class &#125;) <span class="comment">// 激活 zuul配置</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ZuulServlet.class) <span class="comment">// 条件1 存在ZuulServlet.class</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ZuulServerMarkerConfiguration.Marker.class) <span class="comment">// 条件2 存在ZuulServerMarkerConfiguration.Marker.class bean, 即应用使用@EnableZuulServer注解</span></span><br><span class="line"><span class="comment">// Make sure to get the ServerProperties from the same place as a normal web app would</span></span><br><span class="line"><span class="meta">@Import</span>(ServerPropertiesAutoConfiguration.class) <span class="comment">// 配置ServerProperties实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> ZuulProperties zuulProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> ServerProperties server;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> ErrorController errorController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HasFeatures <span class="title">zuulFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HasFeatures.namedFeature(<span class="string">"Zuul (Simple)"</span>, ZuulServerAutoConfiguration.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompositeRouteLocator <span class="title">primaryRouteLocator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Collection&lt;RouteLocator&gt; routeLocators)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompositeRouteLocator(routeLocators);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(SimpleRouteLocator.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleRouteLocator <span class="title">simpleRouteLocator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleRouteLocator(<span class="keyword">this</span>.server.getServletPrefix(),</span><br><span class="line">                <span class="keyword">this</span>.zuulProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zuulController, 包装了一个ZuulServlet类型的servlet, 实现对ZuulServlet类型的servlet的初始化.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulController <span class="title">zuulController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulController();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulHandlerMapping <span class="title">zuulHandlerMapping</span><span class="params">(RouteLocator routes)</span> </span>&#123;</span><br><span class="line">        ZuulHandlerMapping mapping = <span class="keyword">new</span> ZuulHandlerMapping(routes, zuulController());</span><br><span class="line">        mapping.setErrorController(<span class="keyword">this</span>.errorController);</span><br><span class="line">        <span class="keyword">return</span> mapping;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationListener&lt;ApplicationEvent&gt; <span class="title">zuulRefreshRoutesListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulRefreshListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"zuulServlet"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">zuulServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean servlet = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> ZuulServlet(),</span><br><span class="line">                <span class="keyword">this</span>.zuulProperties.getServletPattern());</span><br><span class="line">        <span class="comment">// The whole point of exposing this servlet is to provide a route that doesn't</span></span><br><span class="line">        <span class="comment">// buffer requests.</span></span><br><span class="line">        servlet.addInitParameter(<span class="string">"buffer-requests"</span>, <span class="string">"false"</span>);</span><br><span class="line">        <span class="keyword">return</span> servlet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pre filters</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletDetectionFilter <span class="title">servletDetectionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletDetectionFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FormBodyWrapperFilter <span class="title">formBodyWrapperFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FormBodyWrapperFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DebugFilter <span class="title">debugFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DebugFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Servlet30WrapperFilter <span class="title">servlet30WrapperFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Servlet30WrapperFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post filters</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendResponseFilter <span class="title">sendResponseFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SendResponseFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendErrorFilter <span class="title">sendErrorFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SendErrorFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendForwardFilter <span class="title">sendForwardFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SendForwardFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"zuul.ribbon.eager-load.enabled"</span>, matchIfMissing = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulRouteApplicationContextInitializer <span class="title">zuulRoutesApplicationContextInitiazer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            SpringClientFactory springClientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulRouteApplicationContextInitializer(springClientFactory,</span><br><span class="line">                zuulProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulFilterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, ZuulFilter&gt; filters;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ZuulFilterInitializer <span class="title">zuulFilterInitializer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                CounterFactory counterFactory, TracerFactory tracerFactory)</span> </span>&#123;</span><br><span class="line">            FilterLoader filterLoader = FilterLoader.getInstance();</span><br><span class="line">            FilterRegistry filterRegistry = FilterRegistry.instance();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ZuulFilterInitializer(<span class="keyword">this</span>.filters, counterFactory, tracerFactory, filterLoader, filterRegistry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(CounterService.class)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulCounterFactoryConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnBean</span>(CounterService.class)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> CounterFactory <span class="title">counterFactory</span><span class="params">(CounterService counterService)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DefaultCounterFactory(counterService);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulMetricsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span>(CounterFactory.class)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> CounterFactory <span class="title">counterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EmptyCounterFactory();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span>(TracerFactory.class)</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TracerFactory <span class="title">tracerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EmptyTracerFactory();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulRefreshListener</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ZuulHandlerMapping zuulHandlerMapping;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> HeartbeatMonitor heartbeatMonitor = <span class="keyword">new</span> HeartbeatMonitor();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ContextRefreshedEvent</span><br><span class="line">                    || event <span class="keyword">instanceof</span> RefreshScopeRefreshedEvent</span><br><span class="line">                    || event <span class="keyword">instanceof</span> RoutesRefreshedEvent) &#123;</span><br><span class="line">                <span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> HeartbeatEvent) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.heartbeatMonitor.update(((HeartbeatEvent) event).getValue())) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ZuulProxyAutoConfiguration</code>自动配置类，启动类上如果有对应<code>@EnableZuulProxy</code>则此类生效</p><ul><li>由上面此类的继承图可以发现这个类继承了<code>ZuulServerAutoConfiguration</code>，所以此类拥有<code>ZuulServerAutoConfiguration</code>的所有功能，并在此基础上添加了使用了服务发现作为路由寻址功能</li><li>代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明是配置类</span></span><br><span class="line"><span class="meta">@Import</span>(&#123; RibbonCommandFactoryConfiguration.RestClientRibbonConfiguration.class, <span class="comment">// 引入RibbonCommandFactory配置</span></span><br><span class="line">        RibbonCommandFactoryConfiguration.OkHttpRibbonConfiguration.class,</span><br><span class="line">        RibbonCommandFactoryConfiguration.HttpClientRibbonConfiguration.class,</span><br><span class="line">        HttpClientConfiguration.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ZuulProxyMarkerConfiguration.Marker.class) <span class="comment">// 条件2 存在ZuulProxyMarkerConfiguration.Marker.class bean, 即应用使用@EnableZuulProxy注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulProxyAutoConfiguration</span> <span class="keyword">extends</span> <span class="title">ZuulServerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;RibbonRequestCustomizer&gt; requestCustomizers = Collections.emptyList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网关服务注册实例信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Registration registration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务发现客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discovery;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * serviceId和路由的映射逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServiceRouteMapper serviceRouteMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HasFeatures <span class="title">zuulFeature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HasFeatures.namedFeature(<span class="string">"Zuul (Discovery)"</span>,</span><br><span class="line">                ZuulProxyAutoConfiguration.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态和动态路由寻址: 静态从配置文件获取, 动态通过服务发现客户端完成. 后者优先级更高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(DiscoveryClientRouteLocator.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DiscoveryClientRouteLocator <span class="title">discoveryRouteLocator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DiscoveryClientRouteLocator(<span class="keyword">this</span>.server.getServletPrefix(),</span><br><span class="line">                <span class="keyword">this</span>.discovery, <span class="keyword">this</span>.zuulProperties, <span class="keyword">this</span>.serviceRouteMapper, <span class="keyword">this</span>.registration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pre filters</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PreDecorationFilter <span class="title">preDecorationFilter</span><span class="params">(RouteLocator routeLocator,</span></span></span><br><span class="line"><span class="function"><span class="params">            ProxyRequestHelper proxyRequestHelper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PreDecorationFilter(routeLocator, <span class="keyword">this</span>.server.getServletPrefix(),</span><br><span class="line">                <span class="keyword">this</span>.zuulProperties, proxyRequestHelper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// route filters</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RibbonRoutingFilter <span class="title">ribbonRoutingFilter</span><span class="params">(ProxyRequestHelper helper,</span></span></span><br><span class="line"><span class="function"><span class="params">            RibbonCommandFactory&lt;?&gt; ribbonCommandFactory)</span> </span>&#123;</span><br><span class="line">        RibbonRoutingFilter filter = <span class="keyword">new</span> RibbonRoutingFilter(helper, ribbonCommandFactory,</span><br><span class="line">                <span class="keyword">this</span>.requestCustomizers);</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;SimpleHostRoutingFilter.class, CloseableHttpClient.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleHostRoutingFilter <span class="title">simpleHostRoutingFilter</span><span class="params">(ProxyRequestHelper helper,</span></span></span><br><span class="line"><span class="function"><span class="params">            ZuulProperties zuulProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApacheHttpClientConnectionManagerFactory connectionManagerFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">            ApacheHttpClientFactory httpClientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleHostRoutingFilter(helper, zuulProperties,</span><br><span class="line">                connectionManagerFactory, httpClientFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;SimpleHostRoutingFilter.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleHostRoutingFilter <span class="title">simpleHostRoutingFilter2</span><span class="params">(ProxyRequestHelper helper,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           ZuulProperties zuulProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           CloseableHttpClient httpClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleHostRoutingFilter(helper, zuulProperties,</span><br><span class="line">                httpClient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationListener&lt;ApplicationEvent&gt; <span class="title">zuulDiscoveryRefreshRoutesListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZuulDiscoveryRefreshListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(ServiceRouteMapper.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceRouteMapper <span class="title">serviceRouteMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleServiceRouteMapper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingClass</span>(<span class="string">"org.springframework.boot.actuate.endpoint.Endpoint"</span>)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoActuatorConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ProxyRequestHelper <span class="title">proxyRequestHelper</span><span class="params">(ZuulProperties zuulProperties)</span> </span>&#123;</span><br><span class="line">            ProxyRequestHelper helper = <span class="keyword">new</span> ProxyRequestHelper();</span><br><span class="line">            helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());</span><br><span class="line">            helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());</span><br><span class="line">            <span class="keyword">return</span> helper;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加 Endpoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass</span>(Endpoint.class)</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EndpointConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">        <span class="keyword">private</span> TraceRepository traces;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnEnabledEndpoint</span>(<span class="string">"routes"</span>)</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RoutesEndpoint <span class="title">routesEndpoint</span><span class="params">(RouteLocator routeLocator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RoutesEndpoint(routeLocator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnEnabledEndpoint</span>(<span class="string">"routes"</span>)</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RoutesMvcEndpoint <span class="title">routesMvcEndpoint</span><span class="params">(RouteLocator routeLocator,</span></span></span><br><span class="line"><span class="function"><span class="params">                RoutesEndpoint endpoint)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RoutesMvcEndpoint(endpoint, routeLocator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnEnabledEndpoint</span>(<span class="string">"filters"</span>)</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FiltersEndpoint <span class="title">filtersEndpoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            FilterRegistry filterRegistry = FilterRegistry.instance();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FiltersEndpoint(filterRegistry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ProxyRequestHelper <span class="title">proxyRequestHelper</span><span class="params">(ZuulProperties zuulProperties)</span> </span>&#123;</span><br><span class="line">            TraceProxyRequestHelper helper = <span class="keyword">new</span> TraceProxyRequestHelper();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.traces != <span class="keyword">null</span>) &#123;</span><br><span class="line">                helper.setTraces(<span class="keyword">this</span>.traces);</span><br><span class="line">            &#125;</span><br><span class="line">            helper.setIgnoredHeaders(zuulProperties.getIgnoredHeaders());</span><br><span class="line">            helper.setTraceRequestBody(zuulProperties.isTraceRequestBody());</span><br><span class="line">            <span class="keyword">return</span> helper;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulDiscoveryRefreshListener</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> HeartbeatMonitor monitor = <span class="keyword">new</span> HeartbeatMonitor();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> ZuulHandlerMapping zuulHandlerMapping;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> InstanceRegisteredEvent) &#123;</span><br><span class="line">                reset();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ParentHeartbeatEvent) &#123;</span><br><span class="line">                ParentHeartbeatEvent e = (ParentHeartbeatEvent) event;</span><br><span class="line">                resetIfNeeded(e.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> HeartbeatEvent) &#123;</span><br><span class="line">                HeartbeatEvent e = (HeartbeatEvent) event;</span><br><span class="line">                resetIfNeeded(e.getValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetIfNeeded</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.monitor.update(value)) &#123;</span><br><span class="line">                reset();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>ZuulServerAutoConfiguration</code> 与  <code>ZuulProxyAutoConfiguration</code>具体使用哪种模式，是分别通过<code>@EnableZuulServer</code> 和<code>@EnableZuulProxy</code>注解来区别的</p><ul><li>前者使用了<code>ZuulProperties</code>进行配置路由寻址;</li><li>后者在原来的基础上添加了使用了服务发现作为路由寻址功能, 并使用<code>Ribbon</code>做客户端的负载均衡，这个最为常用;</li></ul></li></ul><h5 id="EnableZuulProxy"><a href="#EnableZuulProxy" class="headerlink" title="@EnableZuulProxy"></a>@EnableZuulProxy</h5><ul><li><code>@EnableZuulProxy</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets up a Zuul server endpoint and installs some reverse proxy filters in it, so it can</span></span><br><span class="line"><span class="comment"> * forward requests to backend servers. The backends can be registered manually through</span></span><br><span class="line"><span class="comment"> * configuration or via DiscoveryClient.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> EnableZuulServer for how to get a Zuul server without any proxying</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Import</span>(ZuulProxyMarkerConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableZuulProxy &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>@EnableZuulProxy</code>分析</p><ul><li><p><code>@EnableCircuitBreaker</code>注解用于开启短路器功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation to enable a CircuitBreaker implementation.</span></span><br><span class="line"><span class="comment"> * http://martinfowler.com/bliki/CircuitBreaker.html</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(EnableCircuitBreakerImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableCircuitBreaker &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Import(ZuulProxyMarkerConfiguration.class)</code>注解用于注册<code>ZuulProxyMarkerConfiguration.Marker.class</code>这个<code>Bean</code>，这个<code>Bean</code>与上面的<code>ZuulProxyAutoConfiguration</code>的条件注解相对应<code>@ConditionalOnBean(ZuulProxyMarkerConfiguration.Marker.class)</code>，所以说如果启动类带了这个<code>@EnableZuulProxy</code>注解将会开启<code>ZuulProxyMarkerConfiguration</code>自动注册的功能，<code>Spring</code>这个可配置化对使用者来说十分方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulProxyMarkerConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Marker <span class="title">zuulProxyMarkerBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Marker();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Marker</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="使用Consul作为注册中心"><a href="#使用Consul作为注册中心" class="headerlink" title="使用Consul作为注册中心"></a>使用Consul作为注册中心</h5><ul><li><p><code>@EnableZuulProxy</code>模式下的<code>zuul</code>需要注册中心的支持，因为<code>eureka</code>已经被抛弃了，我们这里选用的是<code>Consul</code></p><ul><li><p>添加<code>Maven</code>依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动类上加上<code>@EnableDiscoveryClient</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这样<code>Zuul</code>应用就可以发挥作用了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li></ul></li><li>本章节对<code>Zuul</code>的初始化进行了一次梳理，可以发现<code>Zuul</code>的初始化就是注册各种需要的<code>Bean</code>,粮草备好之后就是要发挥作用了，下一章节将介绍其具体是怎样发挥作用的</li><li><code>Spring Cloud</code>对<code>Netflix Zuul</code>做了封装集成, 使得在<code>Spring Cloud</code>环境中使用<code>Zuul</code>更方便，只需添加<code>spring-cloud-starter-zuul</code> <code>maven</code>依赖及启动类上添加<code>@EnableZuulProxy</code>就可创建一个<code>zuul</code>应用</li><li><code>Spring Cloud Zuul</code> 实际上就是在<code>Servlet</code>的基础上添加了一些<code>ZuulFilter</code>去完成一些额外事情，封装了就成框架了</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/lexiaofei/p/7080257.html" target="_blank" rel="noopener">https://www.cnblogs.com/lexiaofei/p/7080257.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;由上一章节可以知道要创建一个&lt;code&gt;zuul&lt;/code&gt;应用，只需添加&lt;code&gt;spring-cloud-star
      
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.songshuiyang.com/categories/SpringCloud/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud(Zuul)网关服务Zuul</title>
    <link href="http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Zuul)%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1Zuul/"/>
    <id>http://www.songshuiyang.com/2019/08/07/backend/framework/spring/spring-cloud/analysis/SpringCloud(Zuul)网关服务Zuul/</id>
    <published>2019-08-06T16:05:00.000Z</published>
    <updated>2019-09-16T13:11:06.074Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Zuul-简介"><a href="#Zuul-简介" class="headerlink" title="Zuul 简介"></a>Zuul 简介</h3><h4 id="Zuul是什么"><a href="#Zuul是什么" class="headerlink" title="Zuul是什么"></a>Zuul是什么</h4><ul><li><p><code>Zuul</code> 是<code>Netflix</code>开源的一个<code>API Gateway</code> 服务器, 本质上是一个<code>Web servlet</code>应用，他可以和<code>Eureka,Ribbon,Hystrix</code>等组件配合使用。</p></li><li><p><code>Zuul</code>组件的核心是一系列的过滤器<code>filters</code>，其作用可以类比<code>Servlet</code>框架的<code>Filter</code>，或者<code>AOP</code>。</p></li></ul><h4 id="为什么要用Zuul"><a href="#为什么要用Zuul" class="headerlink" title="为什么要用Zuul"></a>为什么要用Zuul</h4><ul><li>在分布式架构中，对外提供的服务，在无网关的情况下，<code>API</code>接口直接暴露给服务调用方，当调用方增多，不同业务调用方各不相同，势必需要添加定制化访问权限、校验等逻辑。当添加<code>API</code>网关后，再第三方调用端和服务提供方之间就创建了一面墙，这面墙直接与调用方通信进行权限控制，后将请求均衡分发给后台服务端。<code>Zuul</code>就是提供负载均衡、反向代理、权限认证的这么一个<code>API gateway</code>。</li></ul><ul><li>微服务网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过微服务网关</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul1.png" alt="logo" title="">                </div>                <div class="image-caption">logo</div>            </figure><h4 id="Zuul-提供什么功能"><a href="#Zuul-提供什么功能" class="headerlink" title="Zuul 提供什么功能"></a>Zuul 提供什么功能</h4><ul><li><p><code>Zuul</code>组件的核心是一系列的过滤器，这些过滤器可以完成以下功能：</p><ul><li>身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求</li><li>审查与监控：</li><li>动态路由：动态将请求路由到不同后端集群</li><li>压力测试：逐渐增加指向集群的流量，以了解性能</li><li>负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求</li><li>静态响应处理：边缘位置进行响应，避免转发到内部集群</li><li>多区域弹性：跨域<code>AWS Region</code>进行请求路由，旨在实现<code>ELB(ElasticLoad Balancing)</code>使用多样化</li></ul></li><li><p><code>Spring Cloud</code>对<code>Zuul</code>进行了整合和增强。目前<code>Zuul</code>使用的默认是<code>Apache</code>的<code>HTTP Client</code>，也可以使用<code>Rest Client</code>，可以设置<code>ribbon.restclient.enabled=true</code>.</p></li></ul><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><blockquote><p>添加Maven依赖配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>添加配置文件application.yml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9001</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: zuul-gateway</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:9010/eureka/,http://localhost:9011/eureka/</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    baidu-url: #传统路由方式</span><br><span class="line">      path: /baidu/**</span><br><span class="line">      url: http://www.baidu.com/</span><br><span class="line">    provider:  #面向服务的路由</span><br><span class="line">      path: /provider/**</span><br><span class="line">      serviceId: eureka-provider</span><br><span class="line">    consumer:  #面向服务的路由</span><br><span class="line">      path: /consumer/**</span><br><span class="line">      serviceId: eureka-consumer</span><br></pre></td></tr></table></figure><blockquote><p>启动类加上@EnableZuulProxy注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加一个过滤器 AccessFilter.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义过滤器的类型，决定过滤器在请求的那个生命周期中执行</span></span><br><span class="line"><span class="comment">     * pre     请求被路由之前 </span></span><br><span class="line"><span class="comment">     * routing 在路由请求时被调用</span></span><br><span class="line"><span class="comment">     * post    在routing和error过滤器之后被调用</span></span><br><span class="line"><span class="comment">     * error   处理请求时发生错误时被调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代表会在请求被路由之前被执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义过滤器的顺序，当请求在一个阶段中存在多个过滤器时，可以根据该值来决定执行顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断过滤器是否需要被执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的具体实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        logger.info(<span class="string">"send &#123;&#125; request to &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString());</span><br><span class="line">        Object accessToken = request.getParameter(<span class="string">"accessToken"</span>);</span><br><span class="line">        <span class="keyword">if</span> (accessToken == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">"access check failed"</span>);</span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.error(<span class="string">"access check passs"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="zuul默认支持hystrix和ribbon"><a href="#zuul默认支持hystrix和ribbon" class="headerlink" title="zuul默认支持hystrix和ribbon"></a>zuul默认支持hystrix和ribbon</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        timeout:</span><br><span class="line">          enabled: true</span><br><span class="line">        isolation:</span><br><span class="line">          thread: </span><br><span class="line">            timeoutInMilliseconds: 60000 // 设置API网关中路由转发请求的HystrixCommand执行超时时间，就是整个路由转发请求的执行时间</span><br><span class="line">ribbon:</span><br><span class="line">  ConnectTimeout: 60000 // 设置创建请求连接的超时时间，如果该值小于上面的HystrixCommand执行超时时间，会自动进行重试路由请求</span><br><span class="line">  ReadTimeout: 60000 // 设置请求连接建立之后执行处理的超时时间，如果该值小于上面的HystrixCommand执行超时时间，会自动进行重试路由请求</span><br></pre></td></tr></table></figure><ul><li><p><code>Zuul</code>的过滤器之间没有直接的相互通信，他们之间通过一个<code>RequestContext</code>的静态类来进行数据传递的。<code>RequestContext</code>类中有<code>ThreadLocal</code>变量来记录每个<code>Request</code>所需要传递的数据。</p></li><li><p><code>Zuul</code>的过滤器是由<code>Groovy</code>写成，这些过滤器文件被放在<code>Zuul Server</code>上的特定目录下面，Zuul会定期轮询这些目录，修改过的过滤器会动态的加载到<code>Zuul Server</code>中以便过滤请求使用。</p></li></ul><h4 id="过滤器机制"><a href="#过滤器机制" class="headerlink" title="过滤器机制"></a>过滤器机制</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><code>Zuul</code>大部分功能都是通过过滤器来实现的。Zuul中定义了四种标准过滤器类型，这些过滤器类型对应于请求的典型生命周期，下面有几种标准的过滤器类型：<ul><li>(1) PRE：这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</li><li>(2) ROUTING：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用<code>Apache HttpClient</code>或<code>Netfilx Ribbon</code>请求微服务。</li><li>(3) POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的<code>HTTP Header</code>、收集统计信息和指标、将响应从微服务发送给客户端等。</li><li>(4) ERROR：在其他阶段发生错误时执行该过滤器。</li></ul></li></ul><h5 id="过滤器的生命周期"><a href="#过滤器的生命周期" class="headerlink" title="过滤器的生命周期"></a>过滤器的生命周期</h5><ul><li>各种不同类型的过滤器流转流程<ul><li>当客户端请求过来首先会到 <code>pre filters</code> 这样的一个前置过滤器做一些处理，然后调用自定义的过滤器</li><li>前置过滤器执行完了之后会调用 <code>routing filters</code> 过滤器 ，看名字都知道这是做路由分发的过滤器</li><li>在路由的过程中出现了异常，那么会走 <code>error filters</code>过滤器，然后再走 <code>post filters</code> 过滤器 ，或者正常路由完成也会走到<code>post filters</code></li><li><code>post filters</code>过滤器负责处理响应 ，最后把结果响应给客户端</li></ul></li></ul><p><img src="/images/server/spring/spring-cloud/zuul.png" alt=""></p><h5 id="内置的特殊过滤器"><a href="#内置的特殊过滤器" class="headerlink" title="内置的特殊过滤器"></a>内置的特殊过滤器</h5><ul><li>下面是<code>zuul</code>默认实现的过滤器</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/server/spring/spring-cloud/zuul2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>当我们为<code>Spring Cloud Zuul</code>构建的<code>API</code>网关服务引入<code>Spring Cloud Eureka</code>之后，它会为<code>Eureka</code>中的每个服务都自动创建一个默认路由规则，这些默认规则的<code>path</code>会使用<code>ServiceId</code>配置的服务名作为请求前缀</p></li><li><p><code>Spring Cloud Zuul</code>还特别提供了<code>/routes</code>端点来返回当前的所有路由规则</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/lexiaofei/p/7080257.html" target="_blank" rel="noopener">https://www.cnblogs.com/lexiaofei/p/7080257.html</a></li><li><a href="https://www.jianshu.com/p/fd0d8a0019d6" target="_blank" rel="noopener">https://www.jianshu.com/p/fd0d8a0019d6</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Zuul-简介&quot;&gt;&lt;a href=&quot;#Zuul-简介&quot; class=&quot;headerlink&quot; title=&quot;Zuul 简介&quot;&gt;&lt;/a&gt;Zuul 简介&lt;/h3&gt;&lt;h4 id=&quot;Zuul是什么&quot;&gt;&lt;a href=&quot;#Zuul是什么&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.songshuiyang.com/categories/SpringCloud/"/>
    
    
      <category term="Spring" scheme="http://www.songshuiyang.com/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://www.songshuiyang.com/tags/Spring-Cloud/"/>
    
  </entry>
  
</feed>
